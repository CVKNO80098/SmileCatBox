{
  "version": 3,
  "sources": ["../@vue/shared/dist/shared.cjs.js", "../@vue/shared/index.js", "../@vue/compiler-core/node_modules/entities/src/generated/decode-data-html.ts", "../@vue/compiler-core/node_modules/entities/src/generated/decode-data-xml.ts", "../@vue/compiler-core/node_modules/entities/src/decode-codepoint.ts", "../@vue/compiler-core/node_modules/entities/src/decode.ts", "../@babel/parser/src/util/location.ts", "../@babel/parser/src/parse-error/module-errors.ts", "../@babel/parser/src/parse-error/to-node-description.ts", "../@babel/parser/src/parse-error/standard-errors.ts", "../@babel/parser/src/parse-error/strict-mode-errors.ts", "../@babel/parser/src/parse-error/pipeline-operator-errors.ts", "../@babel/parser/src/parse-error.ts", "../@babel/parser/src/plugins/estree.ts", "../@babel/parser/src/tokenizer/context.ts", "../@babel/parser/src/tokenizer/types.ts", "../@babel/babel-helper-validator-identifier/src/identifier.ts", "../@babel/babel-helper-validator-identifier/src/keyword.ts", "../@babel/parser/src/util/identifier.ts", "../@babel/parser/src/util/scope.ts", "../@babel/parser/src/plugins/flow/scope.ts", "../@babel/parser/src/parser/base.ts", "../@babel/parser/src/parser/comments.ts", "../@babel/parser/src/util/whitespace.ts", "../@babel/parser/src/tokenizer/state.ts", "../@babel/babel-helper-string-parser/src/index.ts", "../@babel/parser/src/tokenizer/index.ts", "../@babel/parser/src/util/class-scope.ts", "../@babel/parser/src/util/expression-scope.ts", "../@babel/parser/src/util/production-parameter.ts", "../@babel/parser/src/parser/util.ts", "../@babel/parser/src/parser/node.ts", "../@babel/parser/src/plugins/flow/index.ts", "../@babel/parser/src/plugins/jsx/xhtml.ts", "../@babel/parser/src/plugins/jsx/index.ts", "../@babel/parser/src/plugins/typescript/scope.ts", "../@babel/parser/src/parser/lval.ts", "../@babel/parser/src/plugins/typescript/index.ts", "../@babel/parser/src/plugins/placeholders.ts", "../@babel/parser/src/plugins/v8intrinsic.ts", "../@babel/parser/src/plugin-utils.ts", "../@babel/parser/src/options.ts", "../@babel/parser/src/parser/expression.ts", "../@babel/parser/src/parser/statement.ts", "../@babel/parser/src/parser/index.ts", "../@babel/parser/src/index.ts", "../estree-walker/dist/umd/estree-walker.js", "../source-map-js/lib/base64.js", "../source-map-js/lib/base64-vlq.js", "../source-map-js/lib/util.js", "../source-map-js/lib/array-set.js", "../source-map-js/lib/mapping-list.js", "../source-map-js/lib/source-map-generator.js", "../source-map-js/lib/binary-search.js", "../source-map-js/lib/quick-sort.js", "../source-map-js/lib/source-map-consumer.js", "../source-map-js/lib/source-node.js", "../source-map-js/source-map.js", "../@vue/compiler-core/dist/compiler-core.cjs.js", "../@vue/compiler-core/index.js", "../@vue/compiler-dom/dist/compiler-dom.cjs.js", "../@vue/compiler-dom/index.js", "../vue/dist/vue.cjs.js", "../vue/index.js"],
  "sourcesContent": ["/**\n* @vue/shared v3.4.37\n* (c) 2018-present Yuxi (Evan) You and Vue contributors\n* @license MIT\n**/\n'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\n/*! #__NO_SIDE_EFFECTS__ */\n// @__NO_SIDE_EFFECTS__\nfunction makeMap(str, expectsLowerCase) {\n  const set = new Set(str.split(\",\"));\n  return expectsLowerCase ? (val) => set.has(val.toLowerCase()) : (val) => set.has(val);\n}\n\nconst EMPTY_OBJ = Object.freeze({}) ;\nconst EMPTY_ARR = Object.freeze([]) ;\nconst NOOP = () => {\n};\nconst NO = () => false;\nconst isOn = (key) => key.charCodeAt(0) === 111 && key.charCodeAt(1) === 110 && // uppercase letter\n(key.charCodeAt(2) > 122 || key.charCodeAt(2) < 97);\nconst isModelListener = (key) => key.startsWith(\"onUpdate:\");\nconst extend = Object.assign;\nconst remove = (arr, el) => {\n  const i = arr.indexOf(el);\n  if (i > -1) {\n    arr.splice(i, 1);\n  }\n};\nconst hasOwnProperty = Object.prototype.hasOwnProperty;\nconst hasOwn = (val, key) => hasOwnProperty.call(val, key);\nconst isArray = Array.isArray;\nconst isMap = (val) => toTypeString(val) === \"[object Map]\";\nconst isSet = (val) => toTypeString(val) === \"[object Set]\";\nconst isDate = (val) => toTypeString(val) === \"[object Date]\";\nconst isRegExp = (val) => toTypeString(val) === \"[object RegExp]\";\nconst isFunction = (val) => typeof val === \"function\";\nconst isString = (val) => typeof val === \"string\";\nconst isSymbol = (val) => typeof val === \"symbol\";\nconst isObject = (val) => val !== null && typeof val === \"object\";\nconst isPromise = (val) => {\n  return (isObject(val) || isFunction(val)) && isFunction(val.then) && isFunction(val.catch);\n};\nconst objectToString = Object.prototype.toString;\nconst toTypeString = (value) => objectToString.call(value);\nconst toRawType = (value) => {\n  return toTypeString(value).slice(8, -1);\n};\nconst isPlainObject = (val) => toTypeString(val) === \"[object Object]\";\nconst isIntegerKey = (key) => isString(key) && key !== \"NaN\" && key[0] !== \"-\" && \"\" + parseInt(key, 10) === key;\nconst isReservedProp = /* @__PURE__ */ makeMap(\n  // the leading comma is intentional so empty string \"\" is also included\n  \",key,ref,ref_for,ref_key,onVnodeBeforeMount,onVnodeMounted,onVnodeBeforeUpdate,onVnodeUpdated,onVnodeBeforeUnmount,onVnodeUnmounted\"\n);\nconst isBuiltInDirective = /* @__PURE__ */ makeMap(\n  \"bind,cloak,else-if,else,for,html,if,model,on,once,pre,show,slot,text,memo\"\n);\nconst cacheStringFunction = (fn) => {\n  const cache = /* @__PURE__ */ Object.create(null);\n  return (str) => {\n    const hit = cache[str];\n    return hit || (cache[str] = fn(str));\n  };\n};\nconst camelizeRE = /-(\\w)/g;\nconst camelize = cacheStringFunction((str) => {\n  return str.replace(camelizeRE, (_, c) => c ? c.toUpperCase() : \"\");\n});\nconst hyphenateRE = /\\B([A-Z])/g;\nconst hyphenate = cacheStringFunction(\n  (str) => str.replace(hyphenateRE, \"-$1\").toLowerCase()\n);\nconst capitalize = cacheStringFunction((str) => {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n});\nconst toHandlerKey = cacheStringFunction((str) => {\n  const s = str ? `on${capitalize(str)}` : ``;\n  return s;\n});\nconst hasChanged = (value, oldValue) => !Object.is(value, oldValue);\nconst invokeArrayFns = (fns, ...arg) => {\n  for (let i = 0; i < fns.length; i++) {\n    fns[i](...arg);\n  }\n};\nconst def = (obj, key, value, writable = false) => {\n  Object.defineProperty(obj, key, {\n    configurable: true,\n    enumerable: false,\n    writable,\n    value\n  });\n};\nconst looseToNumber = (val) => {\n  const n = parseFloat(val);\n  return isNaN(n) ? val : n;\n};\nconst toNumber = (val) => {\n  const n = isString(val) ? Number(val) : NaN;\n  return isNaN(n) ? val : n;\n};\nlet _globalThis;\nconst getGlobalThis = () => {\n  return _globalThis || (_globalThis = typeof globalThis !== \"undefined\" ? globalThis : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : typeof global !== \"undefined\" ? global : {});\n};\nconst identRE = /^[_$a-zA-Z\\xA0-\\uFFFF][_$a-zA-Z0-9\\xA0-\\uFFFF]*$/;\nfunction genPropsAccessExp(name) {\n  return identRE.test(name) ? `__props.${name}` : `__props[${JSON.stringify(name)}]`;\n}\n\nconst PatchFlags = {\n  \"TEXT\": 1,\n  \"1\": \"TEXT\",\n  \"CLASS\": 2,\n  \"2\": \"CLASS\",\n  \"STYLE\": 4,\n  \"4\": \"STYLE\",\n  \"PROPS\": 8,\n  \"8\": \"PROPS\",\n  \"FULL_PROPS\": 16,\n  \"16\": \"FULL_PROPS\",\n  \"NEED_HYDRATION\": 32,\n  \"32\": \"NEED_HYDRATION\",\n  \"STABLE_FRAGMENT\": 64,\n  \"64\": \"STABLE_FRAGMENT\",\n  \"KEYED_FRAGMENT\": 128,\n  \"128\": \"KEYED_FRAGMENT\",\n  \"UNKEYED_FRAGMENT\": 256,\n  \"256\": \"UNKEYED_FRAGMENT\",\n  \"NEED_PATCH\": 512,\n  \"512\": \"NEED_PATCH\",\n  \"DYNAMIC_SLOTS\": 1024,\n  \"1024\": \"DYNAMIC_SLOTS\",\n  \"DEV_ROOT_FRAGMENT\": 2048,\n  \"2048\": \"DEV_ROOT_FRAGMENT\",\n  \"HOISTED\": -1,\n  \"-1\": \"HOISTED\",\n  \"BAIL\": -2,\n  \"-2\": \"BAIL\"\n};\nconst PatchFlagNames = {\n  [1]: `TEXT`,\n  [2]: `CLASS`,\n  [4]: `STYLE`,\n  [8]: `PROPS`,\n  [16]: `FULL_PROPS`,\n  [32]: `NEED_HYDRATION`,\n  [64]: `STABLE_FRAGMENT`,\n  [128]: `KEYED_FRAGMENT`,\n  [256]: `UNKEYED_FRAGMENT`,\n  [512]: `NEED_PATCH`,\n  [1024]: `DYNAMIC_SLOTS`,\n  [2048]: `DEV_ROOT_FRAGMENT`,\n  [-1]: `HOISTED`,\n  [-2]: `BAIL`\n};\n\nconst ShapeFlags = {\n  \"ELEMENT\": 1,\n  \"1\": \"ELEMENT\",\n  \"FUNCTIONAL_COMPONENT\": 2,\n  \"2\": \"FUNCTIONAL_COMPONENT\",\n  \"STATEFUL_COMPONENT\": 4,\n  \"4\": \"STATEFUL_COMPONENT\",\n  \"TEXT_CHILDREN\": 8,\n  \"8\": \"TEXT_CHILDREN\",\n  \"ARRAY_CHILDREN\": 16,\n  \"16\": \"ARRAY_CHILDREN\",\n  \"SLOTS_CHILDREN\": 32,\n  \"32\": \"SLOTS_CHILDREN\",\n  \"TELEPORT\": 64,\n  \"64\": \"TELEPORT\",\n  \"SUSPENSE\": 128,\n  \"128\": \"SUSPENSE\",\n  \"COMPONENT_SHOULD_KEEP_ALIVE\": 256,\n  \"256\": \"COMPONENT_SHOULD_KEEP_ALIVE\",\n  \"COMPONENT_KEPT_ALIVE\": 512,\n  \"512\": \"COMPONENT_KEPT_ALIVE\",\n  \"COMPONENT\": 6,\n  \"6\": \"COMPONENT\"\n};\n\nconst SlotFlags = {\n  \"STABLE\": 1,\n  \"1\": \"STABLE\",\n  \"DYNAMIC\": 2,\n  \"2\": \"DYNAMIC\",\n  \"FORWARDED\": 3,\n  \"3\": \"FORWARDED\"\n};\nconst slotFlagsText = {\n  [1]: \"STABLE\",\n  [2]: \"DYNAMIC\",\n  [3]: \"FORWARDED\"\n};\n\nconst GLOBALS_ALLOWED = \"Infinity,undefined,NaN,isFinite,isNaN,parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,BigInt,console,Error\";\nconst isGloballyAllowed = /* @__PURE__ */ makeMap(GLOBALS_ALLOWED);\nconst isGloballyWhitelisted = isGloballyAllowed;\n\nconst range = 2;\nfunction generateCodeFrame(source, start = 0, end = source.length) {\n  start = Math.max(0, Math.min(start, source.length));\n  end = Math.max(0, Math.min(end, source.length));\n  if (start > end) return \"\";\n  let lines = source.split(/(\\r?\\n)/);\n  const newlineSequences = lines.filter((_, idx) => idx % 2 === 1);\n  lines = lines.filter((_, idx) => idx % 2 === 0);\n  let count = 0;\n  const res = [];\n  for (let i = 0; i < lines.length; i++) {\n    count += lines[i].length + (newlineSequences[i] && newlineSequences[i].length || 0);\n    if (count >= start) {\n      for (let j = i - range; j <= i + range || end > count; j++) {\n        if (j < 0 || j >= lines.length) continue;\n        const line = j + 1;\n        res.push(\n          `${line}${\" \".repeat(Math.max(3 - String(line).length, 0))}|  ${lines[j]}`\n        );\n        const lineLength = lines[j].length;\n        const newLineSeqLength = newlineSequences[j] && newlineSequences[j].length || 0;\n        if (j === i) {\n          const pad = start - (count - (lineLength + newLineSeqLength));\n          const length = Math.max(\n            1,\n            end > count ? lineLength - pad : end - start\n          );\n          res.push(`   |  ` + \" \".repeat(pad) + \"^\".repeat(length));\n        } else if (j > i) {\n          if (end > count) {\n            const length = Math.max(Math.min(end - count, lineLength), 1);\n            res.push(`   |  ` + \"^\".repeat(length));\n          }\n          count += lineLength + newLineSeqLength;\n        }\n      }\n      break;\n    }\n  }\n  return res.join(\"\\n\");\n}\n\nfunction normalizeStyle(value) {\n  if (isArray(value)) {\n    const res = {};\n    for (let i = 0; i < value.length; i++) {\n      const item = value[i];\n      const normalized = isString(item) ? parseStringStyle(item) : normalizeStyle(item);\n      if (normalized) {\n        for (const key in normalized) {\n          res[key] = normalized[key];\n        }\n      }\n    }\n    return res;\n  } else if (isString(value) || isObject(value)) {\n    return value;\n  }\n}\nconst listDelimiterRE = /;(?![^(]*\\))/g;\nconst propertyDelimiterRE = /:([^]+)/;\nconst styleCommentRE = /\\/\\*[^]*?\\*\\//g;\nfunction parseStringStyle(cssText) {\n  const ret = {};\n  cssText.replace(styleCommentRE, \"\").split(listDelimiterRE).forEach((item) => {\n    if (item) {\n      const tmp = item.split(propertyDelimiterRE);\n      tmp.length > 1 && (ret[tmp[0].trim()] = tmp[1].trim());\n    }\n  });\n  return ret;\n}\nfunction stringifyStyle(styles) {\n  let ret = \"\";\n  if (!styles || isString(styles)) {\n    return ret;\n  }\n  for (const key in styles) {\n    const value = styles[key];\n    if (isString(value) || typeof value === \"number\") {\n      const normalizedKey = key.startsWith(`--`) ? key : hyphenate(key);\n      ret += `${normalizedKey}:${value};`;\n    }\n  }\n  return ret;\n}\nfunction normalizeClass(value) {\n  let res = \"\";\n  if (isString(value)) {\n    res = value;\n  } else if (isArray(value)) {\n    for (let i = 0; i < value.length; i++) {\n      const normalized = normalizeClass(value[i]);\n      if (normalized) {\n        res += normalized + \" \";\n      }\n    }\n  } else if (isObject(value)) {\n    for (const name in value) {\n      if (value[name]) {\n        res += name + \" \";\n      }\n    }\n  }\n  return res.trim();\n}\nfunction normalizeProps(props) {\n  if (!props) return null;\n  let { class: klass, style } = props;\n  if (klass && !isString(klass)) {\n    props.class = normalizeClass(klass);\n  }\n  if (style) {\n    props.style = normalizeStyle(style);\n  }\n  return props;\n}\n\nconst HTML_TAGS = \"html,body,base,head,link,meta,style,title,address,article,aside,footer,header,hgroup,h1,h2,h3,h4,h5,h6,nav,section,div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,ruby,s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,output,progress,select,textarea,details,dialog,menu,summary,template,blockquote,iframe,tfoot\";\nconst SVG_TAGS = \"svg,animate,animateMotion,animateTransform,circle,clipPath,color-profile,defs,desc,discard,ellipse,feBlend,feColorMatrix,feComponentTransfer,feComposite,feConvolveMatrix,feDiffuseLighting,feDisplacementMap,feDistantLight,feDropShadow,feFlood,feFuncA,feFuncB,feFuncG,feFuncR,feGaussianBlur,feImage,feMerge,feMergeNode,feMorphology,feOffset,fePointLight,feSpecularLighting,feSpotLight,feTile,feTurbulence,filter,foreignObject,g,hatch,hatchpath,image,line,linearGradient,marker,mask,mesh,meshgradient,meshpatch,meshrow,metadata,mpath,path,pattern,polygon,polyline,radialGradient,rect,set,solidcolor,stop,switch,symbol,text,textPath,title,tspan,unknown,use,view\";\nconst MATH_TAGS = \"annotation,annotation-xml,maction,maligngroup,malignmark,math,menclose,merror,mfenced,mfrac,mfraction,mglyph,mi,mlabeledtr,mlongdiv,mmultiscripts,mn,mo,mover,mpadded,mphantom,mprescripts,mroot,mrow,ms,mscarries,mscarry,msgroup,msline,mspace,msqrt,msrow,mstack,mstyle,msub,msubsup,msup,mtable,mtd,mtext,mtr,munder,munderover,none,semantics\";\nconst VOID_TAGS = \"area,base,br,col,embed,hr,img,input,link,meta,param,source,track,wbr\";\nconst isHTMLTag = /* @__PURE__ */ makeMap(HTML_TAGS);\nconst isSVGTag = /* @__PURE__ */ makeMap(SVG_TAGS);\nconst isMathMLTag = /* @__PURE__ */ makeMap(MATH_TAGS);\nconst isVoidTag = /* @__PURE__ */ makeMap(VOID_TAGS);\n\nconst specialBooleanAttrs = `itemscope,allowfullscreen,formnovalidate,ismap,nomodule,novalidate,readonly`;\nconst isSpecialBooleanAttr = /* @__PURE__ */ makeMap(specialBooleanAttrs);\nconst isBooleanAttr = /* @__PURE__ */ makeMap(\n  specialBooleanAttrs + `,async,autofocus,autoplay,controls,default,defer,disabled,hidden,inert,loop,open,required,reversed,scoped,seamless,checked,muted,multiple,selected`\n);\nfunction includeBooleanAttr(value) {\n  return !!value || value === \"\";\n}\nconst unsafeAttrCharRE = /[>/=\"'\\u0009\\u000a\\u000c\\u0020]/;\nconst attrValidationCache = {};\nfunction isSSRSafeAttrName(name) {\n  if (attrValidationCache.hasOwnProperty(name)) {\n    return attrValidationCache[name];\n  }\n  const isUnsafe = unsafeAttrCharRE.test(name);\n  if (isUnsafe) {\n    console.error(`unsafe attribute name: ${name}`);\n  }\n  return attrValidationCache[name] = !isUnsafe;\n}\nconst propsToAttrMap = {\n  acceptCharset: \"accept-charset\",\n  className: \"class\",\n  htmlFor: \"for\",\n  httpEquiv: \"http-equiv\"\n};\nconst isKnownHtmlAttr = /* @__PURE__ */ makeMap(\n  `accept,accept-charset,accesskey,action,align,allow,alt,async,autocapitalize,autocomplete,autofocus,autoplay,background,bgcolor,border,buffered,capture,challenge,charset,checked,cite,class,code,codebase,color,cols,colspan,content,contenteditable,contextmenu,controls,coords,crossorigin,csp,data,datetime,decoding,default,defer,dir,dirname,disabled,download,draggable,dropzone,enctype,enterkeyhint,for,form,formaction,formenctype,formmethod,formnovalidate,formtarget,headers,height,hidden,high,href,hreflang,http-equiv,icon,id,importance,inert,integrity,ismap,itemprop,keytype,kind,label,lang,language,loading,list,loop,low,manifest,max,maxlength,minlength,media,min,multiple,muted,name,novalidate,open,optimum,pattern,ping,placeholder,poster,preload,radiogroup,readonly,referrerpolicy,rel,required,reversed,rows,rowspan,sandbox,scope,scoped,selected,shape,size,sizes,slot,span,spellcheck,src,srcdoc,srclang,srcset,start,step,style,summary,tabindex,target,title,translate,type,usemap,value,width,wrap`\n);\nconst isKnownSvgAttr = /* @__PURE__ */ makeMap(\n  `xmlns,accent-height,accumulate,additive,alignment-baseline,alphabetic,amplitude,arabic-form,ascent,attributeName,attributeType,azimuth,baseFrequency,baseline-shift,baseProfile,bbox,begin,bias,by,calcMode,cap-height,class,clip,clipPathUnits,clip-path,clip-rule,color,color-interpolation,color-interpolation-filters,color-profile,color-rendering,contentScriptType,contentStyleType,crossorigin,cursor,cx,cy,d,decelerate,descent,diffuseConstant,direction,display,divisor,dominant-baseline,dur,dx,dy,edgeMode,elevation,enable-background,end,exponent,fill,fill-opacity,fill-rule,filter,filterRes,filterUnits,flood-color,flood-opacity,font-family,font-size,font-size-adjust,font-stretch,font-style,font-variant,font-weight,format,from,fr,fx,fy,g1,g2,glyph-name,glyph-orientation-horizontal,glyph-orientation-vertical,glyphRef,gradientTransform,gradientUnits,hanging,height,href,hreflang,horiz-adv-x,horiz-origin-x,id,ideographic,image-rendering,in,in2,intercept,k,k1,k2,k3,k4,kernelMatrix,kernelUnitLength,kerning,keyPoints,keySplines,keyTimes,lang,lengthAdjust,letter-spacing,lighting-color,limitingConeAngle,local,marker-end,marker-mid,marker-start,markerHeight,markerUnits,markerWidth,mask,maskContentUnits,maskUnits,mathematical,max,media,method,min,mode,name,numOctaves,offset,opacity,operator,order,orient,orientation,origin,overflow,overline-position,overline-thickness,panose-1,paint-order,path,pathLength,patternContentUnits,patternTransform,patternUnits,ping,pointer-events,points,pointsAtX,pointsAtY,pointsAtZ,preserveAlpha,preserveAspectRatio,primitiveUnits,r,radius,referrerPolicy,refX,refY,rel,rendering-intent,repeatCount,repeatDur,requiredExtensions,requiredFeatures,restart,result,rotate,rx,ry,scale,seed,shape-rendering,slope,spacing,specularConstant,specularExponent,speed,spreadMethod,startOffset,stdDeviation,stemh,stemv,stitchTiles,stop-color,stop-opacity,strikethrough-position,strikethrough-thickness,string,stroke,stroke-dasharray,stroke-dashoffset,stroke-linecap,stroke-linejoin,stroke-miterlimit,stroke-opacity,stroke-width,style,surfaceScale,systemLanguage,tabindex,tableValues,target,targetX,targetY,text-anchor,text-decoration,text-rendering,textLength,to,transform,transform-origin,type,u1,u2,underline-position,underline-thickness,unicode,unicode-bidi,unicode-range,units-per-em,v-alphabetic,v-hanging,v-ideographic,v-mathematical,values,vector-effect,version,vert-adv-y,vert-origin-x,vert-origin-y,viewBox,viewTarget,visibility,width,widths,word-spacing,writing-mode,x,x-height,x1,x2,xChannelSelector,xlink:actuate,xlink:arcrole,xlink:href,xlink:role,xlink:show,xlink:title,xlink:type,xmlns:xlink,xml:base,xml:lang,xml:space,y,y1,y2,yChannelSelector,z,zoomAndPan`\n);\nfunction isRenderableAttrValue(value) {\n  if (value == null) {\n    return false;\n  }\n  const type = typeof value;\n  return type === \"string\" || type === \"number\" || type === \"boolean\";\n}\n\nconst escapeRE = /[\"'&<>]/;\nfunction escapeHtml(string) {\n  const str = \"\" + string;\n  const match = escapeRE.exec(str);\n  if (!match) {\n    return str;\n  }\n  let html = \"\";\n  let escaped;\n  let index;\n  let lastIndex = 0;\n  for (index = match.index; index < str.length; index++) {\n    switch (str.charCodeAt(index)) {\n      case 34:\n        escaped = \"&quot;\";\n        break;\n      case 38:\n        escaped = \"&amp;\";\n        break;\n      case 39:\n        escaped = \"&#39;\";\n        break;\n      case 60:\n        escaped = \"&lt;\";\n        break;\n      case 62:\n        escaped = \"&gt;\";\n        break;\n      default:\n        continue;\n    }\n    if (lastIndex !== index) {\n      html += str.slice(lastIndex, index);\n    }\n    lastIndex = index + 1;\n    html += escaped;\n  }\n  return lastIndex !== index ? html + str.slice(lastIndex, index) : html;\n}\nconst commentStripRE = /^-?>|<!--|-->|--!>|<!-$/g;\nfunction escapeHtmlComment(src) {\n  return src.replace(commentStripRE, \"\");\n}\n\nfunction looseCompareArrays(a, b) {\n  if (a.length !== b.length) return false;\n  let equal = true;\n  for (let i = 0; equal && i < a.length; i++) {\n    equal = looseEqual(a[i], b[i]);\n  }\n  return equal;\n}\nfunction looseEqual(a, b) {\n  if (a === b) return true;\n  let aValidType = isDate(a);\n  let bValidType = isDate(b);\n  if (aValidType || bValidType) {\n    return aValidType && bValidType ? a.getTime() === b.getTime() : false;\n  }\n  aValidType = isSymbol(a);\n  bValidType = isSymbol(b);\n  if (aValidType || bValidType) {\n    return a === b;\n  }\n  aValidType = isArray(a);\n  bValidType = isArray(b);\n  if (aValidType || bValidType) {\n    return aValidType && bValidType ? looseCompareArrays(a, b) : false;\n  }\n  aValidType = isObject(a);\n  bValidType = isObject(b);\n  if (aValidType || bValidType) {\n    if (!aValidType || !bValidType) {\n      return false;\n    }\n    const aKeysCount = Object.keys(a).length;\n    const bKeysCount = Object.keys(b).length;\n    if (aKeysCount !== bKeysCount) {\n      return false;\n    }\n    for (const key in a) {\n      const aHasKey = a.hasOwnProperty(key);\n      const bHasKey = b.hasOwnProperty(key);\n      if (aHasKey && !bHasKey || !aHasKey && bHasKey || !looseEqual(a[key], b[key])) {\n        return false;\n      }\n    }\n  }\n  return String(a) === String(b);\n}\nfunction looseIndexOf(arr, val) {\n  return arr.findIndex((item) => looseEqual(item, val));\n}\n\nconst isRef = (val) => {\n  return !!(val && val.__v_isRef === true);\n};\nconst toDisplayString = (val) => {\n  return isString(val) ? val : val == null ? \"\" : isArray(val) || isObject(val) && (val.toString === objectToString || !isFunction(val.toString)) ? isRef(val) ? toDisplayString(val.value) : JSON.stringify(val, replacer, 2) : String(val);\n};\nconst replacer = (_key, val) => {\n  if (isRef(val)) {\n    return replacer(_key, val.value);\n  } else if (isMap(val)) {\n    return {\n      [`Map(${val.size})`]: [...val.entries()].reduce(\n        (entries, [key, val2], i) => {\n          entries[stringifySymbol(key, i) + \" =>\"] = val2;\n          return entries;\n        },\n        {}\n      )\n    };\n  } else if (isSet(val)) {\n    return {\n      [`Set(${val.size})`]: [...val.values()].map((v) => stringifySymbol(v))\n    };\n  } else if (isSymbol(val)) {\n    return stringifySymbol(val);\n  } else if (isObject(val) && !isArray(val) && !isPlainObject(val)) {\n    return String(val);\n  }\n  return val;\n};\nconst stringifySymbol = (v, i = \"\") => {\n  var _a;\n  return (\n    // Symbol.description in es2019+ so we need to cast here to pass\n    // the lib: es2016 check\n    isSymbol(v) ? `Symbol(${(_a = v.description) != null ? _a : i})` : v\n  );\n};\n\nexports.EMPTY_ARR = EMPTY_ARR;\nexports.EMPTY_OBJ = EMPTY_OBJ;\nexports.NO = NO;\nexports.NOOP = NOOP;\nexports.PatchFlagNames = PatchFlagNames;\nexports.PatchFlags = PatchFlags;\nexports.ShapeFlags = ShapeFlags;\nexports.SlotFlags = SlotFlags;\nexports.camelize = camelize;\nexports.capitalize = capitalize;\nexports.def = def;\nexports.escapeHtml = escapeHtml;\nexports.escapeHtmlComment = escapeHtmlComment;\nexports.extend = extend;\nexports.genPropsAccessExp = genPropsAccessExp;\nexports.generateCodeFrame = generateCodeFrame;\nexports.getGlobalThis = getGlobalThis;\nexports.hasChanged = hasChanged;\nexports.hasOwn = hasOwn;\nexports.hyphenate = hyphenate;\nexports.includeBooleanAttr = includeBooleanAttr;\nexports.invokeArrayFns = invokeArrayFns;\nexports.isArray = isArray;\nexports.isBooleanAttr = isBooleanAttr;\nexports.isBuiltInDirective = isBuiltInDirective;\nexports.isDate = isDate;\nexports.isFunction = isFunction;\nexports.isGloballyAllowed = isGloballyAllowed;\nexports.isGloballyWhitelisted = isGloballyWhitelisted;\nexports.isHTMLTag = isHTMLTag;\nexports.isIntegerKey = isIntegerKey;\nexports.isKnownHtmlAttr = isKnownHtmlAttr;\nexports.isKnownSvgAttr = isKnownSvgAttr;\nexports.isMap = isMap;\nexports.isMathMLTag = isMathMLTag;\nexports.isModelListener = isModelListener;\nexports.isObject = isObject;\nexports.isOn = isOn;\nexports.isPlainObject = isPlainObject;\nexports.isPromise = isPromise;\nexports.isRegExp = isRegExp;\nexports.isRenderableAttrValue = isRenderableAttrValue;\nexports.isReservedProp = isReservedProp;\nexports.isSSRSafeAttrName = isSSRSafeAttrName;\nexports.isSVGTag = isSVGTag;\nexports.isSet = isSet;\nexports.isSpecialBooleanAttr = isSpecialBooleanAttr;\nexports.isString = isString;\nexports.isSymbol = isSymbol;\nexports.isVoidTag = isVoidTag;\nexports.looseEqual = looseEqual;\nexports.looseIndexOf = looseIndexOf;\nexports.looseToNumber = looseToNumber;\nexports.makeMap = makeMap;\nexports.normalizeClass = normalizeClass;\nexports.normalizeProps = normalizeProps;\nexports.normalizeStyle = normalizeStyle;\nexports.objectToString = objectToString;\nexports.parseStringStyle = parseStringStyle;\nexports.propsToAttrMap = propsToAttrMap;\nexports.remove = remove;\nexports.slotFlagsText = slotFlagsText;\nexports.stringifyStyle = stringifyStyle;\nexports.toDisplayString = toDisplayString;\nexports.toHandlerKey = toHandlerKey;\nexports.toNumber = toNumber;\nexports.toRawType = toRawType;\nexports.toTypeString = toTypeString;\n", "'use strict'\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./dist/shared.cjs.prod.js')\n} else {\n  module.exports = require('./dist/shared.cjs.js')\n}\n", null, null, null, null, "export type Pos = {\n  start: number;\n};\n\n// These are used when `options.locations` is on, for the\n// `startLoc` and `endLoc` properties.\n\nexport class Position {\n  line: number;\n  column: number;\n  index: number;\n\n  constructor(line: number, col: number, index: number) {\n    this.line = line;\n    this.column = col;\n    this.index = index;\n  }\n}\n\nexport class SourceLocation {\n  start: Position;\n  end: Position;\n  filename: string;\n  identifierName: string | undefined | null;\n\n  constructor(start: Position, end?: Position) {\n    this.start = start;\n    // (may start as null, but initialized later)\n    this.end = end;\n  }\n}\n\n/**\n * creates a new position with a non-zero column offset from the given position.\n * This function should be only be used when we create AST node out of the token\n * boundaries, such as TemplateElement ends before tt.templateNonTail. This\n * function does not skip whitespaces.\n */\nexport function createPositionWithColumnOffset(\n  position: Position,\n  columnOffset: number,\n) {\n  const { line, column, index } = position;\n  return new Position(line, column + columnOffset, index + columnOffset);\n}\n", "import type { ParseErrorTemplates } from \"../parse-error.ts\";\n\nconst code = \"BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED\";\n\nexport default {\n  ImportMetaOutsideModule: {\n    message: `import.meta may appear only with 'sourceType: \"module\"'`,\n    code,\n  },\n  ImportOutsideModule: {\n    message: `'import' and 'export' may appear only with 'sourceType: \"module\"'`,\n    code,\n  },\n} satisfies ParseErrorTemplates;\n", "const NodeDescriptions = {\n  ArrayPattern: \"array destructuring pattern\",\n  AssignmentExpression: \"assignment expression\",\n  AssignmentPattern: \"assignment expression\",\n  ArrowFunctionExpression: \"arrow function expression\",\n  ConditionalExpression: \"conditional expression\",\n  CatchClause: \"catch clause\",\n  ForOfStatement: \"for-of statement\",\n  ForInStatement: \"for-in statement\",\n  ForStatement: \"for-loop\",\n  FormalParameters: \"function parameter list\",\n  Identifier: \"identifier\",\n  ImportSpecifier: \"import specifier\",\n  ImportDefaultSpecifier: \"import default specifier\",\n  ImportNamespaceSpecifier: \"import namespace specifier\",\n  ObjectPattern: \"object destructuring pattern\",\n  ParenthesizedExpression: \"parenthesized expression\",\n  RestElement: \"rest element\",\n  UpdateExpression: {\n    true: \"prefix operation\",\n    false: \"postfix operation\",\n  },\n  VariableDeclarator: \"variable declaration\",\n  YieldExpression: \"yield expression\",\n};\n\ntype NodeTypesWithDescriptions = keyof Omit<\n  typeof NodeDescriptions,\n  \"UpdateExpression\"\n>;\n\ntype NodeWithDescription =\n  | {\n      type: \"UpdateExpression\";\n      prefix: boolean;\n    }\n  | {\n      type: NodeTypesWithDescriptions;\n    };\n\n// eslint-disable-next-line no-confusing-arrow\nconst toNodeDescription = (node: NodeWithDescription) =>\n  node.type === \"UpdateExpression\"\n    ? NodeDescriptions.UpdateExpression[`${node.prefix}`]\n    : NodeDescriptions[node.type];\n\nexport default toNodeDescription;\n", "import type { ParseErrorTemplates } from \"../parse-error.ts\";\nimport toNodeDescription from \"./to-node-description.ts\";\n\nexport type LValAncestor =\n  | { type: \"UpdateExpression\"; prefix: boolean }\n  | {\n      type:\n        | \"ArrayPattern\"\n        | \"AssignmentExpression\"\n        | \"CatchClause\"\n        | \"ForOfStatement\"\n        | \"FormalParameters\"\n        | \"ForInStatement\"\n        | \"ForStatement\"\n        | \"ImportSpecifier\"\n        | \"ImportNamespaceSpecifier\"\n        | \"ImportDefaultSpecifier\"\n        | \"ParenthesizedExpression\"\n        | \"ObjectPattern\"\n        | \"RestElement\"\n        | \"VariableDeclarator\";\n    };\n\nexport default {\n  AccessorIsGenerator: ({ kind }: { kind: \"get\" | \"set\" }) =>\n    `A ${kind}ter cannot be a generator.`,\n  ArgumentsInClass:\n    \"'arguments' is only allowed in functions and class methods.\",\n  AsyncFunctionInSingleStatementContext:\n    \"Async functions can only be declared at the top level or inside a block.\",\n  AwaitBindingIdentifier:\n    \"Can not use 'await' as identifier inside an async function.\",\n  AwaitBindingIdentifierInStaticBlock:\n    \"Can not use 'await' as identifier inside a static block.\",\n  AwaitExpressionFormalParameter:\n    \"'await' is not allowed in async function parameters.\",\n  AwaitUsingNotInAsyncContext:\n    \"'await using' is only allowed within async functions and at the top levels of modules.\",\n  AwaitNotInAsyncContext:\n    \"'await' is only allowed within async functions and at the top levels of modules.\",\n  AwaitNotInAsyncFunction: \"'await' is only allowed within async functions.\",\n  BadGetterArity: \"A 'get' accessor must not have any formal parameters.\",\n  BadSetterArity: \"A 'set' accessor must have exactly one formal parameter.\",\n  BadSetterRestParameter:\n    \"A 'set' accessor function argument must not be a rest parameter.\",\n  ConstructorClassField: \"Classes may not have a field named 'constructor'.\",\n  ConstructorClassPrivateField:\n    \"Classes may not have a private field named '#constructor'.\",\n  ConstructorIsAccessor: \"Class constructor may not be an accessor.\",\n  ConstructorIsAsync: \"Constructor can't be an async function.\",\n  ConstructorIsGenerator: \"Constructor can't be a generator.\",\n  DeclarationMissingInitializer: ({\n    kind,\n  }: {\n    kind: \"await using\" | \"const\" | \"destructuring\" | \"using\";\n  }) => `Missing initializer in ${kind} declaration.`,\n  DecoratorArgumentsOutsideParentheses:\n    \"Decorator arguments must be moved inside parentheses: use '@(decorator(args))' instead of '@(decorator)(args)'.\",\n  DecoratorBeforeExport:\n    \"Decorators must be placed *before* the 'export' keyword. Remove the 'decoratorsBeforeExport: true' option to use the 'export @decorator class {}' syntax.\",\n  DecoratorsBeforeAfterExport:\n    \"Decorators can be placed *either* before or after the 'export' keyword, but not in both locations at the same time.\",\n  DecoratorConstructor:\n    \"Decorators can't be used with a constructor. Did you mean '@dec class { ... }'?\",\n  DecoratorExportClass:\n    \"Decorators must be placed *after* the 'export' keyword. Remove the 'decoratorsBeforeExport: false' option to use the '@decorator export class {}' syntax.\",\n  DecoratorSemicolon: \"Decorators must not be followed by a semicolon.\",\n  DecoratorStaticBlock: \"Decorators can't be used with a static block.\",\n  DeferImportRequiresNamespace:\n    'Only `import defer * as x from \"./module\"` is valid.',\n  DeletePrivateField: \"Deleting a private field is not allowed.\",\n  DestructureNamedImport:\n    \"ES2015 named imports do not destructure. Use another statement for destructuring after the import.\",\n  DuplicateConstructor: \"Duplicate constructor in the same class.\",\n  DuplicateDefaultExport: \"Only one default export allowed per module.\",\n  DuplicateExport: ({ exportName }: { exportName: string }) =>\n    `\\`${exportName}\\` has already been exported. Exported identifiers must be unique.`,\n  DuplicateProto: \"Redefinition of __proto__ property.\",\n  DuplicateRegExpFlags: \"Duplicate regular expression flag.\",\n  DynamicImportPhaseRequiresImportExpressions: ({ phase }: { phase: string }) =>\n    `'import.${phase}(...)' can only be parsed when using the 'createImportExpressions' option.`,\n  ElementAfterRest: \"Rest element must be last element.\",\n  EscapedCharNotAnIdentifier: \"Invalid Unicode escape.\",\n  ExportBindingIsString: ({\n    localName,\n    exportName,\n  }: {\n    localName: string;\n    exportName: string;\n  }) =>\n    `A string literal cannot be used as an exported binding without \\`from\\`.\\n- Did you mean \\`export { '${localName}' as '${exportName}' } from 'some-module'\\`?`,\n  ExportDefaultFromAsIdentifier:\n    \"'from' is not allowed as an identifier after 'export default'.\",\n\n  ForInOfLoopInitializer: ({\n    type,\n  }: {\n    type: \"ForInStatement\" | \"ForOfStatement\";\n  }) =>\n    `'${\n      type === \"ForInStatement\" ? \"for-in\" : \"for-of\"\n    }' loop variable declaration may not have an initializer.`,\n  ForInUsing: \"For-in loop may not start with 'using' declaration.\",\n\n  ForOfAsync: \"The left-hand side of a for-of loop may not be 'async'.\",\n  ForOfLet: \"The left-hand side of a for-of loop may not start with 'let'.\",\n  GeneratorInSingleStatementContext:\n    \"Generators can only be declared at the top level or inside a block.\",\n\n  IllegalBreakContinue: ({\n    type,\n  }: {\n    type: \"BreakStatement\" | \"ContinueStatement\";\n  }) => `Unsyntactic ${type === \"BreakStatement\" ? \"break\" : \"continue\"}.`,\n\n  IllegalLanguageModeDirective:\n    \"Illegal 'use strict' directive in function with non-simple parameter list.\",\n  IllegalReturn: \"'return' outside of function.\",\n  ImportAttributesUseAssert:\n    \"The `assert` keyword in import attributes is deprecated and it has been replaced by the `with` keyword. You can enable the `deprecatedAssertSyntax: true` option in the import attributes plugin to suppress this error.\",\n  ImportBindingIsString: ({ importName }: { importName: string }) =>\n    `A string literal cannot be used as an imported binding.\\n- Did you mean \\`import { \"${importName}\" as foo }\\`?`,\n  ImportCallArgumentTrailingComma:\n    \"Trailing comma is disallowed inside import(...) arguments.\",\n  ImportCallArity: ({ maxArgumentCount }: { maxArgumentCount: 1 | 2 }) =>\n    `\\`import()\\` requires exactly ${\n      maxArgumentCount === 1 ? \"one argument\" : \"one or two arguments\"\n    }.`,\n  ImportCallNotNewExpression: \"Cannot use new with import(...).\",\n  ImportCallSpreadArgument: \"`...` is not allowed in `import()`.\",\n  ImportJSONBindingNotDefault:\n    \"A JSON module can only be imported with `default`.\",\n  ImportReflectionHasAssertion: \"`import module x` cannot have assertions.\",\n  ImportReflectionNotBinding:\n    'Only `import module x from \"./module\"` is valid.',\n  IncompatibleRegExpUVFlags:\n    \"The 'u' and 'v' regular expression flags cannot be enabled at the same time.\",\n  InvalidBigIntLiteral: \"Invalid BigIntLiteral.\",\n  InvalidCodePoint: \"Code point out of bounds.\",\n  InvalidCoverInitializedName: \"Invalid shorthand property initializer.\",\n  InvalidDecimal: \"Invalid decimal.\",\n  InvalidDigit: ({ radix }: { radix: number }) =>\n    `Expected number in radix ${radix}.`,\n  InvalidEscapeSequence: \"Bad character escape sequence.\",\n  InvalidEscapeSequenceTemplate: \"Invalid escape sequence in template.\",\n  InvalidEscapedReservedWord: ({ reservedWord }: { reservedWord: string }) =>\n    `Escape sequence in keyword ${reservedWord}.`,\n  InvalidIdentifier: ({ identifierName }: { identifierName: string }) =>\n    `Invalid identifier ${identifierName}.`,\n  InvalidLhs: ({ ancestor }: { ancestor: LValAncestor }) =>\n    `Invalid left-hand side in ${toNodeDescription(ancestor)}.`,\n  InvalidLhsBinding: ({ ancestor }: { ancestor: LValAncestor }) =>\n    `Binding invalid left-hand side in ${toNodeDescription(ancestor)}.`,\n  InvalidLhsOptionalChaining: ({ ancestor }: { ancestor: LValAncestor }) =>\n    `Invalid optional chaining in the left-hand side of ${toNodeDescription(\n      ancestor,\n    )}.`,\n  InvalidNumber: \"Invalid number.\",\n  InvalidOrMissingExponent:\n    \"Floating-point numbers require a valid exponent after the 'e'.\",\n  InvalidOrUnexpectedToken: ({ unexpected }: { unexpected: string }) =>\n    `Unexpected character '${unexpected}'.`,\n  InvalidParenthesizedAssignment: \"Invalid parenthesized assignment pattern.\",\n  InvalidPrivateFieldResolution: ({\n    identifierName,\n  }: {\n    identifierName: string;\n  }) => `Private name #${identifierName} is not defined.`,\n  InvalidPropertyBindingPattern: \"Binding member expression.\",\n  InvalidRecordProperty:\n    \"Only properties and spread elements are allowed in record definitions.\",\n  InvalidRestAssignmentPattern: \"Invalid rest operator's argument.\",\n  LabelRedeclaration: ({ labelName }: { labelName: string }) =>\n    `Label '${labelName}' is already declared.`,\n  LetInLexicalBinding: \"'let' is disallowed as a lexically bound name.\",\n  LineTerminatorBeforeArrow: \"No line break is allowed before '=>'.\",\n  MalformedRegExpFlags: \"Invalid regular expression flag.\",\n  MissingClassName: \"A class name is required.\",\n  MissingEqInAssignment:\n    \"Only '=' operator can be used for specifying default value.\",\n  MissingSemicolon: \"Missing semicolon.\",\n  MissingPlugin: ({ missingPlugin }: { missingPlugin: [string] }) =>\n    `This experimental syntax requires enabling the parser plugin: ${missingPlugin\n      .map(name => JSON.stringify(name))\n      .join(\", \")}.`,\n  // FIXME: Would be nice to make this \"missingPlugins\" instead.\n  // Also, seems like we can drop the \"(s)\" from the message and just make it \"s\".\n  MissingOneOfPlugins: ({ missingPlugin }: { missingPlugin: string[] }) =>\n    `This experimental syntax requires enabling one of the following parser plugin(s): ${missingPlugin\n      .map(name => JSON.stringify(name))\n      .join(\", \")}.`,\n  MissingUnicodeEscape: \"Expecting Unicode escape sequence \\\\uXXXX.\",\n  MixingCoalesceWithLogical:\n    \"Nullish coalescing operator(??) requires parens when mixing with logical operators.\",\n  ModuleAttributeDifferentFromType:\n    \"The only accepted module attribute is `type`.\",\n  ModuleAttributeInvalidValue:\n    \"Only string literals are allowed as module attribute values.\",\n  ModuleAttributesWithDuplicateKeys: ({ key }: { key: string }) =>\n    `Duplicate key \"${key}\" is not allowed in module attributes.`,\n  ModuleExportNameHasLoneSurrogate: ({\n    surrogateCharCode,\n  }: {\n    surrogateCharCode: number;\n  }) =>\n    `An export name cannot include a lone surrogate, found '\\\\u${surrogateCharCode.toString(\n      16,\n    )}'.`,\n  ModuleExportUndefined: ({ localName }: { localName: string }) =>\n    `Export '${localName}' is not defined.`,\n  MultipleDefaultsInSwitch: \"Multiple default clauses.\",\n  NewlineAfterThrow: \"Illegal newline after throw.\",\n  NoCatchOrFinally: \"Missing catch or finally clause.\",\n  NumberIdentifier: \"Identifier directly after number.\",\n  NumericSeparatorInEscapeSequence:\n    \"Numeric separators are not allowed inside unicode escape sequences or hex escape sequences.\",\n  ObsoleteAwaitStar:\n    \"'await*' has been removed from the async functions proposal. Use Promise.all() instead.\",\n  OptionalChainingNoNew:\n    \"Constructors in/after an Optional Chain are not allowed.\",\n  OptionalChainingNoTemplate:\n    \"Tagged Template Literals are not allowed in optionalChain.\",\n  OverrideOnConstructor:\n    \"'override' modifier cannot appear on a constructor declaration.\",\n  ParamDupe: \"Argument name clash.\",\n  PatternHasAccessor: \"Object pattern can't contain getter or setter.\",\n  PatternHasMethod: \"Object pattern can't contain methods.\",\n  PrivateInExpectedIn: ({ identifierName }: { identifierName: string }) =>\n    `Private names are only allowed in property accesses (\\`obj.#${identifierName}\\`) or in \\`in\\` expressions (\\`#${identifierName} in obj\\`).`,\n  PrivateNameRedeclaration: ({ identifierName }: { identifierName: string }) =>\n    `Duplicate private name #${identifierName}.`,\n  RecordExpressionBarIncorrectEndSyntaxType:\n    \"Record expressions ending with '|}' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  RecordExpressionBarIncorrectStartSyntaxType:\n    \"Record expressions starting with '{|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  RecordExpressionHashIncorrectStartSyntaxType:\n    \"Record expressions starting with '#{' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.\",\n  RecordNoProto: \"'__proto__' is not allowed in Record expressions.\",\n  RestTrailingComma: \"Unexpected trailing comma after rest element.\",\n  SloppyFunction:\n    \"In non-strict mode code, functions can only be declared at top level or inside a block.\",\n  SloppyFunctionAnnexB:\n    \"In non-strict mode code, functions can only be declared at top level, inside a block, or as the body of an if statement.\",\n  SourcePhaseImportRequiresDefault:\n    'Only `import source x from \"./module\"` is valid.',\n  StaticPrototype: \"Classes may not have static property named prototype.\",\n  SuperNotAllowed:\n    \"`super()` is only valid inside a class constructor of a subclass. Maybe a typo in the method name ('constructor') or not extending another class?\",\n  SuperPrivateField: \"Private fields can't be accessed on super.\",\n  TrailingDecorator: \"Decorators must be attached to a class element.\",\n  TupleExpressionBarIncorrectEndSyntaxType:\n    \"Tuple expressions ending with '|]' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  TupleExpressionBarIncorrectStartSyntaxType:\n    \"Tuple expressions starting with '[|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  TupleExpressionHashIncorrectStartSyntaxType:\n    \"Tuple expressions starting with '#[' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.\",\n  UnexpectedArgumentPlaceholder: \"Unexpected argument placeholder.\",\n  UnexpectedAwaitAfterPipelineBody:\n    'Unexpected \"await\" after pipeline body; await must have parentheses in minimal proposal.',\n  UnexpectedDigitAfterHash: \"Unexpected digit after hash token.\",\n  UnexpectedImportExport:\n    \"'import' and 'export' may only appear at the top level.\",\n  UnexpectedKeyword: ({ keyword }: { keyword: string }) =>\n    `Unexpected keyword '${keyword}'.`,\n  UnexpectedLeadingDecorator:\n    \"Leading decorators must be attached to a class declaration.\",\n  UnexpectedLexicalDeclaration:\n    \"Lexical declaration cannot appear in a single-statement context.\",\n  UnexpectedNewTarget:\n    \"`new.target` can only be used in functions or class properties.\",\n  UnexpectedNumericSeparator:\n    \"A numeric separator is only allowed between two digits.\",\n  UnexpectedPrivateField: \"Unexpected private name.\",\n  UnexpectedReservedWord: ({ reservedWord }: { reservedWord: string }) =>\n    `Unexpected reserved word '${reservedWord}'.`,\n  UnexpectedSuper: \"'super' is only allowed in object methods and classes.\",\n  UnexpectedToken: ({\n    expected,\n    unexpected,\n  }: {\n    expected?: string | null;\n    unexpected?: string | null;\n  }) =>\n    `Unexpected token${unexpected ? ` '${unexpected}'.` : \"\"}${\n      expected ? `, expected \"${expected}\"` : \"\"\n    }`,\n  UnexpectedTokenUnaryExponentiation:\n    \"Illegal expression. Wrap left hand side or entire exponentiation in parentheses.\",\n  UnexpectedUsingDeclaration:\n    \"Using declaration cannot appear in the top level when source type is `script`.\",\n  UnsupportedBind: \"Binding should be performed on object property.\",\n  UnsupportedDecoratorExport:\n    \"A decorated export must export a class declaration.\",\n  UnsupportedDefaultExport:\n    \"Only expressions, functions or classes are allowed as the `default` export.\",\n  UnsupportedImport:\n    \"`import` can only be used in `import()` or `import.meta`.\",\n  UnsupportedMetaProperty: ({\n    target,\n    onlyValidPropertyName,\n  }: {\n    target: string;\n    onlyValidPropertyName: string;\n  }) =>\n    `The only valid meta property for ${target} is ${target}.${onlyValidPropertyName}.`,\n  UnsupportedParameterDecorator:\n    \"Decorators cannot be used to decorate parameters.\",\n  UnsupportedPropertyDecorator:\n    \"Decorators cannot be used to decorate object literal properties.\",\n  UnsupportedSuper:\n    \"'super' can only be used with function calls (i.e. super()) or in property accesses (i.e. super.prop or super[prop]).\",\n  UnterminatedComment: \"Unterminated comment.\",\n  UnterminatedRegExp: \"Unterminated regular expression.\",\n  UnterminatedString: \"Unterminated string constant.\",\n  UnterminatedTemplate: \"Unterminated template.\",\n  UsingDeclarationExport: \"Using declaration cannot be exported.\",\n  UsingDeclarationHasBindingPattern:\n    \"Using declaration cannot have destructuring patterns.\",\n  VarRedeclaration: ({ identifierName }: { identifierName: string }) =>\n    `Identifier '${identifierName}' has already been declared.`,\n  YieldBindingIdentifier:\n    \"Can not use 'yield' as identifier inside a generator.\",\n  YieldInParameter: \"Yield expression is not allowed in formal parameters.\",\n  ZeroDigitNumericSeparator:\n    \"Numeric separator can not be used after leading 0.\",\n} satisfies ParseErrorTemplates;\n", "import type { ParseErrorTemplates } from \"../parse-error\";\n\nexport default {\n  StrictDelete: \"Deleting local variable in strict mode.\",\n\n  // `referenceName` is the StringValue[1] of an IdentifierReference[2], which\n  // is represented as just an `Identifier`[3] in the Babel AST.\n  // 1. https://tc39.es/ecma262/#sec-static-semantics-stringvalue\n  // 2. https://tc39.es/ecma262/#prod-IdentifierReference\n  // 3. https://github.com/babel/babel/blob/main/packages/babel-parser/ast/spec.md#identifier\n  StrictEvalArguments: ({ referenceName }: { referenceName: string }) =>\n    `Assigning to '${referenceName}' in strict mode.`,\n\n  // `bindingName` is the StringValue[1] of a BindingIdentifier[2], which is\n  // represented as just an `Identifier`[3] in the Babel AST.\n  // 1. https://tc39.es/ecma262/#sec-static-semantics-stringvalue\n  // 2. https://tc39.es/ecma262/#prod-BindingIdentifier\n  // 3. https://github.com/babel/babel/blob/main/packages/babel-parser/ast/spec.md#identifier\n  StrictEvalArgumentsBinding: ({ bindingName }: { bindingName: string }) =>\n    `Binding '${bindingName}' in strict mode.`,\n\n  StrictFunction:\n    \"In strict mode code, functions can only be declared at top level or inside a block.\",\n\n  StrictNumericEscape: \"The only valid numeric escape in strict mode is '\\\\0'.\",\n\n  StrictOctalLiteral: \"Legacy octal literals are not allowed in strict mode.\",\n\n  StrictWith: \"'with' in strict mode.\",\n} satisfies ParseErrorTemplates;\n", "import type { ParseErrorTemplates } from \"../parse-error.ts\";\nimport toNodeDescription from \"./to-node-description.ts\";\n\nexport const UnparenthesizedPipeBodyDescriptions = new Set([\n  \"ArrowFunctionExpression\",\n  \"AssignmentExpression\",\n  \"ConditionalExpression\",\n  \"YieldExpression\",\n] as const);\n\ntype GetSetMemberType<T extends Set<any>> =\n  T extends Set<infer M> ? M : unknown;\n\nexport type UnparenthesizedPipeBodyTypes = GetSetMemberType<\n  typeof UnparenthesizedPipeBodyDescriptions\n>;\n\nexport default {\n  // This error is only used by the smart-mix proposal\n  PipeBodyIsTighter:\n    \"Unexpected yield after pipeline body; any yield expression acting as Hack-style pipe body must be parenthesized due to its loose operator precedence.\",\n  PipeTopicRequiresHackPipes:\n    'Topic reference is used, but the pipelineOperator plugin was not passed a \"proposal\": \"hack\" or \"smart\" option.',\n  PipeTopicUnbound:\n    \"Topic reference is unbound; it must be inside a pipe body.\",\n  PipeTopicUnconfiguredToken: ({ token }: { token: string }) =>\n    `Invalid topic token ${token}. In order to use ${token} as a topic reference, the pipelineOperator plugin must be configured with { \"proposal\": \"hack\", \"topicToken\": \"${token}\" }.`,\n  PipeTopicUnused:\n    \"Hack-style pipe body does not contain a topic reference; Hack-style pipes must use topic at least once.\",\n  PipeUnparenthesizedBody: ({ type }: { type: UnparenthesizedPipeBodyTypes }) =>\n    `Hack-style pipe body cannot be an unparenthesized ${toNodeDescription({\n      type,\n    })}; please wrap it in parentheses.`,\n\n  // Messages whose codes start with \u201CPipeline\u201D or \u201CPrimaryTopic\u201D\n  // are retained for backwards compatibility\n  // with the deprecated smart-mix pipe operator proposal plugin.\n  // They are subject to removal in a future major version.\n  PipelineBodyNoArrow:\n    'Unexpected arrow \"=>\" after pipeline body; arrow function in pipeline body must be parenthesized.',\n  PipelineBodySequenceExpression:\n    \"Pipeline body may not be a comma-separated sequence expression.\",\n  PipelineHeadSequenceExpression:\n    \"Pipeline head should not be a comma-separated sequence expression.\",\n  PipelineTopicUnused:\n    \"Pipeline is in topic style but does not use topic reference.\",\n  PrimaryTopicNotAllowed:\n    \"Topic reference was used in a lexical context without topic binding.\",\n  PrimaryTopicRequiresSmartPipeline:\n    'Topic reference is used, but the pipelineOperator plugin was not passed a \"proposal\": \"hack\" or \"smart\" option.',\n} satisfies ParseErrorTemplates;\n", "import { Position } from \"./util/location.ts\";\n\ntype SyntaxPlugin =\n  | \"flow\"\n  | \"typescript\"\n  | \"jsx\"\n  | \"pipelineOperator\"\n  | \"placeholders\";\n\ntype ParseErrorCode =\n  | \"BABEL_PARSER_SYNTAX_ERROR\"\n  | \"BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED\";\n\n// Babel uses \"normal\" SyntaxErrors for it's errors, but adds some extra\n// functionality. This functionality is defined in the\n// `ParseErrorSpecification` interface below. We may choose to change to someday\n// give our errors their own full-blown class, but until then this allow us to\n// keep all the desirable properties of SyntaxErrors (like their name in stack\n// traces, etc.), and also allows us to punt on any publicly facing\n// class-hierarchy decisions until Babel 8.\ninterface ParseErrorSpecification<ErrorDetails> {\n  // Look, these *could* be readonly, but then Flow complains when we initially\n  // set them. We could do a whole dance and make a special interface that's not\n  // readonly for when we create the error, then cast it to the readonly\n  // interface for public use, but the previous implementation didn't have them\n  // as readonly, so let's just not worry about it for now.\n  code: ParseErrorCode;\n  reasonCode: string;\n  syntaxPlugin?: SyntaxPlugin;\n  missingPlugin?: string | string[];\n  loc: Position;\n  details: ErrorDetails;\n\n  // We should consider removing this as it now just contains the same\n  // information as `loc.index`.\n  pos: number;\n}\n\nexport type ParseError<ErrorDetails> = SyntaxError &\n  ParseErrorSpecification<ErrorDetails>;\n\n// By `ParseErrorConstructor`, we mean something like the new-less style\n// `ErrorConstructor`[1], since `ParseError`'s are not themselves actually\n// separate classes from `SyntaxError`'s.\n//\n// 1. https://github.com/microsoft/TypeScript/blob/v4.5.5/lib/lib.es5.d.ts#L1027\nexport type ParseErrorConstructor<ErrorDetails> = (\n  loc: Position,\n  details: ErrorDetails,\n) => ParseError<ErrorDetails>;\n\ntype ToMessage<ErrorDetails> = (self: ErrorDetails) => string;\n\ntype ParseErrorCredentials<ErrorDetails> = {\n  code: string;\n  reasonCode: string;\n  syntaxPlugin?: SyntaxPlugin;\n  toMessage: ToMessage<ErrorDetails>;\n};\n\nfunction defineHidden(obj: object, key: string, value: unknown) {\n  Object.defineProperty(obj, key, {\n    enumerable: false,\n    configurable: true,\n    value,\n  });\n}\n\nfunction toParseErrorConstructor<ErrorDetails extends object>({\n  toMessage,\n  code,\n  reasonCode,\n  syntaxPlugin,\n}: ParseErrorCredentials<ErrorDetails>): ParseErrorConstructor<ErrorDetails> {\n  const hasMissingPlugin =\n    reasonCode === \"MissingPlugin\" || reasonCode === \"MissingOneOfPlugins\";\n  return function constructor(loc: Position, details: ErrorDetails) {\n    const error: ParseError<ErrorDetails> = new SyntaxError() as any;\n\n    error.code = code as ParseErrorCode;\n    error.reasonCode = reasonCode;\n    error.loc = loc;\n    error.pos = loc.index;\n\n    error.syntaxPlugin = syntaxPlugin;\n    if (hasMissingPlugin) {\n      error.missingPlugin = (details as any).missingPlugin;\n    }\n\n    type Overrides = {\n      loc?: Position;\n      details?: ErrorDetails;\n    };\n    defineHidden(error, \"clone\", function clone(overrides: Overrides = {}) {\n      const { line, column, index } = overrides.loc ?? loc;\n      return constructor(new Position(line, column, index), {\n        ...details,\n        ...overrides.details,\n      });\n    });\n\n    defineHidden(error, \"details\", details);\n\n    Object.defineProperty(error, \"message\", {\n      configurable: true,\n      get(this: ParseError<ErrorDetails>): string {\n        const message = `${toMessage(details)} (${loc.line}:${loc.column})`;\n        this.message = message;\n        return message;\n      },\n      set(value: string) {\n        Object.defineProperty(this, \"message\", { value, writable: true });\n      },\n    });\n\n    return error;\n  };\n}\n\ntype ParseErrorTemplate =\n  | string\n  | ToMessage<any>\n  | { message: string | ToMessage<any>; code?: ParseErrorCode };\n\nexport type ParseErrorTemplates = { [reasonCode: string]: ParseErrorTemplate };\n\n// This is the templated form of `ParseErrorEnum`.\n//\n// Note: We could factor out the return type calculation into something like\n// `ParseErrorConstructor<T extends ParseErrorTemplates>`, and then we could\n// reuse it in the non-templated form of `ParseErrorEnum`, but TypeScript\n// doesn't seem to drill down that far when showing you the computed type of\n// an object in an editor, so we'll leave it inlined for now.\nexport function ParseErrorEnum(a: TemplateStringsArray): <\n  T extends ParseErrorTemplates,\n>(\n  parseErrorTemplates: T,\n) => {\n  [K in keyof T]: ParseErrorConstructor<\n    T[K] extends { message: string | ToMessage<any> }\n      ? T[K][\"message\"] extends ToMessage<any>\n        ? Parameters<T[K][\"message\"]>[0]\n        : object\n      : T[K] extends ToMessage<any>\n        ? Parameters<T[K]>[0]\n        : object\n  >;\n};\n\nexport function ParseErrorEnum<T extends ParseErrorTemplates>(\n  parseErrorTemplates: T,\n  syntaxPlugin?: SyntaxPlugin,\n): {\n  [K in keyof T]: ParseErrorConstructor<\n    T[K] extends { message: string | ToMessage<any> }\n      ? T[K][\"message\"] extends ToMessage<any>\n        ? Parameters<T[K][\"message\"]>[0]\n        : object\n      : T[K] extends ToMessage<any>\n        ? Parameters<T[K]>[0]\n        : object\n  >;\n};\n\n// You call `ParseErrorEnum` with a mapping from `ReasonCode`'s to either:\n//\n// 1. a static error message,\n// 2. `toMessage` functions that define additional necessary `details` needed by\n//    the `ParseError`, or\n// 3. Objects that contain a `message` of one of the above and overridden `code`\n//    and/or `reasonCode`:\n//\n// ParseErrorEnum `optionalSyntaxPlugin` ({\n//   ErrorWithStaticMessage: \"message\",\n//   ErrorWithDynamicMessage: ({ type } : { type: string }) => `${type}`),\n//   ErrorWithOverriddenCodeAndOrReasonCode: {\n//     message: ({ type }: { type: string }) => `${type}`),\n//     code: \"AN_ERROR_CODE\",\n//     ...(BABEL_8_BREAKING ? { } : { reasonCode: \"CustomErrorReasonCode\" })\n//   }\n// });\n//\nexport function ParseErrorEnum(\n  argument: TemplateStringsArray | ParseErrorTemplates,\n  syntaxPlugin?: SyntaxPlugin,\n) {\n  // If the first parameter is an array, that means we were called with a tagged\n  // template literal. Extract the syntaxPlugin from this, and call again in\n  // the \"normalized\" form.\n  if (Array.isArray(argument)) {\n    return (parseErrorTemplates: ParseErrorTemplates) =>\n      ParseErrorEnum(parseErrorTemplates, argument[0]);\n  }\n\n  const ParseErrorConstructors = {} as Record<\n    string,\n    ParseErrorConstructor<unknown>\n  >;\n\n  for (const reasonCode of Object.keys(argument)) {\n    const template = (argument as ParseErrorTemplates)[reasonCode];\n    const { message, ...rest } =\n      typeof template === \"string\"\n        ? { message: () => template }\n        : typeof template === \"function\"\n          ? { message: template }\n          : template;\n    const toMessage = typeof message === \"string\" ? () => message : message;\n\n    ParseErrorConstructors[reasonCode] = toParseErrorConstructor({\n      code: \"BABEL_PARSER_SYNTAX_ERROR\",\n      reasonCode,\n      toMessage,\n      ...(syntaxPlugin ? { syntaxPlugin } : {}),\n      ...rest,\n    });\n  }\n\n  return ParseErrorConstructors;\n}\n\nimport ModuleErrors from \"./parse-error/module-errors.ts\";\nimport StandardErrors from \"./parse-error/standard-errors.ts\";\nimport StrictModeErrors from \"./parse-error/strict-mode-errors.ts\";\nimport PipelineOperatorErrors from \"./parse-error/pipeline-operator-errors.ts\";\n\nexport const Errors = {\n  ...ParseErrorEnum(ModuleErrors),\n  ...ParseErrorEnum(StandardErrors),\n  ...ParseErrorEnum(StrictModeErrors),\n  ...ParseErrorEnum`pipelineOperator`(PipelineOperatorErrors),\n};\n\nexport type { LValAncestor } from \"./parse-error/standard-errors.ts\";\n", "import type { TokenType } from \"../tokenizer/types.ts\";\nimport type Parser from \"../parser/index.ts\";\nimport type { ExpressionErrors } from \"../parser/util.ts\";\nimport type * as N from \"../types.ts\";\nimport type { Node as NodeType, NodeBase, File } from \"../types.ts\";\nimport type { Position } from \"../util/location.ts\";\nimport { Errors } from \"../parse-error.ts\";\nimport type { Undone } from \"../parser/node.ts\";\nimport type { BindingFlag } from \"../util/scopeflags.ts\";\n\nconst { defineProperty } = Object;\nconst toUnenumerable = (object: any, key: string) => {\n  if (object) {\n    defineProperty(object, key, { enumerable: false, value: object[key] });\n  }\n};\n\nfunction toESTreeLocation(node: any) {\n  toUnenumerable(node.loc.start, \"index\");\n  toUnenumerable(node.loc.end, \"index\");\n\n  return node;\n}\n\nexport default (superClass: typeof Parser) =>\n  class ESTreeParserMixin extends superClass implements Parser {\n    parse(): File {\n      const file = toESTreeLocation(super.parse());\n\n      if (this.options.tokens) {\n        file.tokens = file.tokens.map(toESTreeLocation);\n      }\n\n      return file;\n    }\n\n    // @ts-expect-error ESTree plugin changes node types\n    parseRegExpLiteral({ pattern, flags }): N.EstreeRegExpLiteral {\n      let regex: RegExp | null = null;\n      try {\n        regex = new RegExp(pattern, flags);\n      } catch (_) {\n        // In environments that don't support these flags value will\n        // be null as the regex can't be represented natively.\n      }\n      const node = this.estreeParseLiteral<N.EstreeRegExpLiteral>(regex);\n      node.regex = { pattern, flags };\n\n      return node;\n    }\n\n    // @ts-expect-error ESTree plugin changes node types\n    parseBigIntLiteral(value: any): N.Node {\n      // https://github.com/estree/estree/blob/master/es2020.md#bigintliteral\n      let bigInt: bigint | null;\n      try {\n        bigInt = BigInt(value);\n      } catch {\n        bigInt = null;\n      }\n      const node = this.estreeParseLiteral<N.EstreeBigIntLiteral>(bigInt);\n      node.bigint = String(node.value || value);\n\n      return node;\n    }\n\n    // @ts-expect-error ESTree plugin changes node types\n    parseDecimalLiteral(value: any): N.Node {\n      // https://github.com/estree/estree/blob/master/experimental/decimal.md\n      // todo: use BigDecimal when node supports it.\n      const decimal: null = null;\n      const node = this.estreeParseLiteral(decimal);\n      node.decimal = String(node.value || value);\n\n      return node;\n    }\n\n    estreeParseLiteral<T extends N.EstreeLiteral>(value: any) {\n      // @ts-expect-error ESTree plugin changes node types\n      return this.parseLiteral<T>(value, \"Literal\");\n    }\n\n    // @ts-expect-error ESTree plugin changes node types\n    parseStringLiteral(value: any): N.Node {\n      return this.estreeParseLiteral(value);\n    }\n\n    parseNumericLiteral(value: any): any {\n      return this.estreeParseLiteral(value);\n    }\n\n    // @ts-expect-error ESTree plugin changes node types\n    parseNullLiteral(): N.Node {\n      return this.estreeParseLiteral(null);\n    }\n\n    parseBooleanLiteral(value: boolean): N.BooleanLiteral {\n      // @ts-expect-error ESTree plugin changes node types\n      return this.estreeParseLiteral(value);\n    }\n\n    // Cast a Directive to an ExpressionStatement. Mutates the input Directive.\n    directiveToStmt(directive: N.Directive): N.ExpressionStatement {\n      const expression = directive.value as any as N.EstreeLiteral;\n      delete directive.value;\n\n      expression.type = \"Literal\";\n      // @ts-expect-error N.EstreeLiteral.raw is not defined.\n      expression.raw = expression.extra.raw;\n      expression.value = expression.extra.expressionValue;\n\n      const stmt = directive as any as N.ExpressionStatement;\n      stmt.type = \"ExpressionStatement\";\n      stmt.expression = expression;\n      // @ts-expect-error N.ExpressionStatement.directive is not defined\n      stmt.directive = expression.extra.rawValue;\n\n      delete expression.extra;\n\n      return stmt;\n    }\n\n    // ==================================\n    // Overrides\n    // ==================================\n\n    initFunction(node: N.BodilessFunctionOrMethodBase, isAsync: boolean): void {\n      super.initFunction(node, isAsync);\n      node.expression = false;\n    }\n\n    checkDeclaration(node: N.Pattern | N.ObjectProperty): void {\n      if (node != null && this.isObjectProperty(node)) {\n        // @ts-expect-error plugin typings\n        this.checkDeclaration((node as unknown as N.EstreeProperty).value);\n      } else {\n        super.checkDeclaration(node);\n      }\n    }\n\n    getObjectOrClassMethodParams(method: N.ObjectMethod | N.ClassMethod) {\n      return (method as unknown as N.EstreeMethodDefinition).value.params;\n    }\n\n    isValidDirective(stmt: N.Statement): boolean {\n      return (\n        stmt.type === \"ExpressionStatement\" &&\n        stmt.expression.type === \"Literal\" &&\n        typeof stmt.expression.value === \"string\" &&\n        !stmt.expression.extra?.parenthesized\n      );\n    }\n\n    parseBlockBody(\n      node: N.BlockStatementLike,\n      allowDirectives: boolean | undefined | null,\n      topLevel: boolean,\n      end: TokenType,\n      afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n    ): void {\n      super.parseBlockBody(\n        node,\n        allowDirectives,\n        topLevel,\n        end,\n        afterBlockParse,\n      );\n\n      const directiveStatements = node.directives.map(d =>\n        this.directiveToStmt(d),\n      );\n      // @ts-expect-error estree plugin typings\n      node.body = directiveStatements.concat(node.body);\n      delete node.directives;\n    }\n\n    pushClassMethod(\n      classBody: N.ClassBody,\n      method: N.ClassMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowsDirectSuper: boolean,\n    ): void {\n      this.parseMethod(\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n        \"ClassMethod\",\n        true,\n      );\n      if (method.typeParameters) {\n        // @ts-expect-error mutate AST types\n        method.value.typeParameters = method.typeParameters;\n        delete method.typeParameters;\n      }\n      classBody.body.push(method);\n    }\n\n    parsePrivateName(): any {\n      const node = super.parsePrivateName();\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return node;\n        }\n      }\n      return this.convertPrivateNameToPrivateIdentifier(node);\n    }\n\n    convertPrivateNameToPrivateIdentifier(\n      node: N.PrivateName,\n    ): N.EstreePrivateIdentifier {\n      const name = super.getPrivateNameSV(node);\n      node = node as any;\n      delete node.id;\n      // @ts-expect-error mutate AST types\n      node.name = name;\n      // @ts-expect-error mutate AST types\n      node.type = \"PrivateIdentifier\";\n      return node as unknown as N.EstreePrivateIdentifier;\n    }\n\n    // @ts-expect-error ESTree plugin changes node types\n    isPrivateName(node: N.Node): node is N.EstreePrivateIdentifier {\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return super.isPrivateName(node);\n        }\n      }\n      return node.type === \"PrivateIdentifier\";\n    }\n\n    // @ts-expect-error ESTree plugin changes node types\n    getPrivateNameSV(node: N.EstreePrivateIdentifier): string {\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return super.getPrivateNameSV(node as unknown as N.PrivateName);\n        }\n      }\n      return node.name;\n    }\n\n    // @ts-expect-error plugin may override interfaces\n    parseLiteral<T extends N.Literal>(value: any, type: T[\"type\"]): T {\n      const node = super.parseLiteral<T>(value, type);\n      // @ts-expect-error mutating AST types\n      node.raw = node.extra.raw;\n      delete node.extra;\n\n      return node;\n    }\n\n    parseFunctionBody(\n      node: N.Function,\n      allowExpression?: boolean | null,\n      isMethod: boolean = false,\n    ): void {\n      super.parseFunctionBody(node, allowExpression, isMethod);\n      node.expression = node.body.type !== \"BlockStatement\";\n    }\n\n    // @ts-expect-error plugin may override interfaces\n    parseMethod<\n      T extends N.ClassPrivateMethod | N.ObjectMethod | N.ClassMethod,\n    >(\n      node: Undone<T>,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowDirectSuper: boolean,\n      type: T[\"type\"],\n      inClassScope: boolean = false,\n    ): N.EstreeMethodDefinition {\n      let funcNode = this.startNode<N.MethodLike>();\n      funcNode.kind = node.kind; // provide kind, so super method correctly sets state\n      funcNode = super.parseMethod(\n        // @ts-expect-error todo(flow->ts)\n        funcNode,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowDirectSuper,\n        type,\n        inClassScope,\n      );\n      // @ts-expect-error mutate AST types\n      funcNode.type = \"FunctionExpression\";\n      delete funcNode.kind;\n      // @ts-expect-error mutate AST types\n      node.value = funcNode;\n      if (type === \"ClassPrivateMethod\") {\n        node.computed = false;\n      }\n      return this.finishNode(\n        // @ts-expect-error cast methods to estree types\n        node as Undone<N.EstreeMethodDefinition>,\n        \"MethodDefinition\",\n      );\n    }\n\n    nameIsConstructor(key: N.Expression | N.PrivateName): boolean {\n      if (key.type === \"Literal\") return key.value === \"constructor\";\n      return super.nameIsConstructor(key);\n    }\n\n    parseClassProperty(...args: [N.ClassProperty]): any {\n      const propertyNode = super.parseClassProperty(...args) as any;\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return propertyNode as N.EstreePropertyDefinition;\n        }\n      }\n      propertyNode.type = \"PropertyDefinition\";\n      return propertyNode as N.EstreePropertyDefinition;\n    }\n\n    parseClassPrivateProperty(...args: [N.ClassPrivateProperty]): any {\n      const propertyNode = super.parseClassPrivateProperty(...args) as any;\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return propertyNode as N.EstreePropertyDefinition;\n        }\n      }\n      propertyNode.type = \"PropertyDefinition\";\n      propertyNode.computed = false;\n      return propertyNode as N.EstreePropertyDefinition;\n    }\n\n    parseObjectMethod(\n      prop: N.ObjectMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isPattern: boolean,\n      isAccessor: boolean,\n    ): N.ObjectMethod | undefined | null {\n      const node: N.EstreeProperty = super.parseObjectMethod(\n        prop,\n        isGenerator,\n        isAsync,\n        isPattern,\n        isAccessor,\n      ) as any;\n\n      if (node) {\n        node.type = \"Property\";\n        if ((node as any as N.ClassMethod).kind === \"method\") {\n          node.kind = \"init\";\n        }\n        node.shorthand = false;\n      }\n\n      return node as any;\n    }\n\n    parseObjectProperty(\n      prop: N.ObjectProperty,\n      startLoc: Position | undefined | null,\n      isPattern: boolean,\n      refExpressionErrors?: ExpressionErrors | null,\n    ): N.ObjectProperty | undefined | null {\n      const node: N.EstreeProperty = super.parseObjectProperty(\n        prop,\n        startLoc,\n        isPattern,\n        refExpressionErrors,\n      ) as any;\n\n      if (node) {\n        node.kind = \"init\";\n        node.type = \"Property\";\n      }\n\n      return node as any;\n    }\n\n    isValidLVal(\n      type: string,\n      isUnparenthesizedInAssign: boolean,\n      binding: BindingFlag,\n    ) {\n      return type === \"Property\"\n        ? \"value\"\n        : super.isValidLVal(type, isUnparenthesizedInAssign, binding);\n    }\n\n    isAssignable(node: N.Node, isBinding?: boolean): boolean {\n      if (node != null && this.isObjectProperty(node)) {\n        return this.isAssignable(node.value, isBinding);\n      }\n      return super.isAssignable(node, isBinding);\n    }\n\n    toAssignable(node: N.Node, isLHS: boolean = false): void {\n      if (node != null && this.isObjectProperty(node)) {\n        const { key, value } = node;\n        if (this.isPrivateName(key)) {\n          this.classScope.usePrivateName(\n            this.getPrivateNameSV(key),\n            key.loc.start,\n          );\n        }\n        this.toAssignable(value, isLHS);\n      } else {\n        super.toAssignable(node, isLHS);\n      }\n    }\n\n    toAssignableObjectExpressionProp(\n      prop: N.Node,\n      isLast: boolean,\n      isLHS: boolean,\n    ) {\n      if (\n        prop.type === \"Property\" &&\n        (prop.kind === \"get\" || prop.kind === \"set\")\n      ) {\n        this.raise(Errors.PatternHasAccessor, prop.key);\n      } else if (prop.type === \"Property\" && prop.method) {\n        this.raise(Errors.PatternHasMethod, prop.key);\n      } else {\n        super.toAssignableObjectExpressionProp(prop, isLast, isLHS);\n      }\n    }\n\n    finishCallExpression<T extends N.CallExpression | N.OptionalCallExpression>(\n      unfinished: Undone<T>,\n      optional: boolean,\n    ): T {\n      const node = super.finishCallExpression(unfinished, optional);\n\n      if (node.callee.type === \"Import\") {\n        (node as N.Node as N.EstreeImportExpression).type = \"ImportExpression\";\n        (node as N.Node as N.EstreeImportExpression).source = node\n          .arguments[0] as N.Expression;\n        if (\n          this.hasPlugin(\"importAttributes\") ||\n          this.hasPlugin(\"importAssertions\")\n        ) {\n          (node as N.Node as N.EstreeImportExpression).options =\n            (node.arguments[1] as N.Expression) ?? null;\n          // compatibility with previous ESTree AST\n          (node as N.Node as N.EstreeImportExpression).attributes =\n            (node.arguments[1] as N.Expression) ?? null;\n        }\n        // arguments isn't optional in the type definition\n        delete node.arguments;\n        // callee isn't optional in the type definition\n        delete node.callee;\n      }\n\n      return node;\n    }\n\n    toReferencedArguments(\n      node:\n        | N.CallExpression\n        | N.OptionalCallExpression\n        | N.EstreeImportExpression,\n      /* isParenthesizedExpr?: boolean, */\n    ) {\n      // ImportExpressions do not have an arguments array.\n      if (node.type === \"ImportExpression\") {\n        return;\n      }\n\n      super.toReferencedArguments(node);\n    }\n\n    parseExport(\n      unfinished: Undone<N.AnyExport>,\n      decorators: N.Decorator[] | null,\n    ) {\n      const exportStartLoc = this.state.lastTokStartLoc;\n      const node = super.parseExport(unfinished, decorators);\n\n      switch (node.type) {\n        case \"ExportAllDeclaration\":\n          // @ts-expect-error mutating AST types\n          node.exported = null;\n          break;\n\n        case \"ExportNamedDeclaration\":\n          if (\n            node.specifiers.length === 1 &&\n            node.specifiers[0].type === \"ExportNamespaceSpecifier\"\n          ) {\n            // @ts-expect-error mutating AST types\n            node.type = \"ExportAllDeclaration\";\n            // @ts-expect-error mutating AST types\n            node.exported = node.specifiers[0].exported;\n            delete node.specifiers;\n          }\n\n        // fallthrough\n        case \"ExportDefaultDeclaration\":\n          {\n            const { declaration } = node;\n            if (\n              declaration?.type === \"ClassDeclaration\" &&\n              declaration.decorators?.length > 0 &&\n              // decorator comes before export\n              declaration.start === node.start\n            ) {\n              this.resetStartLocation(\n                node,\n                // For compatibility with ESLint's keyword-spacing rule, which assumes that an\n                // export declaration must start with export.\n                // https://github.com/babel/babel/issues/15085\n                // Here we reset export declaration's start to be the start of the export token\n                exportStartLoc,\n              );\n            }\n          }\n\n          break;\n      }\n\n      return node;\n    }\n\n    parseSubscript(\n      base: N.Expression,\n      startLoc: Position,\n      noCalls: boolean | undefined | null,\n      state: N.ParseSubscriptState,\n    ): N.Expression {\n      const node = super.parseSubscript(base, startLoc, noCalls, state);\n\n      if (state.optionalChainMember) {\n        // https://github.com/estree/estree/blob/master/es2020.md#chainexpression\n        if (\n          node.type === \"OptionalMemberExpression\" ||\n          node.type === \"OptionalCallExpression\"\n        ) {\n          // strip Optional prefix\n          (node as unknown as N.CallExpression | N.MemberExpression).type =\n            node.type.substring(8) as \"CallExpression\" | \"MemberExpression\";\n        }\n        if (state.stop) {\n          const chain = this.startNodeAtNode<N.EstreeChainExpression>(node);\n          chain.expression = node;\n          return this.finishNode(chain, \"ChainExpression\");\n        }\n      } else if (\n        node.type === \"MemberExpression\" ||\n        node.type === \"CallExpression\"\n      ) {\n        // @ts-expect-error not in the type definitions\n        node.optional = false;\n      }\n\n      return node;\n    }\n\n    isOptionalMemberExpression(node: N.Node) {\n      if (node.type === \"ChainExpression\") {\n        return node.expression.type === \"MemberExpression\";\n      }\n      return super.isOptionalMemberExpression(node);\n    }\n\n    hasPropertyAsPrivateName(node: N.Node): boolean {\n      if (node.type === \"ChainExpression\") {\n        node = node.expression;\n      }\n      return super.hasPropertyAsPrivateName(node);\n    }\n\n    // @ts-expect-error ESTree plugin changes node types\n    isObjectProperty(node: N.Node): node is N.EstreeProperty {\n      return node.type === \"Property\" && node.kind === \"init\" && !node.method;\n    }\n\n    // @ts-expect-error ESTree plugin changes node types\n    isObjectMethod(node: N.Node): node is N.EstreeProperty {\n      return (\n        node.type === \"Property\" &&\n        (node.method || node.kind === \"get\" || node.kind === \"set\")\n      );\n    }\n\n    finishNodeAt<T extends NodeType>(\n      node: Undone<T>,\n      type: T[\"type\"],\n      endLoc: Position,\n    ): T {\n      return toESTreeLocation(super.finishNodeAt(node, type, endLoc));\n    }\n\n    resetStartLocation(node: N.Node, startLoc: Position) {\n      super.resetStartLocation(node, startLoc);\n      toESTreeLocation(node);\n    }\n\n    resetEndLocation(\n      node: NodeBase,\n      endLoc: Position = this.state.lastTokEndLoc,\n    ): void {\n      super.resetEndLocation(node, endLoc);\n      toESTreeLocation(node);\n    }\n  };\n", "// The token context is used in JSX plugin to track\n// jsx tag / jsx text / normal JavaScript expression\n\nexport class TokContext {\n  constructor(token: string, preserveSpace?: boolean) {\n    this.token = token;\n    this.preserveSpace = !!preserveSpace;\n  }\n\n  token: string;\n  preserveSpace: boolean;\n}\n\nconst types: {\n  [key: string]: TokContext;\n} = {\n  brace: new TokContext(\"{\"), // normal JavaScript expression\n  j_oTag: new TokContext(\"<tag\"), // JSX opening tag\n  j_cTag: new TokContext(\"</tag\"), // JSX closing tag\n  j_expr: new TokContext(\"<tag>...</tag>\", true), // JSX expressions\n};\n\nif (!process.env.BABEL_8_BREAKING) {\n  types.template = new TokContext(\"`\", true);\n}\n\nexport { types };\n", "import { types as tc, type TokContext } from \"./context.ts\";\n// ## Token types\n\n// The assignment of fine-grained, information-carrying type objects\n// allows the tokenizer to store the information it has about a\n// token in a way that is very cheap for the parser to look up.\n\n// All token type variables start with an underscore, to make them\n// easy to recognize.\n\n// The `beforeExpr` property is used to disambiguate between 1) binary\n// expression (<) and JSX Tag start (<name>); 2) object literal and JSX\n// texts. It is set on the `updateContext` function in the JSX plugin.\n\n// The `startsExpr` property is used to determine whether an expression\n// may be the \u201Cargument\u201D subexpression of a `yield` expression or\n// `yield` statement. It is set on all token types that may be at the\n// start of a subexpression.\n\n// `isLoop` marks a keyword as starting a loop, which is important\n// to know when parsing a label, in order to allow or disallow\n// continue jumps to that label.\n\nconst beforeExpr = true;\nconst startsExpr = true;\nconst isLoop = true;\nconst isAssign = true;\nconst prefix = true;\nconst postfix = true;\n\ntype TokenOptions = {\n  keyword?: string;\n  beforeExpr?: boolean;\n  startsExpr?: boolean;\n  rightAssociative?: boolean;\n  isLoop?: boolean;\n  isAssign?: boolean;\n  prefix?: boolean;\n  postfix?: boolean;\n  binop?: number | null;\n};\n\n// Internally the tokenizer stores token as a number\nexport type TokenType = number;\n\n// The `ExportedTokenType` is exported via `tokTypes` and accessible\n// when `tokens: true` is enabled. Unlike internal token type, it provides\n// metadata of the tokens.\nexport class ExportedTokenType {\n  label: string;\n  keyword: string | undefined | null;\n  beforeExpr: boolean;\n  startsExpr: boolean;\n  rightAssociative: boolean;\n  isLoop: boolean;\n  isAssign: boolean;\n  prefix: boolean;\n  postfix: boolean;\n  binop: number | undefined | null;\n  // todo(Babel 8): remove updateContext from exposed token layout\n  declare updateContext:\n    | ((context: Array<TokContext>) => void)\n    | undefined\n    | null;\n\n  constructor(label: string, conf: TokenOptions = {}) {\n    this.label = label;\n    this.keyword = conf.keyword;\n    this.beforeExpr = !!conf.beforeExpr;\n    this.startsExpr = !!conf.startsExpr;\n    this.rightAssociative = !!conf.rightAssociative;\n    this.isLoop = !!conf.isLoop;\n    this.isAssign = !!conf.isAssign;\n    this.prefix = !!conf.prefix;\n    this.postfix = !!conf.postfix;\n    this.binop = conf.binop != null ? conf.binop : null;\n    if (!process.env.BABEL_8_BREAKING) {\n      this.updateContext = null;\n    }\n  }\n}\n\n// A map from keyword/keyword-like string value to the token type\nexport const keywords = new Map<string, TokenType>();\n\nfunction createKeyword(name: string, options: TokenOptions = {}): TokenType {\n  options.keyword = name;\n  const token = createToken(name, options);\n  keywords.set(name, token);\n  return token;\n}\n\nfunction createBinop(name: string, binop: number) {\n  return createToken(name, { beforeExpr, binop });\n}\n\nlet tokenTypeCounter = -1;\nexport const tokenTypes: ExportedTokenType[] = [];\nconst tokenLabels: string[] = [];\nconst tokenBinops: number[] = [];\nconst tokenBeforeExprs: boolean[] = [];\nconst tokenStartsExprs: boolean[] = [];\nconst tokenPrefixes: boolean[] = [];\n\nfunction createToken(name: string, options: TokenOptions = {}): TokenType {\n  ++tokenTypeCounter;\n  tokenLabels.push(name);\n  tokenBinops.push(options.binop ?? -1);\n  tokenBeforeExprs.push(options.beforeExpr ?? false);\n  tokenStartsExprs.push(options.startsExpr ?? false);\n  tokenPrefixes.push(options.prefix ?? false);\n  tokenTypes.push(new ExportedTokenType(name, options));\n\n  return tokenTypeCounter;\n}\n\nfunction createKeywordLike(\n  name: string,\n  options: TokenOptions = {},\n): TokenType {\n  ++tokenTypeCounter;\n  keywords.set(name, tokenTypeCounter);\n  tokenLabels.push(name);\n  tokenBinops.push(options.binop ?? -1);\n  tokenBeforeExprs.push(options.beforeExpr ?? false);\n  tokenStartsExprs.push(options.startsExpr ?? false);\n  tokenPrefixes.push(options.prefix ?? false);\n  // In the exported token type, we set the label as \"name\" for backward compatibility with Babel 7\n  tokenTypes.push(new ExportedTokenType(\"name\", options));\n\n  return tokenTypeCounter;\n}\n\n// For performance the token type helpers depend on the following declarations order.\n// When adding new token types, please also check if the token helpers need update.\n\nexport type InternalTokenTypes = typeof tt;\n\nexport const tt = {\n  // Punctuation token types.\n  bracketL: createToken(\"[\", { beforeExpr, startsExpr }),\n  bracketHashL: createToken(\"#[\", { beforeExpr, startsExpr }),\n  bracketBarL: createToken(\"[|\", { beforeExpr, startsExpr }),\n  bracketR: createToken(\"]\"),\n  bracketBarR: createToken(\"|]\"),\n  braceL: createToken(\"{\", { beforeExpr, startsExpr }),\n  braceBarL: createToken(\"{|\", { beforeExpr, startsExpr }),\n  braceHashL: createToken(\"#{\", { beforeExpr, startsExpr }),\n  braceR: createToken(\"}\"),\n  braceBarR: createToken(\"|}\"),\n  parenL: createToken(\"(\", { beforeExpr, startsExpr }),\n  parenR: createToken(\")\"),\n  comma: createToken(\",\", { beforeExpr }),\n  semi: createToken(\";\", { beforeExpr }),\n  colon: createToken(\":\", { beforeExpr }),\n  doubleColon: createToken(\"::\", { beforeExpr }),\n  dot: createToken(\".\"),\n  question: createToken(\"?\", { beforeExpr }),\n  questionDot: createToken(\"?.\"),\n  arrow: createToken(\"=>\", { beforeExpr }),\n  template: createToken(\"template\"),\n  ellipsis: createToken(\"...\", { beforeExpr }),\n  backQuote: createToken(\"`\", { startsExpr }),\n  dollarBraceL: createToken(\"${\", { beforeExpr, startsExpr }),\n  // start: isTemplate\n  templateTail: createToken(\"...`\", { startsExpr }),\n  templateNonTail: createToken(\"...${\", { beforeExpr, startsExpr }),\n  // end: isTemplate\n  at: createToken(\"@\"),\n  hash: createToken(\"#\", { startsExpr }),\n\n  // Special hashbang token.\n  interpreterDirective: createToken(\"#!...\"),\n\n  // Operators. These carry several kinds of properties to help the\n  // parser use them properly (the presence of these properties is\n  // what categorizes them as operators).\n  //\n  // `binop`, when present, specifies that this operator is a binary\n  // operator, and will refer to its precedence.\n  //\n  // `prefix` and `postfix` mark the operator as a prefix or postfix\n  // unary operator.\n  //\n  // `isAssign` marks all of `=`, `+=`, `-=` etcetera, which act as\n  // binary operators with a very low precedence, that should result\n  // in AssignmentExpression nodes.\n\n  // start: isAssign\n  eq: createToken(\"=\", { beforeExpr, isAssign }),\n  assign: createToken(\"_=\", { beforeExpr, isAssign }),\n  slashAssign: createToken(\"_=\", { beforeExpr, isAssign }),\n  // These are only needed to support % and ^ as a Hack-pipe topic token.\n  // When the proposal settles on a token, the others can be merged with\n  // tt.assign.\n  xorAssign: createToken(\"_=\", { beforeExpr, isAssign }),\n  moduloAssign: createToken(\"_=\", { beforeExpr, isAssign }),\n  // end: isAssign\n\n  incDec: createToken(\"++/--\", { prefix, postfix, startsExpr }),\n  bang: createToken(\"!\", { beforeExpr, prefix, startsExpr }),\n  tilde: createToken(\"~\", { beforeExpr, prefix, startsExpr }),\n\n  // More possible topic tokens.\n  // When the proposal settles on a token, at least one of these may be removed.\n  doubleCaret: createToken(\"^^\", { startsExpr }),\n  doubleAt: createToken(\"@@\", { startsExpr }),\n\n  // start: isBinop\n  pipeline: createBinop(\"|>\", 0),\n  nullishCoalescing: createBinop(\"??\", 1),\n  logicalOR: createBinop(\"||\", 1),\n  logicalAND: createBinop(\"&&\", 2),\n  bitwiseOR: createBinop(\"|\", 3),\n  bitwiseXOR: createBinop(\"^\", 4),\n  bitwiseAND: createBinop(\"&\", 5),\n  equality: createBinop(\"==/!=/===/!==\", 6),\n  lt: createBinop(\"</>/<=/>=\", 7),\n  gt: createBinop(\"</>/<=/>=\", 7),\n  relational: createBinop(\"</>/<=/>=\", 7),\n  bitShift: createBinop(\"<</>>/>>>\", 8),\n  bitShiftL: createBinop(\"<</>>/>>>\", 8),\n  bitShiftR: createBinop(\"<</>>/>>>\", 8),\n  plusMin: createToken(\"+/-\", { beforeExpr, binop: 9, prefix, startsExpr }),\n  // startsExpr: required by v8intrinsic plugin\n  modulo: createToken(\"%\", { binop: 10, startsExpr }),\n  // unset `beforeExpr` as it can be `function *`\n  star: createToken(\"*\", { binop: 10 }),\n  slash: createBinop(\"/\", 10),\n  exponent: createToken(\"**\", {\n    beforeExpr,\n    binop: 11,\n    rightAssociative: true,\n  }),\n\n  // Keywords\n  // Don't forget to update packages/babel-helper-validator-identifier/src/keyword.js\n  // when new keywords are added\n  // start: isLiteralPropertyName\n  // start: isKeyword\n  _in: createKeyword(\"in\", { beforeExpr, binop: 7 }),\n  _instanceof: createKeyword(\"instanceof\", { beforeExpr, binop: 7 }),\n  // end: isBinop\n  _break: createKeyword(\"break\"),\n  _case: createKeyword(\"case\", { beforeExpr }),\n  _catch: createKeyword(\"catch\"),\n  _continue: createKeyword(\"continue\"),\n  _debugger: createKeyword(\"debugger\"),\n  _default: createKeyword(\"default\", { beforeExpr }),\n  _else: createKeyword(\"else\", { beforeExpr }),\n  _finally: createKeyword(\"finally\"),\n  _function: createKeyword(\"function\", { startsExpr }),\n  _if: createKeyword(\"if\"),\n  _return: createKeyword(\"return\", { beforeExpr }),\n  _switch: createKeyword(\"switch\"),\n  _throw: createKeyword(\"throw\", { beforeExpr, prefix, startsExpr }),\n  _try: createKeyword(\"try\"),\n  _var: createKeyword(\"var\"),\n  _const: createKeyword(\"const\"),\n  _with: createKeyword(\"with\"),\n  _new: createKeyword(\"new\", { beforeExpr, startsExpr }),\n  _this: createKeyword(\"this\", { startsExpr }),\n  _super: createKeyword(\"super\", { startsExpr }),\n  _class: createKeyword(\"class\", { startsExpr }),\n  _extends: createKeyword(\"extends\", { beforeExpr }),\n  _export: createKeyword(\"export\"),\n  _import: createKeyword(\"import\", { startsExpr }),\n  _null: createKeyword(\"null\", { startsExpr }),\n  _true: createKeyword(\"true\", { startsExpr }),\n  _false: createKeyword(\"false\", { startsExpr }),\n  _typeof: createKeyword(\"typeof\", { beforeExpr, prefix, startsExpr }),\n  _void: createKeyword(\"void\", { beforeExpr, prefix, startsExpr }),\n  _delete: createKeyword(\"delete\", { beforeExpr, prefix, startsExpr }),\n  // start: isLoop\n  _do: createKeyword(\"do\", { isLoop, beforeExpr }),\n  _for: createKeyword(\"for\", { isLoop }),\n  _while: createKeyword(\"while\", { isLoop }),\n  // end: isLoop\n  // end: isKeyword\n\n  // Primary literals\n  // start: isIdentifier\n  _as: createKeywordLike(\"as\", { startsExpr }),\n  _assert: createKeywordLike(\"assert\", { startsExpr }),\n  _async: createKeywordLike(\"async\", { startsExpr }),\n  _await: createKeywordLike(\"await\", { startsExpr }),\n  _defer: createKeywordLike(\"defer\", { startsExpr }),\n  _from: createKeywordLike(\"from\", { startsExpr }),\n  _get: createKeywordLike(\"get\", { startsExpr }),\n  _let: createKeywordLike(\"let\", { startsExpr }),\n  _meta: createKeywordLike(\"meta\", { startsExpr }),\n  _of: createKeywordLike(\"of\", { startsExpr }),\n  _sent: createKeywordLike(\"sent\", { startsExpr }),\n  _set: createKeywordLike(\"set\", { startsExpr }),\n  _source: createKeywordLike(\"source\", { startsExpr }),\n  _static: createKeywordLike(\"static\", { startsExpr }),\n  _using: createKeywordLike(\"using\", { startsExpr }),\n  _yield: createKeywordLike(\"yield\", { startsExpr }),\n\n  // Flow and TypeScript Keywordlike\n  _asserts: createKeywordLike(\"asserts\", { startsExpr }),\n  _checks: createKeywordLike(\"checks\", { startsExpr }),\n  _exports: createKeywordLike(\"exports\", { startsExpr }),\n  _global: createKeywordLike(\"global\", { startsExpr }),\n  _implements: createKeywordLike(\"implements\", { startsExpr }),\n  _intrinsic: createKeywordLike(\"intrinsic\", { startsExpr }),\n  _infer: createKeywordLike(\"infer\", { startsExpr }),\n  _is: createKeywordLike(\"is\", { startsExpr }),\n  _mixins: createKeywordLike(\"mixins\", { startsExpr }),\n  _proto: createKeywordLike(\"proto\", { startsExpr }),\n  _require: createKeywordLike(\"require\", { startsExpr }),\n  _satisfies: createKeywordLike(\"satisfies\", { startsExpr }),\n  // start: isTSTypeOperator\n  _keyof: createKeywordLike(\"keyof\", { startsExpr }),\n  _readonly: createKeywordLike(\"readonly\", { startsExpr }),\n  _unique: createKeywordLike(\"unique\", { startsExpr }),\n  // end: isTSTypeOperator\n  // start: isTSDeclarationStart\n  _abstract: createKeywordLike(\"abstract\", { startsExpr }),\n  _declare: createKeywordLike(\"declare\", { startsExpr }),\n  _enum: createKeywordLike(\"enum\", { startsExpr }),\n  _module: createKeywordLike(\"module\", { startsExpr }),\n  _namespace: createKeywordLike(\"namespace\", { startsExpr }),\n  // start: isFlowInterfaceOrTypeOrOpaque\n  _interface: createKeywordLike(\"interface\", { startsExpr }),\n  _type: createKeywordLike(\"type\", { startsExpr }),\n  // end: isTSDeclarationStart\n  _opaque: createKeywordLike(\"opaque\", { startsExpr }),\n  // end: isFlowInterfaceOrTypeOrOpaque\n  name: createToken(\"name\", { startsExpr }),\n  // end: isIdentifier\n\n  string: createToken(\"string\", { startsExpr }),\n  num: createToken(\"num\", { startsExpr }),\n  bigint: createToken(\"bigint\", { startsExpr }),\n  decimal: createToken(\"decimal\", { startsExpr }),\n  // end: isLiteralPropertyName\n  regexp: createToken(\"regexp\", { startsExpr }),\n  privateName: createToken(\"#name\", { startsExpr }),\n  eof: createToken(\"eof\"),\n\n  // jsx plugin\n  jsxName: createToken(\"jsxName\"),\n  jsxText: createToken(\"jsxText\", { beforeExpr: true }),\n  jsxTagStart: createToken(\"jsxTagStart\", { startsExpr: true }),\n  jsxTagEnd: createToken(\"jsxTagEnd\"),\n\n  // placeholder plugin\n  placeholder: createToken(\"%%\", { startsExpr: true }),\n} as const;\n\nexport function tokenIsIdentifier(token: TokenType): boolean {\n  return token >= tt._as && token <= tt.name;\n}\n\nexport function tokenKeywordOrIdentifierIsKeyword(token: TokenType): boolean {\n  // we can remove the token >= tt._in check when we\n  // know a token is either keyword or identifier\n  return token <= tt._while;\n}\n\nexport function tokenIsKeywordOrIdentifier(token: TokenType): boolean {\n  return token >= tt._in && token <= tt.name;\n}\n\nexport function tokenIsLiteralPropertyName(token: TokenType): boolean {\n  return token >= tt._in && token <= tt.decimal;\n}\n\nexport function tokenComesBeforeExpression(token: TokenType): boolean {\n  return tokenBeforeExprs[token];\n}\n\nexport function tokenCanStartExpression(token: TokenType): boolean {\n  return tokenStartsExprs[token];\n}\n\nexport function tokenIsAssignment(token: TokenType): boolean {\n  return token >= tt.eq && token <= tt.moduloAssign;\n}\n\nexport function tokenIsFlowInterfaceOrTypeOrOpaque(token: TokenType): boolean {\n  return token >= tt._interface && token <= tt._opaque;\n}\n\nexport function tokenIsLoop(token: TokenType): boolean {\n  return token >= tt._do && token <= tt._while;\n}\n\nexport function tokenIsKeyword(token: TokenType): boolean {\n  return token >= tt._in && token <= tt._while;\n}\n\nexport function tokenIsOperator(token: TokenType): boolean {\n  return token >= tt.pipeline && token <= tt._instanceof;\n}\n\nexport function tokenIsPostfix(token: TokenType): boolean {\n  return token === tt.incDec;\n}\n\nexport function tokenIsPrefix(token: TokenType): boolean {\n  return tokenPrefixes[token];\n}\n\nexport function tokenIsTSTypeOperator(token: TokenType): boolean {\n  return token >= tt._keyof && token <= tt._unique;\n}\n\nexport function tokenIsTSDeclarationStart(token: TokenType): boolean {\n  return token >= tt._abstract && token <= tt._type;\n}\n\nexport function tokenLabelName(token: TokenType): string {\n  return tokenLabels[token];\n}\n\nexport function tokenOperatorPrecedence(token: TokenType): number {\n  return tokenBinops[token];\n}\n\nexport function tokenIsBinaryOperator(token: TokenType): boolean {\n  return tokenBinops[token] !== -1;\n}\n\nexport function tokenIsRightAssociative(token: TokenType): boolean {\n  return token === tt.exponent;\n}\n\nexport function tokenIsTemplate(token: TokenType): boolean {\n  return token >= tt.templateTail && token <= tt.templateNonTail;\n}\n\nexport function getExportedToken(token: TokenType): ExportedTokenType {\n  return tokenTypes[token];\n}\n\nexport function isTokenType(obj: any): boolean {\n  return typeof obj === \"number\";\n}\n\nif (!process.env.BABEL_8_BREAKING) {\n  tokenTypes[tt.braceR].updateContext = context => {\n    context.pop();\n  };\n\n  tokenTypes[tt.braceL].updateContext =\n    tokenTypes[tt.braceHashL].updateContext =\n    tokenTypes[tt.dollarBraceL].updateContext =\n      context => {\n        context.push(tc.brace);\n      };\n\n  tokenTypes[tt.backQuote].updateContext = context => {\n    if (context[context.length - 1] === tc.template) {\n      context.pop();\n    } else {\n      context.push(tc.template);\n    }\n  };\n\n  tokenTypes[tt.jsxTagStart].updateContext = context => {\n    context.push(tc.j_expr, tc.j_oTag);\n  };\n}\n", "// We inline this package\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport * as charCodes from \"charcodes\";\n\n// ## Character categories\n\n// Big ugly regular expressions that match characters in the\n// whitespace, identifier, and identifier-start categories. These\n// are only applied when a character is found to actually have a\n// code point between 0x80 and 0xffff.\n// Generated by `scripts/generate-identifier-regex.js`.\n\n/* prettier-ignore */\nlet nonASCIIidentifierStartChars = \"\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u037f\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u052f\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u05d0-\\u05ea\\u05ef-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086a\\u0870-\\u0887\\u0889-\\u088e\\u08a0-\\u08c9\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u09fc\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0af9\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c39\\u0c3d\\u0c58-\\u0c5a\\u0c5d\\u0c60\\u0c61\\u0c80\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cdd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d04-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d54-\\u0d56\\u0d5f-\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e86-\\u0e8a\\u0e8c-\\u0ea3\\u0ea5\\u0ea7-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f5\\u13f8-\\u13fd\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f8\\u1700-\\u1711\\u171f-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1878\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191e\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19b0-\\u19c9\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4c\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1c80-\\u1c88\\u1c90-\\u1cba\\u1cbd-\\u1cbf\\u1ce9-\\u1cec\\u1cee-\\u1cf3\\u1cf5\\u1cf6\\u1cfa\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2118-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309b-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312f\\u3131-\\u318e\\u31a0-\\u31bf\\u31f0-\\u31ff\\u3400-\\u4dbf\\u4e00-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua69d\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua7ca\\ua7d0\\ua7d1\\ua7d3\\ua7d5-\\ua7d9\\ua7f2-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua8fd\\ua8fe\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\ua9e0-\\ua9e4\\ua9e6-\\ua9ef\\ua9fa-\\ua9fe\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa7e-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uab30-\\uab5a\\uab5c-\\uab69\\uab70-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc\";\n/* prettier-ignore */\nlet nonASCIIidentifierChars = \"\\u200c\\u200d\\xb7\\u0300-\\u036f\\u0387\\u0483-\\u0487\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u0610-\\u061a\\u064b-\\u0669\\u0670\\u06d6-\\u06dc\\u06df-\\u06e4\\u06e7\\u06e8\\u06ea-\\u06ed\\u06f0-\\u06f9\\u0711\\u0730-\\u074a\\u07a6-\\u07b0\\u07c0-\\u07c9\\u07eb-\\u07f3\\u07fd\\u0816-\\u0819\\u081b-\\u0823\\u0825-\\u0827\\u0829-\\u082d\\u0859-\\u085b\\u0898-\\u089f\\u08ca-\\u08e1\\u08e3-\\u0903\\u093a-\\u093c\\u093e-\\u094f\\u0951-\\u0957\\u0962\\u0963\\u0966-\\u096f\\u0981-\\u0983\\u09bc\\u09be-\\u09c4\\u09c7\\u09c8\\u09cb-\\u09cd\\u09d7\\u09e2\\u09e3\\u09e6-\\u09ef\\u09fe\\u0a01-\\u0a03\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a66-\\u0a71\\u0a75\\u0a81-\\u0a83\\u0abc\\u0abe-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ae2\\u0ae3\\u0ae6-\\u0aef\\u0afa-\\u0aff\\u0b01-\\u0b03\\u0b3c\\u0b3e-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b55-\\u0b57\\u0b62\\u0b63\\u0b66-\\u0b6f\\u0b82\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd7\\u0be6-\\u0bef\\u0c00-\\u0c04\\u0c3c\\u0c3e-\\u0c44\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c62\\u0c63\\u0c66-\\u0c6f\\u0c81-\\u0c83\\u0cbc\\u0cbe-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0ce2\\u0ce3\\u0ce6-\\u0cef\\u0cf3\\u0d00-\\u0d03\\u0d3b\\u0d3c\\u0d3e-\\u0d44\\u0d46-\\u0d48\\u0d4a-\\u0d4d\\u0d57\\u0d62\\u0d63\\u0d66-\\u0d6f\\u0d81-\\u0d83\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0de6-\\u0def\\u0df2\\u0df3\\u0e31\\u0e34-\\u0e3a\\u0e47-\\u0e4e\\u0e50-\\u0e59\\u0eb1\\u0eb4-\\u0ebc\\u0ec8-\\u0ece\\u0ed0-\\u0ed9\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f3e\\u0f3f\\u0f71-\\u0f84\\u0f86\\u0f87\\u0f8d-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u102b-\\u103e\\u1040-\\u1049\\u1056-\\u1059\\u105e-\\u1060\\u1062-\\u1064\\u1067-\\u106d\\u1071-\\u1074\\u1082-\\u108d\\u108f-\\u109d\\u135d-\\u135f\\u1369-\\u1371\\u1712-\\u1715\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17b4-\\u17d3\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u180f-\\u1819\\u18a9\\u1920-\\u192b\\u1930-\\u193b\\u1946-\\u194f\\u19d0-\\u19da\\u1a17-\\u1a1b\\u1a55-\\u1a5e\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1ab0-\\u1abd\\u1abf-\\u1ace\\u1b00-\\u1b04\\u1b34-\\u1b44\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1b80-\\u1b82\\u1ba1-\\u1bad\\u1bb0-\\u1bb9\\u1be6-\\u1bf3\\u1c24-\\u1c37\\u1c40-\\u1c49\\u1c50-\\u1c59\\u1cd0-\\u1cd2\\u1cd4-\\u1ce8\\u1ced\\u1cf4\\u1cf7-\\u1cf9\\u1dc0-\\u1dff\\u200c\\u200d\\u203f\\u2040\\u2054\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2cef-\\u2cf1\\u2d7f\\u2de0-\\u2dff\\u302a-\\u302f\\u3099\\u309a\\u30fb\\ua620-\\ua629\\ua66f\\ua674-\\ua67d\\ua69e\\ua69f\\ua6f0\\ua6f1\\ua802\\ua806\\ua80b\\ua823-\\ua827\\ua82c\\ua880\\ua881\\ua8b4-\\ua8c5\\ua8d0-\\ua8d9\\ua8e0-\\ua8f1\\ua8ff-\\ua909\\ua926-\\ua92d\\ua947-\\ua953\\ua980-\\ua983\\ua9b3-\\ua9c0\\ua9d0-\\ua9d9\\ua9e5\\ua9f0-\\ua9f9\\uaa29-\\uaa36\\uaa43\\uaa4c\\uaa4d\\uaa50-\\uaa59\\uaa7b-\\uaa7d\\uaab0\\uaab2-\\uaab4\\uaab7\\uaab8\\uaabe\\uaabf\\uaac1\\uaaeb-\\uaaef\\uaaf5\\uaaf6\\uabe3-\\uabea\\uabec\\uabed\\uabf0-\\uabf9\\ufb1e\\ufe00-\\ufe0f\\ufe20-\\ufe2f\\ufe33\\ufe34\\ufe4d-\\ufe4f\\uff10-\\uff19\\uff3f\\uff65\";\n\nconst nonASCIIidentifierStart = new RegExp(\n  \"[\" + nonASCIIidentifierStartChars + \"]\",\n);\nconst nonASCIIidentifier = new RegExp(\n  \"[\" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + \"]\",\n);\n\nnonASCIIidentifierStartChars = nonASCIIidentifierChars = null;\n\n// These are a run-length and offset-encoded representation of the\n// >0xffff code points that are a valid part of identifiers. The\n// offset starts at 0x10000, and each pair of numbers represents an\n// offset to the next range, and then a size of the range. They were\n// generated by `scripts/generate-identifier-regex.js`.\n/* prettier-ignore */\nconst astralIdentifierStartCodes = [0,11,2,25,2,18,2,1,2,14,3,13,35,122,70,52,268,28,4,48,48,31,14,29,6,37,11,29,3,35,5,7,2,4,43,157,19,35,5,35,5,39,9,51,13,10,2,14,2,6,2,1,2,10,2,14,2,6,2,1,68,310,10,21,11,7,25,5,2,41,2,8,70,5,3,0,2,43,2,1,4,0,3,22,11,22,10,30,66,18,2,1,11,21,11,25,71,55,7,1,65,0,16,3,2,2,2,28,43,28,4,28,36,7,2,27,28,53,11,21,11,18,14,17,111,72,56,50,14,50,14,35,349,41,7,1,79,28,11,0,9,21,43,17,47,20,28,22,13,52,58,1,3,0,14,44,33,24,27,35,30,0,3,0,9,34,4,0,13,47,15,3,22,0,2,0,36,17,2,24,20,1,64,6,2,0,2,3,2,14,2,9,8,46,39,7,3,1,3,21,2,6,2,1,2,4,4,0,19,0,13,4,159,52,19,3,21,2,31,47,21,1,2,0,185,46,42,3,37,47,21,0,60,42,14,0,72,26,38,6,186,43,117,63,32,7,3,0,3,7,2,1,2,23,16,0,2,0,95,7,3,38,17,0,2,0,29,0,11,39,8,0,22,0,12,45,20,0,19,72,264,8,2,36,18,0,50,29,113,6,2,1,2,37,22,0,26,5,2,1,2,31,15,0,328,18,16,0,2,12,2,33,125,0,80,921,103,110,18,195,2637,96,16,1071,18,5,4026,582,8634,568,8,30,18,78,18,29,19,47,17,3,32,20,6,18,689,63,129,74,6,0,67,12,65,1,2,0,29,6135,9,1237,43,8,8936,3,2,6,2,1,2,290,16,0,30,2,3,0,15,3,9,395,2309,106,6,12,4,8,8,9,5991,84,2,70,2,1,3,0,3,1,3,3,2,11,2,0,2,6,2,64,2,3,3,7,2,6,2,27,2,3,2,4,2,0,4,6,2,339,3,24,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,7,1845,30,7,5,262,61,147,44,11,6,17,0,322,29,19,43,485,27,757,6,2,3,2,1,2,14,2,196,60,67,8,0,1205,3,2,26,2,1,2,0,3,0,2,9,2,3,2,0,2,0,7,0,5,0,2,0,2,0,2,2,2,1,2,0,3,0,2,0,2,0,2,0,2,0,2,1,2,0,3,3,2,6,2,3,2,3,2,0,2,9,2,16,6,2,2,4,2,16,4421,42719,33,4153,7,221,3,5761,15,7472,16,621,2467,541,1507,4938,6,4191];\n/* prettier-ignore */\nconst astralIdentifierCodes = [509,0,227,0,150,4,294,9,1368,2,2,1,6,3,41,2,5,0,166,1,574,3,9,9,370,1,81,2,71,10,50,3,123,2,54,14,32,10,3,1,11,3,46,10,8,0,46,9,7,2,37,13,2,9,6,1,45,0,13,2,49,13,9,3,2,11,83,11,7,0,3,0,158,11,6,9,7,3,56,1,2,6,3,1,3,2,10,0,11,1,3,6,4,4,193,17,10,9,5,0,82,19,13,9,214,6,3,8,28,1,83,16,16,9,82,12,9,9,84,14,5,9,243,14,166,9,71,5,2,1,3,3,2,0,2,1,13,9,120,6,3,6,4,0,29,9,41,6,2,3,9,0,10,10,47,15,406,7,2,7,17,9,57,21,2,13,123,5,4,0,2,1,2,6,2,0,9,9,49,4,2,1,2,4,9,9,330,3,10,1,2,0,49,6,4,4,14,9,5351,0,7,14,13835,9,87,9,39,4,60,6,26,9,1014,0,2,54,8,3,82,0,12,1,19628,1,4706,45,3,22,543,4,4,5,9,7,3,6,31,3,149,2,1418,49,513,54,5,49,9,0,15,0,23,4,2,14,1361,6,2,16,3,6,2,1,2,4,101,0,161,6,10,9,357,0,62,13,499,13,983,6,110,6,6,9,4759,9,787719,239];\n\n// This has a complexity linear to the value of the code. The\n// assumption is that looking up astral identifier characters is\n// rare.\nfunction isInAstralSet(code: number, set: readonly number[]): boolean {\n  let pos = 0x10000;\n  for (let i = 0, length = set.length; i < length; i += 2) {\n    pos += set[i];\n    if (pos > code) return false;\n\n    pos += set[i + 1];\n    if (pos >= code) return true;\n  }\n  return false;\n}\n\n// Test whether a given character code starts an identifier.\n\nexport function isIdentifierStart(code: number): boolean {\n  if (code < charCodes.uppercaseA) return code === charCodes.dollarSign;\n  if (code <= charCodes.uppercaseZ) return true;\n  if (code < charCodes.lowercaseA) return code === charCodes.underscore;\n  if (code <= charCodes.lowercaseZ) return true;\n  if (code <= 0xffff) {\n    return (\n      code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code))\n    );\n  }\n  return isInAstralSet(code, astralIdentifierStartCodes);\n}\n\n// Test whether a given character is part of an identifier.\n\nexport function isIdentifierChar(code: number): boolean {\n  if (code < charCodes.digit0) return code === charCodes.dollarSign;\n  if (code < charCodes.colon) return true;\n  if (code < charCodes.uppercaseA) return false;\n  if (code <= charCodes.uppercaseZ) return true;\n  if (code < charCodes.lowercaseA) return code === charCodes.underscore;\n  if (code <= charCodes.lowercaseZ) return true;\n  if (code <= 0xffff) {\n    return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code));\n  }\n  return (\n    isInAstralSet(code, astralIdentifierStartCodes) ||\n    isInAstralSet(code, astralIdentifierCodes)\n  );\n}\n\n// Test whether a given string is a valid identifier name\n\nexport function isIdentifierName(name: string): boolean {\n  let isFirst = true;\n  for (let i = 0; i < name.length; i++) {\n    // The implementation is based on\n    // https://source.chromium.org/chromium/chromium/src/+/master:v8/src/builtins/builtins-string-gen.cc;l=1455;drc=221e331b49dfefadbc6fa40b0c68e6f97606d0b3;bpv=0;bpt=1\n    // We reimplement `codePointAt` because `codePointAt` is a V8 builtin which is not inlined by TurboFan (as of M91)\n    // since `name` is mostly ASCII, an inlined `charCodeAt` wins here\n    let cp = name.charCodeAt(i);\n    if ((cp & 0xfc00) === 0xd800 && i + 1 < name.length) {\n      const trail = name.charCodeAt(++i);\n      if ((trail & 0xfc00) === 0xdc00) {\n        cp = 0x10000 + ((cp & 0x3ff) << 10) + (trail & 0x3ff);\n      }\n    }\n    if (isFirst) {\n      isFirst = false;\n      if (!isIdentifierStart(cp)) {\n        return false;\n      }\n    } else if (!isIdentifierChar(cp)) {\n      return false;\n    }\n  }\n  return !isFirst;\n}\n", "const reservedWords = {\n  keyword: [\n    \"break\",\n    \"case\",\n    \"catch\",\n    \"continue\",\n    \"debugger\",\n    \"default\",\n    \"do\",\n    \"else\",\n    \"finally\",\n    \"for\",\n    \"function\",\n    \"if\",\n    \"return\",\n    \"switch\",\n    \"throw\",\n    \"try\",\n    \"var\",\n    \"const\",\n    \"while\",\n    \"with\",\n    \"new\",\n    \"this\",\n    \"super\",\n    \"class\",\n    \"extends\",\n    \"export\",\n    \"import\",\n    \"null\",\n    \"true\",\n    \"false\",\n    \"in\",\n    \"instanceof\",\n    \"typeof\",\n    \"void\",\n    \"delete\",\n  ],\n  strict: [\n    \"implements\",\n    \"interface\",\n    \"let\",\n    \"package\",\n    \"private\",\n    \"protected\",\n    \"public\",\n    \"static\",\n    \"yield\",\n  ],\n  strictBind: [\"eval\", \"arguments\"],\n};\nconst keywords = new Set(reservedWords.keyword);\nconst reservedWordsStrictSet = new Set(reservedWords.strict);\nconst reservedWordsStrictBindSet = new Set(reservedWords.strictBind);\n\n/**\n * Checks if word is a reserved word in non-strict mode\n */\nexport function isReservedWord(word: string, inModule: boolean): boolean {\n  return (inModule && word === \"await\") || word === \"enum\";\n}\n\n/**\n * Checks if word is a reserved word in non-binding strict mode\n *\n * Includes non-strict reserved words\n */\nexport function isStrictReservedWord(word: string, inModule: boolean): boolean {\n  return isReservedWord(word, inModule) || reservedWordsStrictSet.has(word);\n}\n\n/**\n * Checks if word is a reserved word in binding strict mode, but it is allowed as\n * a normal identifier.\n */\nexport function isStrictBindOnlyReservedWord(word: string): boolean {\n  return reservedWordsStrictBindSet.has(word);\n}\n\n/**\n * Checks if word is a reserved word in binding strict mode\n *\n * Includes non-strict reserved words and non-binding strict reserved words\n */\nexport function isStrictBindReservedWord(\n  word: string,\n  inModule: boolean,\n): boolean {\n  return (\n    isStrictReservedWord(word, inModule) || isStrictBindOnlyReservedWord(word)\n  );\n}\n\nexport function isKeyword(word: string): boolean {\n  return keywords.has(word);\n}\n", "import * as charCodes from \"charcodes\";\nimport { isIdentifierStart } from \"@babel/helper-validator-identifier\";\n\nexport {\n  isIdentifierStart,\n  isIdentifierChar,\n  isReservedWord,\n  isStrictBindOnlyReservedWord,\n  isStrictBindReservedWord,\n  isStrictReservedWord,\n  isKeyword,\n} from \"@babel/helper-validator-identifier\";\n\nexport const keywordRelationalOperator = /^in(stanceof)?$/;\n\n// Test whether a current state character code and next character code is @\n\nexport function isIteratorStart(\n  current: number,\n  next: number,\n  next2: number,\n): boolean {\n  return (\n    current === charCodes.atSign &&\n    next === charCodes.atSign &&\n    isIdentifierStart(next2)\n  );\n}\n\n// This is the comprehensive set of JavaScript reserved words\n// If a word is in this set, it could be a reserved word,\n// depending on sourceType/strictMode/binding info. In other words\n// if a word is not in this set, it is not a reserved word under\n// any circumstance.\nconst reservedWordLikeSet = new Set([\n  \"break\",\n  \"case\",\n  \"catch\",\n  \"continue\",\n  \"debugger\",\n  \"default\",\n  \"do\",\n  \"else\",\n  \"finally\",\n  \"for\",\n  \"function\",\n  \"if\",\n  \"return\",\n  \"switch\",\n  \"throw\",\n  \"try\",\n  \"var\",\n  \"const\",\n  \"while\",\n  \"with\",\n  \"new\",\n  \"this\",\n  \"super\",\n  \"class\",\n  \"extends\",\n  \"export\",\n  \"import\",\n  \"null\",\n  \"true\",\n  \"false\",\n  \"in\",\n  \"instanceof\",\n  \"typeof\",\n  \"void\",\n  \"delete\",\n  // strict\n  \"implements\",\n  \"interface\",\n  \"let\",\n  \"package\",\n  \"private\",\n  \"protected\",\n  \"public\",\n  \"static\",\n  \"yield\",\n  // strictBind\n  \"eval\",\n  \"arguments\",\n  // reservedWorkLike\n  \"enum\",\n  \"await\",\n]);\n\nexport function canBeReservedWord(word: string): boolean {\n  return reservedWordLikeSet.has(word);\n}\n", "import { ScopeFlag, BindingFlag } from \"./scopeflags.ts\";\nimport type { Position } from \"./location.ts\";\nimport type * as N from \"../types.ts\";\nimport { Errors } from \"../parse-error.ts\";\nimport type Tokenizer from \"../tokenizer/index.ts\";\n\nexport const enum NameType {\n  // var-declared names in the current lexical scope\n  Var = 1 << 0,\n  // lexically-declared names in the current lexical scope\n  Lexical = 1 << 1,\n  // lexically-declared FunctionDeclaration names in the current lexical scope\n  Function = 1 << 2,\n}\n\n// Start an AST node, attaching a start offset.\nexport class Scope {\n  flags: ScopeFlag = 0;\n  names: Map<string, NameType> = new Map();\n  firstLexicalName = \"\";\n\n  constructor(flags: ScopeFlag) {\n    this.flags = flags;\n  }\n}\n\n// The functions in this module keep track of declared variables in the\n// current scope in order to detect duplicate variable names.\nexport default class ScopeHandler<IScope extends Scope = Scope> {\n  parser: Tokenizer;\n  scopeStack: Array<IScope> = [];\n  inModule: boolean;\n  undefinedExports: Map<string, Position> = new Map();\n\n  constructor(parser: Tokenizer, inModule: boolean) {\n    this.parser = parser;\n    this.inModule = inModule;\n  }\n\n  get inTopLevel() {\n    return (this.currentScope().flags & ScopeFlag.PROGRAM) > 0;\n  }\n  get inFunction() {\n    return (this.currentVarScopeFlags() & ScopeFlag.FUNCTION) > 0;\n  }\n  get allowSuper() {\n    return (this.currentThisScopeFlags() & ScopeFlag.SUPER) > 0;\n  }\n  get allowDirectSuper() {\n    return (this.currentThisScopeFlags() & ScopeFlag.DIRECT_SUPER) > 0;\n  }\n  get inClass() {\n    return (this.currentThisScopeFlags() & ScopeFlag.CLASS) > 0;\n  }\n  get inClassAndNotInNonArrowFunction() {\n    const flags = this.currentThisScopeFlags();\n    return (flags & ScopeFlag.CLASS) > 0 && (flags & ScopeFlag.FUNCTION) === 0;\n  }\n  get inStaticBlock() {\n    for (let i = this.scopeStack.length - 1; ; i--) {\n      const { flags } = this.scopeStack[i];\n      if (flags & ScopeFlag.STATIC_BLOCK) {\n        return true;\n      }\n      if (flags & (ScopeFlag.VAR | ScopeFlag.CLASS)) {\n        // function body, module body, class property initializers\n        return false;\n      }\n    }\n  }\n  get inNonArrowFunction() {\n    return (this.currentThisScopeFlags() & ScopeFlag.FUNCTION) > 0;\n  }\n  get treatFunctionsAsVar() {\n    return this.treatFunctionsAsVarInScope(this.currentScope());\n  }\n\n  createScope(flags: ScopeFlag): Scope {\n    return new Scope(flags);\n  }\n\n  enter(flags: ScopeFlag) {\n    /*:: +createScope: (flags:ScopeFlag) => IScope; */\n    // @ts-expect-error This method will be overwritten by subclasses\n    this.scopeStack.push(this.createScope(flags));\n  }\n\n  exit(): ScopeFlag {\n    const scope = this.scopeStack.pop();\n    return scope.flags;\n  }\n\n  // The spec says:\n  // > At the top level of a function, or script, function declarations are\n  // > treated like var declarations rather than like lexical declarations.\n  treatFunctionsAsVarInScope(scope: IScope): boolean {\n    return !!(\n      scope.flags & (ScopeFlag.FUNCTION | ScopeFlag.STATIC_BLOCK) ||\n      (!this.parser.inModule && scope.flags & ScopeFlag.PROGRAM)\n    );\n  }\n\n  declareName(name: string, bindingType: BindingFlag, loc: Position) {\n    let scope = this.currentScope();\n    if (\n      bindingType & BindingFlag.SCOPE_LEXICAL ||\n      bindingType & BindingFlag.SCOPE_FUNCTION\n    ) {\n      this.checkRedeclarationInScope(scope, name, bindingType, loc);\n\n      let type = scope.names.get(name) || 0;\n\n      if (bindingType & BindingFlag.SCOPE_FUNCTION) {\n        type = type | NameType.Function;\n      } else {\n        if (!scope.firstLexicalName) {\n          scope.firstLexicalName = name;\n        }\n        type = type | NameType.Lexical;\n      }\n\n      scope.names.set(name, type);\n\n      if (bindingType & BindingFlag.SCOPE_LEXICAL) {\n        this.maybeExportDefined(scope, name);\n      }\n    } else if (bindingType & BindingFlag.SCOPE_VAR) {\n      for (let i = this.scopeStack.length - 1; i >= 0; --i) {\n        scope = this.scopeStack[i];\n        this.checkRedeclarationInScope(scope, name, bindingType, loc);\n        scope.names.set(name, (scope.names.get(name) || 0) | NameType.Var);\n        this.maybeExportDefined(scope, name);\n\n        if (scope.flags & ScopeFlag.VAR) break;\n      }\n    }\n    if (this.parser.inModule && scope.flags & ScopeFlag.PROGRAM) {\n      this.undefinedExports.delete(name);\n    }\n  }\n\n  maybeExportDefined(scope: IScope, name: string) {\n    if (this.parser.inModule && scope.flags & ScopeFlag.PROGRAM) {\n      this.undefinedExports.delete(name);\n    }\n  }\n\n  checkRedeclarationInScope(\n    scope: IScope,\n    name: string,\n    bindingType: BindingFlag,\n    loc: Position,\n  ) {\n    if (this.isRedeclaredInScope(scope, name, bindingType)) {\n      this.parser.raise(Errors.VarRedeclaration, loc, {\n        identifierName: name,\n      });\n    }\n  }\n\n  isRedeclaredInScope(\n    scope: IScope,\n    name: string,\n    bindingType: BindingFlag,\n  ): boolean {\n    if (!(bindingType & BindingFlag.KIND_VALUE)) return false;\n\n    if (bindingType & BindingFlag.SCOPE_LEXICAL) {\n      return scope.names.has(name);\n    }\n\n    const type = scope.names.get(name);\n\n    if (bindingType & BindingFlag.SCOPE_FUNCTION) {\n      return (\n        (type & NameType.Lexical) > 0 ||\n        (!this.treatFunctionsAsVarInScope(scope) && (type & NameType.Var) > 0)\n      );\n    }\n\n    return (\n      ((type & NameType.Lexical) > 0 &&\n        // Annex B.3.4\n        // https://tc39.es/ecma262/#sec-variablestatements-in-catch-blocks\n        !(\n          scope.flags & ScopeFlag.SIMPLE_CATCH &&\n          scope.firstLexicalName === name\n        )) ||\n      (!this.treatFunctionsAsVarInScope(scope) &&\n        (type & NameType.Function) > 0)\n    );\n  }\n\n  checkLocalExport(id: N.Identifier) {\n    const { name } = id;\n    const topLevelScope = this.scopeStack[0];\n    if (!topLevelScope.names.has(name)) {\n      this.undefinedExports.set(name, id.loc.start);\n    }\n  }\n\n  currentScope(): IScope {\n    return this.scopeStack[this.scopeStack.length - 1];\n  }\n\n  currentVarScopeFlags(): ScopeFlag {\n    for (let i = this.scopeStack.length - 1; ; i--) {\n      const { flags } = this.scopeStack[i];\n      if (flags & ScopeFlag.VAR) {\n        return flags;\n      }\n    }\n  }\n\n  // Could be useful for `arguments`, `this`, `new.target`, `super()`, `super.property`, and `super[property]`.\n  currentThisScopeFlags(): ScopeFlag {\n    for (let i = this.scopeStack.length - 1; ; i--) {\n      const { flags } = this.scopeStack[i];\n      if (\n        flags & (ScopeFlag.VAR | ScopeFlag.CLASS) &&\n        !(flags & ScopeFlag.ARROW)\n      ) {\n        return flags;\n      }\n    }\n  }\n}\n", "import type { Position } from \"../../util/location.ts\";\nimport ScopeHandler, { NameType, Scope } from \"../../util/scope.ts\";\nimport { BindingFlag, type ScopeFlag } from \"../../util/scopeflags.ts\";\nimport type * as N from \"../../types.ts\";\n\n// Reference implementation: https://github.com/facebook/flow/blob/23aeb2a2ef6eb4241ce178fde5d8f17c5f747fb5/src/typing/env.ml#L536-L584\nclass FlowScope extends Scope {\n  // declare function foo(): type;\n  declareFunctions: Set<string> = new Set();\n}\n\nexport default class FlowScopeHandler extends ScopeHandler<FlowScope> {\n  createScope(flags: ScopeFlag): FlowScope {\n    return new FlowScope(flags);\n  }\n\n  declareName(name: string, bindingType: BindingFlag, loc: Position) {\n    const scope = this.currentScope();\n    if (bindingType & BindingFlag.FLAG_FLOW_DECLARE_FN) {\n      this.checkRedeclarationInScope(scope, name, bindingType, loc);\n      this.maybeExportDefined(scope, name);\n      scope.declareFunctions.add(name);\n      return;\n    }\n\n    super.declareName(name, bindingType, loc);\n  }\n\n  isRedeclaredInScope(\n    scope: FlowScope,\n    name: string,\n    bindingType: BindingFlag,\n  ): boolean {\n    if (super.isRedeclaredInScope(scope, name, bindingType)) return true;\n\n    if (\n      bindingType & BindingFlag.FLAG_FLOW_DECLARE_FN &&\n      !scope.declareFunctions.has(name)\n    ) {\n      const type = scope.names.get(name);\n      return (type & NameType.Function) > 0 || (type & NameType.Lexical) > 0;\n    }\n\n    return false;\n  }\n\n  checkLocalExport(id: N.Identifier) {\n    if (!this.scopeStack[0].declareFunctions.has(id.name)) {\n      super.checkLocalExport(id);\n    }\n  }\n}\n", "import type { Options } from \"../options.ts\";\nimport type State from \"../tokenizer/state.ts\";\nimport type { PluginsMap } from \"./index.ts\";\nimport type ScopeHandler from \"../util/scope.ts\";\nimport type ExpressionScopeHandler from \"../util/expression-scope.ts\";\nimport type ClassScopeHandler from \"../util/class-scope.ts\";\nimport type ProductionParameterHandler from \"../util/production-parameter.ts\";\nimport type {\n  ParserPluginWithOptions,\n  PluginConfig,\n  PluginOptions,\n} from \"../typings.ts\";\nimport type * as N from \"../types.ts\";\n\nexport default class BaseParser {\n  // Properties set by constructor in index.js\n  declare options: Options;\n  declare inModule: boolean;\n  declare scope: ScopeHandler<any>;\n  declare classScope: ClassScopeHandler;\n  declare prodParam: ProductionParameterHandler;\n  declare expressionScope: ExpressionScopeHandler;\n  declare plugins: PluginsMap;\n  declare filename: string | undefined | null;\n  // Names of exports store. `default` is stored as a name for both\n  // `export default foo;` and `export { foo as default };`.\n  declare exportedIdentifiers: Set<string>;\n  sawUnambiguousESM: boolean = false;\n  ambiguousScriptDifferentAst: boolean = false;\n\n  // Initialized by Tokenizer\n  declare state: State;\n  // input and length are not in state as they are constant and we do\n  // not want to ever copy them, which happens if state gets cloned\n  declare input: string;\n  declare length: number;\n  // Comment store for Program.comments\n  declare comments: Array<N.Comment>;\n\n  // This method accepts either a string (plugin name) or an array pair\n  // (plugin name and options object). If an options object is given,\n  // then each value is non-recursively checked for identity with that\n  // plugin\u2019s actual option value.\n  hasPlugin(pluginConfig: PluginConfig): boolean {\n    if (typeof pluginConfig === \"string\") {\n      return this.plugins.has(pluginConfig);\n    } else {\n      const [pluginName, pluginOptions] = pluginConfig;\n      if (!this.hasPlugin(pluginName)) {\n        return false;\n      }\n      const actualOptions = this.plugins.get(pluginName);\n      for (const key of Object.keys(\n        pluginOptions,\n      ) as (keyof typeof pluginOptions)[]) {\n        if (actualOptions?.[key] !== pluginOptions[key]) {\n          return false;\n        }\n      }\n      return true;\n    }\n  }\n\n  getPluginOption<\n    PluginName extends ParserPluginWithOptions[0],\n    OptionName extends keyof PluginOptions<PluginName>,\n  >(plugin: PluginName, name: OptionName) {\n    return (this.plugins.get(plugin) as null | PluginOptions<PluginName>)?.[\n      name\n    ];\n  }\n}\n", "/*:: declare var invariant; */\n\nimport BaseParser from \"./base.ts\";\nimport type { Comment, Node, Identifier } from \"../types.ts\";\nimport * as charCodes from \"charcodes\";\nimport type { Undone } from \"./node.ts\";\n\n/**\n * A whitespace token containing comments\n */\nexport type CommentWhitespace = {\n  /**\n   * the start of the whitespace token.\n   */\n  start: number;\n  /**\n   * the end of the whitespace token.\n   */\n  end: number;\n  /**\n   * the containing comments\n   */\n  comments: Array<Comment>;\n  /**\n   * the immediately preceding AST node of the whitespace token\n   */\n  leadingNode: Node | null;\n  /**\n   * the immediately following AST node of the whitespace token\n   */\n  trailingNode: Node | null;\n  /**\n   * the innermost AST node containing the whitespace with minimal size (|end - start|)\n   */\n  containingNode: Node | null;\n};\n\n/**\n * Merge comments with node's trailingComments or assign comments to be\n * trailingComments. New comments will be placed before old comments\n * because the commentStack is enumerated reversely.\n */\nfunction setTrailingComments(node: Undone<Node>, comments: Array<Comment>) {\n  if (node.trailingComments === undefined) {\n    node.trailingComments = comments;\n  } else {\n    node.trailingComments.unshift(...comments);\n  }\n}\n\n/**\n * Merge comments with node's leadingComments or assign comments to be\n * leadingComments. New comments will be placed before old comments\n * because the commentStack is enumerated reversely.\n */\nfunction setLeadingComments(node: Undone<Node>, comments: Array<Comment>) {\n  if (node.leadingComments === undefined) {\n    node.leadingComments = comments;\n  } else {\n    node.leadingComments.unshift(...comments);\n  }\n}\n\n/**\n * Merge comments with node's innerComments or assign comments to be\n * innerComments. New comments will be placed before old comments\n * because the commentStack is enumerated reversely.\n */\nexport function setInnerComments(\n  node: Undone<Node>,\n  comments?: Array<Comment>,\n) {\n  if (node.innerComments === undefined) {\n    node.innerComments = comments;\n  } else {\n    node.innerComments.unshift(...comments);\n  }\n}\n\n/**\n * Given node and elements array, if elements has non-null element,\n * merge comments to its trailingComments, otherwise merge comments\n * to node's innerComments\n */\nfunction adjustInnerComments(\n  node: Undone<Node>,\n  elements: Array<Node>,\n  commentWS: CommentWhitespace,\n) {\n  let lastElement = null;\n  let i = elements.length;\n  while (lastElement === null && i > 0) {\n    lastElement = elements[--i];\n  }\n  if (lastElement === null || lastElement.start > commentWS.start) {\n    setInnerComments(node, commentWS.comments);\n  } else {\n    setTrailingComments(lastElement, commentWS.comments);\n  }\n}\n\nexport default class CommentsParser extends BaseParser {\n  addComment(comment: Comment): void {\n    if (this.filename) comment.loc.filename = this.filename;\n    const { commentsLen } = this.state;\n    if (this.comments.length !== commentsLen) {\n      this.comments.length = commentsLen;\n    }\n    this.comments.push(comment);\n    this.state.commentsLen++;\n  }\n\n  /**\n   * Given a newly created AST node _n_, attach _n_ to a comment whitespace _w_ if applicable\n   * {@see {@link CommentWhitespace}}\n   */\n  processComment(node: Node): void {\n    const { commentStack } = this.state;\n    const commentStackLength = commentStack.length;\n    if (commentStackLength === 0) return;\n    let i = commentStackLength - 1;\n    const lastCommentWS = commentStack[i];\n\n    if (lastCommentWS.start === node.end) {\n      lastCommentWS.leadingNode = node;\n      i--;\n    }\n\n    const { start: nodeStart } = node;\n    // invariant: for all 0 <= j <= i, let c = commentStack[j], c must satisfy c.end < node.end\n    for (; i >= 0; i--) {\n      const commentWS = commentStack[i];\n      const commentEnd = commentWS.end;\n      if (commentEnd > nodeStart) {\n        // by definition of commentWhiteSpace, this implies commentWS.start > nodeStart\n        // so node can be a containingNode candidate. At this time we can finalize the comment\n        // whitespace, because\n        // 1) its leadingNode or trailingNode, if exists, will not change\n        // 2) its containingNode have been assigned and will not change because it is the\n        //    innermost minimal-sized AST node\n        commentWS.containingNode = node;\n        this.finalizeComment(commentWS);\n        commentStack.splice(i, 1);\n      } else {\n        if (commentEnd === nodeStart) {\n          commentWS.trailingNode = node;\n        }\n        // stop the loop when commentEnd <= nodeStart\n        break;\n      }\n    }\n  }\n\n  /**\n   * Assign the comments of comment whitespaces to related AST nodes.\n   * Also adjust innerComments following trailing comma.\n   */\n  finalizeComment(commentWS: CommentWhitespace) {\n    const { comments } = commentWS;\n    if (commentWS.leadingNode !== null || commentWS.trailingNode !== null) {\n      if (commentWS.leadingNode !== null) {\n        setTrailingComments(commentWS.leadingNode, comments);\n      }\n      if (commentWS.trailingNode !== null) {\n        setLeadingComments(commentWS.trailingNode, comments);\n      }\n    } else {\n      /*:: invariant(commentWS.containingNode !== null) */\n      const { containingNode: node, start: commentStart } = commentWS;\n      if (this.input.charCodeAt(commentStart - 1) === charCodes.comma) {\n        // If a commentWhitespace follows a comma and the containingNode allows\n        // list structures with trailing comma, merge it to the trailingComment\n        // of the last non-null list element\n        switch (node.type) {\n          case \"ObjectExpression\":\n          case \"ObjectPattern\":\n          case \"RecordExpression\":\n            adjustInnerComments(node, node.properties, commentWS);\n            break;\n          case \"CallExpression\":\n          case \"OptionalCallExpression\":\n            adjustInnerComments(node, node.arguments, commentWS);\n            break;\n          case \"FunctionDeclaration\":\n          case \"FunctionExpression\":\n          case \"ArrowFunctionExpression\":\n          case \"ObjectMethod\":\n          case \"ClassMethod\":\n          case \"ClassPrivateMethod\":\n            adjustInnerComments(node, node.params, commentWS);\n            break;\n          case \"ArrayExpression\":\n          case \"ArrayPattern\":\n          case \"TupleExpression\":\n            adjustInnerComments(node, node.elements, commentWS);\n            break;\n          case \"ExportNamedDeclaration\":\n          case \"ImportDeclaration\":\n            adjustInnerComments(node, node.specifiers, commentWS);\n            break;\n          default: {\n            setInnerComments(node, comments);\n          }\n        }\n      } else {\n        setInnerComments(node, comments);\n      }\n    }\n  }\n\n  /**\n   * Drains remaining commentStack and applies finalizeComment\n   * to each comment whitespace. Used only in parseExpression\n   * where the top level AST node is _not_ Program\n   * {@see {@link CommentsParser#finalizeComment}}\n   */\n  finalizeRemainingComments() {\n    const { commentStack } = this.state;\n    for (let i = commentStack.length - 1; i >= 0; i--) {\n      this.finalizeComment(commentStack[i]);\n    }\n    this.state.commentStack = [];\n  }\n\n  /* eslint-disable no-irregular-whitespace */\n  /**\n   * Reset previous node trailing comments. Used in object / class\n   * property parsing. We parse `async`, `static`, `set` and `get`\n   * as an identifier but may reinterpret it into an async/static/accessor\n   * method later. In this case the identifier is not part of the AST and we\n   * should sync the knowledge to commentStacks\n   *\n   * For example, when parsing\n   * ```\n   * async /* 1 *\u200B/ function f() {}\n   * ```\n   * the comment whitespace `/* 1 *\u200B/` has leading node Identifier(async). When\n   * we see the function token, we create a Function node and mark `/* 1 *\u200B/` as\n   * inner comments. So `/* 1 *\u200B/` should be detached from the Identifier node.\n   *\n   * @param node the last finished AST node _before_ current token\n   */\n  /* eslint-enable no-irregular-whitespace */\n  resetPreviousNodeTrailingComments(node: Node) {\n    const { commentStack } = this.state;\n    const { length } = commentStack;\n    if (length === 0) return;\n    const commentWS = commentStack[length - 1];\n    if (commentWS.leadingNode === node) {\n      commentWS.leadingNode = null;\n    }\n  }\n\n  /* eslint-disable no-irregular-whitespace */\n  /**\n   * Reset previous node leading comments, assuming that `node` is a\n   * single-token node. Used in import phase modifiers parsing. We parse\n   * `module` in `import module foo from ...` as an identifier but may\n   * reinterpret it into a phase modifier later. In this case the identifier is\n   * not part of the AST and we should sync the knowledge to commentStacks\n   *\n   * For example, when parsing\n   * ```\n   * import /* 1 *\u200B/ module a from \"a\";\n   * ```\n   * the comment whitespace `/* 1 *\u200B/` has trailing node Identifier(module). When\n   * we see that `module` is not a default import binding, we mark `/* 1 *\u200B/` as\n   * inner comments of the ImportDeclaration. So `/* 1 *\u200B/` should be detached from\n   * the Identifier node.\n   *\n   * @param node the last finished AST node _before_ current token\n   */\n  /* eslint-enable no-irregular-whitespace */\n  resetPreviousIdentifierLeadingComments(node: Identifier) {\n    const { commentStack } = this.state;\n    const { length } = commentStack;\n    if (length === 0) return;\n\n    if (commentStack[length - 1].trailingNode === node) {\n      commentStack[length - 1].trailingNode = null;\n    } else if (length >= 2 && commentStack[length - 2].trailingNode === node) {\n      commentStack[length - 2].trailingNode = null;\n    }\n  }\n\n  /**\n   * Attach a node to the comment whitespaces right before/after\n   * the given range.\n   *\n   * This is used to properly attach comments around parenthesized\n   * expressions as leading/trailing comments of the inner expression.\n   */\n  takeSurroundingComments(node: Node, start: number, end: number) {\n    const { commentStack } = this.state;\n    const commentStackLength = commentStack.length;\n    if (commentStackLength === 0) return;\n    let i = commentStackLength - 1;\n\n    for (; i >= 0; i--) {\n      const commentWS = commentStack[i];\n      const commentEnd = commentWS.end;\n      const commentStart = commentWS.start;\n\n      if (commentStart === end) {\n        commentWS.leadingNode = node;\n      } else if (commentEnd === start) {\n        commentWS.trailingNode = node;\n      } else if (commentEnd < start) {\n        break;\n      }\n    }\n  }\n}\n", "import * as charCodes from \"charcodes\";\n\n// Matches a whole line break (where CRLF is considered a single\n// line break). Used to count lines.\nexport const lineBreak = /\\r\\n|[\\r\\n\\u2028\\u2029]/;\nexport const lineBreakG = new RegExp(lineBreak.source, \"g\");\n\n// https://tc39.github.io/ecma262/#sec-line-terminators\nexport function isNewLine(code: number): boolean {\n  switch (code) {\n    case charCodes.lineFeed:\n    case charCodes.carriageReturn:\n    case charCodes.lineSeparator:\n    case charCodes.paragraphSeparator:\n      return true;\n\n    default:\n      return false;\n  }\n}\n\nexport function hasNewLine(input: string, start: number, end: number): boolean {\n  for (let i = start; i < end; i++) {\n    if (isNewLine(input.charCodeAt(i))) {\n      return true;\n    }\n  }\n  return false;\n}\n\nexport const skipWhiteSpace = /(?:\\s|\\/\\/.*|\\/\\*[^]*?\\*\\/)*/g;\n\nexport const skipWhiteSpaceInLine =\n  /(?:[^\\S\\n\\r\\u2028\\u2029]|\\/\\/.*|\\/\\*.*?\\*\\/)*/g;\n\n// https://tc39.github.io/ecma262/#sec-white-space\nexport function isWhitespace(code: number): boolean {\n  switch (code) {\n    case 0x0009: // CHARACTER TABULATION\n    case 0x000b: // LINE TABULATION\n    case 0x000c: // FORM FEED\n    case charCodes.space:\n    case charCodes.nonBreakingSpace:\n    case charCodes.oghamSpaceMark:\n    case 0x2000: // EN QUAD\n    case 0x2001: // EM QUAD\n    case 0x2002: // EN SPACE\n    case 0x2003: // EM SPACE\n    case 0x2004: // THREE-PER-EM SPACE\n    case 0x2005: // FOUR-PER-EM SPACE\n    case 0x2006: // SIX-PER-EM SPACE\n    case 0x2007: // FIGURE SPACE\n    case 0x2008: // PUNCTUATION SPACE\n    case 0x2009: // THIN SPACE\n    case 0x200a: // HAIR SPACE\n    case 0x202f: // NARROW NO-BREAK SPACE\n    case 0x205f: // MEDIUM MATHEMATICAL SPACE\n    case 0x3000: // IDEOGRAPHIC SPACE\n    case 0xfeff: // ZERO WIDTH NO-BREAK SPACE\n      return true;\n\n    default:\n      return false;\n  }\n}\n", "import type { Options } from \"../options.ts\";\nimport type { CommentWhitespace } from \"../parser/comments\";\nimport { Position } from \"../util/location.ts\";\n\nimport { types as ct, type TokContext } from \"./context.ts\";\nimport { tt, type TokenType } from \"./types.ts\";\nimport type { Errors } from \"../parse-error.ts\";\nimport type { ParseError } from \"../parse-error.ts\";\n\nexport type DeferredStrictError =\n  | typeof Errors.StrictNumericEscape\n  | typeof Errors.StrictOctalLiteral;\n\ntype TopicContextState = {\n  // When a topic binding has been currently established,\n  // then this is 1. Otherwise, it is 0. This is forwards compatible\n  // with a future plugin for multiple lexical topics.\n  maxNumOfResolvableTopics: number;\n  // When a topic binding has been currently established, and if that binding\n  // has been used as a topic reference `#`, then this is 0. Otherwise, it is\n  // `null`. This is forwards compatible with a future plugin for multiple\n  // lexical topics.\n  maxTopicIndex: null | 0;\n};\n\nexport const enum LoopLabelKind {\n  Loop = 1,\n  Switch = 2,\n}\n\ndeclare const bit: import(\"../../../../scripts/babel-plugin-bit-decorator/types.d.ts\").BitDecorator<State>;\n\nexport default class State {\n  @bit.storage flags: number;\n\n  @bit accessor strict = false;\n\n  curLine: number;\n  lineStart: number;\n\n  // And, if locations are used, the {line, column} object\n  // corresponding to those offsets\n  startLoc: Position;\n  endLoc: Position;\n\n  init({ strictMode, sourceType, startLine, startColumn }: Options): void {\n    this.strict =\n      strictMode === false\n        ? false\n        : strictMode === true\n          ? true\n          : sourceType === \"module\";\n\n    this.curLine = startLine;\n    this.lineStart = -startColumn;\n    this.startLoc = this.endLoc = new Position(startLine, startColumn, 0);\n  }\n\n  errors: ParseError<any>[] = [];\n\n  // Used to signify the start of a potential arrow function\n  potentialArrowAt: number = -1;\n\n  // Used to signify the start of an expression which looks like a\n  // typed arrow function, but it isn't\n  // e.g. a ? (b) : c => d\n  //          ^\n  noArrowAt: number[] = [];\n\n  // Used to signify the start of an expression whose params, if it looks like\n  // an arrow function, shouldn't be converted to assignable nodes.\n  // This is used to defer the validation of typed arrow functions inside\n  // conditional expressions.\n  // e.g. a ? (b) : c => d\n  //          ^\n  noArrowParamsConversionAt: number[] = [];\n\n  // Flags to track\n  @bit accessor maybeInArrowParameters = false;\n  @bit accessor inType = false;\n  @bit accessor noAnonFunctionType = false;\n  @bit accessor hasFlowComment = false;\n  @bit accessor isAmbientContext = false;\n  @bit accessor inAbstractClass = false;\n  @bit accessor inDisallowConditionalTypesContext = false;\n\n  // For the Hack-style pipelines plugin\n  topicContext: TopicContextState = {\n    maxNumOfResolvableTopics: 0,\n    maxTopicIndex: null,\n  };\n\n  // For the F#-style pipelines plugin\n  @bit accessor soloAwait = false;\n  @bit accessor inFSharpPipelineDirectBody = false;\n\n  // Labels in scope.\n  labels: Array<{\n    kind: LoopLabelKind;\n    name?: string | null;\n    statementStart?: number;\n  }> = [];\n\n  commentsLen = 0;\n  // Comment attachment store\n  commentStack: Array<CommentWhitespace> = [];\n\n  // The current position of the tokenizer in the input.\n  pos: number = 0;\n\n  // Properties of the current token:\n  // Its type\n  type: TokenType = tt.eof;\n\n  // For tokens that include more information than their type, the value\n  value: any = null;\n\n  // Its start and end offset\n  start: number = 0;\n  end: number = 0;\n\n  // Position information for the previous token\n  // this is initialized when generating the second token.\n  lastTokEndLoc: Position = null;\n  // this is initialized when generating the second token.\n  lastTokStartLoc: Position = null;\n\n  // The context stack is used to track whether the apostrophe \"`\" starts\n  // or ends a string template\n  context: Array<TokContext> = [ct.brace];\n\n  // Used to track whether a JSX element is allowed to form\n  @bit accessor canStartJSXElement = true;\n\n  // Used to signal to callers of `readWord1` whether the word\n  // contained any escape sequences. This is needed because words with\n  // escape sequences must not be interpreted as keywords.\n  @bit accessor containsEsc = false;\n\n  // Used to track invalid escape sequences in template literals,\n  // that must be reported if the template is not tagged.\n  firstInvalidTemplateEscapePos: null | Position = null;\n\n  @bit accessor hasTopLevelAwait = false;\n\n  // This property is used to track the following errors\n  // - StrictNumericEscape\n  // - StrictOctalLiteral\n  //\n  // in a literal that occurs prior to/immediately after a \"use strict\" directive.\n\n  // todo(JLHwung): set strictErrors to null and avoid recording string errors\n  // after a non-directive is parsed\n  strictErrors: Map<number, [DeferredStrictError, Position]> = new Map();\n\n  // Tokens length in token store\n  tokensLength: number = 0;\n\n  /**\n   * When we add a new property, we must manually update the `clone` method\n   * @see State#clone\n   */\n\n  curPosition(): Position {\n    return new Position(this.curLine, this.pos - this.lineStart, this.pos);\n  }\n\n  clone(): State {\n    const state = new State();\n    state.flags = this.flags;\n    state.curLine = this.curLine;\n    state.lineStart = this.lineStart;\n    state.startLoc = this.startLoc;\n    state.endLoc = this.endLoc;\n    state.errors = this.errors.slice();\n    state.potentialArrowAt = this.potentialArrowAt;\n    state.noArrowAt = this.noArrowAt.slice();\n    state.noArrowParamsConversionAt = this.noArrowParamsConversionAt.slice();\n    state.topicContext = this.topicContext;\n    state.labels = this.labels.slice();\n    state.commentsLen = this.commentsLen;\n    state.commentStack = this.commentStack.slice();\n    state.pos = this.pos;\n    state.type = this.type;\n    state.value = this.value;\n    state.start = this.start;\n    state.end = this.end;\n    state.lastTokEndLoc = this.lastTokEndLoc;\n    state.lastTokStartLoc = this.lastTokStartLoc;\n    state.context = this.context.slice();\n    state.firstInvalidTemplateEscapePos = this.firstInvalidTemplateEscapePos;\n    state.strictErrors = this.strictErrors;\n    state.tokensLength = this.tokensLength;\n\n    return state;\n  }\n}\n\nexport type LookaheadState = {\n  pos: number;\n  value: any;\n  type: TokenType;\n  start: number;\n  end: number;\n  context: TokContext[];\n  startLoc: Position;\n  lastTokEndLoc: Position;\n  curLine: number;\n  lineStart: number;\n  curPosition: () => Position;\n  /* Used only in readToken_mult_modulo */\n  inType: boolean;\n  // These boolean properties are not initialized in createLookaheadState()\n  // instead they will only be set by the tokenizer\n  containsEsc?: boolean;\n};\n", "// We inline this package\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport * as charCodes from \"charcodes\";\n\n// The following character codes are forbidden from being\n// an immediate sibling of NumericLiteralSeparator _\nconst forbiddenNumericSeparatorSiblings = {\n  decBinOct: new Set<number>([\n    charCodes.dot,\n    charCodes.uppercaseB,\n    charCodes.uppercaseE,\n    charCodes.uppercaseO,\n    charCodes.underscore, // multiple separators are not allowed\n    charCodes.lowercaseB,\n    charCodes.lowercaseE,\n    charCodes.lowercaseO,\n  ]),\n  hex: new Set<number>([\n    charCodes.dot,\n    charCodes.uppercaseX,\n    charCodes.underscore, // multiple separators are not allowed\n    charCodes.lowercaseX,\n  ]),\n};\n\nconst isAllowedNumericSeparatorSibling = {\n  // 0 - 1\n  bin: (ch: number) => ch === charCodes.digit0 || ch === charCodes.digit1,\n\n  // 0 - 7\n  oct: (ch: number) => ch >= charCodes.digit0 && ch <= charCodes.digit7,\n\n  // 0 - 9\n  dec: (ch: number) => ch >= charCodes.digit0 && ch <= charCodes.digit9,\n\n  // 0 - 9, A - F, a - f,\n  hex: (ch: number) =>\n    (ch >= charCodes.digit0 && ch <= charCodes.digit9) ||\n    (ch >= charCodes.uppercaseA && ch <= charCodes.uppercaseF) ||\n    (ch >= charCodes.lowercaseA && ch <= charCodes.lowercaseF),\n};\n\nexport type StringContentsErrorHandlers = EscapedCharErrorHandlers & {\n  unterminated(\n    initialPos: number,\n    initialLineStart: number,\n    initialCurLine: number,\n  ): void;\n};\n\nexport function readStringContents(\n  type: \"single\" | \"double\" | \"template\",\n  input: string,\n  pos: number,\n  lineStart: number,\n  curLine: number,\n  errors: StringContentsErrorHandlers,\n) {\n  const initialPos = pos;\n  const initialLineStart = lineStart;\n  const initialCurLine = curLine;\n\n  let out = \"\";\n  let firstInvalidLoc = null;\n  let chunkStart = pos;\n  const { length } = input;\n  for (;;) {\n    if (pos >= length) {\n      errors.unterminated(initialPos, initialLineStart, initialCurLine);\n      out += input.slice(chunkStart, pos);\n      break;\n    }\n    const ch = input.charCodeAt(pos);\n    if (isStringEnd(type, ch, input, pos)) {\n      out += input.slice(chunkStart, pos);\n      break;\n    }\n    if (ch === charCodes.backslash) {\n      out += input.slice(chunkStart, pos);\n      const res = readEscapedChar(\n        input,\n        pos,\n        lineStart,\n        curLine,\n        type === \"template\",\n        errors,\n      );\n      if (res.ch === null && !firstInvalidLoc) {\n        firstInvalidLoc = { pos, lineStart, curLine };\n      } else {\n        out += res.ch;\n      }\n      ({ pos, lineStart, curLine } = res);\n      chunkStart = pos;\n    } else if (\n      ch === charCodes.lineSeparator ||\n      ch === charCodes.paragraphSeparator\n    ) {\n      ++pos;\n      ++curLine;\n      lineStart = pos;\n    } else if (ch === charCodes.lineFeed || ch === charCodes.carriageReturn) {\n      if (type === \"template\") {\n        out += input.slice(chunkStart, pos) + \"\\n\";\n        ++pos;\n        if (\n          ch === charCodes.carriageReturn &&\n          input.charCodeAt(pos) === charCodes.lineFeed\n        ) {\n          ++pos;\n        }\n        ++curLine;\n        chunkStart = lineStart = pos;\n      } else {\n        errors.unterminated(initialPos, initialLineStart, initialCurLine);\n      }\n    } else {\n      ++pos;\n    }\n  }\n  return process.env.BABEL_8_BREAKING\n    ? { pos, str: out, firstInvalidLoc, lineStart, curLine }\n    : {\n        pos,\n        str: out,\n        firstInvalidLoc,\n        lineStart,\n        curLine,\n        containsInvalid: !!firstInvalidLoc,\n      };\n}\n\nfunction isStringEnd(\n  type: \"single\" | \"double\" | \"template\",\n  ch: number,\n  input: string,\n  pos: number,\n) {\n  if (type === \"template\") {\n    return (\n      ch === charCodes.graveAccent ||\n      (ch === charCodes.dollarSign &&\n        input.charCodeAt(pos + 1) === charCodes.leftCurlyBrace)\n    );\n  }\n  return (\n    ch === (type === \"double\" ? charCodes.quotationMark : charCodes.apostrophe)\n  );\n}\n\ntype EscapedCharErrorHandlers = HexCharErrorHandlers &\n  CodePointErrorHandlers & {\n    strictNumericEscape(pos: number, lineStart: number, curLine: number): void;\n  };\n\nfunction readEscapedChar(\n  input: string,\n  pos: number,\n  lineStart: number,\n  curLine: number,\n  inTemplate: boolean,\n  errors: EscapedCharErrorHandlers,\n) {\n  const throwOnInvalid = !inTemplate;\n  pos++; // skip '\\'\n\n  const res = (ch: string | null) => ({ pos, ch, lineStart, curLine });\n\n  const ch = input.charCodeAt(pos++);\n  switch (ch) {\n    case charCodes.lowercaseN:\n      return res(\"\\n\");\n    case charCodes.lowercaseR:\n      return res(\"\\r\");\n    case charCodes.lowercaseX: {\n      let code;\n      ({ code, pos } = readHexChar(\n        input,\n        pos,\n        lineStart,\n        curLine,\n        2,\n        false,\n        throwOnInvalid,\n        errors,\n      ));\n      return res(code === null ? null : String.fromCharCode(code));\n    }\n    case charCodes.lowercaseU: {\n      let code;\n      ({ code, pos } = readCodePoint(\n        input,\n        pos,\n        lineStart,\n        curLine,\n        throwOnInvalid,\n        errors,\n      ));\n      return res(code === null ? null : String.fromCodePoint(code));\n    }\n    case charCodes.lowercaseT:\n      return res(\"\\t\");\n    case charCodes.lowercaseB:\n      return res(\"\\b\");\n    case charCodes.lowercaseV:\n      return res(\"\\u000b\");\n    case charCodes.lowercaseF:\n      return res(\"\\f\");\n    case charCodes.carriageReturn:\n      if (input.charCodeAt(pos) === charCodes.lineFeed) {\n        ++pos;\n      }\n    // fall through\n    case charCodes.lineFeed:\n      lineStart = pos;\n      ++curLine;\n    // fall through\n    case charCodes.lineSeparator:\n    case charCodes.paragraphSeparator:\n      return res(\"\");\n    case charCodes.digit8:\n    case charCodes.digit9:\n      if (inTemplate) {\n        return res(null);\n      } else {\n        errors.strictNumericEscape(pos - 1, lineStart, curLine);\n      }\n    // fall through\n    default:\n      if (ch >= charCodes.digit0 && ch <= charCodes.digit7) {\n        const startPos = pos - 1;\n        const match = /^[0-7]+/.exec(input.slice(startPos, pos + 2));\n\n        let octalStr = match[0];\n\n        let octal = parseInt(octalStr, 8);\n        if (octal > 255) {\n          octalStr = octalStr.slice(0, -1);\n          octal = parseInt(octalStr, 8);\n        }\n        pos += octalStr.length - 1;\n        const next = input.charCodeAt(pos);\n        if (\n          octalStr !== \"0\" ||\n          next === charCodes.digit8 ||\n          next === charCodes.digit9\n        ) {\n          if (inTemplate) {\n            return res(null);\n          } else {\n            errors.strictNumericEscape(startPos, lineStart, curLine);\n          }\n        }\n\n        return res(String.fromCharCode(octal));\n      }\n\n      return res(String.fromCharCode(ch));\n  }\n}\n\ntype HexCharErrorHandlers = IntErrorHandlers & {\n  invalidEscapeSequence(pos: number, lineStart: number, curLine: number): void;\n};\n\n// Used to read character escape sequences ('\\x', '\\u').\nfunction readHexChar(\n  input: string,\n  pos: number,\n  lineStart: number,\n  curLine: number,\n  len: number,\n  forceLen: boolean,\n  throwOnInvalid: boolean,\n  errors: HexCharErrorHandlers,\n) {\n  const initialPos = pos;\n  let n;\n  ({ n, pos } = readInt(\n    input,\n    pos,\n    lineStart,\n    curLine,\n    16,\n    len,\n    forceLen,\n    false,\n    errors,\n    /* bailOnError */ !throwOnInvalid,\n  ));\n  if (n === null) {\n    if (throwOnInvalid) {\n      errors.invalidEscapeSequence(initialPos, lineStart, curLine);\n    } else {\n      pos = initialPos - 1;\n    }\n  }\n  return { code: n, pos };\n}\n\nexport type IntErrorHandlers = {\n  numericSeparatorInEscapeSequence(\n    pos: number,\n    lineStart: number,\n    curLine: number,\n  ): void;\n  unexpectedNumericSeparator(\n    pos: number,\n    lineStart: number,\n    curLine: number,\n  ): void;\n  // It can return \"true\" to indicate that the error was handled\n  // and the int parsing should continue.\n  invalidDigit(\n    pos: number,\n    lineStart: number,\n    curLine: number,\n    radix: number,\n  ): boolean;\n};\n\nexport function readInt(\n  input: string,\n  pos: number,\n  lineStart: number,\n  curLine: number,\n  radix: number,\n  len: number | undefined,\n  forceLen: boolean,\n  allowNumSeparator: boolean | \"bail\",\n  errors: IntErrorHandlers,\n  bailOnError: boolean,\n) {\n  const start = pos;\n  const forbiddenSiblings =\n    radix === 16\n      ? forbiddenNumericSeparatorSiblings.hex\n      : forbiddenNumericSeparatorSiblings.decBinOct;\n  const isAllowedSibling =\n    radix === 16\n      ? isAllowedNumericSeparatorSibling.hex\n      : radix === 10\n        ? isAllowedNumericSeparatorSibling.dec\n        : radix === 8\n          ? isAllowedNumericSeparatorSibling.oct\n          : isAllowedNumericSeparatorSibling.bin;\n\n  let invalid = false;\n  let total = 0;\n\n  for (let i = 0, e = len == null ? Infinity : len; i < e; ++i) {\n    const code = input.charCodeAt(pos);\n    let val;\n\n    if (code === charCodes.underscore && allowNumSeparator !== \"bail\") {\n      const prev = input.charCodeAt(pos - 1);\n      const next = input.charCodeAt(pos + 1);\n\n      if (!allowNumSeparator) {\n        if (bailOnError) return { n: null, pos };\n        errors.numericSeparatorInEscapeSequence(pos, lineStart, curLine);\n      } else if (\n        Number.isNaN(next) ||\n        !isAllowedSibling(next) ||\n        forbiddenSiblings.has(prev) ||\n        forbiddenSiblings.has(next)\n      ) {\n        if (bailOnError) return { n: null, pos };\n        errors.unexpectedNumericSeparator(pos, lineStart, curLine);\n      }\n\n      // Ignore this _ character\n      ++pos;\n      continue;\n    }\n\n    if (code >= charCodes.lowercaseA) {\n      val = code - charCodes.lowercaseA + charCodes.lineFeed;\n    } else if (code >= charCodes.uppercaseA) {\n      val = code - charCodes.uppercaseA + charCodes.lineFeed;\n    } else if (charCodes.isDigit(code)) {\n      val = code - charCodes.digit0; // 0-9\n    } else {\n      val = Infinity;\n    }\n    if (val >= radix) {\n      // If we found a digit which is too big, errors.invalidDigit can return true to avoid\n      // breaking the loop (this is used for error recovery).\n      if (val <= 9 && bailOnError) {\n        return { n: null, pos };\n      } else if (\n        val <= 9 &&\n        errors.invalidDigit(pos, lineStart, curLine, radix)\n      ) {\n        val = 0;\n      } else if (forceLen) {\n        val = 0;\n        invalid = true;\n      } else {\n        break;\n      }\n    }\n    ++pos;\n    total = total * radix + val;\n  }\n  if (pos === start || (len != null && pos - start !== len) || invalid) {\n    return { n: null, pos };\n  }\n\n  return { n: total, pos };\n}\n\nexport type CodePointErrorHandlers = HexCharErrorHandlers & {\n  invalidCodePoint(pos: number, lineStart: number, curLine: number): void;\n};\n\nexport function readCodePoint(\n  input: string,\n  pos: number,\n  lineStart: number,\n  curLine: number,\n  throwOnInvalid: boolean,\n  errors: CodePointErrorHandlers,\n) {\n  const ch = input.charCodeAt(pos);\n  let code;\n\n  if (ch === charCodes.leftCurlyBrace) {\n    ++pos;\n    ({ code, pos } = readHexChar(\n      input,\n      pos,\n      lineStart,\n      curLine,\n      input.indexOf(\"}\", pos) - pos,\n      true,\n      throwOnInvalid,\n      errors,\n    ));\n    ++pos;\n    if (code !== null && code > 0x10ffff) {\n      if (throwOnInvalid) {\n        errors.invalidCodePoint(pos, lineStart, curLine);\n      } else {\n        return { code: null, pos };\n      }\n    }\n  } else {\n    ({ code, pos } = readHexChar(\n      input,\n      pos,\n      lineStart,\n      curLine,\n      4,\n      false,\n      throwOnInvalid,\n      errors,\n    ));\n  }\n  return { code, pos };\n}\n", "/*:: declare var invariant; */\n\nimport type { Options } from \"../options.ts\";\nimport {\n  Position,\n  SourceLocation,\n  createPositionWithColumnOffset,\n} from \"../util/location.ts\";\nimport CommentsParser, { type CommentWhitespace } from \"../parser/comments.ts\";\nimport type * as N from \"../types.ts\";\nimport * as charCodes from \"charcodes\";\nimport { isIdentifierStart, isIdentifierChar } from \"../util/identifier.ts\";\nimport {\n  tokenIsKeyword,\n  tokenLabelName,\n  tt,\n  keywords as keywordTypes,\n  type TokenType,\n} from \"./types.ts\";\nimport type { TokContext } from \"./context.ts\";\nimport {\n  Errors,\n  type ParseError,\n  type ParseErrorConstructor,\n} from \"../parse-error.ts\";\nimport {\n  lineBreakG,\n  isNewLine,\n  isWhitespace,\n  skipWhiteSpace,\n  skipWhiteSpaceInLine,\n} from \"../util/whitespace.ts\";\nimport State from \"./state.ts\";\nimport type { LookaheadState, DeferredStrictError } from \"./state.ts\";\nimport type { Undone } from \"../parser/node.ts\";\nimport type { Node } from \"../types.ts\";\n\nimport {\n  readInt,\n  readCodePoint,\n  readStringContents,\n  type IntErrorHandlers,\n  type CodePointErrorHandlers,\n  type StringContentsErrorHandlers,\n} from \"@babel/helper-string-parser\";\n\nimport type { Plugin } from \"../typings.ts\";\n\nfunction buildPosition(pos: number, lineStart: number, curLine: number) {\n  return new Position(curLine, pos - lineStart, pos);\n}\n\nconst VALID_REGEX_FLAGS = new Set([\n  charCodes.lowercaseG,\n  charCodes.lowercaseM,\n  charCodes.lowercaseS,\n  charCodes.lowercaseI,\n  charCodes.lowercaseY,\n  charCodes.lowercaseU,\n  charCodes.lowercaseD,\n  charCodes.lowercaseV,\n]);\n\n// Object type used to represent tokens. Note that normally, tokens\n// simply exist as properties on the parser object. This is only\n// used for the onToken callback and the external tokenizer.\n\nexport class Token {\n  constructor(state: State) {\n    this.type = state.type;\n    this.value = state.value;\n    this.start = state.start;\n    this.end = state.end;\n    this.loc = new SourceLocation(state.startLoc, state.endLoc);\n  }\n\n  declare type: TokenType;\n  declare value: any;\n  declare start: number;\n  declare end: number;\n  declare loc: SourceLocation;\n}\n\n// ## Tokenizer\n\nexport default abstract class Tokenizer extends CommentsParser {\n  isLookahead: boolean;\n\n  // Token store.\n  tokens: Array<Token | N.Comment> = [];\n\n  constructor(options: Options, input: string) {\n    super();\n    this.state = new State();\n    this.state.init(options);\n    this.input = input;\n    this.length = input.length;\n    this.comments = [];\n    this.isLookahead = false;\n  }\n\n  pushToken(token: Token | N.Comment) {\n    // Pop out invalid tokens trapped by try-catch parsing.\n    // Those parsing branches are mainly created by typescript and flow plugins.\n    this.tokens.length = this.state.tokensLength;\n    this.tokens.push(token);\n    ++this.state.tokensLength;\n  }\n\n  // Move to the next token\n\n  next(): void {\n    this.checkKeywordEscapes();\n    if (this.options.tokens) {\n      this.pushToken(new Token(this.state));\n    }\n\n    this.state.lastTokEndLoc = this.state.endLoc;\n    this.state.lastTokStartLoc = this.state.startLoc;\n    this.nextToken();\n  }\n\n  eat(type: TokenType): boolean {\n    if (this.match(type)) {\n      this.next();\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * Whether current token matches given type\n   */\n  match(type: TokenType): boolean {\n    return this.state.type === type;\n  }\n\n  /**\n   * Create a LookaheadState from current parser state\n   */\n  createLookaheadState(state: State): LookaheadState {\n    return {\n      pos: state.pos,\n      value: null,\n      type: state.type,\n      start: state.start,\n      end: state.end,\n      context: [this.curContext()],\n      inType: state.inType,\n      startLoc: state.startLoc,\n      lastTokEndLoc: state.lastTokEndLoc,\n      curLine: state.curLine,\n      lineStart: state.lineStart,\n      curPosition: state.curPosition,\n    };\n  }\n\n  /**\n   * lookahead peeks the next token, skipping changes to token context and\n   * comment stack. For performance it returns a limited LookaheadState\n   * instead of full parser state.\n   *\n   * The { column, line } Loc info is not included in lookahead since such usage\n   * is rare. Although it may return other location properties e.g. `curLine` and\n   * `lineStart`, these properties are not listed in the LookaheadState interface\n   * and thus the returned value is _NOT_ reliable.\n   *\n   * The tokenizer should make best efforts to avoid using any parser state\n   * other than those defined in LookaheadState\n   */\n  lookahead(): LookaheadState {\n    const old = this.state;\n    // @ts-expect-error For performance we use a simplified tokenizer state structure\n    this.state = this.createLookaheadState(old);\n\n    this.isLookahead = true;\n    this.nextToken();\n    this.isLookahead = false;\n\n    const curr = this.state;\n    this.state = old;\n    return curr;\n  }\n\n  nextTokenStart(): number {\n    return this.nextTokenStartSince(this.state.pos);\n  }\n\n  nextTokenStartSince(pos: number): number {\n    skipWhiteSpace.lastIndex = pos;\n    return skipWhiteSpace.test(this.input) ? skipWhiteSpace.lastIndex : pos;\n  }\n\n  lookaheadCharCode(): number {\n    return this.input.charCodeAt(this.nextTokenStart());\n  }\n\n  /**\n   * Similar to nextToken, but it will stop at line break when it is seen before the next token\n   *\n   * @returns {number} position of the next token start or line break, whichever is seen first.\n   * @memberof Tokenizer\n   */\n  nextTokenInLineStart(): number {\n    return this.nextTokenInLineStartSince(this.state.pos);\n  }\n\n  nextTokenInLineStartSince(pos: number): number {\n    skipWhiteSpaceInLine.lastIndex = pos;\n    return skipWhiteSpaceInLine.test(this.input)\n      ? skipWhiteSpaceInLine.lastIndex\n      : pos;\n  }\n\n  /**\n   * Similar to lookaheadCharCode, but it will return the char code of line break if it is\n   * seen before the next token\n   *\n   * @returns {number} char code of the next token start or line break, whichever is seen first.\n   * @memberof Tokenizer\n   */\n  lookaheadInLineCharCode(): number {\n    return this.input.charCodeAt(this.nextTokenInLineStart());\n  }\n\n  codePointAtPos(pos: number): number {\n    // The implementation is based on\n    // https://source.chromium.org/chromium/chromium/src/+/master:v8/src/builtins/builtins-string-gen.cc;l=1455;drc=221e331b49dfefadbc6fa40b0c68e6f97606d0b3;bpv=0;bpt=1\n    // We reimplement `codePointAt` because `codePointAt` is a V8 builtin which is not inlined by TurboFan (as of M91)\n    // since `input` is mostly ASCII, an inlined `charCodeAt` wins here\n    let cp = this.input.charCodeAt(pos);\n    if ((cp & 0xfc00) === 0xd800 && ++pos < this.input.length) {\n      const trail = this.input.charCodeAt(pos);\n      if ((trail & 0xfc00) === 0xdc00) {\n        cp = 0x10000 + ((cp & 0x3ff) << 10) + (trail & 0x3ff);\n      }\n    }\n    return cp;\n  }\n\n  // Toggle strict mode. Re-reads the next number or string to please\n  // pedantic tests (`\"use strict\"; 010;` should fail).\n\n  setStrict(strict: boolean): void {\n    this.state.strict = strict;\n    if (strict) {\n      // Throw an error for any string decimal escape found before/immediately\n      // after a \"use strict\" directive. Strict mode will be set at parse\n      // time for any literals that occur after the next node of the strict\n      // directive.\n      this.state.strictErrors.forEach(([toParseError, at]) =>\n        this.raise(toParseError, at),\n      );\n      this.state.strictErrors.clear();\n    }\n  }\n\n  curContext(): TokContext {\n    return this.state.context[this.state.context.length - 1];\n  }\n\n  // Read a single token, updating the parser object's token-related properties.\n  nextToken(): void {\n    this.skipSpace();\n    this.state.start = this.state.pos;\n    if (!this.isLookahead) this.state.startLoc = this.state.curPosition();\n    if (this.state.pos >= this.length) {\n      this.finishToken(tt.eof);\n      return;\n    }\n\n    this.getTokenFromCode(this.codePointAtPos(this.state.pos));\n  }\n\n  // Skips a block comment, whose end is marked by commentEnd.\n  // *-/ is used by the Flow plugin, when parsing block comments nested\n  // inside Flow comments.\n  skipBlockComment(commentEnd: \"*/\" | \"*-/\"): N.CommentBlock | undefined {\n    let startLoc;\n    if (!this.isLookahead) startLoc = this.state.curPosition();\n    const start = this.state.pos;\n    const end = this.input.indexOf(commentEnd, start + 2);\n    if (end === -1) {\n      // We have to call this again here because startLoc may not be set...\n      // This seems to be for performance reasons:\n      // https://github.com/babel/babel/commit/acf2a10899f696a8aaf34df78bf9725b5ea7f2da\n      throw this.raise(Errors.UnterminatedComment, this.state.curPosition());\n    }\n\n    this.state.pos = end + commentEnd.length;\n    lineBreakG.lastIndex = start + 2;\n    while (lineBreakG.test(this.input) && lineBreakG.lastIndex <= end) {\n      ++this.state.curLine;\n      this.state.lineStart = lineBreakG.lastIndex;\n    }\n\n    // If we are doing a lookahead right now we need to advance the position (above code)\n    // but we do not want to push the comment to the state.\n    if (this.isLookahead) return;\n    /*:: invariant(startLoc) */\n\n    const comment: N.CommentBlock = {\n      type: \"CommentBlock\",\n      value: this.input.slice(start + 2, end),\n      start,\n      end: end + commentEnd.length,\n      loc: new SourceLocation(startLoc, this.state.curPosition()),\n    };\n    if (this.options.tokens) this.pushToken(comment);\n    return comment;\n  }\n\n  skipLineComment(startSkip: number): N.CommentLine | undefined {\n    const start = this.state.pos;\n    let startLoc;\n    if (!this.isLookahead) startLoc = this.state.curPosition();\n    let ch = this.input.charCodeAt((this.state.pos += startSkip));\n    if (this.state.pos < this.length) {\n      while (!isNewLine(ch) && ++this.state.pos < this.length) {\n        ch = this.input.charCodeAt(this.state.pos);\n      }\n    }\n\n    // If we are doing a lookahead right now we need to advance the position (above code)\n    // but we do not want to push the comment to the state.\n    if (this.isLookahead) return;\n\n    const end = this.state.pos;\n    const value = this.input.slice(start + startSkip, end);\n\n    const comment: N.CommentLine = {\n      type: \"CommentLine\",\n      value,\n      start,\n      end,\n      loc: new SourceLocation(startLoc, this.state.curPosition()),\n    };\n    if (this.options.tokens) this.pushToken(comment);\n    return comment;\n  }\n\n  // Called at the start of the parse and after every token. Skips\n  // whitespace and comments, and.\n\n  skipSpace(): void {\n    const spaceStart = this.state.pos;\n    const comments = [];\n    loop: while (this.state.pos < this.length) {\n      const ch = this.input.charCodeAt(this.state.pos);\n      switch (ch) {\n        case charCodes.space:\n        case charCodes.nonBreakingSpace:\n        case charCodes.tab:\n          ++this.state.pos;\n          break;\n        case charCodes.carriageReturn:\n          if (\n            this.input.charCodeAt(this.state.pos + 1) === charCodes.lineFeed\n          ) {\n            ++this.state.pos;\n          }\n        // fall through\n        case charCodes.lineFeed:\n        case charCodes.lineSeparator:\n        case charCodes.paragraphSeparator:\n          ++this.state.pos;\n          ++this.state.curLine;\n          this.state.lineStart = this.state.pos;\n          break;\n\n        case charCodes.slash:\n          switch (this.input.charCodeAt(this.state.pos + 1)) {\n            case charCodes.asterisk: {\n              const comment = this.skipBlockComment(\"*/\");\n              if (comment !== undefined) {\n                this.addComment(comment);\n                if (this.options.attachComment) comments.push(comment);\n              }\n              break;\n            }\n\n            case charCodes.slash: {\n              const comment = this.skipLineComment(2);\n              if (comment !== undefined) {\n                this.addComment(comment);\n                if (this.options.attachComment) comments.push(comment);\n              }\n              break;\n            }\n\n            default:\n              break loop;\n          }\n          break;\n\n        default:\n          if (isWhitespace(ch)) {\n            ++this.state.pos;\n          } else if (\n            ch === charCodes.dash &&\n            !this.inModule &&\n            this.options.annexB\n          ) {\n            const pos = this.state.pos;\n            if (\n              this.input.charCodeAt(pos + 1) === charCodes.dash &&\n              this.input.charCodeAt(pos + 2) === charCodes.greaterThan &&\n              (spaceStart === 0 || this.state.lineStart > spaceStart)\n            ) {\n              // A `-->` line comment\n              const comment = this.skipLineComment(3);\n              if (comment !== undefined) {\n                this.addComment(comment);\n                if (this.options.attachComment) comments.push(comment);\n              }\n            } else {\n              break loop;\n            }\n          } else if (\n            ch === charCodes.lessThan &&\n            !this.inModule &&\n            this.options.annexB\n          ) {\n            const pos = this.state.pos;\n            if (\n              this.input.charCodeAt(pos + 1) === charCodes.exclamationMark &&\n              this.input.charCodeAt(pos + 2) === charCodes.dash &&\n              this.input.charCodeAt(pos + 3) === charCodes.dash\n            ) {\n              // `<!--`, an XML-style comment that should be interpreted as a line comment\n              const comment = this.skipLineComment(4);\n              if (comment !== undefined) {\n                this.addComment(comment);\n                if (this.options.attachComment) comments.push(comment);\n              }\n            } else {\n              break loop;\n            }\n          } else {\n            break loop;\n          }\n      }\n    }\n\n    if (comments.length > 0) {\n      const end = this.state.pos;\n      const commentWhitespace: CommentWhitespace = {\n        start: spaceStart,\n        end,\n        comments,\n        leadingNode: null,\n        trailingNode: null,\n        containingNode: null,\n      };\n      this.state.commentStack.push(commentWhitespace);\n    }\n  }\n\n  // Called at the end of every token. Sets `end`, `val`, and\n  // maintains `context` and `canStartJSXElement`, and skips the space after\n  // the token, so that the next one's `start` will point at the\n  // right position.\n\n  finishToken(type: TokenType, val?: any): void {\n    this.state.end = this.state.pos;\n    this.state.endLoc = this.state.curPosition();\n    const prevType = this.state.type;\n    this.state.type = type;\n    this.state.value = val;\n\n    if (!this.isLookahead) {\n      this.updateContext(prevType);\n    }\n  }\n\n  replaceToken(type: TokenType): void {\n    this.state.type = type;\n    // @ts-expect-error the prevType of updateContext is required\n    // only when the new type is tt.slash/tt.jsxTagEnd\n    this.updateContext();\n  }\n\n  // ### Token reading\n\n  // This is the function that is called to fetch the next token. It\n  // is somewhat obscure, because it works in character codes rather\n  // than characters, and because operator parsing has been inlined\n  // into it.\n  //\n  // All in the name of speed.\n\n  // number sign is \"#\"\n  readToken_numberSign(): void {\n    if (this.state.pos === 0 && this.readToken_interpreter()) {\n      return;\n    }\n\n    const nextPos = this.state.pos + 1;\n    const next = this.codePointAtPos(nextPos);\n    if (next >= charCodes.digit0 && next <= charCodes.digit9) {\n      throw this.raise(\n        Errors.UnexpectedDigitAfterHash,\n        this.state.curPosition(),\n      );\n    }\n\n    if (\n      next === charCodes.leftCurlyBrace ||\n      (next === charCodes.leftSquareBracket && this.hasPlugin(\"recordAndTuple\"))\n    ) {\n      // When we see `#{`, it is likely to be a hash record.\n      // However we don't yell at `#[` since users may intend to use \"computed private fields\",\n      // which is not allowed in the spec. Throwing expecting recordAndTuple is\n      // misleading\n      this.expectPlugin(\"recordAndTuple\");\n      if (\n        !process.env.BABEL_8_BREAKING &&\n        this.getPluginOption(\"recordAndTuple\", \"syntaxType\") === \"bar\"\n      ) {\n        throw this.raise(\n          next === charCodes.leftCurlyBrace\n            ? Errors.RecordExpressionHashIncorrectStartSyntaxType\n            : Errors.TupleExpressionHashIncorrectStartSyntaxType,\n          this.state.curPosition(),\n        );\n      }\n\n      this.state.pos += 2;\n      if (next === charCodes.leftCurlyBrace) {\n        // #{\n        this.finishToken(tt.braceHashL);\n      } else {\n        // #[\n        this.finishToken(tt.bracketHashL);\n      }\n    } else if (isIdentifierStart(next)) {\n      ++this.state.pos;\n      this.finishToken(tt.privateName, this.readWord1(next));\n    } else if (next === charCodes.backslash) {\n      ++this.state.pos;\n      this.finishToken(tt.privateName, this.readWord1());\n    } else {\n      this.finishOp(tt.hash, 1);\n    }\n  }\n\n  readToken_dot(): void {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next >= charCodes.digit0 && next <= charCodes.digit9) {\n      this.readNumber(true);\n      return;\n    }\n\n    if (\n      next === charCodes.dot &&\n      this.input.charCodeAt(this.state.pos + 2) === charCodes.dot\n    ) {\n      this.state.pos += 3;\n      this.finishToken(tt.ellipsis);\n    } else {\n      ++this.state.pos;\n      this.finishToken(tt.dot);\n    }\n  }\n\n  readToken_slash(): void {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next === charCodes.equalsTo) {\n      this.finishOp(tt.slashAssign, 2);\n    } else {\n      this.finishOp(tt.slash, 1);\n    }\n  }\n\n  readToken_interpreter(): boolean {\n    if (this.state.pos !== 0 || this.length < 2) return false;\n\n    let ch = this.input.charCodeAt(this.state.pos + 1);\n    if (ch !== charCodes.exclamationMark) return false;\n\n    const start = this.state.pos;\n    this.state.pos += 1;\n\n    while (!isNewLine(ch) && ++this.state.pos < this.length) {\n      ch = this.input.charCodeAt(this.state.pos);\n    }\n\n    const value = this.input.slice(start + 2, this.state.pos);\n\n    this.finishToken(tt.interpreterDirective, value);\n\n    return true;\n  }\n\n  readToken_mult_modulo(code: number): void {\n    // '%' or '*'\n    let type = code === charCodes.asterisk ? tt.star : tt.modulo;\n    let width = 1;\n    let next = this.input.charCodeAt(this.state.pos + 1);\n\n    // Exponentiation operator '**'\n    if (code === charCodes.asterisk && next === charCodes.asterisk) {\n      width++;\n      next = this.input.charCodeAt(this.state.pos + 2);\n      type = tt.exponent;\n    }\n\n    // '%=' or '*='\n    if (next === charCodes.equalsTo && !this.state.inType) {\n      width++;\n      // `tt.moduloAssign` is only needed to support % as a Hack-pipe topic token.\n      // If the proposal ends up choosing a different token,\n      // it can be merged with tt.assign.\n      type = code === charCodes.percentSign ? tt.moduloAssign : tt.assign;\n    }\n\n    this.finishOp(type, width);\n  }\n\n  readToken_pipe_amp(code: number): void {\n    // '||' '&&' '||=' '&&='\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === code) {\n      if (this.input.charCodeAt(this.state.pos + 2) === charCodes.equalsTo) {\n        this.finishOp(tt.assign, 3);\n      } else {\n        this.finishOp(\n          code === charCodes.verticalBar ? tt.logicalOR : tt.logicalAND,\n          2,\n        );\n      }\n      return;\n    }\n\n    if (code === charCodes.verticalBar) {\n      // '|>'\n      if (next === charCodes.greaterThan) {\n        this.finishOp(tt.pipeline, 2);\n        return;\n      }\n      // '|}'\n      if (\n        !process.env.BABEL_8_BREAKING &&\n        this.hasPlugin(\"recordAndTuple\") &&\n        next === charCodes.rightCurlyBrace\n      ) {\n        if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n          throw this.raise(\n            Errors.RecordExpressionBarIncorrectEndSyntaxType,\n            this.state.curPosition(),\n          );\n        }\n        this.state.pos += 2;\n        this.finishToken(tt.braceBarR);\n        return;\n      }\n\n      // '|]'\n      if (\n        !process.env.BABEL_8_BREAKING &&\n        this.hasPlugin(\"recordAndTuple\") &&\n        next === charCodes.rightSquareBracket\n      ) {\n        if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n          throw this.raise(\n            Errors.TupleExpressionBarIncorrectEndSyntaxType,\n            this.state.curPosition(),\n          );\n        }\n        this.state.pos += 2;\n        this.finishToken(tt.bracketBarR);\n        return;\n      }\n    }\n\n    if (next === charCodes.equalsTo) {\n      this.finishOp(tt.assign, 2);\n      return;\n    }\n\n    this.finishOp(\n      code === charCodes.verticalBar ? tt.bitwiseOR : tt.bitwiseAND,\n      1,\n    );\n  }\n\n  readToken_caret(): void {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    // '^='\n    if (next === charCodes.equalsTo && !this.state.inType) {\n      // `tt.xorAssign` is only needed to support ^ as a Hack-pipe topic token.\n      // If the proposal ends up choosing a different token,\n      // it can be merged with tt.assign.\n      this.finishOp(tt.xorAssign, 2);\n    }\n    // '^^'\n    else if (\n      next === charCodes.caret &&\n      // If the ^^ token is not enabled, we don't throw but parse two single ^s\n      // because it could be a ^ hack token followed by a ^ binary operator.\n      this.hasPlugin([\n        \"pipelineOperator\",\n        { proposal: \"hack\", topicToken: \"^^\" },\n      ])\n    ) {\n      this.finishOp(tt.doubleCaret, 2);\n\n      // `^^^` is forbidden and must be separated by a space.\n      const lookaheadCh = this.input.codePointAt(this.state.pos);\n      if (lookaheadCh === charCodes.caret) {\n        this.unexpected();\n      }\n    }\n    // '^'\n    else {\n      this.finishOp(tt.bitwiseXOR, 1);\n    }\n  }\n\n  readToken_atSign(): void {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    // '@@'\n    if (\n      next === charCodes.atSign &&\n      this.hasPlugin([\n        \"pipelineOperator\",\n        { proposal: \"hack\", topicToken: \"@@\" },\n      ])\n    ) {\n      this.finishOp(tt.doubleAt, 2);\n    }\n    // '@'\n    else {\n      this.finishOp(tt.at, 1);\n    }\n  }\n\n  readToken_plus_min(code: number): void {\n    // '+-'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === code) {\n      this.finishOp(tt.incDec, 2);\n      return;\n    }\n\n    if (next === charCodes.equalsTo) {\n      this.finishOp(tt.assign, 2);\n    } else {\n      this.finishOp(tt.plusMin, 1);\n    }\n  }\n\n  readToken_lt(): void {\n    // '<'\n    const { pos } = this.state;\n    const next = this.input.charCodeAt(pos + 1);\n\n    if (next === charCodes.lessThan) {\n      if (this.input.charCodeAt(pos + 2) === charCodes.equalsTo) {\n        this.finishOp(tt.assign, 3);\n        return;\n      }\n      this.finishOp(tt.bitShiftL, 2);\n      return;\n    }\n\n    if (next === charCodes.equalsTo) {\n      // <=\n      this.finishOp(tt.relational, 2);\n      return;\n    }\n\n    this.finishOp(tt.lt, 1);\n  }\n\n  readToken_gt(): void {\n    // '>'\n    const { pos } = this.state;\n    const next = this.input.charCodeAt(pos + 1);\n\n    if (next === charCodes.greaterThan) {\n      const size =\n        this.input.charCodeAt(pos + 2) === charCodes.greaterThan ? 3 : 2;\n      if (this.input.charCodeAt(pos + size) === charCodes.equalsTo) {\n        this.finishOp(tt.assign, size + 1);\n        return;\n      }\n      this.finishOp(tt.bitShiftR, size);\n      return;\n    }\n\n    if (next === charCodes.equalsTo) {\n      // <= | >=\n      this.finishOp(tt.relational, 2);\n      return;\n    }\n\n    this.finishOp(tt.gt, 1);\n  }\n\n  readToken_eq_excl(code: number): void {\n    // '=!'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next === charCodes.equalsTo) {\n      this.finishOp(\n        tt.equality,\n        this.input.charCodeAt(this.state.pos + 2) === charCodes.equalsTo\n          ? 3\n          : 2,\n      );\n      return;\n    }\n    if (code === charCodes.equalsTo && next === charCodes.greaterThan) {\n      // '=>'\n      this.state.pos += 2;\n      this.finishToken(tt.arrow);\n      return;\n    }\n    this.finishOp(code === charCodes.equalsTo ? tt.eq : tt.bang, 1);\n  }\n\n  readToken_question(): void {\n    // '?'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    const next2 = this.input.charCodeAt(this.state.pos + 2);\n    if (next === charCodes.questionMark) {\n      if (next2 === charCodes.equalsTo) {\n        // '??='\n        this.finishOp(tt.assign, 3);\n      } else {\n        // '??'\n        this.finishOp(tt.nullishCoalescing, 2);\n      }\n    } else if (\n      next === charCodes.dot &&\n      !(next2 >= charCodes.digit0 && next2 <= charCodes.digit9)\n    ) {\n      // '.' not followed by a number\n      this.state.pos += 2;\n      this.finishToken(tt.questionDot);\n    } else {\n      ++this.state.pos;\n      this.finishToken(tt.question);\n    }\n  }\n\n  getTokenFromCode(code: number): void {\n    switch (code) {\n      // The interpretation of a dot depends on whether it is followed\n      // by a digit or another two dots.\n\n      case charCodes.dot:\n        this.readToken_dot();\n        return;\n      // Punctuation tokens.\n      case charCodes.leftParenthesis:\n        ++this.state.pos;\n        this.finishToken(tt.parenL);\n        return;\n      case charCodes.rightParenthesis:\n        ++this.state.pos;\n        this.finishToken(tt.parenR);\n        return;\n      case charCodes.semicolon:\n        ++this.state.pos;\n        this.finishToken(tt.semi);\n        return;\n      case charCodes.comma:\n        ++this.state.pos;\n        this.finishToken(tt.comma);\n        return;\n      case charCodes.leftSquareBracket:\n        if (\n          !process.env.BABEL_8_BREAKING &&\n          this.hasPlugin(\"recordAndTuple\") &&\n          this.input.charCodeAt(this.state.pos + 1) === charCodes.verticalBar\n        ) {\n          if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n            throw this.raise(\n              Errors.TupleExpressionBarIncorrectStartSyntaxType,\n              this.state.curPosition(),\n            );\n          }\n\n          // [|\n          this.state.pos += 2;\n          this.finishToken(tt.bracketBarL);\n        } else {\n          ++this.state.pos;\n          this.finishToken(tt.bracketL);\n        }\n        return;\n      case charCodes.rightSquareBracket:\n        ++this.state.pos;\n        this.finishToken(tt.bracketR);\n        return;\n      case charCodes.leftCurlyBrace:\n        if (\n          !process.env.BABEL_8_BREAKING &&\n          this.hasPlugin(\"recordAndTuple\") &&\n          this.input.charCodeAt(this.state.pos + 1) === charCodes.verticalBar\n        ) {\n          if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n            throw this.raise(\n              Errors.RecordExpressionBarIncorrectStartSyntaxType,\n              this.state.curPosition(),\n            );\n          }\n\n          // {|\n          this.state.pos += 2;\n          this.finishToken(tt.braceBarL);\n        } else {\n          ++this.state.pos;\n          this.finishToken(tt.braceL);\n        }\n        return;\n      case charCodes.rightCurlyBrace:\n        ++this.state.pos;\n        this.finishToken(tt.braceR);\n        return;\n\n      case charCodes.colon:\n        if (\n          this.hasPlugin(\"functionBind\") &&\n          this.input.charCodeAt(this.state.pos + 1) === charCodes.colon\n        ) {\n          this.finishOp(tt.doubleColon, 2);\n        } else {\n          ++this.state.pos;\n          this.finishToken(tt.colon);\n        }\n        return;\n\n      case charCodes.questionMark:\n        this.readToken_question();\n        return;\n\n      case charCodes.graveAccent:\n        this.readTemplateToken();\n        return;\n\n      case charCodes.digit0: {\n        const next = this.input.charCodeAt(this.state.pos + 1);\n        // '0x', '0X' - hex number\n        if (next === charCodes.lowercaseX || next === charCodes.uppercaseX) {\n          this.readRadixNumber(16);\n          return;\n        }\n        // '0o', '0O' - octal number\n        if (next === charCodes.lowercaseO || next === charCodes.uppercaseO) {\n          this.readRadixNumber(8);\n          return;\n        }\n        // '0b', '0B' - binary number\n        if (next === charCodes.lowercaseB || next === charCodes.uppercaseB) {\n          this.readRadixNumber(2);\n          return;\n        }\n      }\n      // Anything else beginning with a digit is an integer, octal\n      // number, or float. (fall through)\n      case charCodes.digit1:\n      case charCodes.digit2:\n      case charCodes.digit3:\n      case charCodes.digit4:\n      case charCodes.digit5:\n      case charCodes.digit6:\n      case charCodes.digit7:\n      case charCodes.digit8:\n      case charCodes.digit9:\n        this.readNumber(false);\n        return;\n\n      // Quotes produce strings.\n      case charCodes.quotationMark:\n      case charCodes.apostrophe:\n        this.readString(code);\n        return;\n\n      // Operators are parsed inline in tiny state machines. '=' (charCodes.equalsTo) is\n      // often referred to. `finishOp` simply skips the amount of\n      // characters it is given as second argument, and returns a token\n      // of the type given by its first argument.\n\n      case charCodes.slash:\n        this.readToken_slash();\n        return;\n\n      case charCodes.percentSign:\n      case charCodes.asterisk:\n        this.readToken_mult_modulo(code);\n        return;\n\n      case charCodes.verticalBar:\n      case charCodes.ampersand:\n        this.readToken_pipe_amp(code);\n        return;\n\n      case charCodes.caret:\n        this.readToken_caret();\n        return;\n\n      case charCodes.plusSign:\n      case charCodes.dash:\n        this.readToken_plus_min(code);\n        return;\n\n      case charCodes.lessThan:\n        this.readToken_lt();\n        return;\n\n      case charCodes.greaterThan:\n        this.readToken_gt();\n        return;\n\n      case charCodes.equalsTo:\n      case charCodes.exclamationMark:\n        this.readToken_eq_excl(code);\n        return;\n\n      case charCodes.tilde:\n        this.finishOp(tt.tilde, 1);\n        return;\n\n      case charCodes.atSign:\n        this.readToken_atSign();\n        return;\n\n      case charCodes.numberSign:\n        this.readToken_numberSign();\n        return;\n\n      case charCodes.backslash:\n        this.readWord();\n        return;\n\n      default:\n        if (isIdentifierStart(code)) {\n          this.readWord(code);\n          return;\n        }\n    }\n\n    throw this.raise(\n      Errors.InvalidOrUnexpectedToken,\n      this.state.curPosition(),\n      {\n        unexpected: String.fromCodePoint(code),\n      },\n    );\n  }\n\n  finishOp(type: TokenType, size: number): void {\n    const str = this.input.slice(this.state.pos, this.state.pos + size);\n    this.state.pos += size;\n    this.finishToken(type, str);\n  }\n\n  readRegexp(): void {\n    const startLoc = this.state.startLoc;\n    const start = this.state.start + 1;\n    let escaped, inClass;\n    let { pos } = this.state;\n    for (; ; ++pos) {\n      if (pos >= this.length) {\n        // FIXME: explain\n        throw this.raise(\n          Errors.UnterminatedRegExp,\n          createPositionWithColumnOffset(startLoc, 1),\n        );\n      }\n      const ch = this.input.charCodeAt(pos);\n      if (isNewLine(ch)) {\n        throw this.raise(\n          Errors.UnterminatedRegExp,\n          createPositionWithColumnOffset(startLoc, 1),\n        );\n      }\n      if (escaped) {\n        escaped = false;\n      } else {\n        if (ch === charCodes.leftSquareBracket) {\n          inClass = true;\n        } else if (ch === charCodes.rightSquareBracket && inClass) {\n          inClass = false;\n        } else if (ch === charCodes.slash && !inClass) {\n          break;\n        }\n        escaped = ch === charCodes.backslash;\n      }\n    }\n    const content = this.input.slice(start, pos);\n    ++pos;\n\n    let mods = \"\";\n\n    const nextPos = () =>\n      // (pos + 1) + 1 - start\n      createPositionWithColumnOffset(startLoc, pos + 2 - start);\n\n    while (pos < this.length) {\n      const cp = this.codePointAtPos(pos);\n      // It doesn't matter if cp > 0xffff, the loop will either throw or break because we check on cp\n      const char = String.fromCharCode(cp);\n\n      // @ts-expect-error VALID_REGEX_FLAGS.has should accept expanded type: number\n      if (VALID_REGEX_FLAGS.has(cp)) {\n        if (cp === charCodes.lowercaseV) {\n          if (mods.includes(\"u\")) {\n            this.raise(Errors.IncompatibleRegExpUVFlags, nextPos());\n          }\n        } else if (cp === charCodes.lowercaseU) {\n          if (mods.includes(\"v\")) {\n            this.raise(Errors.IncompatibleRegExpUVFlags, nextPos());\n          }\n        }\n        if (mods.includes(char)) {\n          this.raise(Errors.DuplicateRegExpFlags, nextPos());\n        }\n      } else if (isIdentifierChar(cp) || cp === charCodes.backslash) {\n        this.raise(Errors.MalformedRegExpFlags, nextPos());\n      } else {\n        break;\n      }\n\n      ++pos;\n      mods += char;\n    }\n    this.state.pos = pos;\n\n    this.finishToken(tt.regexp, {\n      pattern: content,\n      flags: mods,\n    });\n  }\n\n  // Read an integer in the given radix. Return null if zero digits\n  // were read, the integer value otherwise. When `len` is given, this\n  // will return `null` unless the integer has exactly `len` digits.\n  // When `forceLen` is `true`, it means that we already know that in case\n  // of a malformed number we have to skip `len` characters anyway, instead\n  // of bailing out early. For example, in \"\\u{123Z}\" we want to read up to }\n  // anyway, while in \"\\u00Z\" we will stop at Z instead of consuming four\n  // characters (and thus the closing quote).\n\n  readInt(\n    radix: number,\n    len?: number,\n    forceLen: boolean = false,\n    allowNumSeparator: boolean | \"bail\" = true,\n  ): number | null {\n    const { n, pos } = readInt(\n      this.input,\n      this.state.pos,\n      this.state.lineStart,\n      this.state.curLine,\n      radix,\n      len,\n      forceLen,\n      allowNumSeparator,\n      this.errorHandlers_readInt,\n      /* bailOnError */ false,\n    );\n    this.state.pos = pos;\n    return n;\n  }\n\n  readRadixNumber(radix: number): void {\n    const startLoc = this.state.curPosition();\n    let isBigInt = false;\n\n    this.state.pos += 2; // 0x\n    const val = this.readInt(radix);\n    if (val == null) {\n      this.raise(\n        Errors.InvalidDigit,\n        // Numeric literals can't have newlines, so this is safe to do.\n        createPositionWithColumnOffset(startLoc, 2),\n        {\n          radix,\n        },\n      );\n    }\n    const next = this.input.charCodeAt(this.state.pos);\n\n    if (next === charCodes.lowercaseN) {\n      ++this.state.pos;\n      isBigInt = true;\n    } else if (next === charCodes.lowercaseM) {\n      throw this.raise(Errors.InvalidDecimal, startLoc);\n    }\n\n    if (isIdentifierStart(this.codePointAtPos(this.state.pos))) {\n      throw this.raise(Errors.NumberIdentifier, this.state.curPosition());\n    }\n\n    if (isBigInt) {\n      const str = this.input\n        .slice(startLoc.index, this.state.pos)\n        .replace(/[_n]/g, \"\");\n      this.finishToken(tt.bigint, str);\n      return;\n    }\n\n    this.finishToken(tt.num, val);\n  }\n\n  // Read an integer, octal integer, or floating-point number.\n\n  readNumber(startsWithDot: boolean): void {\n    const start = this.state.pos;\n    const startLoc = this.state.curPosition();\n    let isFloat = false;\n    let isBigInt = false;\n    let isDecimal = false;\n    let hasExponent = false;\n    let isOctal = false;\n\n    if (!startsWithDot && this.readInt(10) === null) {\n      this.raise(Errors.InvalidNumber, this.state.curPosition());\n    }\n    const hasLeadingZero =\n      this.state.pos - start >= 2 &&\n      this.input.charCodeAt(start) === charCodes.digit0;\n\n    if (hasLeadingZero) {\n      const integer = this.input.slice(start, this.state.pos);\n      this.recordStrictModeErrors(Errors.StrictOctalLiteral, startLoc);\n      if (!this.state.strict) {\n        // disallow numeric separators in non octal decimals and legacy octal likes\n        const underscorePos = integer.indexOf(\"_\");\n        if (underscorePos > 0) {\n          // Numeric literals can't have newlines, so this is safe to do.\n          this.raise(\n            Errors.ZeroDigitNumericSeparator,\n            createPositionWithColumnOffset(startLoc, underscorePos),\n          );\n        }\n      }\n      isOctal = hasLeadingZero && !/[89]/.test(integer);\n    }\n\n    let next = this.input.charCodeAt(this.state.pos);\n    if (next === charCodes.dot && !isOctal) {\n      ++this.state.pos;\n      this.readInt(10);\n      isFloat = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n\n    if (\n      (next === charCodes.uppercaseE || next === charCodes.lowercaseE) &&\n      !isOctal\n    ) {\n      next = this.input.charCodeAt(++this.state.pos);\n      if (next === charCodes.plusSign || next === charCodes.dash) {\n        ++this.state.pos;\n      }\n      if (this.readInt(10) === null) {\n        this.raise(Errors.InvalidOrMissingExponent, startLoc);\n      }\n      isFloat = true;\n      hasExponent = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n\n    if (next === charCodes.lowercaseN) {\n      // disallow floats, legacy octal syntax and non octal decimals\n      // new style octal (\"0o\") is handled in this.readRadixNumber\n      if (isFloat || hasLeadingZero) {\n        this.raise(Errors.InvalidBigIntLiteral, startLoc);\n      }\n      ++this.state.pos;\n      isBigInt = true;\n    }\n\n    if (next === charCodes.lowercaseM) {\n      this.expectPlugin(\"decimal\", this.state.curPosition());\n      if (hasExponent || hasLeadingZero) {\n        this.raise(Errors.InvalidDecimal, startLoc);\n      }\n      ++this.state.pos;\n      isDecimal = true;\n    }\n\n    if (isIdentifierStart(this.codePointAtPos(this.state.pos))) {\n      throw this.raise(Errors.NumberIdentifier, this.state.curPosition());\n    }\n\n    // remove \"_\" for numeric literal separator, and trailing `m` or `n`\n    const str = this.input.slice(start, this.state.pos).replace(/[_mn]/g, \"\");\n\n    if (isBigInt) {\n      this.finishToken(tt.bigint, str);\n      return;\n    }\n\n    if (isDecimal) {\n      this.finishToken(tt.decimal, str);\n      return;\n    }\n\n    const val = isOctal ? parseInt(str, 8) : parseFloat(str);\n    this.finishToken(tt.num, val);\n  }\n\n  // Read a string value, interpreting backslash-escapes.\n\n  readCodePoint(throwOnInvalid: boolean): number | null {\n    const { code, pos } = readCodePoint(\n      this.input,\n      this.state.pos,\n      this.state.lineStart,\n      this.state.curLine,\n      throwOnInvalid,\n      this.errorHandlers_readCodePoint,\n    );\n    this.state.pos = pos;\n    return code;\n  }\n\n  readString(quote: number): void {\n    const { str, pos, curLine, lineStart } = readStringContents(\n      quote === charCodes.quotationMark ? \"double\" : \"single\",\n      this.input,\n      this.state.pos + 1, // skip the quote\n      this.state.lineStart,\n      this.state.curLine,\n      this.errorHandlers_readStringContents_string,\n    );\n    this.state.pos = pos + 1; // skip the quote\n    this.state.lineStart = lineStart;\n    this.state.curLine = curLine;\n    this.finishToken(tt.string, str);\n  }\n\n  // Reads template continuation `}...`\n  readTemplateContinuation(): void {\n    if (!this.match(tt.braceR)) {\n      this.unexpected(null, tt.braceR);\n    }\n    // rewind pos to `}`\n    this.state.pos--;\n    this.readTemplateToken();\n  }\n\n  // Reads template string tokens.\n  readTemplateToken(): void {\n    const opening = this.input[this.state.pos];\n    const { str, firstInvalidLoc, pos, curLine, lineStart } =\n      readStringContents(\n        \"template\",\n        this.input,\n        this.state.pos + 1, // skip '`' or `}`\n        this.state.lineStart,\n        this.state.curLine,\n        this.errorHandlers_readStringContents_template,\n      );\n    this.state.pos = pos + 1; // skip '`' or `$`\n    this.state.lineStart = lineStart;\n    this.state.curLine = curLine;\n\n    if (firstInvalidLoc) {\n      this.state.firstInvalidTemplateEscapePos = new Position(\n        firstInvalidLoc.curLine,\n        firstInvalidLoc.pos - firstInvalidLoc.lineStart,\n        firstInvalidLoc.pos,\n      );\n    }\n\n    if (this.input.codePointAt(pos) === charCodes.graveAccent) {\n      this.finishToken(\n        tt.templateTail,\n        firstInvalidLoc ? null : opening + str + \"`\",\n      );\n    } else {\n      this.state.pos++; // skip '{'\n      this.finishToken(\n        tt.templateNonTail,\n        firstInvalidLoc ? null : opening + str + \"${\",\n      );\n    }\n  }\n\n  recordStrictModeErrors(toParseError: DeferredStrictError, at: Position) {\n    const index = at.index;\n\n    if (this.state.strict && !this.state.strictErrors.has(index)) {\n      this.raise(toParseError, at);\n    } else {\n      this.state.strictErrors.set(index, [toParseError, at]);\n    }\n  }\n\n  // Read an identifier, and return it as a string. Sets `this.state.containsEsc`\n  // to whether the word contained a '\\u' escape.\n  //\n  // Incrementally adds only escaped chars, adding other chunks as-is\n  // as a micro-optimization.\n  //\n  // When `firstCode` is given, it assumes it is always an identifier start and\n  // will skip reading start position again\n\n  readWord1(firstCode?: number): string {\n    this.state.containsEsc = false;\n    let word = \"\";\n    const start = this.state.pos;\n    let chunkStart = this.state.pos;\n    if (firstCode !== undefined) {\n      this.state.pos += firstCode <= 0xffff ? 1 : 2;\n    }\n\n    while (this.state.pos < this.length) {\n      const ch = this.codePointAtPos(this.state.pos);\n      if (isIdentifierChar(ch)) {\n        this.state.pos += ch <= 0xffff ? 1 : 2;\n      } else if (ch === charCodes.backslash) {\n        this.state.containsEsc = true;\n\n        word += this.input.slice(chunkStart, this.state.pos);\n        const escStart = this.state.curPosition();\n        const identifierCheck =\n          this.state.pos === start ? isIdentifierStart : isIdentifierChar;\n\n        if (this.input.charCodeAt(++this.state.pos) !== charCodes.lowercaseU) {\n          this.raise(Errors.MissingUnicodeEscape, this.state.curPosition());\n          chunkStart = this.state.pos - 1;\n          continue;\n        }\n\n        ++this.state.pos;\n        const esc = this.readCodePoint(true);\n        if (esc !== null) {\n          if (!identifierCheck(esc)) {\n            this.raise(Errors.EscapedCharNotAnIdentifier, escStart);\n          }\n\n          word += String.fromCodePoint(esc);\n        }\n        chunkStart = this.state.pos;\n      } else {\n        break;\n      }\n    }\n    return word + this.input.slice(chunkStart, this.state.pos);\n  }\n\n  // Read an identifier or keyword token. Will check for reserved\n  // words when necessary.\n\n  readWord(firstCode?: number): void {\n    const word = this.readWord1(firstCode);\n    const type = keywordTypes.get(word);\n    if (type !== undefined) {\n      // We don't use word as state.value here because word is a dynamic string\n      // while token label is a shared constant string\n      this.finishToken(type, tokenLabelName(type));\n    } else {\n      this.finishToken(tt.name, word);\n    }\n  }\n\n  checkKeywordEscapes(): void {\n    const { type } = this.state;\n    if (tokenIsKeyword(type) && this.state.containsEsc) {\n      this.raise(Errors.InvalidEscapedReservedWord, this.state.startLoc, {\n        reservedWord: tokenLabelName(type),\n      });\n    }\n  }\n\n  /**\n   * Raise a `ParseError` given the appropriate properties. If passed a\n   * `Position` for the `at` property, raises the `ParseError` at that location.\n   * Otherwise, if passed a `Node`, raises the `ParseError` at the start\n   * location of that `Node`.\n   *\n   * If `errorRecovery` is `true`, the error is pushed to the errors array and\n   * returned. If `errorRecovery` is `false`, the error is instead thrown.\n   *\n   * The return type is marked as `never` for simplicity, as error recovery\n   * will create types in an invalid AST shape.\n   */\n  raise<ErrorDetails = object>(\n    toParseError: ParseErrorConstructor<ErrorDetails>,\n    at: Position | Undone<Node>,\n    details: ErrorDetails = {} as ErrorDetails,\n  ): ParseError<ErrorDetails> {\n    const loc = at instanceof Position ? at : at.loc.start;\n    const error = toParseError(loc, details);\n\n    if (!this.options.errorRecovery) throw error;\n    if (!this.isLookahead) this.state.errors.push(error);\n\n    return error;\n  }\n\n  /**\n   * If `errorRecovery` is `false`, this method behaves identically to `raise`.\n   * If `errorRecovery` is `true`, this method will first see if there is\n   * already an error stored at the same `Position`, and replaces it with the\n   * one generated here.\n   */\n  raiseOverwrite<ErrorDetails>(\n    toParseError: ParseErrorConstructor<ErrorDetails>,\n    at: Position | Undone<Node>,\n    details: ErrorDetails = {} as ErrorDetails,\n  ): ParseError<ErrorDetails> | never {\n    const loc = at instanceof Position ? at : at.loc.start;\n    const pos = loc.index;\n    const errors = this.state.errors;\n\n    for (let i = errors.length - 1; i >= 0; i--) {\n      const error = errors[i];\n      if (error.loc.index === pos) {\n        return (errors[i] = toParseError(loc, details));\n      }\n      if (error.loc.index < pos) break;\n    }\n\n    return this.raise(toParseError, at, details);\n  }\n\n  // updateContext is used by the jsx plugin\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  updateContext(prevType: TokenType): void {}\n\n  // Raise an unexpected token error. Can take the expected token type.\n  unexpected(loc?: Position | null, type?: TokenType): void {\n    throw this.raise(\n      Errors.UnexpectedToken,\n      loc != null ? loc : this.state.startLoc,\n      {\n        expected: type ? tokenLabelName(type) : null,\n      },\n    );\n  }\n\n  expectPlugin(pluginName: Plugin, loc?: Position): true {\n    if (this.hasPlugin(pluginName)) {\n      return true;\n    }\n\n    throw this.raise(\n      Errors.MissingPlugin,\n      loc != null ? loc : this.state.startLoc,\n      {\n        missingPlugin: [pluginName],\n      },\n    );\n  }\n\n  expectOnePlugin(pluginNames: Plugin[]): void {\n    if (!pluginNames.some(name => this.hasPlugin(name))) {\n      throw this.raise(Errors.MissingOneOfPlugins, this.state.startLoc, {\n        missingPlugin: pluginNames,\n      });\n    }\n  }\n\n  errorBuilder(error: ParseErrorConstructor<object>) {\n    return (pos: number, lineStart: number, curLine: number) => {\n      this.raise(error, buildPosition(pos, lineStart, curLine));\n    };\n  }\n\n  errorHandlers_readInt: IntErrorHandlers = {\n    invalidDigit: (pos, lineStart, curLine, radix) => {\n      if (!this.options.errorRecovery) return false;\n\n      this.raise(Errors.InvalidDigit, buildPosition(pos, lineStart, curLine), {\n        radix,\n      });\n      // Continue parsing the number as if there was no invalid digit.\n      return true;\n    },\n    numericSeparatorInEscapeSequence: this.errorBuilder(\n      Errors.NumericSeparatorInEscapeSequence,\n    ),\n    unexpectedNumericSeparator: this.errorBuilder(\n      Errors.UnexpectedNumericSeparator,\n    ),\n  };\n\n  errorHandlers_readCodePoint: CodePointErrorHandlers = {\n    ...this.errorHandlers_readInt,\n    invalidEscapeSequence: this.errorBuilder(Errors.InvalidEscapeSequence),\n    invalidCodePoint: this.errorBuilder(Errors.InvalidCodePoint),\n  };\n\n  errorHandlers_readStringContents_string: StringContentsErrorHandlers = {\n    ...this.errorHandlers_readCodePoint,\n    strictNumericEscape: (pos, lineStart, curLine) => {\n      this.recordStrictModeErrors(\n        Errors.StrictNumericEscape,\n        buildPosition(pos, lineStart, curLine),\n      );\n    },\n    unterminated: (pos, lineStart, curLine) => {\n      throw this.raise(\n        Errors.UnterminatedString, // Report the error at the string quote\n        buildPosition(pos - 1, lineStart, curLine),\n      );\n    },\n  };\n\n  errorHandlers_readStringContents_template: StringContentsErrorHandlers = {\n    ...this.errorHandlers_readCodePoint,\n    strictNumericEscape: this.errorBuilder(Errors.StrictNumericEscape),\n    unterminated: (pos, lineStart, curLine) => {\n      throw this.raise(\n        Errors.UnterminatedTemplate,\n        buildPosition(pos, lineStart, curLine),\n      );\n    },\n  };\n}\n", "import { ClassElementType } from \"./scopeflags.ts\";\nimport type { Position } from \"./location.ts\";\nimport { Errors } from \"../parse-error.ts\";\nimport type Tokenizer from \"../tokenizer/index.ts\";\n\nexport class ClassScope {\n  // A list of private named declared in the current class\n  privateNames: Set<string> = new Set();\n\n  // A list of private getters of setters without their counterpart\n  loneAccessors: Map<string, ClassElementType> = new Map();\n\n  // A list of private names used before being defined, mapping to\n  // their position.\n  undefinedPrivateNames: Map<string, Position> = new Map();\n}\n\nexport default class ClassScopeHandler {\n  parser: Tokenizer;\n  stack: Array<ClassScope> = [];\n  undefinedPrivateNames: Map<string, Position> = new Map();\n\n  constructor(parser: Tokenizer) {\n    this.parser = parser;\n  }\n\n  current(): ClassScope {\n    return this.stack[this.stack.length - 1];\n  }\n\n  enter() {\n    this.stack.push(new ClassScope());\n  }\n\n  exit() {\n    const oldClassScope = this.stack.pop();\n\n    // Migrate the usage of not yet defined private names to the outer\n    // class scope, or raise an error if we reached the top-level scope.\n\n    const current = this.current();\n\n    // Array.from is needed because this is compiled to an array-like for loop\n    for (const [name, loc] of Array.from(oldClassScope.undefinedPrivateNames)) {\n      if (current) {\n        if (!current.undefinedPrivateNames.has(name)) {\n          current.undefinedPrivateNames.set(name, loc);\n        }\n      } else {\n        this.parser.raise(Errors.InvalidPrivateFieldResolution, loc, {\n          identifierName: name,\n        });\n      }\n    }\n  }\n\n  declarePrivateName(\n    name: string,\n    elementType: ClassElementType,\n    loc: Position,\n  ) {\n    const { privateNames, loneAccessors, undefinedPrivateNames } =\n      this.current();\n    let redefined = privateNames.has(name);\n\n    if (elementType & ClassElementType.KIND_ACCESSOR) {\n      const accessor = redefined && loneAccessors.get(name);\n      if (accessor) {\n        const oldStatic = accessor & ClassElementType.FLAG_STATIC;\n        const newStatic = elementType & ClassElementType.FLAG_STATIC;\n\n        const oldKind = accessor & ClassElementType.KIND_ACCESSOR;\n        const newKind = elementType & ClassElementType.KIND_ACCESSOR;\n\n        // The private name can be duplicated only if it is used by\n        // two accessors with different kind (get and set), and if\n        // they have the same placement (static or not).\n        redefined = oldKind === newKind || oldStatic !== newStatic;\n\n        if (!redefined) loneAccessors.delete(name);\n      } else if (!redefined) {\n        loneAccessors.set(name, elementType);\n      }\n    }\n\n    if (redefined) {\n      this.parser.raise(Errors.PrivateNameRedeclaration, loc, {\n        identifierName: name,\n      });\n    }\n\n    privateNames.add(name);\n    undefinedPrivateNames.delete(name);\n  }\n\n  usePrivateName(name: string, loc: Position) {\n    let classScope;\n    for (classScope of this.stack) {\n      if (classScope.privateNames.has(name)) return;\n    }\n\n    if (classScope) {\n      classScope.undefinedPrivateNames.set(name, loc);\n    } else {\n      // top-level\n      this.parser.raise(Errors.InvalidPrivateFieldResolution, loc, {\n        identifierName: name,\n      });\n    }\n  }\n}\n", "import { Errors, type ParseErrorConstructor } from \"../parse-error.ts\";\nimport type { Position } from \"./location.ts\";\nimport type { Node } from \"../types.ts\";\nimport type Tokenizer from \"../tokenizer/index.ts\";\n\n/**\n * @module util/expression-scope\n\nExpressionScope is used to track declaration errors in these ambiguous patterns:\n\n- CoverParenthesizedExpressionAndArrowParameterList\n  e.g. we don't know if `({ x })` is an parenthesized expression or an\n  arrow function parameters until we see an `=>` after `)`.\n\n- CoverCallExpressionAndAsyncArrowHead\n  e.g. we don't know if `async({ x })` is a call expression or an async arrow\n  function parameters until we see an `=>` after `)`\n\nThe following declaration errors (@see parser-errors/standard) will be recorded in\nsome expression scopes and thrown later when we know what the ambiguous pattern is\n\n- AwaitBindingIdentifier\n- AwaitExpressionFormalParameter\n- YieldInParameter\n- InvalidParenthesizedAssignment when parenthesized is an identifier\n\nThere are four different expression scope\n- Expression\n  A general scope that represents program / function body / static block. No errors\n  will be recorded nor thrown in this scope.\n\n- MaybeArrowParameterDeclaration\n  A scope that represents ambiguous arrow head e.g. `(x)`. Errors will be recorded\n  alongside parent scopes and thrown when `ExpressionScopeHandler#validateAsPattern`\n  is called.\n\n- MaybeAsyncArrowParameterDeclaration\n  A scope that represents ambiguous async arrow head e.g. `async(x)`. Errors will\n  be recorded alongside parent scopes and thrown when\n  `ExpressionScopeHandler#validateAsPattern` is called.\n\n- ParameterDeclaration\n  A scope that represents unambiguous function parameters `function(x)`. Errors\n  recorded in this scope will be thrown immediately. No errors will be recorded in\n  this scope.\n\n// @see {@link https://docs.google.com/document/d/1FAvEp9EUK-G8kHfDIEo_385Hs2SUBCYbJ5H-NnLvq8M|V8 Expression Scope design docs}\n */\n\nconst enum ExpressionScopeType {\n  kExpression = 0,\n  kMaybeArrowParameterDeclaration = 1,\n  kMaybeAsyncArrowParameterDeclaration = 2,\n  kParameterDeclaration = 3,\n}\n\nclass ExpressionScope {\n  declare type: ExpressionScopeType;\n\n  constructor(type: ExpressionScopeType = ExpressionScopeType.kExpression) {\n    this.type = type;\n  }\n\n  canBeArrowParameterDeclaration(): this is ArrowHeadParsingScope {\n    return (\n      this.type === ExpressionScopeType.kMaybeAsyncArrowParameterDeclaration ||\n      this.type === ExpressionScopeType.kMaybeArrowParameterDeclaration\n    );\n  }\n\n  isCertainlyParameterDeclaration() {\n    return this.type === ExpressionScopeType.kParameterDeclaration;\n  }\n}\n\ntype ArrowHeadParsingParameterInitializerError =\n  | typeof Errors.AwaitExpressionFormalParameter\n  | typeof Errors.YieldInParameter;\ntype ArrowHeadParsingDeclarationError =\n  | ArrowHeadParsingParameterInitializerError\n  | typeof Errors.InvalidParenthesizedAssignment\n  | typeof Errors.AwaitBindingIdentifier;\n\nclass ArrowHeadParsingScope extends ExpressionScope {\n  declarationErrors: Map<number, [ParseErrorConstructor<object>, Position]> =\n    new Map();\n  constructor(\n    type:\n      | ExpressionScopeType.kMaybeArrowParameterDeclaration\n      | ExpressionScopeType.kMaybeAsyncArrowParameterDeclaration,\n  ) {\n    super(type);\n  }\n  recordDeclarationError(\n    ParsingErrorClass: ParseErrorConstructor<object>,\n    at: Position,\n  ) {\n    const index = at.index;\n\n    this.declarationErrors.set(index, [ParsingErrorClass, at]);\n  }\n  clearDeclarationError(index: number) {\n    this.declarationErrors.delete(index);\n  }\n  iterateErrors(\n    iterator: (a: [ArrowHeadParsingDeclarationError, Position]) => void,\n  ) {\n    this.declarationErrors.forEach(iterator);\n  }\n}\n\nexport default class ExpressionScopeHandler {\n  parser: Tokenizer;\n  stack: Array<ExpressionScope> = [new ExpressionScope()];\n\n  constructor(parser: Tokenizer) {\n    this.parser = parser;\n  }\n  enter(scope: ExpressionScope) {\n    this.stack.push(scope);\n  }\n\n  exit() {\n    this.stack.pop();\n  }\n\n  /**\n   * Record likely parameter initializer errors\n   *\n   * When current scope is a ParameterDeclaration, the error will be thrown immediately,\n   * otherwise it will be recorded to any ancestry MaybeArrowParameterDeclaration and\n   * MaybeAsyncArrowParameterDeclaration scope until an Expression scope is seen.\n   */\n  recordParameterInitializerError(\n    toParseError: ArrowHeadParsingParameterInitializerError,\n    node: Node,\n  ): void {\n    const origin = node.loc.start;\n    const { stack } = this;\n    let i = stack.length - 1;\n    let scope: ExpressionScope = stack[i];\n    while (!scope.isCertainlyParameterDeclaration()) {\n      if (scope.canBeArrowParameterDeclaration()) {\n        scope.recordDeclarationError(toParseError, origin);\n      } else {\n        /*:: invariant(scope.type == ExpressionScopeType.kExpression) */\n        // Type-Expression is the boundary where initializer error can populate to\n        return;\n      }\n      scope = stack[--i];\n    }\n    this.parser.raise(toParseError, origin);\n  }\n\n  /**\n   * Record errors that must be thrown if the current pattern ends up being an arrow\n   * function parameter. This is used to record parenthesized identifiers, and to record\n   * \"a as T\" and \"<T> a\" type assertions when parsing typescript.\n   *\n   * A parenthesized identifier (or type assertion) in LHS can be ambiguous because the assignment\n   * can be transformed to an assignable later, but not vice versa:\n   * For example, in `([(a) = []] = []) => {}`, we think `(a) = []` is an LHS in `[(a) = []]`,\n   * an LHS within `[(a) = []] = []`. However the LHS chain is then transformed by toAssignable,\n   * and we should throw assignment `(a)`, which is only valid in LHS. Hence we record the\n   * location of parenthesized `(a)` to current scope if it is one of MaybeArrowParameterDeclaration\n   * and MaybeAsyncArrowParameterDeclaration\n   *\n   * Unlike `recordParameterInitializerError`, we don't record to ancestry scope because we\n   * validate arrow head parsing scope before exit, and then the LHS will be unambiguous:\n   * For example, in `( x = ( [(a) = []] = [] ) ) => {}`, we should not record `(a)` in `( x = ... ) =>`\n   * arrow scope because when we finish parsing `( [(a) = []] = [] )`, it is an unambiguous assignment\n   * expression and can not be cast to pattern\n   */\n  recordArrowParameterBindingError(\n    error: ParseErrorConstructor<object>,\n    node: Node,\n  ): void {\n    const { stack } = this;\n    const scope: ExpressionScope = stack[stack.length - 1];\n    const origin = node.loc.start;\n    if (scope.isCertainlyParameterDeclaration()) {\n      this.parser.raise(error, origin);\n    } else if (scope.canBeArrowParameterDeclaration()) {\n      scope.recordDeclarationError(error, origin);\n    } else {\n      return;\n    }\n  }\n\n  /**\n   * Record likely async arrow parameter errors\n   *\n   * Errors will be recorded to any ancestry MaybeAsyncArrowParameterDeclaration\n   * scope until an Expression scope is seen.\n   */\n  recordAsyncArrowParametersError(at: Position): void {\n    const { stack } = this;\n    let i = stack.length - 1;\n    let scope: ExpressionScope = stack[i];\n    while (scope.canBeArrowParameterDeclaration()) {\n      if (\n        scope.type === ExpressionScopeType.kMaybeAsyncArrowParameterDeclaration\n      ) {\n        scope.recordDeclarationError(Errors.AwaitBindingIdentifier, at);\n      }\n      scope = stack[--i];\n    }\n  }\n\n  validateAsPattern(): void {\n    const { stack } = this;\n    const currentScope = stack[stack.length - 1];\n    if (!currentScope.canBeArrowParameterDeclaration()) return;\n    currentScope.iterateErrors(([toParseError, loc]) => {\n      this.parser.raise(toParseError, loc);\n      // iterate from parent scope\n      let i = stack.length - 2;\n      let scope = stack[i];\n      while (scope.canBeArrowParameterDeclaration()) {\n        scope.clearDeclarationError(loc.index);\n        scope = stack[--i];\n      }\n    });\n  }\n}\n\nexport function newParameterDeclarationScope() {\n  return new ExpressionScope(ExpressionScopeType.kParameterDeclaration);\n}\n\nexport function newArrowHeadScope() {\n  return new ArrowHeadParsingScope(\n    ExpressionScopeType.kMaybeArrowParameterDeclaration,\n  );\n}\n\nexport function newAsyncArrowScope() {\n  return new ArrowHeadParsingScope(\n    ExpressionScopeType.kMaybeAsyncArrowParameterDeclaration,\n  );\n}\n\nexport function newExpressionScope() {\n  return new ExpressionScope();\n}\n", "// ProductionParameterHandler is a stack fashioned production parameter tracker\n// https://tc39.es/ecma262/#sec-grammar-notation\n// The tracked parameters are defined above.\n//\n// Whenever [+Await]/[+Yield] appears in the right-hand sides of a production,\n// we must enter a new tracking stack. For example when parsing\n//\n// AsyncFunctionDeclaration [Yield, Await]:\n//   async [no LineTerminator here] function BindingIdentifier[?Yield, ?Await]\n//     ( FormalParameters[~Yield, +Await] ) { AsyncFunctionBody }\n//\n// we must follow such process:\n//\n// 1. parse async keyword\n// 2. parse function keyword\n// 3. parse bindingIdentifier <= inherit current parameters: [?Await]\n// 4. enter new stack with (PARAM_AWAIT)\n// 5. parse formal parameters <= must have [Await] parameter [+Await]\n// 6. parse function body\n// 7. exit current stack\n\nexport const enum ParamKind {\n  // Initial Parameter flags\n  PARAM = 0b0000,\n  // track [Yield] production parameter\n  PARAM_YIELD = 0b0001,\n  // track [Await] production parameter\n  PARAM_AWAIT = 0b0010,\n  // track [Return] production parameter\n  PARAM_RETURN = 0b0100,\n  // track [In] production parameter\n  PARAM_IN = 0b1000,\n}\n\n// todo(flow->ts) - check if more granular type can be used,\n//  type below is not good because things like PARAM_AWAIT|PARAM_YIELD are not included\n// export type ParamKind =\n//   | typeof PARAM\n//   | typeof PARAM_AWAIT\n//   | typeof PARAM_IN\n//   | typeof PARAM_RETURN\n//   | typeof PARAM_YIELD;\n\nexport default class ProductionParameterHandler {\n  stacks: Array<ParamKind> = [];\n  enter(flags: ParamKind) {\n    this.stacks.push(flags);\n  }\n\n  exit() {\n    this.stacks.pop();\n  }\n\n  currentFlags(): ParamKind {\n    return this.stacks[this.stacks.length - 1];\n  }\n\n  get hasAwait(): boolean {\n    return (this.currentFlags() & ParamKind.PARAM_AWAIT) > 0;\n  }\n\n  get hasYield(): boolean {\n    return (this.currentFlags() & ParamKind.PARAM_YIELD) > 0;\n  }\n\n  get hasReturn(): boolean {\n    return (this.currentFlags() & ParamKind.PARAM_RETURN) > 0;\n  }\n\n  get hasIn(): boolean {\n    return (this.currentFlags() & ParamKind.PARAM_IN) > 0;\n  }\n}\n\nexport function functionFlags(\n  isAsync: boolean,\n  isGenerator: boolean,\n): ParamKind {\n  return (\n    (isAsync ? ParamKind.PARAM_AWAIT : 0) |\n    (isGenerator ? ParamKind.PARAM_YIELD : 0)\n  );\n}\n", "import type { Position } from \"../util/location.ts\";\nimport {\n  tokenIsLiteralPropertyName,\n  tt,\n  type TokenType,\n} from \"../tokenizer/types.ts\";\nimport Tokenizer from \"../tokenizer/index.ts\";\nimport type State from \"../tokenizer/state.ts\";\nimport type {\n  EstreePropertyDefinition,\n  Node,\n  ObjectMethod,\n  ObjectProperty,\n  PrivateName,\n} from \"../types.d.ts\";\nimport { hasNewLine } from \"../util/whitespace.ts\";\nimport { isIdentifierChar } from \"../util/identifier.ts\";\nimport ClassScopeHandler from \"../util/class-scope.ts\";\nimport ExpressionScopeHandler from \"../util/expression-scope.ts\";\nimport { ScopeFlag } from \"../util/scopeflags.ts\";\nimport ProductionParameterHandler, {\n  ParamKind,\n} from \"../util/production-parameter.ts\";\nimport {\n  Errors,\n  type ParseError,\n  type ParseErrorConstructor,\n} from \"../parse-error.ts\";\nimport type Parser from \"./index.ts\";\n\nimport type ScopeHandler from \"../util/scope.ts\";\n\ntype TryParse<Node, Error, Thrown, Aborted, FailState> = {\n  node: Node;\n  error: Error;\n  thrown: Thrown;\n  aborted: Aborted;\n  failState: FailState;\n};\n\n// ## Parser utilities\n\nexport default abstract class UtilParser extends Tokenizer {\n  // Forward-declaration: defined in parser/index.js\n  abstract getScopeHandler(): new (...args: any) => ScopeHandler;\n\n  addExtra(\n    node: Partial<Node>,\n    key: string,\n    value: any,\n    enumerable: boolean = true,\n  ): void {\n    if (!node) return;\n\n    let { extra } = node;\n    if (extra == null) {\n      extra = {};\n      node.extra = extra;\n    }\n\n    if (enumerable) {\n      extra[key] = value;\n    } else {\n      Object.defineProperty(extra, key, { enumerable, value });\n    }\n  }\n\n  // Tests whether parsed token is a contextual keyword.\n\n  isContextual(token: TokenType): boolean {\n    return this.state.type === token && !this.state.containsEsc;\n  }\n\n  isUnparsedContextual(nameStart: number, name: string): boolean {\n    const nameEnd = nameStart + name.length;\n    if (this.input.slice(nameStart, nameEnd) === name) {\n      const nextCh = this.input.charCodeAt(nameEnd);\n      return !(\n        isIdentifierChar(nextCh) ||\n        // check if `nextCh is between 0xd800 - 0xdbff,\n        // if `nextCh` is NaN, `NaN & 0xfc00` is 0, the function\n        // returns true\n        (nextCh & 0xfc00) === 0xd800\n      );\n    }\n    return false;\n  }\n\n  isLookaheadContextual(name: string): boolean {\n    const next = this.nextTokenStart();\n    return this.isUnparsedContextual(next, name);\n  }\n\n  // Consumes contextual keyword if possible.\n\n  eatContextual(token: TokenType): boolean {\n    if (this.isContextual(token)) {\n      this.next();\n      return true;\n    }\n    return false;\n  }\n\n  // Asserts that following token is given contextual keyword.\n\n  expectContextual(\n    token: TokenType,\n    toParseError?: ParseErrorConstructor<any>,\n  ): void {\n    if (!this.eatContextual(token)) {\n      if (toParseError != null) {\n        throw this.raise(toParseError, this.state.startLoc);\n      }\n      this.unexpected(null, token);\n    }\n  }\n\n  // Test whether a semicolon can be inserted at the current position.\n\n  canInsertSemicolon(): boolean {\n    return (\n      this.match(tt.eof) ||\n      this.match(tt.braceR) ||\n      this.hasPrecedingLineBreak()\n    );\n  }\n\n  hasPrecedingLineBreak(): boolean {\n    return hasNewLine(\n      this.input,\n      this.state.lastTokEndLoc.index,\n      this.state.start,\n    );\n  }\n\n  hasFollowingLineBreak(): boolean {\n    return hasNewLine(this.input, this.state.end, this.nextTokenStart());\n  }\n\n  isLineTerminator(): boolean {\n    return this.eat(tt.semi) || this.canInsertSemicolon();\n  }\n\n  // Consume a semicolon, or, failing that, see if we are allowed to\n  // pretend that there is a semicolon at this position.\n\n  semicolon(allowAsi: boolean = true): void {\n    if (allowAsi ? this.isLineTerminator() : this.eat(tt.semi)) return;\n    this.raise(Errors.MissingSemicolon, this.state.lastTokEndLoc);\n  }\n\n  // Expect a token of a given type. If found, consume it, otherwise,\n  // raise an unexpected token error at given pos.\n\n  expect(type: TokenType, loc?: Position | null): void {\n    if (!this.eat(type)) {\n      this.unexpected(loc, type);\n    }\n  }\n\n  // tryParse will clone parser state.\n  // It is expensive and should be used with cautions\n  tryParse<T extends Node | ReadonlyArray<Node>>(\n    fn: (abort: (node?: T) => never) => T,\n    oldState: State = this.state.clone(),\n  ):\n    | TryParse<T, null, false, false, null>\n    | TryParse<T | null, ParseError<any>, boolean, false, State>\n    | TryParse<T | null, null, false, true, State> {\n    const abortSignal: {\n      node: T | null;\n    } = { node: null };\n    try {\n      const node = fn((node = null) => {\n        abortSignal.node = node;\n        // eslint-disable-next-line @typescript-eslint/only-throw-error\n        throw abortSignal;\n      });\n      if (this.state.errors.length > oldState.errors.length) {\n        const failState = this.state;\n        this.state = oldState;\n        // tokensLength should be preserved during error recovery mode\n        // since the parser does not halt and will instead parse the\n        // remaining tokens\n        this.state.tokensLength = failState.tokensLength;\n        return {\n          node,\n          error: failState.errors[oldState.errors.length],\n          thrown: false,\n          aborted: false,\n          failState,\n        };\n      }\n\n      return {\n        node,\n        error: null,\n        thrown: false,\n        aborted: false,\n        failState: null,\n      };\n    } catch (error) {\n      const failState = this.state;\n      this.state = oldState;\n      if (error instanceof SyntaxError) {\n        // @ts-expect-error casting general syntax error to parse error\n        return { node: null, error, thrown: true, aborted: false, failState };\n      }\n      if (error === abortSignal) {\n        return {\n          node: abortSignal.node,\n          error: null,\n          thrown: false,\n          aborted: true,\n          failState,\n        };\n      }\n\n      throw error;\n    }\n  }\n\n  checkExpressionErrors(\n    refExpressionErrors: ExpressionErrors | undefined | null,\n    andThrow: boolean,\n  ) {\n    if (!refExpressionErrors) return false;\n    const {\n      shorthandAssignLoc,\n      doubleProtoLoc,\n      privateKeyLoc,\n      optionalParametersLoc,\n    } = refExpressionErrors;\n\n    const hasErrors =\n      !!shorthandAssignLoc ||\n      !!doubleProtoLoc ||\n      !!optionalParametersLoc ||\n      !!privateKeyLoc;\n\n    if (!andThrow) {\n      return hasErrors;\n    }\n\n    if (shorthandAssignLoc != null) {\n      this.raise(Errors.InvalidCoverInitializedName, shorthandAssignLoc);\n    }\n\n    if (doubleProtoLoc != null) {\n      this.raise(Errors.DuplicateProto, doubleProtoLoc);\n    }\n\n    if (privateKeyLoc != null) {\n      this.raise(Errors.UnexpectedPrivateField, privateKeyLoc);\n    }\n\n    if (optionalParametersLoc != null) {\n      this.unexpected(optionalParametersLoc);\n    }\n  }\n\n  /**\n   * Test if current token is a literal property name\n   * https://tc39.es/ecma262/#prod-LiteralPropertyName\n   * LiteralPropertyName:\n   *   IdentifierName\n   *   StringLiteral\n   *   NumericLiteral\n   *   BigIntLiteral\n   */\n  isLiteralPropertyName(): boolean {\n    return tokenIsLiteralPropertyName(this.state.type);\n  }\n\n  /**\n   * Test if given node is a PrivateName\n   * will be overridden in ESTree plugin\n   */\n  isPrivateName(node: Node): node is PrivateName {\n    return node.type === \"PrivateName\";\n  }\n\n  /**\n   * Return the string value of a given private name\n   * WITHOUT `#`\n   * @see {@link https://tc39.es/ecma262/#sec-static-semantics-stringvalue}\n   */\n  getPrivateNameSV(node: PrivateName): string {\n    return node.id.name;\n  }\n\n  /**\n   * Return whether the given node is a member/optional chain that\n   * contains a private name as its property\n   * It is overridden in ESTree plugin\n   */\n  hasPropertyAsPrivateName(node: Node): boolean {\n    return (\n      (node.type === \"MemberExpression\" ||\n        node.type === \"OptionalMemberExpression\") &&\n      this.isPrivateName(node.property)\n    );\n  }\n\n  isObjectProperty(\n    node: Node,\n  ): node is ObjectProperty | EstreePropertyDefinition {\n    return node.type === \"ObjectProperty\";\n  }\n\n  isObjectMethod(node: Node): node is ObjectMethod {\n    return node.type === \"ObjectMethod\";\n  }\n\n  initializeScopes(\n    this: Parser,\n    inModule: boolean = this.options.sourceType === \"module\",\n  ): () => void {\n    // Initialize state\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n\n    const oldExportedIdentifiers = this.exportedIdentifiers;\n    this.exportedIdentifiers = new Set();\n\n    // initialize scopes\n    const oldInModule = this.inModule;\n    this.inModule = inModule;\n\n    const oldScope = this.scope;\n    const ScopeHandler = this.getScopeHandler();\n    this.scope = new ScopeHandler(this, inModule);\n\n    const oldProdParam = this.prodParam;\n    this.prodParam = new ProductionParameterHandler();\n\n    const oldClassScope = this.classScope;\n    this.classScope = new ClassScopeHandler(this);\n\n    const oldExpressionScope = this.expressionScope;\n    this.expressionScope = new ExpressionScopeHandler(this);\n\n    return () => {\n      // Revert state\n      this.state.labels = oldLabels;\n      this.exportedIdentifiers = oldExportedIdentifiers;\n\n      // Revert scopes\n      this.inModule = oldInModule;\n      this.scope = oldScope;\n      this.prodParam = oldProdParam;\n      this.classScope = oldClassScope;\n      this.expressionScope = oldExpressionScope;\n    };\n  }\n\n  enterInitialScopes() {\n    let paramFlags = ParamKind.PARAM;\n    if (this.inModule) {\n      paramFlags |= ParamKind.PARAM_AWAIT;\n    }\n    this.scope.enter(ScopeFlag.PROGRAM);\n    this.prodParam.enter(paramFlags);\n  }\n\n  checkDestructuringPrivate(refExpressionErrors: ExpressionErrors) {\n    const { privateKeyLoc } = refExpressionErrors;\n    if (privateKeyLoc !== null) {\n      this.expectPlugin(\"destructuringPrivate\", privateKeyLoc);\n    }\n  }\n}\n\n/**\n * The ExpressionErrors is a context struct used to track ambiguous patterns\n * When we are sure the parsed pattern is a RHS, which means it is not a pattern,\n * we will throw on this position on invalid assign syntax, otherwise it will be reset to -1\n *\n * Types of ExpressionErrors:\n *\n * - **shorthandAssignLoc**: track initializer `=` position\n * - **doubleProtoLoc**: track the duplicate `__proto__` key position\n * - **privateKey**: track private key `#p` position\n * - **optionalParametersLoc**: track the optional parameter (`?`).\n * It's only used by typescript and flow plugins\n */\nexport class ExpressionErrors {\n  shorthandAssignLoc: Position | undefined | null = null;\n  doubleProtoLoc: Position | undefined | null = null;\n  privateKeyLoc: Position | undefined | null = null;\n  optionalParametersLoc: Position | undefined | null = null;\n}\n", "import UtilParser from \"./util.ts\";\nimport { SourceLocation, type Position } from \"../util/location.ts\";\nimport type { Comment, Node as NodeType, NodeBase } from \"../types.ts\";\n\n// Start an AST node, attaching a start offset.\n\nclass Node implements NodeBase {\n  constructor(parser: UtilParser, pos: number, loc: Position) {\n    this.start = pos;\n    this.end = 0;\n    this.loc = new SourceLocation(loc);\n    if (parser?.options.ranges) this.range = [pos, 0];\n    if (parser?.filename) this.loc.filename = parser.filename;\n  }\n\n  type: string = \"\";\n  declare start: number;\n  declare end: number;\n  declare loc: SourceLocation;\n  declare range: [number, number];\n  declare leadingComments: Array<Comment>;\n  declare trailingComments: Array<Comment>;\n  declare innerComments: Array<Comment>;\n  declare extra: {\n    [key: string]: any;\n  };\n}\nconst NodePrototype = Node.prototype;\n\nif (!process.env.BABEL_8_BREAKING) {\n  // @ts-expect-error __clone is not defined in Node prototype\n  NodePrototype.__clone = function (): Node {\n    const newNode = new Node(undefined, this.start, this.loc.start);\n    const keys = Object.keys(this) as (keyof Node)[];\n    for (let i = 0, length = keys.length; i < length; i++) {\n      const key = keys[i];\n      // Do not clone comments that are already attached to the node\n      if (\n        key !== \"leadingComments\" &&\n        key !== \"trailingComments\" &&\n        key !== \"innerComments\"\n      ) {\n        // @ts-expect-error cloning this to newNode\n        newNode[key] = this[key];\n      }\n    }\n\n    return newNode;\n  };\n}\n\nfunction clonePlaceholder(node: any): any {\n  return cloneIdentifier(node);\n}\n\nexport function cloneIdentifier(node: any): any {\n  // We don't need to clone `typeAnnotations` and `optional`: because\n  // cloneIdentifier is only used in object shorthand and named import/export.\n  // Neither of them allow type annotations after the identifier or optional identifier\n  const { type, start, end, loc, range, extra, name } = node;\n  const cloned = Object.create(NodePrototype);\n  cloned.type = type;\n  cloned.start = start;\n  cloned.end = end;\n  cloned.loc = loc;\n  cloned.range = range;\n  cloned.extra = extra;\n  cloned.name = name;\n  if (type === \"Placeholder\") {\n    cloned.expectedNode = node.expectedNode;\n  }\n  return cloned;\n}\n\nexport function cloneStringLiteral(node: any): any {\n  const { type, start, end, loc, range, extra } = node;\n  if (type === \"Placeholder\") {\n    return clonePlaceholder(node);\n  }\n  const cloned = Object.create(NodePrototype);\n  cloned.type = type;\n  cloned.start = start;\n  cloned.end = end;\n  cloned.loc = loc;\n  cloned.range = range;\n  if (node.raw !== undefined) {\n    // estree set node.raw instead of node.extra\n    cloned.raw = node.raw;\n  } else {\n    cloned.extra = extra;\n  }\n  cloned.value = node.value;\n  return cloned;\n}\n\nexport type Undone<T extends NodeType> = Omit<T, \"type\">;\n\nexport abstract class NodeUtils extends UtilParser {\n  startNode<T extends NodeType = never>(): Undone<T> {\n    const loc = this.state.startLoc;\n    return new Node(this, loc.index, loc) as unknown as Undone<T>;\n  }\n\n  startNodeAt<T extends NodeType = never>(loc: Position): Undone<T> {\n    return new Node(this, loc.index, loc) as unknown as Undone<T>;\n  }\n\n  /** Start a new node with a previous node's location. */\n  startNodeAtNode<T extends NodeType = never>(\n    type: Undone<NodeType>,\n  ): Undone<T> {\n    return this.startNodeAt(type.loc.start);\n  }\n\n  // Finish an AST node, adding `type` and `end` properties.\n\n  finishNode<T extends NodeType>(node: Undone<T>, type: T[\"type\"]): T {\n    return this.finishNodeAt(node, type, this.state.lastTokEndLoc);\n  }\n\n  // Finish node at given position\n\n  finishNodeAt<T extends NodeType>(\n    node: Omit<T, \"type\">,\n    type: T[\"type\"],\n    endLoc: Position,\n  ): T {\n    if (process.env.NODE_ENV !== \"production\" && node.end > 0) {\n      throw new Error(\n        \"Do not call finishNode*() twice on the same node.\" +\n          \" Instead use resetEndLocation() or change type directly.\",\n      );\n    }\n    (node as T).type = type;\n    node.end = endLoc.index;\n    node.loc.end = endLoc;\n    if (this.options.ranges) node.range[1] = endLoc.index;\n    if (this.options.attachComment) this.processComment(node as T);\n    return node as T;\n  }\n\n  resetStartLocation(node: NodeBase, startLoc: Position): void {\n    node.start = startLoc.index;\n    node.loc.start = startLoc;\n    if (this.options.ranges) node.range[0] = startLoc.index;\n  }\n\n  resetEndLocation(\n    node: NodeBase,\n    endLoc: Position = this.state.lastTokEndLoc,\n  ): void {\n    node.end = endLoc.index;\n    node.loc.end = endLoc;\n    if (this.options.ranges) node.range[1] = endLoc.index;\n  }\n\n  /**\n   * Reset the start location of node to the start location of locationNode\n   */\n  resetStartLocationFromNode(node: NodeBase, locationNode: NodeBase): void {\n    this.resetStartLocation(node, locationNode.loc.start);\n  }\n}\n", "/*:: declare var invariant; */\n\nimport type Parser from \"../../parser/index.ts\";\nimport {\n  tokenIsIdentifier,\n  tokenIsKeyword,\n  tokenIsKeywordOrIdentifier,\n  tokenIsLiteralPropertyName,\n  tokenLabelName,\n  tt,\n  type TokenType,\n  tokenIsFlowInterfaceOrTypeOrOpaque,\n} from \"../../tokenizer/types.ts\";\nimport type * as N from \"../../types.ts\";\nimport type { Position } from \"../../util/location.ts\";\nimport { types as tc } from \"../../tokenizer/context.ts\";\nimport * as charCodes from \"charcodes\";\nimport { isIteratorStart } from \"../../util/identifier.ts\";\nimport FlowScopeHandler from \"./scope.ts\";\nimport { BindingFlag, ScopeFlag } from \"../../util/scopeflags.ts\";\nimport type { ExpressionErrors } from \"../../parser/util.ts\";\nimport type { ParseStatementFlag } from \"../../parser/statement.ts\";\nimport { Errors, ParseErrorEnum } from \"../../parse-error.ts\";\nimport { cloneIdentifier, type Undone } from \"../../parser/node.ts\";\n\nconst reservedTypes = new Set([\n  \"_\",\n  \"any\",\n  \"bool\",\n  \"boolean\",\n  \"empty\",\n  \"extends\",\n  \"false\",\n  \"interface\",\n  \"mixed\",\n  \"null\",\n  \"number\",\n  \"static\",\n  \"string\",\n  \"true\",\n  \"typeof\",\n  \"void\",\n]);\n\n/* eslint sort-keys: \"error\" */\n// The Errors key follows https://github.com/facebook/flow/blob/master/src/parser/parse_error.ml unless it does not exist\nconst FlowErrors = ParseErrorEnum`flow`({\n  AmbiguousConditionalArrow:\n    \"Ambiguous expression: wrap the arrow functions in parentheses to disambiguate.\",\n  AmbiguousDeclareModuleKind:\n    \"Found both `declare module.exports` and `declare export` in the same module. Modules can only have 1 since they are either an ES module or they are a CommonJS module.\",\n  // TODO: When we get proper string enums in typescript make this ReservedType.\n  // Not really worth it to do the whole $Values dance with reservedTypes set.\n  AssignReservedType: ({ reservedType }: { reservedType: string }) =>\n    `Cannot overwrite reserved type ${reservedType}.`,\n  DeclareClassElement:\n    \"The `declare` modifier can only appear on class fields.\",\n  DeclareClassFieldInitializer:\n    \"Initializers are not allowed in fields with the `declare` modifier.\",\n  DuplicateDeclareModuleExports:\n    \"Duplicate `declare module.exports` statement.\",\n  EnumBooleanMemberNotInitialized: ({\n    memberName,\n    enumName,\n  }: {\n    memberName: string;\n    enumName: string;\n  }) =>\n    `Boolean enum members need to be initialized. Use either \\`${memberName} = true,\\` or \\`${memberName} = false,\\` in enum \\`${enumName}\\`.`,\n  EnumDuplicateMemberName: ({\n    memberName,\n    enumName,\n  }: {\n    memberName: string;\n    enumName: string;\n  }) =>\n    `Enum member names need to be unique, but the name \\`${memberName}\\` has already been used before in enum \\`${enumName}\\`.`,\n  EnumInconsistentMemberValues: ({ enumName }: { enumName: string }) =>\n    `Enum \\`${enumName}\\` has inconsistent member initializers. Either use no initializers, or consistently use literals (either booleans, numbers, or strings) for all member initializers.`,\n  EnumInvalidExplicitType: ({\n    invalidEnumType,\n    enumName,\n  }: {\n    invalidEnumType: string;\n    enumName: string;\n  }) =>\n    `Enum type \\`${invalidEnumType}\\` is not valid. Use one of \\`boolean\\`, \\`number\\`, \\`string\\`, or \\`symbol\\` in enum \\`${enumName}\\`.`,\n  EnumInvalidExplicitTypeUnknownSupplied: ({\n    enumName,\n  }: {\n    enumName: string;\n  }) =>\n    `Supplied enum type is not valid. Use one of \\`boolean\\`, \\`number\\`, \\`string\\`, or \\`symbol\\` in enum \\`${enumName}\\`.`,\n\n  // TODO: When moving to typescript, we should either have each of the\n  // following errors only accept the specific strings they want:\n  //\n  // ...PrimaryType: explicitType: \"string\" | \"number\" | \"boolean\"\n  // ...SymbolType: explicitType: \"symbol\"\n  // ...UnknownType: explicitType: null\n  //\n  // Or, alternatively, merge these three errors together into one\n  // `EnumInvalidMemberInitializer` error that can accept `EnumExplicitType`\n  // without alteration, and then just have its message change based on the\n  // explicitType.\n  EnumInvalidMemberInitializerPrimaryType: ({\n    enumName,\n    memberName,\n    explicitType,\n  }: {\n    enumName: string;\n    memberName: string;\n    explicitType: EnumExplicitType;\n  }) =>\n    `Enum \\`${enumName}\\` has type \\`${explicitType}\\`, so the initializer of \\`${memberName}\\` needs to be a ${explicitType} literal.`,\n  EnumInvalidMemberInitializerSymbolType: ({\n    enumName,\n    memberName,\n  }: {\n    enumName: string;\n    memberName: string;\n    explicitType: EnumExplicitType;\n  }) =>\n    `Symbol enum members cannot be initialized. Use \\`${memberName},\\` in enum \\`${enumName}\\`.`,\n  EnumInvalidMemberInitializerUnknownType: ({\n    enumName,\n    memberName,\n  }: {\n    enumName: string;\n    memberName: string;\n    explicitType: EnumExplicitType;\n  }) =>\n    `The enum member initializer for \\`${memberName}\\` needs to be a literal (either a boolean, number, or string) in enum \\`${enumName}\\`.`,\n  EnumInvalidMemberName: ({\n    enumName,\n    memberName,\n    suggestion,\n  }: {\n    enumName: string;\n    memberName: string;\n    suggestion: string;\n  }) =>\n    `Enum member names cannot start with lowercase 'a' through 'z'. Instead of using \\`${memberName}\\`, consider using \\`${suggestion}\\`, in enum \\`${enumName}\\`.`,\n  EnumNumberMemberNotInitialized: ({\n    enumName,\n    memberName,\n  }: {\n    enumName: string;\n    memberName: string;\n  }) =>\n    `Number enum members need to be initialized, e.g. \\`${memberName} = 1\\` in enum \\`${enumName}\\`.`,\n  EnumStringMemberInconsistentlyInitialized: ({\n    enumName,\n  }: {\n    enumName: string;\n  }) =>\n    `String enum members need to consistently either all use initializers, or use no initializers, in enum \\`${enumName}\\`.`,\n  GetterMayNotHaveThisParam: \"A getter cannot have a `this` parameter.\",\n  ImportReflectionHasImportType:\n    \"An `import module` declaration can not use `type` or `typeof` keyword.\",\n  ImportTypeShorthandOnlyInPureImport:\n    \"The `type` and `typeof` keywords on named imports can only be used on regular `import` statements. It cannot be used with `import type` or `import typeof` statements.\",\n  InexactInsideExact:\n    \"Explicit inexact syntax cannot appear inside an explicit exact object type.\",\n  InexactInsideNonObject:\n    \"Explicit inexact syntax cannot appear in class or interface definitions.\",\n  InexactVariance: \"Explicit inexact syntax cannot have variance.\",\n  InvalidNonTypeImportInDeclareModule:\n    \"Imports within a `declare module` body must always be `import type` or `import typeof`.\",\n  MissingTypeParamDefault:\n    \"Type parameter declaration needs a default, since a preceding type parameter declaration has a default.\",\n  NestedDeclareModule:\n    \"`declare module` cannot be used inside another `declare module`.\",\n  NestedFlowComment: \"Cannot have a flow comment inside another flow comment.\",\n  PatternIsOptional: {\n    message:\n      \"A binding pattern parameter cannot be optional in an implementation signature.\",\n    // For consistency in TypeScript and Flow error codes\n    ...(!process.env.BABEL_8_BREAKING\n      ? { reasonCode: \"OptionalBindingPattern\" }\n      : {}),\n  },\n  SetterMayNotHaveThisParam: \"A setter cannot have a `this` parameter.\",\n  SpreadVariance: \"Spread properties cannot have variance.\",\n  ThisParamAnnotationRequired:\n    \"A type annotation is required for the `this` parameter.\",\n  ThisParamBannedInConstructor:\n    \"Constructors cannot have a `this` parameter; constructors don't bind `this` like other functions.\",\n  ThisParamMayNotBeOptional: \"The `this` parameter cannot be optional.\",\n  ThisParamMustBeFirst:\n    \"The `this` parameter must be the first function parameter.\",\n  ThisParamNoDefault: \"The `this` parameter may not have a default value.\",\n  TypeBeforeInitializer:\n    \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.\",\n  TypeCastInPattern:\n    \"The type cast expression is expected to be wrapped with parenthesis.\",\n  UnexpectedExplicitInexactInObject:\n    \"Explicit inexact syntax must appear at the end of an inexact object.\",\n  UnexpectedReservedType: ({ reservedType }: { reservedType: string }) =>\n    `Unexpected reserved type ${reservedType}.`,\n  UnexpectedReservedUnderscore:\n    \"`_` is only allowed as a type argument to call or new.\",\n  UnexpectedSpaceBetweenModuloChecks:\n    \"Spaces between `%` and `checks` are not allowed here.\",\n  UnexpectedSpreadType:\n    \"Spread operator cannot appear in class or interface definitions.\",\n  UnexpectedSubtractionOperand:\n    'Unexpected token, expected \"number\" or \"bigint\".',\n  UnexpectedTokenAfterTypeParameter:\n    \"Expected an arrow function after this type parameter declaration.\",\n  UnexpectedTypeParameterBeforeAsyncArrowFunction:\n    \"Type parameters must come after the async keyword, e.g. instead of `<T> async () => {}`, use `async <T>() => {}`.\",\n  UnsupportedDeclareExportKind: ({\n    unsupportedExportKind,\n    suggestion,\n  }: {\n    unsupportedExportKind: string;\n    suggestion: string;\n  }) =>\n    `\\`declare export ${unsupportedExportKind}\\` is not supported. Use \\`${suggestion}\\` instead.`,\n  UnsupportedStatementInDeclareModule:\n    \"Only declares and type imports are allowed inside declare module.\",\n  UnterminatedFlowComment: \"Unterminated flow-comment.\",\n});\n/* eslint-disable sort-keys */\n\nfunction isEsModuleType(bodyElement: N.Node): boolean {\n  return (\n    bodyElement.type === \"DeclareExportAllDeclaration\" ||\n    (bodyElement.type === \"DeclareExportDeclaration\" &&\n      (!bodyElement.declaration ||\n        (bodyElement.declaration.type !== \"TypeAlias\" &&\n          bodyElement.declaration.type !== \"InterfaceDeclaration\")))\n  );\n}\n\nfunction hasTypeImportKind(\n  node: Undone<N.ImportSpecifier | N.ImportDeclaration>,\n): boolean {\n  return node.importKind === \"type\" || node.importKind === \"typeof\";\n}\n\nconst exportSuggestions = {\n  const: \"declare export var\",\n  let: \"declare export var\",\n  type: \"export type\",\n  interface: \"export interface\",\n};\n\n// Like Array#filter, but returns a tuple [ acceptedElements, discardedElements ]\nfunction partition<T>(\n  list: T[],\n  test: (c: T, b: number, a: T[]) => boolean | undefined | null,\n): [T[], T[]] {\n  const list1: T[] = [];\n  const list2: T[] = [];\n  for (let i = 0; i < list.length; i++) {\n    (test(list[i], i, list) ? list1 : list2).push(list[i]);\n  }\n  return [list1, list2];\n}\n\nconst FLOW_PRAGMA_REGEX = /\\*?\\s*@((?:no)?flow)\\b/;\n\n// Flow enums types\ntype EnumExplicitType = null | \"boolean\" | \"number\" | \"string\" | \"symbol\";\n\ntype EnumContext = {\n  enumName: string;\n  explicitType: EnumExplicitType;\n  memberName: string;\n};\n\ntype EnumMemberInit =\n  | {\n      type: \"number\";\n      loc: Position;\n      value: N.Node;\n    }\n  | {\n      type: \"string\";\n      loc: Position;\n      value: N.Node;\n    }\n  | {\n      type: \"boolean\";\n      loc: Position;\n      value: N.Node;\n    }\n  | {\n      type: \"invalid\";\n      loc: Position;\n    }\n  | {\n      type: \"none\";\n      loc: Position;\n    };\n\nexport default (superClass: typeof Parser) =>\n  class FlowParserMixin extends superClass implements Parser {\n    // The value of the @flow/@noflow pragma. Initially undefined, transitions\n    // to \"@flow\" or \"@noflow\" if we see a pragma. Transitions to null if we are\n    // past the initial comment.\n    flowPragma: void | null | \"flow\" | \"noflow\" = undefined;\n\n    getScopeHandler(): new (...args: any) => FlowScopeHandler {\n      return FlowScopeHandler;\n    }\n\n    shouldParseTypes(): boolean {\n      return this.getPluginOption(\"flow\", \"all\") || this.flowPragma === \"flow\";\n    }\n\n    shouldParseEnums(): boolean {\n      return !!this.getPluginOption(\"flow\", \"enums\");\n    }\n\n    finishToken(type: TokenType, val: any): void {\n      if (\n        type !== tt.string &&\n        type !== tt.semi &&\n        type !== tt.interpreterDirective\n      ) {\n        if (this.flowPragma === undefined) {\n          this.flowPragma = null;\n        }\n      }\n      super.finishToken(type, val);\n    }\n\n    addComment(comment: N.Comment): void {\n      if (this.flowPragma === undefined) {\n        // Try to parse a flow pragma.\n        const matches = FLOW_PRAGMA_REGEX.exec(comment.value);\n        if (!matches) {\n          // do nothing\n        } else if (matches[1] === \"flow\") {\n          this.flowPragma = \"flow\";\n        } else if (matches[1] === \"noflow\") {\n          this.flowPragma = \"noflow\";\n        } else {\n          throw new Error(\"Unexpected flow pragma\");\n        }\n      }\n      super.addComment(comment);\n    }\n\n    flowParseTypeInitialiser(tok?: TokenType): N.FlowType {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      this.expect(tok || tt.colon);\n\n      const type = this.flowParseType();\n      this.state.inType = oldInType;\n      return type;\n    }\n\n    flowParsePredicate(): N.FlowPredicate {\n      const node = this.startNode<N.FlowPredicate>();\n      const moduloLoc = this.state.startLoc;\n      this.next(); // eat `%`\n      this.expectContextual(tt._checks);\n      // Force '%' and 'checks' to be adjacent\n      if (this.state.lastTokStartLoc.index > moduloLoc.index + 1) {\n        this.raise(FlowErrors.UnexpectedSpaceBetweenModuloChecks, moduloLoc);\n      }\n      if (this.eat(tt.parenL)) {\n        node.value = super.parseExpression();\n        this.expect(tt.parenR);\n        return this.finishNode(node, \"DeclaredPredicate\");\n      } else {\n        return this.finishNode(node, \"InferredPredicate\");\n      }\n    }\n\n    flowParseTypeAndPredicateInitialiser(): [\n      N.FlowType | undefined | null,\n      N.FlowPredicate | undefined | null,\n    ] {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      this.expect(tt.colon);\n      let type = null;\n      let predicate = null;\n      if (this.match(tt.modulo)) {\n        this.state.inType = oldInType;\n        predicate = this.flowParsePredicate();\n      } else {\n        type = this.flowParseType();\n        this.state.inType = oldInType;\n        if (this.match(tt.modulo)) {\n          predicate = this.flowParsePredicate();\n        }\n      }\n      return [type, predicate];\n    }\n\n    flowParseDeclareClass(\n      node: Undone<N.FlowDeclareClass>,\n    ): N.FlowDeclareClass {\n      this.next();\n      this.flowParseInterfaceish(node, /*isClass*/ true);\n      return this.finishNode(node, \"DeclareClass\");\n    }\n\n    flowParseDeclareFunction(\n      node: Undone<N.FlowDeclareFunction>,\n    ): N.FlowDeclareFunction {\n      this.next();\n\n      const id = (node.id = this.parseIdentifier());\n\n      const typeNode = this.startNode<N.FlowFunctionTypeAnnotation>();\n      const typeContainer = this.startNode<N.TypeAnnotation>();\n\n      if (this.match(tt.lt)) {\n        typeNode.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        typeNode.typeParameters = null;\n      }\n\n      this.expect(tt.parenL);\n      const tmp = this.flowParseFunctionTypeParams();\n      typeNode.params = tmp.params;\n      typeNode.rest = tmp.rest;\n      typeNode.this = tmp._this;\n      this.expect(tt.parenR);\n\n      [typeNode.returnType, node.predicate] =\n        this.flowParseTypeAndPredicateInitialiser();\n\n      typeContainer.typeAnnotation = this.finishNode(\n        typeNode,\n        \"FunctionTypeAnnotation\",\n      );\n\n      id.typeAnnotation = this.finishNode(typeContainer, \"TypeAnnotation\");\n\n      this.resetEndLocation(id);\n      this.semicolon();\n\n      this.scope.declareName(\n        node.id.name,\n        BindingFlag.TYPE_FLOW_DECLARE_FN,\n        node.id.loc.start,\n      );\n\n      return this.finishNode(node, \"DeclareFunction\");\n    }\n\n    flowParseDeclare(\n      node: Undone<N.FlowDeclare>,\n      insideModule?: boolean,\n    ): N.FlowDeclare {\n      if (this.match(tt._class)) {\n        return this.flowParseDeclareClass(node);\n      } else if (this.match(tt._function)) {\n        return this.flowParseDeclareFunction(node);\n      } else if (this.match(tt._var)) {\n        return this.flowParseDeclareVariable(node);\n      } else if (this.eatContextual(tt._module)) {\n        if (this.match(tt.dot)) {\n          return this.flowParseDeclareModuleExports(node);\n        } else {\n          if (insideModule) {\n            this.raise(\n              FlowErrors.NestedDeclareModule,\n              this.state.lastTokStartLoc,\n            );\n          }\n          return this.flowParseDeclareModule(node);\n        }\n      } else if (this.isContextual(tt._type)) {\n        return this.flowParseDeclareTypeAlias(node);\n      } else if (this.isContextual(tt._opaque)) {\n        return this.flowParseDeclareOpaqueType(node);\n      } else if (this.isContextual(tt._interface)) {\n        return this.flowParseDeclareInterface(node);\n      } else if (this.match(tt._export)) {\n        return this.flowParseDeclareExportDeclaration(node, insideModule);\n      } else {\n        this.unexpected();\n      }\n    }\n\n    flowParseDeclareVariable(\n      node: Undone<N.FlowDeclareVariable>,\n    ): N.FlowDeclareVariable {\n      this.next();\n      node.id = this.flowParseTypeAnnotatableIdentifier(\n        /*allowPrimitiveOverride*/ true,\n      );\n      this.scope.declareName(\n        node.id.name,\n        BindingFlag.TYPE_VAR,\n        node.id.loc.start,\n      );\n      this.semicolon();\n      return this.finishNode(node, \"DeclareVariable\");\n    }\n\n    flowParseDeclareModule(\n      node: Undone<N.FlowDeclareModule>,\n    ): N.FlowDeclareModule {\n      this.scope.enter(ScopeFlag.OTHER);\n\n      if (this.match(tt.string)) {\n        node.id = super.parseExprAtom();\n      } else {\n        node.id = this.parseIdentifier();\n      }\n\n      const bodyNode = (node.body = this.startNode<N.BlockStatement>());\n      // @ts-expect-error refine typings\n      const body = (bodyNode.body = []);\n      this.expect(tt.braceL);\n      while (!this.match(tt.braceR)) {\n        let bodyNode = this.startNode<N.ImportDeclaration>();\n\n        if (this.match(tt._import)) {\n          this.next();\n          if (!this.isContextual(tt._type) && !this.match(tt._typeof)) {\n            this.raise(\n              FlowErrors.InvalidNonTypeImportInDeclareModule,\n              this.state.lastTokStartLoc,\n            );\n          }\n          super.parseImport(bodyNode);\n        } else {\n          this.expectContextual(\n            tt._declare,\n            FlowErrors.UnsupportedStatementInDeclareModule,\n          );\n          // @ts-expect-error refine typings\n          bodyNode = this.flowParseDeclare(bodyNode, true);\n        }\n\n        body.push(bodyNode);\n      }\n\n      this.scope.exit();\n\n      this.expect(tt.braceR);\n\n      this.finishNode(bodyNode, \"BlockStatement\");\n\n      let kind: \"CommonJS\" | \"ES\" | null = null;\n      let hasModuleExport = false;\n      body.forEach(bodyElement => {\n        if (isEsModuleType(bodyElement)) {\n          if (kind === \"CommonJS\") {\n            this.raise(FlowErrors.AmbiguousDeclareModuleKind, bodyElement);\n          }\n          kind = \"ES\";\n        } else if (bodyElement.type === \"DeclareModuleExports\") {\n          if (hasModuleExport) {\n            this.raise(FlowErrors.DuplicateDeclareModuleExports, bodyElement);\n          }\n          if (kind === \"ES\") {\n            this.raise(FlowErrors.AmbiguousDeclareModuleKind, bodyElement);\n          }\n          kind = \"CommonJS\";\n          hasModuleExport = true;\n        }\n      });\n\n      node.kind = kind || \"CommonJS\";\n      return this.finishNode(node, \"DeclareModule\");\n    }\n\n    flowParseDeclareExportDeclaration(\n      node: Undone<N.FlowDeclareExportDeclaration>,\n      insideModule?: boolean | null,\n    ): N.FlowDeclareExportDeclaration {\n      this.expect(tt._export);\n\n      if (this.eat(tt._default)) {\n        if (this.match(tt._function) || this.match(tt._class)) {\n          // declare export default class ...\n          // declare export default function ...\n          node.declaration = this.flowParseDeclare(this.startNode());\n        } else {\n          // declare export default [type];\n          node.declaration = this.flowParseType();\n          this.semicolon();\n        }\n        node.default = true;\n\n        return this.finishNode(node, \"DeclareExportDeclaration\");\n      } else {\n        if (\n          this.match(tt._const) ||\n          this.isLet() ||\n          ((this.isContextual(tt._type) || this.isContextual(tt._interface)) &&\n            !insideModule)\n        ) {\n          const label = this.state.value as\n            | \"const\"\n            | \"let\"\n            | \"type\"\n            | \"interface\";\n          throw this.raise(\n            FlowErrors.UnsupportedDeclareExportKind,\n            this.state.startLoc,\n            {\n              unsupportedExportKind: label,\n              suggestion: exportSuggestions[label],\n            },\n          );\n        }\n\n        if (\n          this.match(tt._var) || // declare export var ...\n          this.match(tt._function) || // declare export function ...\n          this.match(tt._class) || // declare export class ...\n          this.isContextual(tt._opaque) // declare export opaque ..\n        ) {\n          node.declaration = this.flowParseDeclare(this.startNode());\n          node.default = false;\n\n          return this.finishNode(node, \"DeclareExportDeclaration\");\n        } else if (\n          this.match(tt.star) || // declare export * from ''\n          this.match(tt.braceL) || // declare export {} ...\n          this.isContextual(tt._interface) || // declare export interface ...\n          this.isContextual(tt._type) || // declare export type ...\n          this.isContextual(tt._opaque) // declare export opaque type ...\n        ) {\n          node = this.parseExport(\n            node as Undone<N.ExportNamedDeclaration | N.ExportAllDeclaration>,\n            /* decorators */ null,\n          );\n          if (node.type === \"ExportNamedDeclaration\") {\n            node.type = \"ExportDeclaration\";\n            node.default = false;\n            delete node.exportKind;\n          }\n\n          node.type = \"Declare\" + node.type;\n\n          return node as N.FlowDeclareExportDeclaration;\n        }\n      }\n\n      this.unexpected();\n    }\n\n    flowParseDeclareModuleExports(\n      node: Undone<N.FlowDeclareModuleExports>,\n    ): N.FlowDeclareModuleExports {\n      this.next();\n      this.expectContextual(tt._exports);\n      node.typeAnnotation = this.flowParseTypeAnnotation();\n      this.semicolon();\n\n      return this.finishNode(node, \"DeclareModuleExports\");\n    }\n\n    flowParseDeclareTypeAlias(\n      node: Undone<N.FlowDeclareTypeAlias>,\n    ): N.FlowDeclareTypeAlias {\n      this.next();\n      const finished = this.flowParseTypeAlias(\n        node,\n      ) as unknown as N.FlowDeclareTypeAlias;\n      // Don't do finishNode as we don't want to process comments twice\n      finished.type = \"DeclareTypeAlias\";\n      return finished;\n    }\n\n    flowParseDeclareOpaqueType(\n      node: Undone<N.FlowDeclareOpaqueType>,\n    ): N.FlowDeclareOpaqueType {\n      this.next();\n      const finished = this.flowParseOpaqueType(\n        node,\n        true,\n      ) as unknown as N.FlowDeclareOpaqueType;\n      // Don't do finishNode as we don't want to process comments twice\n      finished.type = \"DeclareOpaqueType\";\n      return finished;\n    }\n\n    flowParseDeclareInterface(\n      node: Undone<N.FlowDeclareInterface>,\n    ): N.FlowDeclareInterface {\n      this.next();\n      this.flowParseInterfaceish(node, /* isClass */ false);\n      return this.finishNode(node, \"DeclareInterface\");\n    }\n\n    // Interfaces\n\n    flowParseInterfaceish(node: Undone<N.FlowDeclare>, isClass: boolean): void {\n      node.id = this.flowParseRestrictedIdentifier(\n        /* liberal */ !isClass,\n        /* declaration */ true,\n      );\n\n      this.scope.declareName(\n        node.id.name,\n        isClass ? BindingFlag.TYPE_FUNCTION : BindingFlag.TYPE_LEXICAL,\n        node.id.loc.start,\n      );\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        node.typeParameters = null;\n      }\n\n      node.extends = [];\n\n      if (this.eat(tt._extends)) {\n        do {\n          node.extends.push(this.flowParseInterfaceExtends());\n        } while (!isClass && this.eat(tt.comma));\n      }\n\n      if (isClass) {\n        node.implements = [];\n        node.mixins = [];\n\n        if (this.eatContextual(tt._mixins)) {\n          do {\n            node.mixins.push(this.flowParseInterfaceExtends());\n          } while (this.eat(tt.comma));\n        }\n\n        if (this.eatContextual(tt._implements)) {\n          do {\n            node.implements.push(this.flowParseInterfaceExtends());\n          } while (this.eat(tt.comma));\n        }\n      }\n\n      node.body = this.flowParseObjectType({\n        allowStatic: isClass,\n        allowExact: false,\n        allowSpread: false,\n        allowProto: isClass,\n        allowInexact: false,\n      });\n    }\n\n    flowParseInterfaceExtends(): N.FlowInterfaceExtends {\n      const node = this.startNode<N.FlowInterfaceExtends>();\n\n      node.id = this.flowParseQualifiedTypeIdentifier();\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterInstantiation();\n      } else {\n        node.typeParameters = null;\n      }\n\n      return this.finishNode(node, \"InterfaceExtends\");\n    }\n\n    flowParseInterface(node: Undone<N.FlowInterface>): N.FlowInterface {\n      this.flowParseInterfaceish(node, /* isClass */ false);\n      return this.finishNode(node, \"InterfaceDeclaration\");\n    }\n\n    checkNotUnderscore(word: string) {\n      if (word === \"_\") {\n        this.raise(\n          FlowErrors.UnexpectedReservedUnderscore,\n          this.state.startLoc,\n        );\n      }\n    }\n\n    checkReservedType(word: string, startLoc: Position, declaration?: boolean) {\n      if (!reservedTypes.has(word)) return;\n\n      this.raise(\n        declaration\n          ? FlowErrors.AssignReservedType\n          : FlowErrors.UnexpectedReservedType,\n        startLoc,\n        {\n          reservedType: word,\n        },\n      );\n    }\n\n    flowParseRestrictedIdentifier(\n      liberal?: boolean,\n      declaration?: boolean,\n    ): N.Identifier {\n      this.checkReservedType(\n        this.state.value,\n        this.state.startLoc,\n        declaration,\n      );\n      return this.parseIdentifier(liberal);\n    }\n\n    // Type aliases\n\n    flowParseTypeAlias(node: Undone<N.FlowTypeAlias>): N.FlowTypeAlias {\n      node.id = this.flowParseRestrictedIdentifier(\n        /* liberal */ false,\n        /* declaration */ true,\n      );\n      this.scope.declareName(\n        node.id.name,\n        BindingFlag.TYPE_LEXICAL,\n        node.id.loc.start,\n      );\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        node.typeParameters = null;\n      }\n\n      node.right = this.flowParseTypeInitialiser(tt.eq);\n      this.semicolon();\n\n      return this.finishNode(node, \"TypeAlias\");\n    }\n\n    flowParseOpaqueType(\n      node: Undone<N.FlowOpaqueType>,\n      declare: boolean,\n    ): N.FlowOpaqueType {\n      this.expectContextual(tt._type);\n      node.id = this.flowParseRestrictedIdentifier(\n        /* liberal */ true,\n        /* declaration */ true,\n      );\n      this.scope.declareName(\n        node.id.name,\n        BindingFlag.TYPE_LEXICAL,\n        node.id.loc.start,\n      );\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        node.typeParameters = null;\n      }\n\n      // Parse the supertype\n      node.supertype = null;\n      if (this.match(tt.colon)) {\n        node.supertype = this.flowParseTypeInitialiser(tt.colon);\n      }\n\n      node.impltype = null;\n      if (!declare) {\n        node.impltype = this.flowParseTypeInitialiser(tt.eq);\n      }\n      this.semicolon();\n\n      return this.finishNode(node, \"OpaqueType\");\n    }\n\n    // Type annotations\n\n    flowParseTypeParameter(requireDefault: boolean = false): N.TypeParameter {\n      const nodeStartLoc = this.state.startLoc;\n\n      const node = this.startNode<N.TypeParameter>();\n\n      const variance = this.flowParseVariance();\n\n      const ident = this.flowParseTypeAnnotatableIdentifier();\n      node.name = ident.name;\n      // @ts-expect-error migrate to Babel types\n      node.variance = variance;\n      // @ts-expect-error migrate to Babel types\n      node.bound = ident.typeAnnotation;\n\n      if (this.match(tt.eq)) {\n        this.eat(tt.eq);\n        // @ts-expect-error migrate to Babel types\n        node.default = this.flowParseType();\n      } else {\n        if (requireDefault) {\n          this.raise(FlowErrors.MissingTypeParamDefault, nodeStartLoc);\n        }\n      }\n\n      return this.finishNode(node, \"TypeParameter\");\n    }\n\n    flowParseTypeParameterDeclaration(): N.TypeParameterDeclaration {\n      const oldInType = this.state.inType;\n      const node = this.startNode<N.TypeParameterDeclaration>();\n      node.params = [];\n\n      this.state.inType = true;\n\n      // istanbul ignore else: this condition is already checked at all call sites\n      if (this.match(tt.lt) || this.match(tt.jsxTagStart)) {\n        this.next();\n      } else {\n        this.unexpected();\n      }\n\n      let defaultRequired = false;\n\n      do {\n        const typeParameter = this.flowParseTypeParameter(defaultRequired);\n\n        node.params.push(typeParameter);\n\n        if (typeParameter.default) {\n          defaultRequired = true;\n        }\n\n        if (!this.match(tt.gt)) {\n          this.expect(tt.comma);\n        }\n      } while (!this.match(tt.gt));\n      this.expect(tt.gt);\n\n      this.state.inType = oldInType;\n\n      return this.finishNode(node, \"TypeParameterDeclaration\");\n    }\n\n    flowParseTypeParameterInstantiation(): N.TypeParameterInstantiation {\n      const node = this.startNode<N.TypeParameterInstantiation>();\n      const oldInType = this.state.inType;\n      node.params = [];\n\n      this.state.inType = true;\n\n      this.expect(tt.lt);\n      const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n      this.state.noAnonFunctionType = false;\n      while (!this.match(tt.gt)) {\n        node.params.push(this.flowParseType());\n        if (!this.match(tt.gt)) {\n          this.expect(tt.comma);\n        }\n      }\n      this.state.noAnonFunctionType = oldNoAnonFunctionType;\n      this.expect(tt.gt);\n\n      this.state.inType = oldInType;\n\n      return this.finishNode(node, \"TypeParameterInstantiation\");\n    }\n\n    flowParseTypeParameterInstantiationCallOrNew(): N.TypeParameterInstantiation {\n      const node = this.startNode<N.TypeParameterInstantiation>();\n      const oldInType = this.state.inType;\n      node.params = [];\n\n      this.state.inType = true;\n\n      this.expect(tt.lt);\n      while (!this.match(tt.gt)) {\n        node.params.push(this.flowParseTypeOrImplicitInstantiation());\n        if (!this.match(tt.gt)) {\n          this.expect(tt.comma);\n        }\n      }\n      this.expect(tt.gt);\n\n      this.state.inType = oldInType;\n\n      return this.finishNode(node, \"TypeParameterInstantiation\");\n    }\n\n    flowParseInterfaceType(): N.FlowInterfaceType {\n      const node = this.startNode<N.FlowInterfaceType>();\n      this.expectContextual(tt._interface);\n\n      node.extends = [];\n      if (this.eat(tt._extends)) {\n        do {\n          node.extends.push(this.flowParseInterfaceExtends());\n        } while (this.eat(tt.comma));\n      }\n\n      node.body = this.flowParseObjectType({\n        allowStatic: false,\n        allowExact: false,\n        allowSpread: false,\n        allowProto: false,\n        allowInexact: false,\n      });\n\n      return this.finishNode(node, \"InterfaceTypeAnnotation\");\n    }\n\n    flowParseObjectPropertyKey(): N.Expression {\n      return this.match(tt.num) || this.match(tt.string)\n        ? super.parseExprAtom()\n        : this.parseIdentifier(true);\n    }\n\n    flowParseObjectTypeIndexer(\n      node: Undone<N.FlowObjectTypeIndexer>,\n      isStatic: boolean,\n      variance?: N.FlowVariance | null,\n    ): N.FlowObjectTypeIndexer {\n      node.static = isStatic;\n\n      // Note: bracketL has already been consumed\n      if (this.lookahead().type === tt.colon) {\n        node.id = this.flowParseObjectPropertyKey();\n        node.key = this.flowParseTypeInitialiser();\n      } else {\n        node.id = null;\n        node.key = this.flowParseType();\n      }\n      this.expect(tt.bracketR);\n      node.value = this.flowParseTypeInitialiser();\n      node.variance = variance;\n\n      return this.finishNode(node, \"ObjectTypeIndexer\");\n    }\n\n    flowParseObjectTypeInternalSlot(\n      node: Undone<N.FlowObjectTypeInternalSlot>,\n      isStatic: boolean,\n    ): N.FlowObjectTypeInternalSlot {\n      node.static = isStatic;\n      // Note: both bracketL have already been consumed\n      node.id = this.flowParseObjectPropertyKey();\n      this.expect(tt.bracketR);\n      this.expect(tt.bracketR);\n      if (this.match(tt.lt) || this.match(tt.parenL)) {\n        node.method = true;\n        node.optional = false;\n        node.value = this.flowParseObjectTypeMethodish(\n          this.startNodeAt(node.loc.start),\n        );\n      } else {\n        node.method = false;\n        if (this.eat(tt.question)) {\n          node.optional = true;\n        }\n        node.value = this.flowParseTypeInitialiser();\n      }\n      return this.finishNode(node, \"ObjectTypeInternalSlot\");\n    }\n\n    flowParseObjectTypeMethodish(\n      node: Undone<N.FlowFunctionTypeAnnotation>,\n    ): N.FlowFunctionTypeAnnotation {\n      node.params = [];\n      node.rest = null;\n      node.typeParameters = null;\n      node.this = null;\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      this.expect(tt.parenL);\n      if (this.match(tt._this)) {\n        node.this = this.flowParseFunctionTypeParam(/* first */ true);\n        // match Flow parser behavior\n        node.this.name = null;\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n      while (!this.match(tt.parenR) && !this.match(tt.ellipsis)) {\n        node.params.push(this.flowParseFunctionTypeParam(false));\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n\n      if (this.eat(tt.ellipsis)) {\n        node.rest = this.flowParseFunctionTypeParam(false);\n      }\n      this.expect(tt.parenR);\n      node.returnType = this.flowParseTypeInitialiser();\n\n      return this.finishNode(node, \"FunctionTypeAnnotation\");\n    }\n\n    flowParseObjectTypeCallProperty(\n      node: Undone<N.FlowObjectTypeCallProperty>,\n      isStatic: boolean,\n    ): N.FlowObjectTypeCallProperty {\n      const valueNode = this.startNode();\n      node.static = isStatic;\n      node.value = this.flowParseObjectTypeMethodish(valueNode);\n      return this.finishNode(node, \"ObjectTypeCallProperty\");\n    }\n\n    flowParseObjectType({\n      allowStatic,\n      allowExact,\n      allowSpread,\n      allowProto,\n      allowInexact,\n    }: {\n      allowStatic: boolean;\n      allowExact: boolean;\n      allowSpread: boolean;\n      allowProto: boolean;\n      allowInexact: boolean;\n    }): N.FlowObjectTypeAnnotation {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n\n      const nodeStart = this.startNode<N.FlowObjectTypeAnnotation>();\n\n      nodeStart.callProperties = [];\n      nodeStart.properties = [];\n      nodeStart.indexers = [];\n      nodeStart.internalSlots = [];\n\n      let endDelim;\n      let exact;\n      let inexact = false;\n      if (allowExact && this.match(tt.braceBarL)) {\n        this.expect(tt.braceBarL);\n        endDelim = tt.braceBarR;\n        exact = true;\n      } else {\n        this.expect(tt.braceL);\n        endDelim = tt.braceR;\n        exact = false;\n      }\n\n      nodeStart.exact = exact;\n\n      while (!this.match(endDelim)) {\n        let isStatic = false;\n        let protoStartLoc: Position | undefined | null = null;\n        let inexactStartLoc: Position | undefined | null = null;\n        const node = this.startNode();\n\n        if (allowProto && this.isContextual(tt._proto)) {\n          const lookahead = this.lookahead();\n\n          if (lookahead.type !== tt.colon && lookahead.type !== tt.question) {\n            this.next();\n            protoStartLoc = this.state.startLoc;\n            allowStatic = false;\n          }\n        }\n\n        if (allowStatic && this.isContextual(tt._static)) {\n          const lookahead = this.lookahead();\n\n          // static is a valid identifier name\n          if (lookahead.type !== tt.colon && lookahead.type !== tt.question) {\n            this.next();\n            isStatic = true;\n          }\n        }\n\n        const variance = this.flowParseVariance();\n\n        if (this.eat(tt.bracketL)) {\n          if (protoStartLoc != null) {\n            this.unexpected(protoStartLoc);\n          }\n          if (this.eat(tt.bracketL)) {\n            if (variance) {\n              this.unexpected(variance.loc.start);\n            }\n            nodeStart.internalSlots.push(\n              this.flowParseObjectTypeInternalSlot(node, isStatic),\n            );\n          } else {\n            nodeStart.indexers.push(\n              this.flowParseObjectTypeIndexer(node, isStatic, variance),\n            );\n          }\n        } else if (this.match(tt.parenL) || this.match(tt.lt)) {\n          if (protoStartLoc != null) {\n            this.unexpected(protoStartLoc);\n          }\n          if (variance) {\n            this.unexpected(variance.loc.start);\n          }\n          nodeStart.callProperties.push(\n            this.flowParseObjectTypeCallProperty(node, isStatic),\n          );\n        } else {\n          let kind = \"init\";\n\n          if (this.isContextual(tt._get) || this.isContextual(tt._set)) {\n            const lookahead = this.lookahead();\n            if (tokenIsLiteralPropertyName(lookahead.type)) {\n              kind = this.state.value;\n              this.next();\n            }\n          }\n\n          const propOrInexact = this.flowParseObjectTypeProperty(\n            node,\n            isStatic,\n            protoStartLoc,\n            variance,\n            kind,\n            allowSpread,\n            allowInexact ?? !exact,\n          );\n\n          if (propOrInexact === null) {\n            inexact = true;\n            inexactStartLoc = this.state.lastTokStartLoc;\n          } else {\n            nodeStart.properties.push(propOrInexact);\n          }\n        }\n\n        this.flowObjectTypeSemicolon();\n\n        if (\n          inexactStartLoc &&\n          !this.match(tt.braceR) &&\n          !this.match(tt.braceBarR)\n        ) {\n          this.raise(\n            FlowErrors.UnexpectedExplicitInexactInObject,\n            inexactStartLoc,\n          );\n        }\n      }\n\n      this.expect(endDelim);\n\n      /* The inexact flag should only be added on ObjectTypeAnnotations that\n       * are not the body of an interface, declare interface, or declare class.\n       * Since spreads are only allowed in object types, checking that is\n       * sufficient here.\n       */\n      if (allowSpread) {\n        nodeStart.inexact = inexact;\n      }\n\n      const out = this.finishNode(nodeStart, \"ObjectTypeAnnotation\");\n\n      this.state.inType = oldInType;\n\n      return out;\n    }\n\n    flowParseObjectTypeProperty(\n      node: Undone<N.FlowObjectTypeProperty | N.FlowObjectTypeSpreadProperty>,\n      isStatic: boolean,\n      protoStartLoc: Position | undefined | null,\n      variance: N.FlowVariance | undefined | null,\n      kind: string,\n      allowSpread: boolean,\n      allowInexact: boolean,\n    ): N.FlowObjectTypeProperty | N.FlowObjectTypeSpreadProperty | null {\n      if (this.eat(tt.ellipsis)) {\n        const isInexactToken =\n          this.match(tt.comma) ||\n          this.match(tt.semi) ||\n          this.match(tt.braceR) ||\n          this.match(tt.braceBarR);\n\n        if (isInexactToken) {\n          if (!allowSpread) {\n            this.raise(\n              FlowErrors.InexactInsideNonObject,\n              this.state.lastTokStartLoc,\n            );\n          } else if (!allowInexact) {\n            this.raise(\n              FlowErrors.InexactInsideExact,\n              this.state.lastTokStartLoc,\n            );\n          }\n          if (variance) {\n            this.raise(FlowErrors.InexactVariance, variance);\n          }\n\n          return null;\n        }\n\n        if (!allowSpread) {\n          this.raise(\n            FlowErrors.UnexpectedSpreadType,\n            this.state.lastTokStartLoc,\n          );\n        }\n        if (protoStartLoc != null) {\n          this.unexpected(protoStartLoc);\n        }\n        if (variance) {\n          this.raise(FlowErrors.SpreadVariance, variance);\n        }\n\n        node.argument = this.flowParseType();\n        return this.finishNode(node, \"ObjectTypeSpreadProperty\");\n      } else {\n        node.key = this.flowParseObjectPropertyKey();\n        node.static = isStatic;\n        node.proto = protoStartLoc != null;\n        node.kind = kind;\n\n        let optional = false;\n        if (this.match(tt.lt) || this.match(tt.parenL)) {\n          // This is a method property\n          node.method = true;\n\n          if (protoStartLoc != null) {\n            this.unexpected(protoStartLoc);\n          }\n          if (variance) {\n            this.unexpected(variance.loc.start);\n          }\n\n          node.value = this.flowParseObjectTypeMethodish(\n            this.startNodeAt(node.loc.start),\n          );\n          if (kind === \"get\" || kind === \"set\") {\n            this.flowCheckGetterSetterParams(node);\n          }\n          /** Declared classes/interfaces do not allow spread */\n          if (\n            !allowSpread &&\n            node.key.name === \"constructor\" &&\n            node.value.this\n          ) {\n            this.raise(\n              FlowErrors.ThisParamBannedInConstructor,\n              node.value.this,\n            );\n          }\n        } else {\n          if (kind !== \"init\") this.unexpected();\n\n          node.method = false;\n\n          if (this.eat(tt.question)) {\n            optional = true;\n          }\n          node.value = this.flowParseTypeInitialiser();\n          node.variance = variance;\n        }\n\n        node.optional = optional;\n\n        return this.finishNode(node, \"ObjectTypeProperty\");\n      }\n    }\n\n    // This is similar to checkGetterSetterParams, but as\n    // @babel/parser uses non estree properties we cannot reuse it here\n    flowCheckGetterSetterParams(\n      property: Undone<\n        N.FlowObjectTypeProperty | N.FlowObjectTypeSpreadProperty\n      >,\n    ): void {\n      const paramCount = property.kind === \"get\" ? 0 : 1;\n      const length =\n        property.value.params.length + (property.value.rest ? 1 : 0);\n\n      if (property.value.this) {\n        this.raise(\n          property.kind === \"get\"\n            ? FlowErrors.GetterMayNotHaveThisParam\n            : FlowErrors.SetterMayNotHaveThisParam,\n          property.value.this,\n        );\n      }\n\n      if (length !== paramCount) {\n        this.raise(\n          property.kind === \"get\"\n            ? Errors.BadGetterArity\n            : Errors.BadSetterArity,\n          property,\n        );\n      }\n\n      if (property.kind === \"set\" && property.value.rest) {\n        this.raise(Errors.BadSetterRestParameter, property);\n      }\n    }\n\n    flowObjectTypeSemicolon(): void {\n      if (\n        !this.eat(tt.semi) &&\n        !this.eat(tt.comma) &&\n        !this.match(tt.braceR) &&\n        !this.match(tt.braceBarR)\n      ) {\n        this.unexpected();\n      }\n    }\n\n    flowParseQualifiedTypeIdentifier(\n      startLoc?: Position,\n      id?: N.Identifier,\n    ): N.FlowQualifiedTypeIdentifier | N.Identifier {\n      startLoc ??= this.state.startLoc;\n      let node: N.Identifier | N.FlowQualifiedTypeIdentifier =\n        id || this.flowParseRestrictedIdentifier(true);\n\n      while (this.eat(tt.dot)) {\n        const node2 = this.startNodeAt<N.FlowQualifiedTypeIdentifier>(startLoc);\n        node2.qualification = node;\n        node2.id = this.flowParseRestrictedIdentifier(true);\n        node = this.finishNode(node2, \"QualifiedTypeIdentifier\");\n      }\n\n      return node;\n    }\n\n    flowParseGenericType(\n      startLoc: Position,\n      id: N.Identifier,\n    ): N.FlowGenericTypeAnnotation {\n      const node = this.startNodeAt<N.FlowGenericTypeAnnotation>(startLoc);\n\n      node.typeParameters = null;\n      node.id = this.flowParseQualifiedTypeIdentifier(startLoc, id);\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterInstantiation();\n      }\n\n      return this.finishNode(node, \"GenericTypeAnnotation\");\n    }\n\n    flowParseTypeofType(): N.FlowTypeofTypeAnnotation {\n      const node = this.startNode<N.FlowTypeofTypeAnnotation>();\n      this.expect(tt._typeof);\n      node.argument = this.flowParsePrimaryType();\n      return this.finishNode(node, \"TypeofTypeAnnotation\");\n    }\n\n    flowParseTupleType(): N.FlowTupleTypeAnnotation {\n      const node = this.startNode<N.FlowTupleTypeAnnotation>();\n      node.types = [];\n      this.expect(tt.bracketL);\n      // We allow trailing commas\n      while (this.state.pos < this.length && !this.match(tt.bracketR)) {\n        node.types.push(this.flowParseType());\n        if (this.match(tt.bracketR)) break;\n        this.expect(tt.comma);\n      }\n      this.expect(tt.bracketR);\n      return this.finishNode(node, \"TupleTypeAnnotation\");\n    }\n\n    flowParseFunctionTypeParam(first: boolean): N.FlowFunctionTypeParam {\n      let name = null;\n      let optional = false;\n      let typeAnnotation = null;\n      const node = this.startNode<N.FlowFunctionTypeParam>();\n      const lh = this.lookahead();\n      const isThis = this.state.type === tt._this;\n\n      if (lh.type === tt.colon || lh.type === tt.question) {\n        if (isThis && !first) {\n          this.raise(FlowErrors.ThisParamMustBeFirst, node);\n        }\n        name = this.parseIdentifier(isThis);\n        if (this.eat(tt.question)) {\n          optional = true;\n          if (isThis) {\n            this.raise(FlowErrors.ThisParamMayNotBeOptional, node);\n          }\n        }\n        typeAnnotation = this.flowParseTypeInitialiser();\n      } else {\n        typeAnnotation = this.flowParseType();\n      }\n      node.name = name;\n      node.optional = optional;\n      node.typeAnnotation = typeAnnotation;\n      return this.finishNode(node, \"FunctionTypeParam\");\n    }\n\n    reinterpretTypeAsFunctionTypeParam(\n      type: N.FlowType,\n    ): N.FlowFunctionTypeParam {\n      const node = this.startNodeAt<N.FlowFunctionTypeParam>(type.loc.start);\n      node.name = null;\n      node.optional = false;\n      node.typeAnnotation = type;\n      return this.finishNode(node, \"FunctionTypeParam\");\n    }\n\n    flowParseFunctionTypeParams(params: N.FlowFunctionTypeParam[] = []): {\n      params: N.FlowFunctionTypeParam[];\n      rest: N.FlowFunctionTypeParam | undefined | null;\n      _this: N.FlowFunctionTypeParam | undefined | null;\n    } {\n      let rest: N.FlowFunctionTypeParam | undefined | null = null;\n      let _this: N.FlowFunctionTypeParam | undefined | null = null;\n      if (this.match(tt._this)) {\n        _this = this.flowParseFunctionTypeParam(/* first */ true);\n        // match Flow parser behavior\n        _this.name = null;\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n      while (!this.match(tt.parenR) && !this.match(tt.ellipsis)) {\n        params.push(this.flowParseFunctionTypeParam(false));\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n      if (this.eat(tt.ellipsis)) {\n        rest = this.flowParseFunctionTypeParam(false);\n      }\n      return { params, rest, _this };\n    }\n\n    flowIdentToTypeAnnotation(\n      startLoc: Position,\n      node: Undone<N.FlowType>,\n      id: N.Identifier,\n    ): N.FlowType {\n      switch (id.name) {\n        case \"any\":\n          return this.finishNode(node, \"AnyTypeAnnotation\");\n\n        case \"bool\":\n        case \"boolean\":\n          return this.finishNode(node, \"BooleanTypeAnnotation\");\n\n        case \"mixed\":\n          return this.finishNode(node, \"MixedTypeAnnotation\");\n\n        case \"empty\":\n          return this.finishNode(node, \"EmptyTypeAnnotation\");\n\n        case \"number\":\n          return this.finishNode(node, \"NumberTypeAnnotation\");\n\n        case \"string\":\n          return this.finishNode(node, \"StringTypeAnnotation\");\n\n        case \"symbol\":\n          return this.finishNode(node, \"SymbolTypeAnnotation\");\n\n        default:\n          this.checkNotUnderscore(id.name);\n          return this.flowParseGenericType(startLoc, id);\n      }\n    }\n\n    // The parsing of types roughly parallels the parsing of expressions, and\n    // primary types are kind of like primary expressions...they're the\n    // primitives with which other types are constructed.\n    flowParsePrimaryType(): N.FlowType {\n      const startLoc = this.state.startLoc;\n      const node = this.startNode<N.FlowOtherTypeAnnotation>();\n      let tmp;\n      let type;\n      let isGroupedType = false;\n      const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n\n      switch (this.state.type) {\n        case tt.braceL:\n          return this.flowParseObjectType({\n            allowStatic: false,\n            allowExact: false,\n            allowSpread: true,\n            allowProto: false,\n            allowInexact: true,\n          });\n\n        case tt.braceBarL:\n          return this.flowParseObjectType({\n            allowStatic: false,\n            allowExact: true,\n            allowSpread: true,\n            allowProto: false,\n            allowInexact: false,\n          });\n\n        case tt.bracketL:\n          this.state.noAnonFunctionType = false;\n          type = this.flowParseTupleType();\n          this.state.noAnonFunctionType = oldNoAnonFunctionType;\n          return type;\n\n        case tt.lt: {\n          const node = this.startNode<N.FlowFunctionTypeAnnotation>();\n          node.typeParameters = this.flowParseTypeParameterDeclaration();\n          this.expect(tt.parenL);\n          tmp = this.flowParseFunctionTypeParams();\n          node.params = tmp.params;\n          node.rest = tmp.rest;\n          node.this = tmp._this;\n          this.expect(tt.parenR);\n\n          this.expect(tt.arrow);\n\n          node.returnType = this.flowParseType();\n\n          return this.finishNode(node, \"FunctionTypeAnnotation\");\n        }\n\n        case tt.parenL: {\n          const node = this.startNode<N.FlowFunctionTypeAnnotation>();\n          this.next();\n\n          // Check to see if this is actually a grouped type\n          if (!this.match(tt.parenR) && !this.match(tt.ellipsis)) {\n            if (tokenIsIdentifier(this.state.type) || this.match(tt._this)) {\n              const token = this.lookahead().type;\n              isGroupedType = token !== tt.question && token !== tt.colon;\n            } else {\n              isGroupedType = true;\n            }\n          }\n\n          if (isGroupedType) {\n            this.state.noAnonFunctionType = false;\n            type = this.flowParseType();\n            this.state.noAnonFunctionType = oldNoAnonFunctionType;\n\n            // A `,` or a `) =>` means this is an anonymous function type\n            if (\n              this.state.noAnonFunctionType ||\n              !(\n                this.match(tt.comma) ||\n                (this.match(tt.parenR) && this.lookahead().type === tt.arrow)\n              )\n            ) {\n              this.expect(tt.parenR);\n              return type;\n            } else {\n              // Eat a comma if there is one\n              this.eat(tt.comma);\n            }\n          }\n\n          if (type) {\n            tmp = this.flowParseFunctionTypeParams([\n              this.reinterpretTypeAsFunctionTypeParam(type),\n            ]);\n          } else {\n            tmp = this.flowParseFunctionTypeParams();\n          }\n\n          node.params = tmp.params;\n          node.rest = tmp.rest;\n          node.this = tmp._this;\n\n          this.expect(tt.parenR);\n\n          this.expect(tt.arrow);\n\n          node.returnType = this.flowParseType();\n\n          node.typeParameters = null;\n\n          return this.finishNode(node, \"FunctionTypeAnnotation\");\n        }\n\n        case tt.string:\n          return this.parseLiteral<N.StringLiteralTypeAnnotation>(\n            this.state.value,\n            \"StringLiteralTypeAnnotation\",\n          );\n\n        case tt._true:\n        case tt._false:\n          node.value = this.match(tt._true);\n          this.next();\n          return this.finishNode(\n            node as Undone<N.BooleanLiteralTypeAnnotation>,\n            \"BooleanLiteralTypeAnnotation\",\n          );\n\n        case tt.plusMin:\n          if (this.state.value === \"-\") {\n            this.next();\n            if (this.match(tt.num)) {\n              return this.parseLiteralAtNode<N.NumberLiteralTypeAnnotation>(\n                -this.state.value,\n                \"NumberLiteralTypeAnnotation\",\n                node,\n              );\n            }\n\n            if (this.match(tt.bigint)) {\n              return this.parseLiteralAtNode<N.BigIntLiteralTypeAnnotation>(\n                -this.state.value,\n                \"BigIntLiteralTypeAnnotation\",\n                node,\n              );\n            }\n\n            throw this.raise(\n              FlowErrors.UnexpectedSubtractionOperand,\n              this.state.startLoc,\n            );\n          }\n          this.unexpected();\n          return;\n        case tt.num:\n          return this.parseLiteral(\n            this.state.value,\n            \"NumberLiteralTypeAnnotation\",\n          );\n\n        case tt.bigint:\n          return this.parseLiteral(\n            this.state.value,\n            \"BigIntLiteralTypeAnnotation\",\n          );\n\n        case tt._void:\n          this.next();\n          return this.finishNode(node, \"VoidTypeAnnotation\");\n\n        case tt._null:\n          this.next();\n          return this.finishNode(node, \"NullLiteralTypeAnnotation\");\n\n        case tt._this:\n          this.next();\n          return this.finishNode(node, \"ThisTypeAnnotation\");\n\n        case tt.star:\n          this.next();\n          return this.finishNode(node, \"ExistsTypeAnnotation\");\n\n        case tt._typeof:\n          return this.flowParseTypeofType();\n\n        default:\n          if (tokenIsKeyword(this.state.type)) {\n            const label = tokenLabelName(this.state.type);\n            this.next();\n            return super.createIdentifier(node as Undone<N.Identifier>, label);\n          } else if (tokenIsIdentifier(this.state.type)) {\n            if (this.isContextual(tt._interface)) {\n              return this.flowParseInterfaceType();\n            }\n\n            return this.flowIdentToTypeAnnotation(\n              startLoc,\n              node,\n              this.parseIdentifier(),\n            );\n          }\n      }\n\n      this.unexpected();\n    }\n\n    flowParsePostfixType(): N.FlowType {\n      const startLoc = this.state.startLoc;\n      let type = this.flowParsePrimaryType();\n      let seenOptionalIndexedAccess = false;\n      while (\n        (this.match(tt.bracketL) || this.match(tt.questionDot)) &&\n        !this.canInsertSemicolon()\n      ) {\n        const node = this.startNodeAt<N.FlowOtherTypeAnnotation>(startLoc);\n        const optional = this.eat(tt.questionDot);\n        seenOptionalIndexedAccess = seenOptionalIndexedAccess || optional;\n        this.expect(tt.bracketL);\n        if (!optional && this.match(tt.bracketR)) {\n          node.elementType = type;\n          this.next(); // eat `]`\n          type = this.finishNode(node, \"ArrayTypeAnnotation\");\n        } else {\n          node.objectType = type;\n          node.indexType = this.flowParseType();\n          this.expect(tt.bracketR);\n          if (seenOptionalIndexedAccess) {\n            node.optional = optional;\n            type = this.finishNode<N.FlowOptionalIndexedAccessType>(\n              // @ts-expect-error todo(flow->ts)\n              node,\n              \"OptionalIndexedAccessType\",\n            );\n          } else {\n            type = this.finishNode<N.FlowIndexedAccessType>(\n              // @ts-expect-error todo(flow->ts)\n              node,\n              \"IndexedAccessType\",\n            );\n          }\n        }\n      }\n      return type;\n    }\n\n    flowParsePrefixType(): N.FlowType {\n      const node = this.startNode<N.FlowOtherTypeAnnotation>();\n      if (this.eat(tt.question)) {\n        node.typeAnnotation = this.flowParsePrefixType();\n        return this.finishNode(node, \"NullableTypeAnnotation\");\n      } else {\n        return this.flowParsePostfixType();\n      }\n    }\n\n    flowParseAnonFunctionWithoutParens(): N.FlowType {\n      const param = this.flowParsePrefixType();\n      if (!this.state.noAnonFunctionType && this.eat(tt.arrow)) {\n        // TODO: This should be a type error. Passing in a SourceLocation, and it expects a Position.\n        const node = this.startNodeAt<N.FlowFunctionTypeAnnotation>(\n          param.loc.start,\n        );\n        node.params = [this.reinterpretTypeAsFunctionTypeParam(param)];\n        node.rest = null;\n        node.this = null;\n        node.returnType = this.flowParseType();\n        node.typeParameters = null;\n        return this.finishNode(node, \"FunctionTypeAnnotation\");\n      }\n      return param;\n    }\n\n    flowParseIntersectionType(): N.FlowType {\n      const node = this.startNode<N.FlowOtherTypeAnnotation>();\n      this.eat(tt.bitwiseAND);\n      const type = this.flowParseAnonFunctionWithoutParens();\n      node.types = [type];\n      while (this.eat(tt.bitwiseAND)) {\n        node.types.push(this.flowParseAnonFunctionWithoutParens());\n      }\n      return node.types.length === 1\n        ? type\n        : this.finishNode(node, \"IntersectionTypeAnnotation\");\n    }\n\n    flowParseUnionType(): N.FlowType {\n      const node = this.startNode<N.FlowOtherTypeAnnotation>();\n      this.eat(tt.bitwiseOR);\n      const type = this.flowParseIntersectionType();\n      node.types = [type];\n      while (this.eat(tt.bitwiseOR)) {\n        node.types.push(this.flowParseIntersectionType());\n      }\n      return node.types.length === 1\n        ? type\n        : this.finishNode(node, \"UnionTypeAnnotation\");\n    }\n\n    flowParseType(): N.FlowType {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      const type = this.flowParseUnionType();\n      this.state.inType = oldInType;\n      return type;\n    }\n\n    flowParseTypeOrImplicitInstantiation(): N.FlowType {\n      if (this.state.type === tt.name && this.state.value === \"_\") {\n        const startLoc = this.state.startLoc;\n        const node = this.parseIdentifier();\n        return this.flowParseGenericType(startLoc, node);\n      } else {\n        return this.flowParseType();\n      }\n    }\n\n    flowParseTypeAnnotation(): N.TypeAnnotation {\n      const node = this.startNode<N.TypeAnnotation>();\n      node.typeAnnotation = this.flowParseTypeInitialiser();\n      return this.finishNode(node, \"TypeAnnotation\");\n    }\n\n    flowParseTypeAnnotatableIdentifier(\n      allowPrimitiveOverride?: boolean,\n    ): N.Identifier {\n      const ident = allowPrimitiveOverride\n        ? this.parseIdentifier()\n        : this.flowParseRestrictedIdentifier();\n      if (this.match(tt.colon)) {\n        ident.typeAnnotation = this.flowParseTypeAnnotation();\n        this.resetEndLocation(ident);\n      }\n      return ident;\n    }\n\n    typeCastToParameter(node: N.TypeCastExpression): N.Expression {\n      (node.expression as N.Identifier).typeAnnotation = node.typeAnnotation;\n\n      this.resetEndLocation(node.expression, node.typeAnnotation.loc.end);\n\n      return node.expression;\n    }\n\n    flowParseVariance(): N.FlowVariance | undefined | null {\n      let variance = null;\n      if (this.match(tt.plusMin)) {\n        variance = this.startNode<N.FlowVariance>();\n        if (this.state.value === \"+\") {\n          variance.kind = \"plus\";\n        } else {\n          variance.kind = \"minus\";\n        }\n        this.next();\n        return this.finishNode(variance, \"Variance\");\n      }\n      return variance;\n    }\n\n    // ==================================\n    // Overrides\n    // ==================================\n\n    parseFunctionBody(\n      node: N.Function,\n      allowExpressionBody?: boolean | null,\n      isMethod: boolean = false,\n    ): void {\n      if (allowExpressionBody) {\n        this.forwardNoArrowParamsConversionAt(node, () =>\n          super.parseFunctionBody(node, true, isMethod),\n        );\n        return;\n      }\n\n      super.parseFunctionBody(node, false, isMethod);\n    }\n\n    parseFunctionBodyAndFinish<\n      T extends\n        | N.Function\n        | N.TSDeclareMethod\n        | N.TSDeclareFunction\n        | N.ClassPrivateMethod,\n    >(node: Undone<T>, type: T[\"type\"], isMethod: boolean = false): T {\n      if (this.match(tt.colon)) {\n        const typeNode = this.startNode<N.TypeAnnotation>();\n\n        [\n          typeNode.typeAnnotation,\n          // @ts-expect-error predicate may not exist\n          node.predicate,\n        ] = this.flowParseTypeAndPredicateInitialiser();\n\n        node.returnType = typeNode.typeAnnotation\n          ? this.finishNode(typeNode, \"TypeAnnotation\")\n          : null;\n      }\n\n      return super.parseFunctionBodyAndFinish(node, type, isMethod);\n    }\n\n    // interfaces and enums\n    parseStatementLike(flags: ParseStatementFlag): N.Statement {\n      // strict mode handling of `interface` since it's a reserved word\n      if (this.state.strict && this.isContextual(tt._interface)) {\n        const lookahead = this.lookahead();\n        if (tokenIsKeywordOrIdentifier(lookahead.type)) {\n          const node = this.startNode<N.FlowInterface>();\n          this.next();\n          return this.flowParseInterface(node);\n        }\n      } else if (this.shouldParseEnums() && this.isContextual(tt._enum)) {\n        const node = this.startNode();\n        this.next();\n        return this.flowParseEnumDeclaration(node);\n      }\n      const stmt = super.parseStatementLike(flags);\n      // We will parse a flow pragma in any comment before the first statement.\n      if (this.flowPragma === undefined && !this.isValidDirective(stmt)) {\n        this.flowPragma = null;\n      }\n      return stmt;\n    }\n\n    // declares, interfaces and type aliases\n    parseExpressionStatement(\n      node: N.ExpressionStatement,\n      expr: N.Expression,\n      decorators: N.Decorator[] | null,\n    ): N.ExpressionStatement {\n      if (expr.type === \"Identifier\") {\n        if (expr.name === \"declare\") {\n          if (\n            this.match(tt._class) ||\n            tokenIsIdentifier(this.state.type) ||\n            this.match(tt._function) ||\n            this.match(tt._var) ||\n            this.match(tt._export)\n          ) {\n            // @ts-expect-error: refine typings\n            return this.flowParseDeclare(node);\n          }\n        } else if (tokenIsIdentifier(this.state.type)) {\n          if (expr.name === \"interface\") {\n            // @ts-expect-error: refine typings\n            return this.flowParseInterface(node);\n          } else if (expr.name === \"type\") {\n            // @ts-expect-error: refine typings\n            return this.flowParseTypeAlias(node);\n          } else if (expr.name === \"opaque\") {\n            // @ts-expect-error: refine typings\n            return this.flowParseOpaqueType(node, false);\n          }\n        }\n      }\n\n      return super.parseExpressionStatement(node, expr, decorators);\n    }\n\n    // export type\n    shouldParseExportDeclaration(): boolean {\n      const { type } = this.state;\n      if (\n        tokenIsFlowInterfaceOrTypeOrOpaque(type) ||\n        (this.shouldParseEnums() && type === tt._enum)\n      ) {\n        return !this.state.containsEsc;\n      }\n      return super.shouldParseExportDeclaration();\n    }\n\n    isExportDefaultSpecifier(): boolean {\n      const { type } = this.state;\n      if (\n        tokenIsFlowInterfaceOrTypeOrOpaque(type) ||\n        (this.shouldParseEnums() && type === tt._enum)\n      ) {\n        return this.state.containsEsc;\n      }\n\n      return super.isExportDefaultSpecifier();\n    }\n\n    parseExportDefaultExpression() {\n      if (this.shouldParseEnums() && this.isContextual(tt._enum)) {\n        const node = this.startNode();\n        this.next();\n        return this.flowParseEnumDeclaration(node);\n      }\n      return super.parseExportDefaultExpression();\n    }\n\n    parseConditional(\n      expr: N.Expression,\n\n      startLoc: Position,\n      refExpressionErrors?: ExpressionErrors | null,\n    ): N.Expression {\n      if (!this.match(tt.question)) return expr;\n\n      if (this.state.maybeInArrowParameters) {\n        const nextCh = this.lookaheadCharCode();\n        // These tokens cannot start an expression, so if one of them follows\n        // ? then we are probably in an arrow function parameters list and we\n        // don't parse the conditional expression.\n        if (\n          nextCh === charCodes.comma || // (a?, b) => c\n          nextCh === charCodes.equalsTo || // (a? = b) => c\n          nextCh === charCodes.colon || // (a?: b) => c\n          nextCh === charCodes.rightParenthesis // (a?) => c\n        ) {\n          /*:: invariant(refExpressionErrors != null) */\n          this.setOptionalParametersError(refExpressionErrors);\n          return expr;\n        }\n      }\n\n      this.expect(tt.question);\n      const state = this.state.clone();\n      const originalNoArrowAt = this.state.noArrowAt;\n      const node = this.startNodeAt<N.ConditionalExpression>(startLoc);\n      let { consequent, failed } = this.tryParseConditionalConsequent();\n      let [valid, invalid] = this.getArrowLikeExpressions(consequent);\n\n      if (failed || invalid.length > 0) {\n        const noArrowAt = [...originalNoArrowAt];\n\n        if (invalid.length > 0) {\n          this.state = state;\n          this.state.noArrowAt = noArrowAt;\n\n          for (let i = 0; i < invalid.length; i++) {\n            noArrowAt.push(invalid[i].start);\n          }\n\n          ({ consequent, failed } = this.tryParseConditionalConsequent());\n          [valid, invalid] = this.getArrowLikeExpressions(consequent);\n        }\n\n        if (failed && valid.length > 1) {\n          // if there are two or more possible correct ways of parsing, throw an\n          // error.\n          // e.g.   Source: a ? (b): c => (d): e => f\n          //      Result 1: a ? b : (c => ((d): e => f))\n          //      Result 2: a ? ((b): c => d) : (e => f)\n          this.raise(FlowErrors.AmbiguousConditionalArrow, state.startLoc);\n        }\n\n        if (failed && valid.length === 1) {\n          this.state = state;\n          noArrowAt.push(valid[0].start);\n          this.state.noArrowAt = noArrowAt;\n          ({ consequent, failed } = this.tryParseConditionalConsequent());\n        }\n      }\n\n      this.getArrowLikeExpressions(consequent, true);\n\n      this.state.noArrowAt = originalNoArrowAt;\n      this.expect(tt.colon);\n\n      node.test = expr;\n      node.consequent = consequent;\n      node.alternate = this.forwardNoArrowParamsConversionAt(node, () =>\n        this.parseMaybeAssign(undefined, undefined),\n      );\n\n      return this.finishNode(node, \"ConditionalExpression\");\n    }\n\n    tryParseConditionalConsequent(): {\n      consequent: N.Expression;\n      failed: boolean;\n    } {\n      this.state.noArrowParamsConversionAt.push(this.state.start);\n\n      const consequent = this.parseMaybeAssignAllowIn();\n      const failed = !this.match(tt.colon);\n\n      this.state.noArrowParamsConversionAt.pop();\n\n      return { consequent, failed };\n    }\n\n    // Given an expression, walks through out its arrow functions whose body is\n    // an expression and through out conditional expressions. It returns every\n    // function which has been parsed with a return type but could have been\n    // parenthesized expressions.\n    // These functions are separated into two arrays: one containing the ones\n    // whose parameters can be converted to assignable lists, one containing the\n    // others.\n    getArrowLikeExpressions(\n      node: N.Expression,\n      disallowInvalid?: boolean,\n    ): [N.ArrowFunctionExpression[], N.ArrowFunctionExpression[]] {\n      const stack = [node];\n      const arrows: N.ArrowFunctionExpression[] = [];\n\n      while (stack.length !== 0) {\n        const node = stack.pop();\n        if (\n          node.type === \"ArrowFunctionExpression\" &&\n          node.body.type !== \"BlockStatement\"\n        ) {\n          if (node.typeParameters || !node.returnType) {\n            // This is an arrow expression without ambiguity, so check its parameters\n            this.finishArrowValidation(node);\n          } else {\n            arrows.push(node);\n          }\n          stack.push(node.body);\n        } else if (node.type === \"ConditionalExpression\") {\n          stack.push(node.consequent);\n          stack.push(node.alternate);\n        }\n      }\n\n      if (disallowInvalid) {\n        arrows.forEach(node => this.finishArrowValidation(node));\n        return [arrows, []];\n      }\n\n      return partition(arrows, node =>\n        node.params.every(param => this.isAssignable(param, true)),\n      );\n    }\n\n    finishArrowValidation(node: N.ArrowFunctionExpression) {\n      this.toAssignableList(\n        // node.params is Expression[] instead of $ReadOnlyArray<Pattern> because it\n        // has not been converted yet.\n        node.params as any as N.Expression[],\n        node.extra?.trailingCommaLoc,\n        /* isLHS */ false,\n      );\n      // Enter scope, as checkParams defines bindings\n      this.scope.enter(ScopeFlag.FUNCTION | ScopeFlag.ARROW);\n      // Use super's method to force the parameters to be checked\n      super.checkParams(node, false, true);\n      this.scope.exit();\n    }\n\n    forwardNoArrowParamsConversionAt<T>(\n      node: Undone<N.Node>,\n      parse: () => T,\n    ): T {\n      let result: T;\n      if (this.state.noArrowParamsConversionAt.includes(node.start)) {\n        this.state.noArrowParamsConversionAt.push(this.state.start);\n        result = parse();\n        this.state.noArrowParamsConversionAt.pop();\n      } else {\n        result = parse();\n      }\n\n      return result;\n    }\n\n    parseParenItem<T extends N.Expression | N.RestElement | N.SpreadElement>(\n      node: T,\n      startLoc: Position,\n    ): T | N.TypeCastExpression | N.TsTypeCastExpression {\n      const newNode = super.parseParenItem(node, startLoc);\n      if (this.eat(tt.question)) {\n        (newNode as N.Identifier).optional = true;\n        // Include questionmark in location of node\n        // Don't use this.finishNode() as otherwise we might process comments twice and\n        // include already consumed parens\n        this.resetEndLocation(node);\n      }\n\n      if (this.match(tt.colon)) {\n        const typeCastNode = this.startNodeAt<N.TypeCastExpression>(startLoc);\n        typeCastNode.expression = newNode as N.Expression;\n        typeCastNode.typeAnnotation = this.flowParseTypeAnnotation();\n\n        return this.finishNode(typeCastNode, \"TypeCastExpression\");\n      }\n\n      return newNode;\n    }\n\n    assertModuleNodeAllowed(node: N.Node) {\n      if (\n        (node.type === \"ImportDeclaration\" &&\n          (node.importKind === \"type\" || node.importKind === \"typeof\")) ||\n        (node.type === \"ExportNamedDeclaration\" &&\n          node.exportKind === \"type\") ||\n        (node.type === \"ExportAllDeclaration\" && node.exportKind === \"type\")\n      ) {\n        // Allow Flowtype imports and exports in all conditions because\n        // Flow itself does not care about 'sourceType'.\n        return;\n      }\n\n      super.assertModuleNodeAllowed(node);\n    }\n\n    parseExportDeclaration(\n      node: N.ExportNamedDeclaration,\n    ): N.Declaration | undefined | null {\n      if (this.isContextual(tt._type)) {\n        node.exportKind = \"type\";\n\n        const declarationNode = this.startNode();\n        this.next();\n\n        if (this.match(tt.braceL)) {\n          // export type { foo, bar };\n          node.specifiers = this.parseExportSpecifiers(\n            /* isInTypeExport */ true,\n          );\n          super.parseExportFrom(node);\n          return null;\n        } else {\n          // export type Foo = Bar;\n          // @ts-expect-error: refine typings\n          return this.flowParseTypeAlias(declarationNode);\n        }\n      } else if (this.isContextual(tt._opaque)) {\n        node.exportKind = \"type\";\n\n        const declarationNode = this.startNode();\n        this.next();\n        // export opaque type Foo = Bar;\n        // @ts-expect-error: refine typings\n        return this.flowParseOpaqueType(declarationNode, false);\n      } else if (this.isContextual(tt._interface)) {\n        node.exportKind = \"type\";\n        const declarationNode = this.startNode();\n        this.next();\n        // @ts-expect-error: refine typings\n        return this.flowParseInterface(declarationNode);\n      } else if (this.shouldParseEnums() && this.isContextual(tt._enum)) {\n        node.exportKind = \"value\";\n        const declarationNode = this.startNode();\n        this.next();\n        // @ts-expect-error: refine typings\n        return this.flowParseEnumDeclaration(declarationNode);\n      } else {\n        return super.parseExportDeclaration(node);\n      }\n    }\n\n    eatExportStar(\n      node: Undone<N.Node>,\n    ): node is Undone<N.ExportNamedDeclaration | N.ExportAllDeclaration> {\n      if (super.eatExportStar(node)) return true;\n\n      if (this.isContextual(tt._type) && this.lookahead().type === tt.star) {\n        (\n          node as Undone<N.ExportNamedDeclaration | N.ExportAllDeclaration>\n        ).exportKind = \"type\";\n        this.next();\n        this.next();\n        return true;\n      }\n\n      return false;\n    }\n\n    maybeParseExportNamespaceSpecifier(\n      node: Undone<N.ExportNamedDeclaration | N.ExportAllDeclaration>,\n    ): node is Undone<N.ExportNamedDeclaration> {\n      const { startLoc } = this.state;\n      const hasNamespace = super.maybeParseExportNamespaceSpecifier(node);\n      if (hasNamespace && node.exportKind === \"type\") {\n        this.unexpected(startLoc);\n      }\n      return hasNamespace;\n    }\n\n    parseClassId(\n      node: N.Class,\n      isStatement: boolean,\n      optionalId?: boolean | null,\n    ) {\n      super.parseClassId(node, isStatement, optionalId);\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n    }\n\n    parseClassMember(\n      classBody: N.ClassBody,\n      member: any,\n      state: N.ParseClassMemberState,\n    ): void {\n      const { startLoc } = this.state;\n      if (this.isContextual(tt._declare)) {\n        if (super.parseClassMemberFromModifier(classBody, member)) {\n          // 'declare' is a class element name\n          return;\n        }\n\n        member.declare = true;\n      }\n\n      super.parseClassMember(classBody, member, state);\n\n      if (member.declare) {\n        if (\n          member.type !== \"ClassProperty\" &&\n          member.type !== \"ClassPrivateProperty\" &&\n          member.type !== \"PropertyDefinition\" // Used by estree plugin\n        ) {\n          this.raise(FlowErrors.DeclareClassElement, startLoc);\n        } else if (member.value) {\n          this.raise(FlowErrors.DeclareClassFieldInitializer, member.value);\n        }\n      }\n    }\n\n    isIterator(word: string): boolean {\n      return word === \"iterator\" || word === \"asyncIterator\";\n    }\n\n    readIterator(): void {\n      const word = super.readWord1();\n      const fullWord = \"@@\" + word;\n\n      // Allow @@iterator and @@asyncIterator as a identifier only inside type\n      if (!this.isIterator(word) || !this.state.inType) {\n        this.raise(Errors.InvalidIdentifier, this.state.curPosition(), {\n          identifierName: fullWord,\n        });\n      }\n\n      this.finishToken(tt.name, fullWord);\n    }\n\n    // ensure that inside flow types, we bypass the jsx parser plugin\n    getTokenFromCode(code: number): void {\n      const next = this.input.charCodeAt(this.state.pos + 1);\n      if (code === charCodes.leftCurlyBrace && next === charCodes.verticalBar) {\n        this.finishOp(tt.braceBarL, 2);\n      } else if (\n        this.state.inType &&\n        (code === charCodes.greaterThan || code === charCodes.lessThan)\n      ) {\n        this.finishOp(code === charCodes.greaterThan ? tt.gt : tt.lt, 1);\n      } else if (this.state.inType && code === charCodes.questionMark) {\n        if (next === charCodes.dot) {\n          this.finishOp(tt.questionDot, 2);\n        } else {\n          // allow double nullable types in Flow: ??string\n          this.finishOp(tt.question, 1);\n        }\n      } else if (\n        isIteratorStart(code, next, this.input.charCodeAt(this.state.pos + 2))\n      ) {\n        this.state.pos += 2; // eat \"@@\"\n        this.readIterator();\n      } else {\n        super.getTokenFromCode(code);\n      }\n    }\n\n    isAssignable(node: N.Node, isBinding?: boolean): boolean {\n      if (node.type === \"TypeCastExpression\") {\n        return this.isAssignable(node.expression, isBinding);\n      } else {\n        return super.isAssignable(node, isBinding);\n      }\n    }\n\n    toAssignable(node: N.Node, isLHS: boolean = false): void {\n      if (\n        !isLHS &&\n        node.type === \"AssignmentExpression\" &&\n        node.left.type === \"TypeCastExpression\"\n      ) {\n        node.left = this.typeCastToParameter(node.left) as N.Assignable;\n      }\n      super.toAssignable(node, isLHS);\n    }\n\n    // turn type casts that we found in function parameter head into type annotated params\n    toAssignableList(\n      exprList: N.Expression[],\n      trailingCommaLoc: Position | undefined | null,\n      isLHS: boolean,\n    ): void {\n      for (let i = 0; i < exprList.length; i++) {\n        const expr = exprList[i];\n        if (expr?.type === \"TypeCastExpression\") {\n          exprList[i] = this.typeCastToParameter(expr);\n        }\n      }\n      super.toAssignableList(exprList, trailingCommaLoc, isLHS);\n    }\n\n    // this is a list of nodes, from something like a call expression, we need to filter the\n    // type casts that we've found that are illegal in this context\n    toReferencedList(\n      exprList:\n        | ReadonlyArray<N.Expression | N.SpreadElement>\n        | ReadonlyArray<N.Expression | N.RestElement>,\n      isParenthesizedExpr?: boolean,\n    ):\n      | ReadonlyArray<N.Expression | N.SpreadElement>\n      | ReadonlyArray<N.Expression | N.RestElement> {\n      for (let i = 0; i < exprList.length; i++) {\n        const expr = exprList[i];\n        if (\n          expr &&\n          expr.type === \"TypeCastExpression\" &&\n          !expr.extra?.parenthesized &&\n          (exprList.length > 1 || !isParenthesizedExpr)\n        ) {\n          this.raise(FlowErrors.TypeCastInPattern, expr.typeAnnotation);\n        }\n      }\n\n      return exprList;\n    }\n\n    parseArrayLike(\n      close: TokenType,\n      canBePattern: boolean,\n      isTuple: boolean,\n      refExpressionErrors?: ExpressionErrors | null,\n    ): N.ArrayExpression | N.TupleExpression {\n      const node = super.parseArrayLike(\n        close,\n        canBePattern,\n        isTuple,\n        refExpressionErrors,\n      );\n\n      // This could be an array pattern:\n      //   ([a: string, b: string]) => {}\n      // In this case, we don't have to call toReferencedList. We will\n      // call it, if needed, when we are sure that it is a parenthesized\n      // expression by calling toReferencedListDeep.\n      if (canBePattern && !this.state.maybeInArrowParameters) {\n        this.toReferencedList(node.elements);\n      }\n\n      return node;\n    }\n\n    isValidLVal(type: string, isParenthesized: boolean, binding: BindingFlag) {\n      return (\n        type === \"TypeCastExpression\" ||\n        super.isValidLVal(type, isParenthesized, binding)\n      );\n    }\n\n    // parse class property type annotations\n    parseClassProperty(node: N.ClassProperty): N.ClassProperty {\n      if (this.match(tt.colon)) {\n        node.typeAnnotation = this.flowParseTypeAnnotation();\n      }\n      return super.parseClassProperty(node);\n    }\n\n    parseClassPrivateProperty(\n      node: N.ClassPrivateProperty,\n    ): N.ClassPrivateProperty {\n      if (this.match(tt.colon)) {\n        node.typeAnnotation = this.flowParseTypeAnnotation();\n      }\n      return super.parseClassPrivateProperty(node);\n    }\n\n    // determine whether or not we're currently in the position where a class method would appear\n    isClassMethod(): boolean {\n      return this.match(tt.lt) || super.isClassMethod();\n    }\n\n    // determine whether or not we're currently in the position where a class property would appear\n    isClassProperty(): boolean {\n      return this.match(tt.colon) || super.isClassProperty();\n    }\n\n    isNonstaticConstructor(method: N.ClassMethod | N.ClassProperty): boolean {\n      return !this.match(tt.colon) && super.isNonstaticConstructor(method);\n    }\n\n    // parse type parameters for class methods\n    pushClassMethod(\n      classBody: N.ClassBody,\n      method: N.ClassMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowsDirectSuper: boolean,\n    ): void {\n      if ((method as any).variance) {\n        this.unexpected((method as any).variance.loc.start);\n      }\n      delete (method as any).variance;\n      if (this.match(tt.lt)) {\n        method.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      super.pushClassMethod(\n        classBody,\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n      );\n\n      if (method.params && isConstructor) {\n        const params = method.params;\n        if (params.length > 0 && this.isThisParam(params[0])) {\n          this.raise(FlowErrors.ThisParamBannedInConstructor, method);\n        }\n        // estree support\n      } else if (\n        // @ts-expect-error TS does not know about the face that estree can replace ClassMethod with MethodDefinition\n        method.type === \"MethodDefinition\" &&\n        isConstructor &&\n        // @ts-expect-error estree\n        method.value.params\n      ) {\n        // @ts-expect-error estree\n        const params = method.value.params;\n        if (params.length > 0 && this.isThisParam(params[0])) {\n          this.raise(FlowErrors.ThisParamBannedInConstructor, method);\n        }\n      }\n    }\n\n    pushClassPrivateMethod(\n      classBody: N.ClassBody,\n      method: N.ClassPrivateMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n    ): void {\n      if ((method as any).variance) {\n        this.unexpected((method as any).variance.loc.start);\n      }\n      delete (method as any).variance;\n      if (this.match(tt.lt)) {\n        method.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\n    }\n\n    // parse a the super class type parameters and implements\n    parseClassSuper(node: N.Class): void {\n      super.parseClassSuper(node);\n      if (node.superClass && this.match(tt.lt)) {\n        node.superTypeParameters = this.flowParseTypeParameterInstantiation();\n      }\n      if (this.isContextual(tt._implements)) {\n        this.next();\n        const implemented: N.FlowClassImplements[] = (node.implements = []);\n        do {\n          const node = this.startNode<N.FlowClassImplements>();\n          node.id = this.flowParseRestrictedIdentifier(/*liberal*/ true);\n          if (this.match(tt.lt)) {\n            node.typeParameters = this.flowParseTypeParameterInstantiation();\n          } else {\n            node.typeParameters = null;\n          }\n          implemented.push(this.finishNode(node, \"ClassImplements\"));\n        } while (this.eat(tt.comma));\n      }\n    }\n\n    checkGetterSetterParams(method: N.ObjectMethod | N.ClassMethod): void {\n      super.checkGetterSetterParams(method);\n      const params = this.getObjectOrClassMethodParams(method);\n      if (params.length > 0) {\n        const param = params[0];\n        if (this.isThisParam(param) && method.kind === \"get\") {\n          this.raise(FlowErrors.GetterMayNotHaveThisParam, param);\n        } else if (this.isThisParam(param)) {\n          this.raise(FlowErrors.SetterMayNotHaveThisParam, param);\n        }\n      }\n    }\n\n    parsePropertyNamePrefixOperator(\n      node: N.ObjectOrClassMember | N.ClassMember,\n    ): void {\n      node.variance = this.flowParseVariance();\n    }\n\n    // parse type parameters for object method shorthand\n    parseObjPropValue<T extends N.ObjectMember>(\n      prop: Undone<T>,\n      startLoc: Position | undefined | null,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isPattern: boolean,\n      isAccessor: boolean,\n      refExpressionErrors?: ExpressionErrors | null,\n    ): T {\n      if ((prop as any).variance) {\n        this.unexpected((prop as any).variance.loc.start);\n      }\n      delete (prop as any).variance;\n\n      let typeParameters;\n\n      // method shorthand\n      if (this.match(tt.lt) && !isAccessor) {\n        typeParameters = this.flowParseTypeParameterDeclaration();\n        if (!this.match(tt.parenL)) this.unexpected();\n      }\n\n      const result = super.parseObjPropValue(\n        prop,\n        startLoc,\n        isGenerator,\n        isAsync,\n        isPattern,\n        isAccessor,\n        refExpressionErrors,\n      );\n\n      // add typeParameters if we found them\n      if (typeParameters) {\n        // @ts-expect-error: refine typings\n        (result.value || result).typeParameters = typeParameters;\n      }\n      return result;\n    }\n\n    parseAssignableListItemTypes(param: N.Pattern): N.Pattern {\n      if (this.eat(tt.question)) {\n        if (param.type !== \"Identifier\") {\n          this.raise(FlowErrors.PatternIsOptional, param);\n        }\n        if (this.isThisParam(param)) {\n          this.raise(FlowErrors.ThisParamMayNotBeOptional, param);\n        }\n\n        (param as any as N.Identifier).optional = true;\n      }\n      if (this.match(tt.colon)) {\n        param.typeAnnotation = this.flowParseTypeAnnotation();\n      } else if (this.isThisParam(param)) {\n        this.raise(FlowErrors.ThisParamAnnotationRequired, param);\n      }\n\n      if (this.match(tt.eq) && this.isThisParam(param)) {\n        this.raise(FlowErrors.ThisParamNoDefault, param);\n      }\n\n      this.resetEndLocation(param);\n      return param;\n    }\n\n    parseMaybeDefault(\n      startLoc?: Position | null,\n      left?: N.Pattern | null,\n    ): N.Pattern {\n      const node = super.parseMaybeDefault(startLoc, left);\n\n      if (\n        node.type === \"AssignmentPattern\" &&\n        node.typeAnnotation &&\n        node.right.start < node.typeAnnotation.start\n      ) {\n        this.raise(FlowErrors.TypeBeforeInitializer, node.typeAnnotation);\n      }\n\n      return node;\n    }\n\n    checkImportReflection(node: Undone<N.ImportDeclaration>) {\n      super.checkImportReflection(node);\n      if (node.module && node.importKind !== \"value\") {\n        this.raise(\n          FlowErrors.ImportReflectionHasImportType,\n          node.specifiers[0].loc.start,\n        );\n      }\n    }\n\n    parseImportSpecifierLocal<\n      T extends\n        | N.ImportSpecifier\n        | N.ImportDefaultSpecifier\n        | N.ImportNamespaceSpecifier,\n    >(node: N.ImportDeclaration, specifier: Undone<T>, type: T[\"type\"]): void {\n      specifier.local = hasTypeImportKind(node)\n        ? this.flowParseRestrictedIdentifier(\n            /* liberal */ true,\n            /* declaration */ true,\n          )\n        : this.parseIdentifier();\n\n      node.specifiers.push(this.finishImportSpecifier(specifier, type));\n    }\n\n    isPotentialImportPhase(isExport: boolean): boolean {\n      if (super.isPotentialImportPhase(isExport)) return true;\n      if (this.isContextual(tt._type)) {\n        if (!isExport) return true;\n        const ch = this.lookaheadCharCode();\n        return ch === charCodes.leftCurlyBrace || ch === charCodes.asterisk;\n      }\n      return !isExport && this.isContextual(tt._typeof);\n    }\n\n    applyImportPhase(\n      node: Undone<N.ImportDeclaration | N.ExportNamedDeclaration>,\n      isExport: boolean,\n      phase: string | null,\n      loc?: Position,\n    ): void {\n      super.applyImportPhase(node, isExport, phase, loc);\n      if (isExport) {\n        if (!phase && this.match(tt._default)) {\n          // TODO: Align with our TS AST and always add .exportKind\n          return;\n        }\n        (node as N.ExportNamedDeclaration).exportKind =\n          phase === \"type\" ? phase : \"value\";\n      } else {\n        if (phase === \"type\" && this.match(tt.star)) this.unexpected();\n        (node as N.ImportDeclaration).importKind =\n          phase === \"type\" || phase === \"typeof\" ? phase : \"value\";\n      }\n    }\n\n    // parse import-type/typeof shorthand\n    parseImportSpecifier(\n      specifier: any,\n      importedIsString: boolean,\n      isInTypeOnlyImport: boolean,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      isMaybeTypeOnly: boolean,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      bindingType: BindingFlag | undefined,\n    ): N.ImportSpecifier {\n      const firstIdent = specifier.imported;\n\n      let specifierTypeKind = null;\n      if (firstIdent.type === \"Identifier\") {\n        if (firstIdent.name === \"type\") {\n          specifierTypeKind = \"type\";\n        } else if (firstIdent.name === \"typeof\") {\n          specifierTypeKind = \"typeof\";\n        }\n      }\n\n      let isBinding = false;\n      if (this.isContextual(tt._as) && !this.isLookaheadContextual(\"as\")) {\n        const as_ident = this.parseIdentifier(true);\n        if (\n          specifierTypeKind !== null &&\n          !tokenIsKeywordOrIdentifier(this.state.type)\n        ) {\n          // `import {type as ,` or `import {type as }`\n          specifier.imported = as_ident;\n          specifier.importKind = specifierTypeKind;\n          specifier.local = cloneIdentifier(as_ident);\n        } else {\n          // `import {type as foo`\n          specifier.imported = firstIdent;\n          specifier.importKind = null;\n          specifier.local = this.parseIdentifier();\n        }\n      } else {\n        if (\n          specifierTypeKind !== null &&\n          tokenIsKeywordOrIdentifier(this.state.type)\n        ) {\n          // `import {type foo`\n          specifier.imported = this.parseIdentifier(true);\n          specifier.importKind = specifierTypeKind;\n        } else {\n          if (importedIsString) {\n            /*:: invariant(firstIdent instanceof N.StringLiteral) */\n            throw this.raise(Errors.ImportBindingIsString, specifier, {\n              importName: firstIdent.value,\n            });\n          }\n          /*:: invariant(firstIdent instanceof N.Node) */\n          specifier.imported = firstIdent;\n          specifier.importKind = null;\n        }\n\n        if (this.eatContextual(tt._as)) {\n          specifier.local = this.parseIdentifier();\n        } else {\n          isBinding = true;\n          specifier.local = cloneIdentifier(specifier.imported);\n        }\n      }\n\n      const specifierIsTypeImport = hasTypeImportKind(specifier);\n\n      if (isInTypeOnlyImport && specifierIsTypeImport) {\n        this.raise(FlowErrors.ImportTypeShorthandOnlyInPureImport, specifier);\n      }\n\n      if (isInTypeOnlyImport || specifierIsTypeImport) {\n        this.checkReservedType(\n          specifier.local.name,\n          specifier.local.loc.start,\n          /* declaration */ true,\n        );\n      }\n\n      if (isBinding && !isInTypeOnlyImport && !specifierIsTypeImport) {\n        this.checkReservedWord(\n          specifier.local.name,\n          specifier.loc.start,\n          true,\n          true,\n        );\n      }\n\n      return this.finishImportSpecifier(specifier, \"ImportSpecifier\");\n    }\n\n    parseBindingAtom(): N.Pattern {\n      switch (this.state.type) {\n        case tt._this:\n          // \"this\" may be the name of a parameter, so allow it.\n          return this.parseIdentifier(/* liberal */ true);\n        default:\n          return super.parseBindingAtom();\n      }\n    }\n\n    // parse function type parameters - function foo<T>() {}\n    parseFunctionParams(\n      node: Undone<N.Function>,\n      isConstructor: boolean,\n    ): void {\n      // @ts-expect-error kind may not index node\n      const kind = node.kind;\n      if (kind !== \"get\" && kind !== \"set\" && this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n      super.parseFunctionParams(node, isConstructor);\n    }\n\n    // parse flow type annotations on variable declarator heads - let foo: string = bar\n    parseVarId(\n      decl: N.VariableDeclarator,\n      kind: \"var\" | \"let\" | \"const\",\n    ): void {\n      super.parseVarId(decl, kind);\n      if (this.match(tt.colon)) {\n        decl.id.typeAnnotation = this.flowParseTypeAnnotation();\n        this.resetEndLocation(decl.id); // set end position to end of type\n      }\n    }\n\n    // parse the return type of an async arrow function - let foo = (async (): number => {});\n    parseAsyncArrowFromCallExpression(\n      node: N.ArrowFunctionExpression,\n      call: N.CallExpression,\n    ): N.ArrowFunctionExpression {\n      if (this.match(tt.colon)) {\n        const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n        this.state.noAnonFunctionType = true;\n        node.returnType = this.flowParseTypeAnnotation();\n        this.state.noAnonFunctionType = oldNoAnonFunctionType;\n      }\n\n      return super.parseAsyncArrowFromCallExpression(node, call);\n    }\n\n    // todo description\n    shouldParseAsyncArrow(): boolean {\n      return this.match(tt.colon) || super.shouldParseAsyncArrow();\n    }\n\n    // We need to support type parameter declarations for arrow functions. This\n    // is tricky. There are three situations we need to handle\n    //\n    // 1. This is either JSX or an arrow function. We'll try JSX first. If that\n    //    fails, we'll try an arrow function. If that fails, we'll throw the JSX\n    //    error.\n    // 2. This is an arrow function. We'll parse the type parameter declaration,\n    //    parse the rest, make sure the rest is an arrow function, and go from\n    //    there\n    // 3. This is neither. Just call the super method\n    parseMaybeAssign(\n      refExpressionErrors?: ExpressionErrors | null,\n      afterLeftParse?: Function,\n    ): N.Expression {\n      let state = null;\n\n      let jsx;\n\n      if (\n        this.hasPlugin(\"jsx\") &&\n        (this.match(tt.jsxTagStart) || this.match(tt.lt))\n      ) {\n        state = this.state.clone();\n\n        jsx = this.tryParse(\n          () => super.parseMaybeAssign(refExpressionErrors, afterLeftParse),\n          state,\n        );\n\n        /*:: invariant(!jsx.aborted) */\n        /*:: invariant(jsx.node != null) */\n        if (!jsx.error) return jsx.node;\n\n        // Remove `tc.j_expr` and `tc.j_oTag` from context added\n        // by parsing `jsxTagStart` to stop the JSX plugin from\n        // messing with the tokens\n        const { context } = this.state;\n        const currentContext = context[context.length - 1];\n        if (currentContext === tc.j_oTag || currentContext === tc.j_expr) {\n          context.pop();\n        }\n      }\n\n      if (jsx?.error || this.match(tt.lt)) {\n        state = state || this.state.clone();\n\n        let typeParameters: N.TypeParameterDeclaration;\n\n        const arrow = this.tryParse((abort: () => never) => {\n          typeParameters = this.flowParseTypeParameterDeclaration();\n\n          const arrowExpression = this.forwardNoArrowParamsConversionAt(\n            typeParameters,\n            () => {\n              const result = super.parseMaybeAssign(\n                refExpressionErrors,\n                afterLeftParse,\n              );\n\n              this.resetStartLocationFromNode(result, typeParameters);\n\n              return result;\n            },\n          );\n\n          // <T>(() => {});\n          // <T>(() => {}: any);\n          if (arrowExpression.extra?.parenthesized) abort();\n\n          // The above can return a TypeCastExpression when the arrow\n          // expression is not wrapped in parens. See also `this.parseParenItem`.\n          // (<T>() => {}: any);\n          const expr = this.maybeUnwrapTypeCastExpression(arrowExpression);\n\n          if (expr.type !== \"ArrowFunctionExpression\") abort();\n\n          expr.typeParameters = typeParameters;\n          this.resetStartLocationFromNode(expr, typeParameters);\n\n          return arrowExpression;\n        }, state);\n\n        let arrowExpression:\n          | N.ArrowFunctionExpression\n          | N.TypeCastExpression\n          | undefined\n          | null = null;\n\n        if (\n          arrow.node &&\n          this.maybeUnwrapTypeCastExpression(arrow.node).type ===\n            \"ArrowFunctionExpression\"\n        ) {\n          if (!arrow.error && !arrow.aborted) {\n            // <T> async () => {}\n            // @ts-expect-error: refine tryParse typings\n            if (arrow.node.async) {\n              /*:: invariant(typeParameters) */\n              this.raise(\n                FlowErrors.UnexpectedTypeParameterBeforeAsyncArrowFunction,\n                typeParameters,\n              );\n            }\n            return arrow.node;\n          }\n\n          // @ts-expect-error: refine typings\n          arrowExpression = arrow.node;\n        }\n\n        // If we are here, both JSX and Flow parsing attempts failed.\n        // Give the precedence to the JSX error, except if JSX had an\n        // unrecoverable error while Flow didn't.\n        // If the error is recoverable, we can only re-report it if there is\n        // a node we can return.\n\n        if (jsx?.node) {\n          /*:: invariant(jsx.failState) */\n          this.state = jsx.failState;\n          return jsx.node;\n        }\n\n        if (arrowExpression) {\n          /*:: invariant(arrow.failState) */\n          this.state = arrow.failState;\n          return arrowExpression;\n        }\n\n        if (jsx?.thrown) throw jsx.error;\n        if (arrow.thrown) throw arrow.error;\n\n        /*:: invariant(typeParameters) */\n        throw this.raise(\n          FlowErrors.UnexpectedTokenAfterTypeParameter,\n          typeParameters,\n        );\n      }\n\n      return super.parseMaybeAssign(refExpressionErrors, afterLeftParse);\n    }\n\n    // handle return types for arrow functions\n    parseArrow(\n      node: Undone<N.ArrowFunctionExpression>,\n    ): Undone<N.ArrowFunctionExpression> | undefined | null {\n      if (this.match(tt.colon)) {\n        // @ts-expect-error todo(flow->ts)\n        const result = this.tryParse<N.TypeAnnotation>(() => {\n          const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n          this.state.noAnonFunctionType = true;\n\n          const typeNode = this.startNode<N.TypeAnnotation>();\n\n          [\n            typeNode.typeAnnotation,\n            // @ts-expect-error (destructuring not supported yet)\n            node.predicate,\n          ] = this.flowParseTypeAndPredicateInitialiser();\n\n          this.state.noAnonFunctionType = oldNoAnonFunctionType;\n\n          if (this.canInsertSemicolon()) this.unexpected();\n          if (!this.match(tt.arrow)) this.unexpected();\n\n          return typeNode;\n        });\n\n        if (result.thrown) return null;\n        /*:: invariant(result.node) */\n\n        if (result.error) this.state = result.failState;\n\n        // assign after it is clear it is an arrow\n        // @ts-expect-error todo(flow->ts)\n        node.returnType = result.node.typeAnnotation\n          ? this.finishNode(result.node, \"TypeAnnotation\")\n          : null;\n      }\n\n      return super.parseArrow(node);\n    }\n\n    shouldParseArrow(params: Array<N.Node>): boolean {\n      return this.match(tt.colon) || super.shouldParseArrow(params);\n    }\n\n    setArrowFunctionParameters(\n      node: Undone<N.ArrowFunctionExpression>,\n      params:\n        | Array<N.Expression | N.SpreadElement>\n        | Array<N.Expression | N.RestElement>,\n    ): void {\n      if (this.state.noArrowParamsConversionAt.includes(node.start)) {\n        node.params = params as N.ArrowFunctionExpression[\"params\"];\n      } else {\n        super.setArrowFunctionParameters(node, params);\n      }\n    }\n\n    checkParams(\n      node: N.Function,\n      allowDuplicates: boolean,\n      isArrowFunction?: boolean | null,\n      strictModeChanged: boolean = true,\n    ): void {\n      if (\n        isArrowFunction &&\n        this.state.noArrowParamsConversionAt.includes(node.start)\n      ) {\n        return;\n      }\n\n      // ensure the `this` param is first, if it exists\n      for (let i = 0; i < node.params.length; i++) {\n        if (this.isThisParam(node.params[i]) && i > 0) {\n          this.raise(FlowErrors.ThisParamMustBeFirst, node.params[i]);\n        }\n      }\n\n      super.checkParams(\n        node,\n        allowDuplicates,\n        isArrowFunction,\n        strictModeChanged,\n      );\n    }\n\n    parseParenAndDistinguishExpression(canBeArrow: boolean): N.Expression {\n      return super.parseParenAndDistinguishExpression(\n        canBeArrow && !this.state.noArrowAt.includes(this.state.start),\n      );\n    }\n\n    parseSubscripts(\n      base: N.Expression,\n\n      startLoc: Position,\n      noCalls?: boolean | null,\n    ): N.Expression {\n      if (\n        base.type === \"Identifier\" &&\n        base.name === \"async\" &&\n        this.state.noArrowAt.includes(startLoc.index)\n      ) {\n        this.next();\n\n        const node = this.startNodeAt<N.CallExpression>(startLoc);\n        node.callee = base;\n        node.arguments = super.parseCallExpressionArguments(tt.parenR, false);\n        base = this.finishNode(node, \"CallExpression\");\n      } else if (\n        base.type === \"Identifier\" &&\n        base.name === \"async\" &&\n        this.match(tt.lt)\n      ) {\n        const state = this.state.clone();\n        const arrow = this.tryParse(\n          abort => this.parseAsyncArrowWithTypeParameters(startLoc) || abort(),\n          state,\n        );\n\n        /*:: invariant(arrow.node != null) */\n        // @ts-expect-error: refine tryParse typings\n        if (!arrow.error && !arrow.aborted) return arrow.node;\n\n        const result = this.tryParse(\n          () => super.parseSubscripts(base, startLoc, noCalls),\n          state,\n        );\n\n        if (result.node && !result.error) return result.node;\n\n        if (arrow.node) {\n          this.state = arrow.failState;\n          // @ts-expect-error: refine tryParse typings\n          return arrow.node;\n        }\n\n        if (result.node) {\n          this.state = result.failState;\n          return result.node;\n        }\n\n        throw arrow.error || result.error;\n      }\n\n      return super.parseSubscripts(base, startLoc, noCalls);\n    }\n\n    parseSubscript(\n      base: N.Expression,\n\n      startLoc: Position,\n      noCalls: boolean | undefined | null,\n      subscriptState: N.ParseSubscriptState,\n    ): N.Expression {\n      if (this.match(tt.questionDot) && this.isLookaheadToken_lt()) {\n        subscriptState.optionalChainMember = true;\n        if (noCalls) {\n          subscriptState.stop = true;\n          return base;\n        }\n        this.next();\n        const node = this.startNodeAt<N.OptionalCallExpression>(startLoc);\n        node.callee = base;\n        node.typeArguments = this.flowParseTypeParameterInstantiation();\n        this.expect(tt.parenL);\n        node.arguments = this.parseCallExpressionArguments(tt.parenR, false);\n        node.optional = true;\n        return this.finishCallExpression(node, /* optional */ true);\n      } else if (!noCalls && this.shouldParseTypes() && this.match(tt.lt)) {\n        const node = this.startNodeAt<\n          N.OptionalCallExpression | N.CallExpression\n        >(startLoc);\n        node.callee = base;\n\n        const result = this.tryParse(() => {\n          node.typeArguments =\n            this.flowParseTypeParameterInstantiationCallOrNew();\n          this.expect(tt.parenL);\n          node.arguments = super.parseCallExpressionArguments(tt.parenR, false);\n          if (subscriptState.optionalChainMember) {\n            (node as Undone<N.OptionalCallExpression>).optional = false;\n          }\n          return this.finishCallExpression(\n            node,\n            subscriptState.optionalChainMember,\n          );\n        });\n\n        if (result.node) {\n          if (result.error) this.state = result.failState;\n          return result.node;\n        }\n      }\n\n      return super.parseSubscript(\n        base,\n\n        startLoc,\n        noCalls,\n        subscriptState,\n      );\n    }\n\n    parseNewCallee(node: N.NewExpression): void {\n      super.parseNewCallee(node);\n\n      let targs = null;\n      if (this.shouldParseTypes() && this.match(tt.lt)) {\n        targs = this.tryParse(() =>\n          this.flowParseTypeParameterInstantiationCallOrNew(),\n        ).node;\n      }\n      node.typeArguments = targs;\n    }\n\n    parseAsyncArrowWithTypeParameters(\n      startLoc: Position,\n    ): N.ArrowFunctionExpression | undefined | null {\n      const node = this.startNodeAt<N.ArrowFunctionExpression>(startLoc);\n      this.parseFunctionParams(node, false);\n      if (!this.parseArrow(node)) return;\n      return super.parseArrowExpression(\n        node,\n        /* params */ undefined,\n        /* isAsync */ true,\n      );\n    }\n\n    readToken_mult_modulo(code: number): void {\n      const next = this.input.charCodeAt(this.state.pos + 1);\n      if (\n        code === charCodes.asterisk &&\n        next === charCodes.slash &&\n        this.state.hasFlowComment\n      ) {\n        this.state.hasFlowComment = false;\n        this.state.pos += 2;\n        this.nextToken();\n        return;\n      }\n\n      super.readToken_mult_modulo(code);\n    }\n\n    readToken_pipe_amp(code: number): void {\n      const next = this.input.charCodeAt(this.state.pos + 1);\n      if (\n        code === charCodes.verticalBar &&\n        next === charCodes.rightCurlyBrace\n      ) {\n        // '|}'\n        this.finishOp(tt.braceBarR, 2);\n        return;\n      }\n\n      super.readToken_pipe_amp(code);\n    }\n\n    parseTopLevel(file: N.File, program: N.Program): N.File {\n      const fileNode = super.parseTopLevel(file, program);\n      if (this.state.hasFlowComment) {\n        this.raise(\n          FlowErrors.UnterminatedFlowComment,\n          this.state.curPosition(),\n        );\n      }\n      return fileNode;\n    }\n\n    skipBlockComment(): N.CommentBlock | undefined {\n      if (this.hasPlugin(\"flowComments\") && this.skipFlowComment()) {\n        if (this.state.hasFlowComment) {\n          throw this.raise(FlowErrors.NestedFlowComment, this.state.startLoc);\n        }\n        this.hasFlowCommentCompletion();\n        const commentSkip = this.skipFlowComment();\n        if (commentSkip) {\n          this.state.pos += commentSkip;\n          this.state.hasFlowComment = true;\n        }\n        return;\n      }\n\n      return super.skipBlockComment(this.state.hasFlowComment ? \"*-/\" : \"*/\");\n    }\n\n    skipFlowComment(): number | false {\n      const { pos } = this.state;\n      let shiftToFirstNonWhiteSpace = 2;\n      while (\n        [charCodes.space, charCodes.tab].includes(\n          // @ts-expect-error testing whether a number is included\n          this.input.charCodeAt(pos + shiftToFirstNonWhiteSpace),\n        )\n      ) {\n        shiftToFirstNonWhiteSpace++;\n      }\n\n      const ch2 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos);\n      const ch3 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos + 1);\n\n      if (ch2 === charCodes.colon && ch3 === charCodes.colon) {\n        return shiftToFirstNonWhiteSpace + 2; // check for /*::\n      }\n      if (\n        this.input.slice(\n          shiftToFirstNonWhiteSpace + pos,\n          shiftToFirstNonWhiteSpace + pos + 12,\n        ) === \"flow-include\"\n      ) {\n        return shiftToFirstNonWhiteSpace + 12; // check for /*flow-include\n      }\n      if (ch2 === charCodes.colon && ch3 !== charCodes.colon) {\n        return shiftToFirstNonWhiteSpace; // check for /*:, advance up to :\n      }\n      return false;\n    }\n\n    hasFlowCommentCompletion(): void {\n      const end = this.input.indexOf(\"*/\", this.state.pos);\n      if (end === -1) {\n        throw this.raise(Errors.UnterminatedComment, this.state.curPosition());\n      }\n    }\n\n    // Flow enum parsing\n\n    flowEnumErrorBooleanMemberNotInitialized(\n      loc: Position,\n      {\n        enumName,\n        memberName,\n      }: {\n        enumName: string;\n        memberName: string;\n      },\n    ): void {\n      this.raise(FlowErrors.EnumBooleanMemberNotInitialized, loc, {\n        memberName,\n        enumName,\n      });\n    }\n\n    flowEnumErrorInvalidMemberInitializer(\n      loc: Position,\n      enumContext: EnumContext,\n    ) {\n      return this.raise(\n        !enumContext.explicitType\n          ? FlowErrors.EnumInvalidMemberInitializerUnknownType\n          : enumContext.explicitType === \"symbol\"\n            ? FlowErrors.EnumInvalidMemberInitializerSymbolType\n            : FlowErrors.EnumInvalidMemberInitializerPrimaryType,\n        loc,\n        enumContext,\n      );\n    }\n\n    flowEnumErrorNumberMemberNotInitialized(\n      loc: Position,\n      details: {\n        enumName: string;\n        memberName: string;\n      },\n    ): void {\n      this.raise(FlowErrors.EnumNumberMemberNotInitialized, loc, details);\n    }\n\n    flowEnumErrorStringMemberInconsistentlyInitialized(\n      node: N.Node,\n      details: {\n        enumName: string;\n      },\n    ): void {\n      this.raise(\n        FlowErrors.EnumStringMemberInconsistentlyInitialized,\n        node,\n        details,\n      );\n    }\n\n    flowEnumMemberInit(): EnumMemberInit {\n      const startLoc = this.state.startLoc;\n      const endOfInit = () => this.match(tt.comma) || this.match(tt.braceR);\n      switch (this.state.type) {\n        case tt.num: {\n          const literal = this.parseNumericLiteral(this.state.value);\n          if (endOfInit()) {\n            return { type: \"number\", loc: literal.loc.start, value: literal };\n          }\n          return { type: \"invalid\", loc: startLoc };\n        }\n        case tt.string: {\n          const literal = this.parseStringLiteral(this.state.value);\n          if (endOfInit()) {\n            return { type: \"string\", loc: literal.loc.start, value: literal };\n          }\n          return { type: \"invalid\", loc: startLoc };\n        }\n        case tt._true:\n        case tt._false: {\n          const literal = this.parseBooleanLiteral(this.match(tt._true));\n          if (endOfInit()) {\n            return {\n              type: \"boolean\",\n              loc: literal.loc.start,\n              value: literal,\n            };\n          }\n          return { type: \"invalid\", loc: startLoc };\n        }\n        default:\n          return { type: \"invalid\", loc: startLoc };\n      }\n    }\n\n    flowEnumMemberRaw(): {\n      id: N.Identifier;\n      init: EnumMemberInit;\n    } {\n      const loc = this.state.startLoc;\n      const id = this.parseIdentifier(true);\n      const init = this.eat(tt.eq)\n        ? this.flowEnumMemberInit()\n        : { type: \"none\" as const, loc };\n      return { id, init };\n    }\n\n    flowEnumCheckExplicitTypeMismatch(\n      loc: Position,\n      context: EnumContext,\n      expectedType: EnumExplicitType,\n    ): void {\n      const { explicitType } = context;\n      if (explicitType === null) {\n        return;\n      }\n      if (explicitType !== expectedType) {\n        this.flowEnumErrorInvalidMemberInitializer(loc, context);\n      }\n    }\n\n    flowEnumMembers({\n      enumName,\n      explicitType,\n    }: {\n      enumName: string;\n      explicitType: EnumExplicitType;\n    }): {\n      members: {\n        booleanMembers: Extract<\n          N.FlowEnumMember,\n          { type: \"EnumBooleanMember\" }\n        >[];\n        numberMembers: Extract<\n          N.FlowEnumMember,\n          { type: \"EnumNumberMember\" }\n        >[];\n        stringMembers: Extract<\n          N.FlowEnumMember,\n          { type: \"EnumStringMember\" }\n        >[];\n        defaultedMembers: Extract<\n          N.FlowEnumMember,\n          { type: \"EnumDefaultedMember\" }\n        >[];\n      };\n      hasUnknownMembers: boolean;\n    } {\n      const seenNames = new Set();\n      const members = {\n        // @ts-expect-error: migrate to Babel types\n        booleanMembers: [],\n        // @ts-expect-error: migrate to Babel types\n        numberMembers: [],\n        // @ts-expect-error: migrate to Babel types\n        stringMembers: [],\n        // @ts-expect-error: migrate to Babel types\n        defaultedMembers: [],\n      };\n      let hasUnknownMembers = false;\n      while (!this.match(tt.braceR)) {\n        if (this.eat(tt.ellipsis)) {\n          hasUnknownMembers = true;\n          break;\n        }\n        const memberNode = this.startNode<N.FlowEnumMember>();\n        const { id, init } = this.flowEnumMemberRaw();\n        const memberName = id.name;\n        if (memberName === \"\") {\n          continue;\n        }\n        if (/^[a-z]/.test(memberName)) {\n          this.raise(FlowErrors.EnumInvalidMemberName, id, {\n            memberName,\n            suggestion: memberName[0].toUpperCase() + memberName.slice(1),\n            enumName,\n          });\n        }\n        if (seenNames.has(memberName)) {\n          this.raise(FlowErrors.EnumDuplicateMemberName, id, {\n            memberName,\n            enumName,\n          });\n        }\n        seenNames.add(memberName);\n        const context = { enumName, explicitType, memberName };\n        memberNode.id = id;\n        switch (init.type) {\n          case \"boolean\": {\n            this.flowEnumCheckExplicitTypeMismatch(\n              init.loc,\n              context,\n              \"boolean\",\n            );\n            memberNode.init = init.value;\n            members.booleanMembers.push(\n              this.finishNode(memberNode, \"EnumBooleanMember\"),\n            );\n            break;\n          }\n          case \"number\": {\n            this.flowEnumCheckExplicitTypeMismatch(init.loc, context, \"number\");\n            memberNode.init = init.value;\n            members.numberMembers.push(\n              this.finishNode(memberNode, \"EnumNumberMember\"),\n            );\n            break;\n          }\n          case \"string\": {\n            this.flowEnumCheckExplicitTypeMismatch(init.loc, context, \"string\");\n            memberNode.init = init.value;\n            members.stringMembers.push(\n              this.finishNode(memberNode, \"EnumStringMember\"),\n            );\n            break;\n          }\n          case \"invalid\": {\n            throw this.flowEnumErrorInvalidMemberInitializer(init.loc, context);\n          }\n          case \"none\": {\n            switch (explicitType) {\n              case \"boolean\":\n                this.flowEnumErrorBooleanMemberNotInitialized(\n                  init.loc,\n                  context,\n                );\n                break;\n              case \"number\":\n                this.flowEnumErrorNumberMemberNotInitialized(init.loc, context);\n                break;\n              default:\n                members.defaultedMembers.push(\n                  this.finishNode(memberNode, \"EnumDefaultedMember\"),\n                );\n            }\n          }\n        }\n\n        if (!this.match(tt.braceR)) {\n          this.expect(tt.comma);\n        }\n      }\n      return { members, hasUnknownMembers };\n    }\n\n    flowEnumStringMembers(\n      initializedMembers: Array<N.Node>,\n      defaultedMembers: Array<N.Node>,\n      {\n        enumName,\n      }: {\n        enumName: string;\n      },\n    ): Array<N.Node> {\n      if (initializedMembers.length === 0) {\n        return defaultedMembers;\n      } else if (defaultedMembers.length === 0) {\n        return initializedMembers;\n      } else if (defaultedMembers.length > initializedMembers.length) {\n        for (const member of initializedMembers) {\n          this.flowEnumErrorStringMemberInconsistentlyInitialized(member, {\n            enumName,\n          });\n        }\n        return defaultedMembers;\n      } else {\n        for (const member of defaultedMembers) {\n          this.flowEnumErrorStringMemberInconsistentlyInitialized(member, {\n            enumName,\n          });\n        }\n        return initializedMembers;\n      }\n    }\n\n    flowEnumParseExplicitType({\n      enumName,\n    }: {\n      enumName: string;\n    }): EnumExplicitType {\n      if (!this.eatContextual(tt._of)) return null;\n\n      if (!tokenIsIdentifier(this.state.type)) {\n        throw this.raise(\n          FlowErrors.EnumInvalidExplicitTypeUnknownSupplied,\n          this.state.startLoc,\n          {\n            enumName,\n          },\n        );\n      }\n\n      const { value } = this.state;\n      this.next();\n\n      if (\n        value !== \"boolean\" &&\n        value !== \"number\" &&\n        value !== \"string\" &&\n        value !== \"symbol\"\n      ) {\n        this.raise(FlowErrors.EnumInvalidExplicitType, this.state.startLoc, {\n          enumName,\n          invalidEnumType: value,\n        });\n      }\n\n      return value;\n    }\n\n    flowEnumBody(node: Undone<N.FlowEnumBody>, id: N.Identifier): N.Node {\n      const enumName = id.name;\n      const nameLoc = id.loc.start;\n      const explicitType = this.flowEnumParseExplicitType({ enumName });\n      this.expect(tt.braceL);\n      const { members, hasUnknownMembers } = this.flowEnumMembers({\n        enumName,\n        explicitType,\n      });\n      node.hasUnknownMembers = hasUnknownMembers;\n\n      switch (explicitType) {\n        case \"boolean\":\n          node.explicitType = true;\n          node.members = members.booleanMembers;\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumBooleanBody\");\n        case \"number\":\n          node.explicitType = true;\n          node.members = members.numberMembers;\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumNumberBody\");\n        case \"string\":\n          node.explicitType = true;\n          node.members = this.flowEnumStringMembers(\n            members.stringMembers,\n            members.defaultedMembers,\n            { enumName },\n          );\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumStringBody\");\n        case \"symbol\":\n          node.members = members.defaultedMembers;\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumSymbolBody\");\n        default: {\n          // `explicitType` is `null`\n          const empty = () => {\n            node.members = [];\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumStringBody\");\n          };\n          node.explicitType = false;\n\n          const boolsLen = members.booleanMembers.length;\n          const numsLen = members.numberMembers.length;\n          const strsLen = members.stringMembers.length;\n          const defaultedLen = members.defaultedMembers.length;\n\n          if (!boolsLen && !numsLen && !strsLen && !defaultedLen) {\n            return empty();\n          } else if (!boolsLen && !numsLen) {\n            node.members = this.flowEnumStringMembers(\n              members.stringMembers,\n              members.defaultedMembers,\n              { enumName },\n            );\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumStringBody\");\n          } else if (!numsLen && !strsLen && boolsLen >= defaultedLen) {\n            for (const member of members.defaultedMembers) {\n              this.flowEnumErrorBooleanMemberNotInitialized(member.loc.start, {\n                enumName,\n                memberName: member.id.name,\n              });\n            }\n            node.members = members.booleanMembers;\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumBooleanBody\");\n          } else if (!boolsLen && !strsLen && numsLen >= defaultedLen) {\n            for (const member of members.defaultedMembers) {\n              this.flowEnumErrorNumberMemberNotInitialized(member.loc.start, {\n                enumName,\n                memberName: member.id.name,\n              });\n            }\n            node.members = members.numberMembers;\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumNumberBody\");\n          } else {\n            this.raise(FlowErrors.EnumInconsistentMemberValues, nameLoc, {\n              enumName,\n            });\n            return empty();\n          }\n        }\n      }\n    }\n\n    flowParseEnumDeclaration(\n      node: Undone<N.FlowEnumDeclaration>,\n    ): N.FlowEnumDeclaration {\n      const id = this.parseIdentifier();\n      node.id = id;\n      node.body = this.flowEnumBody(this.startNode(), id);\n      return this.finishNode(node, \"EnumDeclaration\");\n    }\n\n    // check if the next token is a tt.lt\n    isLookaheadToken_lt(): boolean {\n      const next = this.nextTokenStart();\n      if (this.input.charCodeAt(next) === charCodes.lessThan) {\n        const afterNext = this.input.charCodeAt(next + 1);\n        return (\n          afterNext !== charCodes.lessThan && afterNext !== charCodes.equalsTo\n        );\n      }\n      return false;\n    }\n\n    maybeUnwrapTypeCastExpression(node: N.Node) {\n      return node.type === \"TypeCastExpression\" ? node.expression : node;\n    }\n  };\n", "const entities: {\n  __proto__: null;\n  [name: string]: string;\n} = {\n  __proto__: null,\n  quot: \"\\u0022\",\n  amp: \"&\",\n  apos: \"\\u0027\",\n  lt: \"<\",\n  gt: \">\",\n  nbsp: \"\\u00A0\",\n  iexcl: \"\\u00A1\",\n  cent: \"\\u00A2\",\n  pound: \"\\u00A3\",\n  curren: \"\\u00A4\",\n  yen: \"\\u00A5\",\n  brvbar: \"\\u00A6\",\n  sect: \"\\u00A7\",\n  uml: \"\\u00A8\",\n  copy: \"\\u00A9\",\n  ordf: \"\\u00AA\",\n  laquo: \"\\u00AB\",\n  not: \"\\u00AC\",\n  shy: \"\\u00AD\",\n  reg: \"\\u00AE\",\n  macr: \"\\u00AF\",\n  deg: \"\\u00B0\",\n  plusmn: \"\\u00B1\",\n  sup2: \"\\u00B2\",\n  sup3: \"\\u00B3\",\n  acute: \"\\u00B4\",\n  micro: \"\\u00B5\",\n  para: \"\\u00B6\",\n  middot: \"\\u00B7\",\n  cedil: \"\\u00B8\",\n  sup1: \"\\u00B9\",\n  ordm: \"\\u00BA\",\n  raquo: \"\\u00BB\",\n  frac14: \"\\u00BC\",\n  frac12: \"\\u00BD\",\n  frac34: \"\\u00BE\",\n  iquest: \"\\u00BF\",\n  Agrave: \"\\u00C0\",\n  Aacute: \"\\u00C1\",\n  Acirc: \"\\u00C2\",\n  Atilde: \"\\u00C3\",\n  Auml: \"\\u00C4\",\n  Aring: \"\\u00C5\",\n  AElig: \"\\u00C6\",\n  Ccedil: \"\\u00C7\",\n  Egrave: \"\\u00C8\",\n  Eacute: \"\\u00C9\",\n  Ecirc: \"\\u00CA\",\n  Euml: \"\\u00CB\",\n  Igrave: \"\\u00CC\",\n  Iacute: \"\\u00CD\",\n  Icirc: \"\\u00CE\",\n  Iuml: \"\\u00CF\",\n  ETH: \"\\u00D0\",\n  Ntilde: \"\\u00D1\",\n  Ograve: \"\\u00D2\",\n  Oacute: \"\\u00D3\",\n  Ocirc: \"\\u00D4\",\n  Otilde: \"\\u00D5\",\n  Ouml: \"\\u00D6\",\n  times: \"\\u00D7\",\n  Oslash: \"\\u00D8\",\n  Ugrave: \"\\u00D9\",\n  Uacute: \"\\u00DA\",\n  Ucirc: \"\\u00DB\",\n  Uuml: \"\\u00DC\",\n  Yacute: \"\\u00DD\",\n  THORN: \"\\u00DE\",\n  szlig: \"\\u00DF\",\n  agrave: \"\\u00E0\",\n  aacute: \"\\u00E1\",\n  acirc: \"\\u00E2\",\n  atilde: \"\\u00E3\",\n  auml: \"\\u00E4\",\n  aring: \"\\u00E5\",\n  aelig: \"\\u00E6\",\n  ccedil: \"\\u00E7\",\n  egrave: \"\\u00E8\",\n  eacute: \"\\u00E9\",\n  ecirc: \"\\u00EA\",\n  euml: \"\\u00EB\",\n  igrave: \"\\u00EC\",\n  iacute: \"\\u00ED\",\n  icirc: \"\\u00EE\",\n  iuml: \"\\u00EF\",\n  eth: \"\\u00F0\",\n  ntilde: \"\\u00F1\",\n  ograve: \"\\u00F2\",\n  oacute: \"\\u00F3\",\n  ocirc: \"\\u00F4\",\n  otilde: \"\\u00F5\",\n  ouml: \"\\u00F6\",\n  divide: \"\\u00F7\",\n  oslash: \"\\u00F8\",\n  ugrave: \"\\u00F9\",\n  uacute: \"\\u00FA\",\n  ucirc: \"\\u00FB\",\n  uuml: \"\\u00FC\",\n  yacute: \"\\u00FD\",\n  thorn: \"\\u00FE\",\n  yuml: \"\\u00FF\",\n  OElig: \"\\u0152\",\n  oelig: \"\\u0153\",\n  Scaron: \"\\u0160\",\n  scaron: \"\\u0161\",\n  Yuml: \"\\u0178\",\n  fnof: \"\\u0192\",\n  circ: \"\\u02C6\",\n  tilde: \"\\u02DC\",\n  Alpha: \"\\u0391\",\n  Beta: \"\\u0392\",\n  Gamma: \"\\u0393\",\n  Delta: \"\\u0394\",\n  Epsilon: \"\\u0395\",\n  Zeta: \"\\u0396\",\n  Eta: \"\\u0397\",\n  Theta: \"\\u0398\",\n  Iota: \"\\u0399\",\n  Kappa: \"\\u039A\",\n  Lambda: \"\\u039B\",\n  Mu: \"\\u039C\",\n  Nu: \"\\u039D\",\n  Xi: \"\\u039E\",\n  Omicron: \"\\u039F\",\n  Pi: \"\\u03A0\",\n  Rho: \"\\u03A1\",\n  Sigma: \"\\u03A3\",\n  Tau: \"\\u03A4\",\n  Upsilon: \"\\u03A5\",\n  Phi: \"\\u03A6\",\n  Chi: \"\\u03A7\",\n  Psi: \"\\u03A8\",\n  Omega: \"\\u03A9\",\n  alpha: \"\\u03B1\",\n  beta: \"\\u03B2\",\n  gamma: \"\\u03B3\",\n  delta: \"\\u03B4\",\n  epsilon: \"\\u03B5\",\n  zeta: \"\\u03B6\",\n  eta: \"\\u03B7\",\n  theta: \"\\u03B8\",\n  iota: \"\\u03B9\",\n  kappa: \"\\u03BA\",\n  lambda: \"\\u03BB\",\n  mu: \"\\u03BC\",\n  nu: \"\\u03BD\",\n  xi: \"\\u03BE\",\n  omicron: \"\\u03BF\",\n  pi: \"\\u03C0\",\n  rho: \"\\u03C1\",\n  sigmaf: \"\\u03C2\",\n  sigma: \"\\u03C3\",\n  tau: \"\\u03C4\",\n  upsilon: \"\\u03C5\",\n  phi: \"\\u03C6\",\n  chi: \"\\u03C7\",\n  psi: \"\\u03C8\",\n  omega: \"\\u03C9\",\n  thetasym: \"\\u03D1\",\n  upsih: \"\\u03D2\",\n  piv: \"\\u03D6\",\n  ensp: \"\\u2002\",\n  emsp: \"\\u2003\",\n  thinsp: \"\\u2009\",\n  zwnj: \"\\u200C\",\n  zwj: \"\\u200D\",\n  lrm: \"\\u200E\",\n  rlm: \"\\u200F\",\n  ndash: \"\\u2013\",\n  mdash: \"\\u2014\",\n  lsquo: \"\\u2018\",\n  rsquo: \"\\u2019\",\n  sbquo: \"\\u201A\",\n  ldquo: \"\\u201C\",\n  rdquo: \"\\u201D\",\n  bdquo: \"\\u201E\",\n  dagger: \"\\u2020\",\n  Dagger: \"\\u2021\",\n  bull: \"\\u2022\",\n  hellip: \"\\u2026\",\n  permil: \"\\u2030\",\n  prime: \"\\u2032\",\n  Prime: \"\\u2033\",\n  lsaquo: \"\\u2039\",\n  rsaquo: \"\\u203A\",\n  oline: \"\\u203E\",\n  frasl: \"\\u2044\",\n  euro: \"\\u20AC\",\n  image: \"\\u2111\",\n  weierp: \"\\u2118\",\n  real: \"\\u211C\",\n  trade: \"\\u2122\",\n  alefsym: \"\\u2135\",\n  larr: \"\\u2190\",\n  uarr: \"\\u2191\",\n  rarr: \"\\u2192\",\n  darr: \"\\u2193\",\n  harr: \"\\u2194\",\n  crarr: \"\\u21B5\",\n  lArr: \"\\u21D0\",\n  uArr: \"\\u21D1\",\n  rArr: \"\\u21D2\",\n  dArr: \"\\u21D3\",\n  hArr: \"\\u21D4\",\n  forall: \"\\u2200\",\n  part: \"\\u2202\",\n  exist: \"\\u2203\",\n  empty: \"\\u2205\",\n  nabla: \"\\u2207\",\n  isin: \"\\u2208\",\n  notin: \"\\u2209\",\n  ni: \"\\u220B\",\n  prod: \"\\u220F\",\n  sum: \"\\u2211\",\n  minus: \"\\u2212\",\n  lowast: \"\\u2217\",\n  radic: \"\\u221A\",\n  prop: \"\\u221D\",\n  infin: \"\\u221E\",\n  ang: \"\\u2220\",\n  and: \"\\u2227\",\n  or: \"\\u2228\",\n  cap: \"\\u2229\",\n  cup: \"\\u222A\",\n  int: \"\\u222B\",\n  there4: \"\\u2234\",\n  sim: \"\\u223C\",\n  cong: \"\\u2245\",\n  asymp: \"\\u2248\",\n  ne: \"\\u2260\",\n  equiv: \"\\u2261\",\n  le: \"\\u2264\",\n  ge: \"\\u2265\",\n  sub: \"\\u2282\",\n  sup: \"\\u2283\",\n  nsub: \"\\u2284\",\n  sube: \"\\u2286\",\n  supe: \"\\u2287\",\n  oplus: \"\\u2295\",\n  otimes: \"\\u2297\",\n  perp: \"\\u22A5\",\n  sdot: \"\\u22C5\",\n  lceil: \"\\u2308\",\n  rceil: \"\\u2309\",\n  lfloor: \"\\u230A\",\n  rfloor: \"\\u230B\",\n  lang: \"\\u2329\",\n  rang: \"\\u232A\",\n  loz: \"\\u25CA\",\n  spades: \"\\u2660\",\n  clubs: \"\\u2663\",\n  hearts: \"\\u2665\",\n  diams: \"\\u2666\",\n} as const;\nexport default entities;\n", "import * as charCodes from \"charcodes\";\n\nimport XHTMLEntities from \"./xhtml.ts\";\nimport type Parser from \"../../parser/index.ts\";\nimport type { ExpressionErrors } from \"../../parser/util.ts\";\nimport {\n  tokenComesBeforeExpression,\n  tokenIsKeyword,\n  tokenLabelName,\n  type TokenType,\n  tt,\n} from \"../../tokenizer/types.ts\";\nimport type { TokContext } from \"../../tokenizer/context.ts\";\nimport { types as tc } from \"../../tokenizer/context.ts\";\nimport type * as N from \"../../types.ts\";\nimport { isIdentifierChar, isIdentifierStart } from \"../../util/identifier.ts\";\nimport type { Position } from \"../../util/location.ts\";\nimport { isNewLine } from \"../../util/whitespace.ts\";\nimport { Errors, ParseErrorEnum } from \"../../parse-error.ts\";\nimport type { Undone } from \"../../parser/node.ts\";\n\n/* eslint sort-keys: \"error\" */\nconst JsxErrors = ParseErrorEnum`jsx`({\n  AttributeIsEmpty:\n    \"JSX attributes must only be assigned a non-empty expression.\",\n  MissingClosingTagElement: ({ openingTagName }: { openingTagName: string }) =>\n    `Expected corresponding JSX closing tag for <${openingTagName}>.`,\n  MissingClosingTagFragment: \"Expected corresponding JSX closing tag for <>.\",\n  UnexpectedSequenceExpression:\n    \"Sequence expressions cannot be directly nested inside JSX. Did you mean to wrap it in parentheses (...)?\",\n  // FIXME: Unify with Errors.UnexpectedToken\n  UnexpectedToken: ({\n    unexpected,\n    HTMLEntity,\n  }: {\n    unexpected: string;\n    HTMLEntity: string;\n  }) =>\n    `Unexpected token \\`${unexpected}\\`. Did you mean \\`${HTMLEntity}\\` or \\`{'${unexpected}'}\\`?`,\n  UnsupportedJsxValue:\n    \"JSX value should be either an expression or a quoted JSX text.\",\n  UnterminatedJsxContent: \"Unterminated JSX contents.\",\n  UnwrappedAdjacentJSXElements:\n    \"Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX fragment <>...</>?\",\n});\n\n/* eslint-disable sort-keys */\n\nfunction isFragment(object?: N.JSXTag | null): object is N.JSXFragmentTag {\n  return object\n    ? object.type === \"JSXOpeningFragment\" ||\n        object.type === \"JSXClosingFragment\"\n    : false;\n}\n\n// Transforms JSX element name to string.\n\nfunction getQualifiedJSXName(\n  object: N.JSXIdentifier | N.JSXNamespacedName | N.JSXMemberExpression,\n): string {\n  if (object.type === \"JSXIdentifier\") {\n    return object.name;\n  }\n\n  if (object.type === \"JSXNamespacedName\") {\n    return object.namespace.name + \":\" + object.name.name;\n  }\n\n  if (object.type === \"JSXMemberExpression\") {\n    return (\n      getQualifiedJSXName(object.object) +\n      \".\" +\n      getQualifiedJSXName(object.property)\n    );\n  }\n\n  // istanbul ignore next\n  // @ts-expect-error - object is 'never'\n  throw new Error(\"Node had unexpected type: \" + object.type);\n}\n\nexport interface IJSXParserMixin {\n  jsxParseOpeningElementAfterName(\n    node: N.JSXOpeningElement,\n  ): N.JSXOpeningElement;\n}\n\nexport default (superClass: typeof Parser) =>\n  class JSXParserMixin extends superClass implements Parser, IJSXParserMixin {\n    // Reads inline JSX contents token.\n\n    jsxReadToken(): void {\n      let out = \"\";\n      let chunkStart = this.state.pos;\n      for (;;) {\n        if (this.state.pos >= this.length) {\n          throw this.raise(\n            JsxErrors.UnterminatedJsxContent,\n            this.state.startLoc,\n          );\n        }\n\n        const ch = this.input.charCodeAt(this.state.pos);\n\n        switch (ch) {\n          case charCodes.lessThan:\n          case charCodes.leftCurlyBrace:\n            if (this.state.pos === this.state.start) {\n              if (ch === charCodes.lessThan && this.state.canStartJSXElement) {\n                ++this.state.pos;\n                this.finishToken(tt.jsxTagStart);\n              } else {\n                super.getTokenFromCode(ch);\n              }\n              return;\n            }\n            out += this.input.slice(chunkStart, this.state.pos);\n            this.finishToken(tt.jsxText, out);\n            return;\n\n          case charCodes.ampersand:\n            out += this.input.slice(chunkStart, this.state.pos);\n            out += this.jsxReadEntity();\n            chunkStart = this.state.pos;\n            break;\n\n          case charCodes.greaterThan:\n          case charCodes.rightCurlyBrace:\n            if (process.env.BABEL_8_BREAKING) {\n              this.raise(JsxErrors.UnexpectedToken, this.state.curPosition(), {\n                unexpected: this.input[this.state.pos],\n                HTMLEntity:\n                  ch === charCodes.rightCurlyBrace ? \"&rbrace;\" : \"&gt;\",\n              });\n            }\n          /* falls through */\n\n          default:\n            if (isNewLine(ch)) {\n              out += this.input.slice(chunkStart, this.state.pos);\n              out += this.jsxReadNewLine(true);\n              chunkStart = this.state.pos;\n            } else {\n              ++this.state.pos;\n            }\n        }\n      }\n    }\n\n    jsxReadNewLine(normalizeCRLF: boolean): string {\n      const ch = this.input.charCodeAt(this.state.pos);\n      let out;\n      ++this.state.pos;\n      if (\n        ch === charCodes.carriageReturn &&\n        this.input.charCodeAt(this.state.pos) === charCodes.lineFeed\n      ) {\n        ++this.state.pos;\n        out = normalizeCRLF ? \"\\n\" : \"\\r\\n\";\n      } else {\n        out = String.fromCharCode(ch);\n      }\n      ++this.state.curLine;\n      this.state.lineStart = this.state.pos;\n\n      return out;\n    }\n\n    jsxReadString(quote: number): void {\n      let out = \"\";\n      let chunkStart = ++this.state.pos;\n      for (;;) {\n        if (this.state.pos >= this.length) {\n          throw this.raise(Errors.UnterminatedString, this.state.startLoc);\n        }\n\n        const ch = this.input.charCodeAt(this.state.pos);\n        if (ch === quote) break;\n        if (ch === charCodes.ampersand) {\n          out += this.input.slice(chunkStart, this.state.pos);\n          out += this.jsxReadEntity();\n          chunkStart = this.state.pos;\n        } else if (isNewLine(ch)) {\n          out += this.input.slice(chunkStart, this.state.pos);\n          out += this.jsxReadNewLine(false);\n          chunkStart = this.state.pos;\n        } else {\n          ++this.state.pos;\n        }\n      }\n      out += this.input.slice(chunkStart, this.state.pos++);\n      this.finishToken(tt.string, out);\n    }\n\n    jsxReadEntity(): string {\n      const startPos = ++this.state.pos;\n      if (this.codePointAtPos(this.state.pos) === charCodes.numberSign) {\n        ++this.state.pos;\n\n        let radix = 10;\n        if (this.codePointAtPos(this.state.pos) === charCodes.lowercaseX) {\n          radix = 16;\n          ++this.state.pos;\n        }\n\n        const codePoint = this.readInt(\n          radix,\n          /* len */ undefined,\n          /* forceLen */ false,\n          /* allowNumSeparator */ \"bail\",\n        );\n        if (\n          codePoint !== null &&\n          this.codePointAtPos(this.state.pos) === charCodes.semicolon\n        ) {\n          ++this.state.pos;\n          return String.fromCodePoint(codePoint);\n        }\n      } else {\n        let count = 0;\n        let semi = false;\n        while (\n          count++ < 10 &&\n          this.state.pos < this.length &&\n          !(semi = this.codePointAtPos(this.state.pos) === charCodes.semicolon)\n        ) {\n          ++this.state.pos;\n        }\n\n        if (semi) {\n          const desc = this.input.slice(startPos, this.state.pos);\n          const entity = XHTMLEntities[desc];\n          ++this.state.pos;\n\n          if (entity) {\n            return entity;\n          }\n        }\n      }\n\n      // Not a valid entity\n      this.state.pos = startPos;\n      return \"&\";\n    }\n\n    // Read a JSX identifier (valid tag or attribute name).\n    //\n    // Optimized version since JSX identifiers can\"t contain\n    // escape characters and so can be read as single slice.\n    // Also assumes that first character was already checked\n    // by isIdentifierStart in readToken.\n\n    jsxReadWord(): void {\n      let ch;\n      const start = this.state.pos;\n      do {\n        ch = this.input.charCodeAt(++this.state.pos);\n      } while (isIdentifierChar(ch) || ch === charCodes.dash);\n      this.finishToken(tt.jsxName, this.input.slice(start, this.state.pos));\n    }\n\n    // Parse next token as JSX identifier\n\n    jsxParseIdentifier(): N.JSXIdentifier {\n      const node = this.startNode<N.JSXIdentifier>();\n      if (this.match(tt.jsxName)) {\n        node.name = this.state.value;\n      } else if (tokenIsKeyword(this.state.type)) {\n        node.name = tokenLabelName(this.state.type);\n      } else {\n        this.unexpected();\n      }\n      this.next();\n      return this.finishNode(node, \"JSXIdentifier\");\n    }\n\n    // Parse namespaced identifier.\n\n    jsxParseNamespacedName(): N.JSXNamespacedName | N.JSXIdentifier {\n      const startLoc = this.state.startLoc;\n      const name = this.jsxParseIdentifier();\n      if (!this.eat(tt.colon)) return name;\n\n      const node = this.startNodeAt<N.JSXNamespacedName>(startLoc);\n      node.namespace = name;\n      node.name = this.jsxParseIdentifier();\n      return this.finishNode(node, \"JSXNamespacedName\");\n    }\n\n    // Parses element name in any form - namespaced, member\n    // or single identifier.\n\n    jsxParseElementName():\n      | N.JSXIdentifier\n      | N.JSXNamespacedName\n      | N.JSXMemberExpression {\n      const startLoc = this.state.startLoc;\n      let node: N.JSXIdentifier | N.JSXNamespacedName | N.JSXMemberExpression =\n        this.jsxParseNamespacedName();\n      if (node.type === \"JSXNamespacedName\") {\n        return node;\n      }\n      while (this.eat(tt.dot)) {\n        const newNode = this.startNodeAt<N.JSXMemberExpression>(startLoc);\n        newNode.object = node;\n        newNode.property = this.jsxParseIdentifier();\n        node = this.finishNode(newNode, \"JSXMemberExpression\");\n      }\n      return node;\n    }\n\n    // Parses any type of JSX attribute value.\n\n    jsxParseAttributeValue():\n      | N.JSXExpressionContainer\n      | N.JSXElement\n      | N.StringLiteral {\n      let node;\n      switch (this.state.type) {\n        case tt.braceL:\n          node = this.startNode();\n          this.setContext(tc.brace);\n          this.next();\n          node = this.jsxParseExpressionContainer(node, tc.j_oTag);\n          if (node.expression.type === \"JSXEmptyExpression\") {\n            this.raise(JsxErrors.AttributeIsEmpty, node);\n          }\n          return node;\n\n        case tt.jsxTagStart:\n        case tt.string:\n          return this.parseExprAtom() as N.JSXElement | N.StringLiteral;\n\n        default:\n          throw this.raise(JsxErrors.UnsupportedJsxValue, this.state.startLoc);\n      }\n    }\n\n    // JSXEmptyExpression is unique type since it doesn't actually parse anything,\n    // and so it should start at the end of last read token (left brace) and finish\n    // at the beginning of the next one (right brace).\n\n    jsxParseEmptyExpression(): N.JSXEmptyExpression {\n      const node = this.startNodeAt(this.state.lastTokEndLoc);\n      return this.finishNodeAt(node, \"JSXEmptyExpression\", this.state.startLoc);\n    }\n\n    // Parse JSX spread child\n\n    jsxParseSpreadChild(node: Undone<N.JSXSpreadChild>): N.JSXSpreadChild {\n      this.next(); // ellipsis\n      node.expression = this.parseExpression();\n      this.setContext(tc.j_expr);\n      this.state.canStartJSXElement = true;\n      this.expect(tt.braceR);\n\n      return this.finishNode(node, \"JSXSpreadChild\");\n    }\n\n    // Parses JSX expression enclosed into curly brackets.\n\n    jsxParseExpressionContainer(\n      node: Undone<N.JSXExpressionContainer>,\n      previousContext: TokContext,\n    ): N.JSXExpressionContainer {\n      if (this.match(tt.braceR)) {\n        node.expression = this.jsxParseEmptyExpression();\n      } else {\n        const expression = this.parseExpression();\n\n        if (process.env.BABEL_8_BREAKING) {\n          if (\n            expression.type === \"SequenceExpression\" &&\n            !expression.extra?.parenthesized\n          ) {\n            this.raise(\n              JsxErrors.UnexpectedSequenceExpression,\n              expression.expressions[1],\n            );\n          }\n        }\n\n        node.expression = expression;\n      }\n      this.setContext(previousContext);\n      this.state.canStartJSXElement = true;\n      this.expect(tt.braceR);\n\n      return this.finishNode(node, \"JSXExpressionContainer\");\n    }\n\n    // Parses following JSX attribute name-value pair.\n\n    jsxParseAttribute(): N.JSXAttribute | N.JSXSpreadAttribute {\n      const node = this.startNode<N.JSXAttribute | N.JSXSpreadAttribute>();\n      if (this.match(tt.braceL)) {\n        this.setContext(tc.brace);\n        this.next();\n        this.expect(tt.ellipsis);\n        node.argument = this.parseMaybeAssignAllowIn();\n        this.setContext(tc.j_oTag);\n        this.state.canStartJSXElement = true;\n        this.expect(tt.braceR);\n        return this.finishNode(node, \"JSXSpreadAttribute\");\n      }\n      node.name = this.jsxParseNamespacedName();\n      node.value = this.eat(tt.eq) ? this.jsxParseAttributeValue() : null;\n      return this.finishNode(node, \"JSXAttribute\");\n    }\n\n    // Parses JSX opening tag starting after \"<\".\n\n    jsxParseOpeningElementAt(\n      startLoc: Position,\n    ): N.JSXOpeningElement | N.JSXOpeningFragment {\n      const node = this.startNodeAt<N.JSXOpeningElement | N.JSXOpeningFragment>(\n        startLoc,\n      );\n      if (this.eat(tt.jsxTagEnd)) {\n        return this.finishNode(node, \"JSXOpeningFragment\");\n      }\n      node.name = this.jsxParseElementName();\n      return this.jsxParseOpeningElementAfterName(\n        node as Undone<N.JSXOpeningElement>,\n      );\n    }\n\n    jsxParseOpeningElementAfterName(\n      node: Undone<N.JSXOpeningElement>,\n    ): N.JSXOpeningElement {\n      const attributes: (N.JSXAttribute | N.JSXSpreadAttribute)[] = [];\n      while (!this.match(tt.slash) && !this.match(tt.jsxTagEnd)) {\n        attributes.push(this.jsxParseAttribute());\n      }\n      node.attributes = attributes;\n      node.selfClosing = this.eat(tt.slash);\n      this.expect(tt.jsxTagEnd);\n      return this.finishNode(node, \"JSXOpeningElement\");\n    }\n\n    // Parses JSX closing tag starting after \"</\".\n\n    jsxParseClosingElementAt(\n      startLoc: Position,\n    ): N.JSXClosingElement | N.JSXClosingFragment {\n      const node = this.startNodeAt<N.JSXClosingFragment | N.JSXClosingElement>(\n        startLoc,\n      );\n      if (this.eat(tt.jsxTagEnd)) {\n        return this.finishNode(node, \"JSXClosingFragment\");\n      }\n      node.name = this.jsxParseElementName();\n      this.expect(tt.jsxTagEnd);\n      return this.finishNode(node, \"JSXClosingElement\");\n    }\n\n    // Parses entire JSX element, including it\"s opening tag\n    // (starting after \"<\"), attributes, contents and closing tag.\n\n    jsxParseElementAt(startLoc: Position): N.JSXElement | N.JSXFragment {\n      const node = this.startNodeAt<N.JSXElement | N.JSXFragment>(startLoc);\n      const children = [];\n      const openingElement = this.jsxParseOpeningElementAt(startLoc);\n      let closingElement = null;\n\n      if (!openingElement.selfClosing) {\n        contents: for (;;) {\n          switch (this.state.type) {\n            case tt.jsxTagStart:\n              startLoc = this.state.startLoc;\n              this.next();\n              if (this.eat(tt.slash)) {\n                closingElement = this.jsxParseClosingElementAt(startLoc);\n                break contents;\n              }\n              children.push(this.jsxParseElementAt(startLoc));\n              break;\n\n            case tt.jsxText:\n              children.push(this.parseLiteral(this.state.value, \"JSXText\"));\n              break;\n\n            case tt.braceL: {\n              const node = this.startNode<\n                N.JSXSpreadChild | N.JSXExpressionContainer\n              >();\n              this.setContext(tc.brace);\n              this.next();\n              if (this.match(tt.ellipsis)) {\n                children.push(this.jsxParseSpreadChild(node));\n              } else {\n                children.push(\n                  this.jsxParseExpressionContainer(node, tc.j_expr),\n                );\n              }\n\n              break;\n            }\n            // istanbul ignore next - should never happen\n            default:\n              this.unexpected();\n          }\n        }\n\n        if (\n          isFragment(openingElement) &&\n          !isFragment(closingElement) &&\n          closingElement !== null\n        ) {\n          this.raise(JsxErrors.MissingClosingTagFragment, closingElement);\n        } else if (!isFragment(openingElement) && isFragment(closingElement)) {\n          this.raise(JsxErrors.MissingClosingTagElement, closingElement, {\n            openingTagName: getQualifiedJSXName(openingElement.name),\n          });\n        } else if (!isFragment(openingElement) && !isFragment(closingElement)) {\n          if (\n            getQualifiedJSXName(closingElement.name) !==\n            getQualifiedJSXName(openingElement.name)\n          ) {\n            this.raise(JsxErrors.MissingClosingTagElement, closingElement, {\n              openingTagName: getQualifiedJSXName(openingElement.name),\n            });\n          }\n        }\n      }\n\n      if (isFragment(openingElement)) {\n        node.openingFragment = openingElement;\n        node.closingFragment = closingElement;\n      } else {\n        node.openingElement = openingElement;\n        node.closingElement = closingElement;\n      }\n      node.children = children;\n      if (this.match(tt.lt)) {\n        throw this.raise(\n          JsxErrors.UnwrappedAdjacentJSXElements,\n          this.state.startLoc,\n        );\n      }\n\n      return isFragment(openingElement)\n        ? this.finishNode(node, \"JSXFragment\")\n        : this.finishNode(node, \"JSXElement\");\n    }\n\n    // Parses entire JSX element from current position.\n\n    jsxParseElement(): N.JSXElement | N.JSXFragment {\n      const startLoc = this.state.startLoc;\n      this.next();\n      return this.jsxParseElementAt(startLoc);\n    }\n\n    setContext(newContext: TokContext) {\n      const { context } = this.state;\n      context[context.length - 1] = newContext;\n    }\n\n    // ==================================\n    // Overrides\n    // ==================================\n\n    parseExprAtom(refExpressionErrors?: ExpressionErrors | null): N.Expression {\n      if (this.match(tt.jsxTagStart)) {\n        return this.jsxParseElement();\n      } else if (\n        this.match(tt.lt) &&\n        this.input.charCodeAt(this.state.pos) !== charCodes.exclamationMark\n      ) {\n        // In case we encounter an lt token here it will always be the start of\n        // jsx as the lt sign is not allowed in places that expect an expression\n        this.replaceToken(tt.jsxTagStart);\n        return this.jsxParseElement();\n      } else {\n        return super.parseExprAtom(refExpressionErrors);\n      }\n    }\n\n    skipSpace() {\n      const curContext = this.curContext();\n      if (!curContext.preserveSpace) super.skipSpace();\n    }\n\n    getTokenFromCode(code: number): void {\n      const context = this.curContext();\n\n      if (context === tc.j_expr) {\n        this.jsxReadToken();\n        return;\n      }\n\n      if (context === tc.j_oTag || context === tc.j_cTag) {\n        if (isIdentifierStart(code)) {\n          this.jsxReadWord();\n          return;\n        }\n\n        if (code === charCodes.greaterThan) {\n          ++this.state.pos;\n          this.finishToken(tt.jsxTagEnd);\n          return;\n        }\n\n        if (\n          (code === charCodes.quotationMark || code === charCodes.apostrophe) &&\n          context === tc.j_oTag\n        ) {\n          this.jsxReadString(code);\n          return;\n        }\n      }\n\n      if (\n        code === charCodes.lessThan &&\n        this.state.canStartJSXElement &&\n        this.input.charCodeAt(this.state.pos + 1) !== charCodes.exclamationMark\n      ) {\n        ++this.state.pos;\n        this.finishToken(tt.jsxTagStart);\n        return;\n      }\n\n      super.getTokenFromCode(code);\n    }\n\n    updateContext(prevType: TokenType): void {\n      const { context, type } = this.state;\n      if (type === tt.slash && prevType === tt.jsxTagStart) {\n        // do not consider JSX expr -> JSX open tag -> ... anymore\n        // reconsider as closing tag context\n        context.splice(-2, 2, tc.j_cTag);\n        this.state.canStartJSXElement = false;\n      } else if (type === tt.jsxTagStart) {\n        // start opening tag context\n        context.push(tc.j_oTag);\n      } else if (type === tt.jsxTagEnd) {\n        const out = context[context.length - 1];\n        if ((out === tc.j_oTag && prevType === tt.slash) || out === tc.j_cTag) {\n          context.pop();\n          this.state.canStartJSXElement =\n            context[context.length - 1] === tc.j_expr;\n        } else {\n          this.setContext(tc.j_expr);\n          this.state.canStartJSXElement = true;\n        }\n      } else {\n        this.state.canStartJSXElement = tokenComesBeforeExpression(type);\n      }\n    }\n  };\n", "import type { Position } from \"../../util/location.ts\";\nimport ScopeHandler, { NameType, Scope } from \"../../util/scope.ts\";\nimport { BindingFlag, ScopeFlag } from \"../../util/scopeflags.ts\";\nimport type * as N from \"../../types.ts\";\nimport { Errors } from \"../../parse-error.ts\";\n\nconst enum TsNameType {\n  Types = 1 << 0,\n  // enums (which are also in .types)\n  Enums = 1 << 1,\n  // const enums (which are also in .enums and .types)\n  ConstEnums = 1 << 2,\n  // classes (which are also in .lexical) and interface (which are also in .types)\n  Classes = 1 << 3,\n  // namespaces and ambient functions (or classes) are too difficult to track,\n  // especially without type analysis.\n  // We need to track them anyway, to avoid \"X is not defined\" errors\n  // when exporting them.\n  ExportOnlyBindings = 1 << 4,\n}\n\nclass TypeScriptScope extends Scope {\n  tsNames: Map<string, TsNameType> = new Map();\n}\n\n// See https://github.com/babel/babel/pull/9766#discussion_r268920730 for an\n// explanation of how typescript handles scope.\n\nexport default class TypeScriptScopeHandler extends ScopeHandler<TypeScriptScope> {\n  importsStack: Set<string>[] = [];\n\n  createScope(flags: ScopeFlag): TypeScriptScope {\n    this.importsStack.push(new Set()); // Always keep the top-level scope for export checks.\n\n    return new TypeScriptScope(flags);\n  }\n\n  enter(flags: ScopeFlag): void {\n    if (flags === ScopeFlag.TS_MODULE) {\n      this.importsStack.push(new Set());\n    }\n\n    super.enter(flags);\n  }\n\n  exit() {\n    const flags = super.exit();\n\n    if (flags === ScopeFlag.TS_MODULE) {\n      this.importsStack.pop();\n    }\n\n    return flags;\n  }\n\n  hasImport(name: string, allowShadow?: boolean) {\n    const len = this.importsStack.length;\n    if (this.importsStack[len - 1].has(name)) {\n      return true;\n    }\n    if (!allowShadow && len > 1) {\n      for (let i = 0; i < len - 1; i++) {\n        if (this.importsStack[i].has(name)) return true;\n      }\n    }\n    return false;\n  }\n\n  declareName(name: string, bindingType: BindingFlag, loc: Position) {\n    if (bindingType & BindingFlag.FLAG_TS_IMPORT) {\n      if (this.hasImport(name, true)) {\n        this.parser.raise(Errors.VarRedeclaration, loc, {\n          identifierName: name,\n        });\n      }\n      this.importsStack[this.importsStack.length - 1].add(name);\n      return;\n    }\n\n    const scope = this.currentScope();\n    let type = scope.tsNames.get(name) || 0;\n\n    if (bindingType & BindingFlag.FLAG_TS_EXPORT_ONLY) {\n      this.maybeExportDefined(scope, name);\n      scope.tsNames.set(name, type | TsNameType.ExportOnlyBindings);\n      return;\n    }\n\n    super.declareName(name, bindingType, loc);\n\n    if (bindingType & BindingFlag.KIND_TYPE) {\n      if (!(bindingType & BindingFlag.KIND_VALUE)) {\n        // \"Value\" bindings have already been registered by the superclass.\n        this.checkRedeclarationInScope(scope, name, bindingType, loc);\n        this.maybeExportDefined(scope, name);\n      }\n      type = type | TsNameType.Types;\n    }\n    if (bindingType & BindingFlag.FLAG_TS_ENUM) {\n      type = type | TsNameType.Enums;\n    }\n    if (bindingType & BindingFlag.FLAG_TS_CONST_ENUM) {\n      type = type | TsNameType.ConstEnums;\n    }\n    if (bindingType & BindingFlag.FLAG_CLASS) {\n      type = type | TsNameType.Classes;\n    }\n    if (type) scope.tsNames.set(name, type);\n  }\n\n  isRedeclaredInScope(\n    scope: TypeScriptScope,\n    name: string,\n    bindingType: BindingFlag,\n  ): boolean {\n    const type = scope.tsNames.get(name);\n    if ((type & TsNameType.Enums) > 0) {\n      if (bindingType & BindingFlag.FLAG_TS_ENUM) {\n        // Enums can be merged with other enums if they are both\n        //  const or both non-const.\n        const isConst = !!(bindingType & BindingFlag.FLAG_TS_CONST_ENUM);\n        const wasConst = (type & TsNameType.ConstEnums) > 0;\n        return isConst !== wasConst;\n      }\n      return true;\n    }\n    if (\n      bindingType & BindingFlag.FLAG_CLASS &&\n      (type & TsNameType.Classes) > 0\n    ) {\n      if (scope.names.get(name) & NameType.Lexical) {\n        // Classes can be merged with interfaces\n        return !!(bindingType & BindingFlag.KIND_VALUE);\n      } else {\n        // Interface can be merged with other classes or interfaces\n        return false;\n      }\n    }\n    if (bindingType & BindingFlag.KIND_TYPE && (type & TsNameType.Types) > 0) {\n      return true;\n    }\n\n    return super.isRedeclaredInScope(scope, name, bindingType);\n  }\n\n  checkLocalExport(id: N.Identifier) {\n    const { name } = id;\n\n    if (this.hasImport(name)) return;\n\n    const len = this.scopeStack.length;\n    for (let i = len - 1; i >= 0; i--) {\n      const scope = this.scopeStack[i];\n      const type = scope.tsNames.get(name);\n      if (\n        (type & TsNameType.Types) > 0 ||\n        (type & TsNameType.ExportOnlyBindings) > 0\n      ) {\n        return;\n      }\n    }\n\n    super.checkLocalExport(id);\n  }\n}\n", "import * as charCodes from \"charcodes\";\nimport { tt, type TokenType } from \"../tokenizer/types.ts\";\nimport type {\n  AssignmentPattern,\n  TSParameterProperty,\n  Decorator,\n  Expression,\n  Identifier,\n  Node,\n  Pattern,\n  RestElement,\n  SpreadElement,\n  ObjectOrClassMember,\n  ClassMember,\n  ObjectMember,\n  TsNamedTypeElementBase,\n  PrivateName,\n  ObjectExpression,\n  ObjectPattern,\n  ArrayPattern,\n  AssignmentProperty,\n  Assignable,\n} from \"../types.ts\";\nimport type { Pos, Position } from \"../util/location.ts\";\nimport {\n  isStrictBindOnlyReservedWord,\n  isStrictBindReservedWord,\n} from \"../util/identifier.ts\";\nimport { NodeUtils, type Undone } from \"./node.ts\";\nimport { BindingFlag } from \"../util/scopeflags.ts\";\nimport type { ExpressionErrors } from \"./util.ts\";\nimport { Errors, type LValAncestor } from \"../parse-error.ts\";\nimport type Parser from \"./index.ts\";\n\nconst unwrapParenthesizedExpression = (node: Node): Node => {\n  return node.type === \"ParenthesizedExpression\"\n    ? unwrapParenthesizedExpression(node.expression)\n    : node;\n};\n\nexport const enum ParseBindingListFlags {\n  ALLOW_EMPTY = 1 << 0,\n  IS_FUNCTION_PARAMS = 1 << 1,\n  IS_CONSTRUCTOR_PARAMS = 1 << 2,\n}\n\nexport default abstract class LValParser extends NodeUtils {\n  // Forward-declaration: defined in expression.js\n  abstract parseIdentifier(liberal?: boolean): Identifier;\n  abstract parseMaybeAssign(\n    refExpressionErrors?: ExpressionErrors | null,\n    afterLeftParse?: Function,\n    refNeedsArrowPos?: Pos | null,\n  ): Expression;\n\n  abstract parseMaybeAssignAllowIn(\n    refExpressionErrors?: ExpressionErrors | null,\n    afterLeftParse?: Function,\n    refNeedsArrowPos?: Pos | null,\n  ): Expression;\n\n  abstract parseObjectLike<T extends ObjectPattern | ObjectExpression>(\n    close: TokenType,\n    isPattern: boolean,\n    isRecord?: boolean,\n    refExpressionErrors?: ExpressionErrors,\n  ): T;\n  abstract parseObjPropValue(\n    prop: any,\n    startLoc: Position | null,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isPattern: boolean,\n    isAccessor: boolean,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): void;\n  abstract parsePropertyName(\n    prop: ObjectOrClassMember | ClassMember | TsNamedTypeElementBase,\n  ): void;\n  abstract parsePrivateName(): PrivateName;\n  // Forward-declaration: defined in statement.js\n  abstract parseDecorator(): Decorator;\n\n  /**\n   * Convert existing expression atom to assignable pattern\n   * if possible. Also checks invalid destructuring targets:\n   *\n   * - Parenthesized Destructuring patterns\n   * - RestElement is not the last element\n   * - Missing `=` in assignment pattern\n   *\n   * NOTE: There is a corresponding \"isAssignable\" method.\n   * When this one is updated, please check if also that one needs to be updated.\n   *\n   * @param node The expression atom\n   * @param isLHS Whether we are parsing a LeftHandSideExpression.\n   *              If isLHS is `true`, the following cases are allowed: `[(a)] = [0]`, `[(a.b)] = [0]`\n   *              If isLHS is `false`, we are in an arrow function parameters list.\n   */\n  toAssignable(node: Node, isLHS: boolean = false): asserts node is Assignable {\n    let parenthesized = undefined;\n    if (node.type === \"ParenthesizedExpression\" || node.extra?.parenthesized) {\n      parenthesized = unwrapParenthesizedExpression(node);\n      if (isLHS) {\n        // an LHS can be reinterpreted to a binding pattern but not vice versa.\n        // therefore a parenthesized identifier is ambiguous until we are sure it is an assignment expression\n        // i.e. `([(a) = []] = []) => {}`\n        // see also `recordArrowParameterBindingError` signature in packages/babel-parser/src/util/expression-scope.js\n        if (parenthesized.type === \"Identifier\") {\n          this.expressionScope.recordArrowParameterBindingError(\n            Errors.InvalidParenthesizedAssignment,\n            node,\n          );\n        } else if (\n          parenthesized.type !== \"MemberExpression\" &&\n          !this.isOptionalMemberExpression(parenthesized)\n        ) {\n          // A parenthesized member expression can be in LHS but not in pattern.\n          // If the LHS is later interpreted as a pattern, `checkLVal` will throw for member expression binding\n          // i.e. `([(a.b) = []] = []) => {}`\n          this.raise(Errors.InvalidParenthesizedAssignment, node);\n        }\n      } else {\n        this.raise(Errors.InvalidParenthesizedAssignment, node);\n      }\n    }\n\n    switch (node.type) {\n      case \"Identifier\":\n      case \"ObjectPattern\":\n      case \"ArrayPattern\":\n      case \"AssignmentPattern\":\n      case \"RestElement\":\n        break;\n\n      case \"ObjectExpression\":\n        (node as Node).type = \"ObjectPattern\";\n        for (\n          let i = 0, length = node.properties.length, last = length - 1;\n          i < length;\n          i++\n        ) {\n          const prop = node.properties[i];\n          const isLast = i === last;\n          this.toAssignableObjectExpressionProp(prop, isLast, isLHS);\n\n          if (\n            isLast &&\n            (prop as Node).type === \"RestElement\" &&\n            node.extra?.trailingCommaLoc\n          ) {\n            this.raise(Errors.RestTrailingComma, node.extra.trailingCommaLoc);\n          }\n        }\n        break;\n\n      case \"ObjectProperty\": {\n        const { key, value } = node;\n        if (this.isPrivateName(key)) {\n          this.classScope.usePrivateName(\n            this.getPrivateNameSV(key),\n            key.loc.start,\n          );\n        }\n        this.toAssignable(value, isLHS);\n        break;\n      }\n\n      case \"SpreadElement\": {\n        throw new Error(\n          \"Internal @babel/parser error (this is a bug, please report it).\" +\n            \" SpreadElement should be converted by .toAssignable's caller.\",\n        );\n      }\n\n      case \"ArrayExpression\":\n        (node as Node).type = \"ArrayPattern\";\n        this.toAssignableList(\n          node.elements,\n          node.extra?.trailingCommaLoc,\n          isLHS,\n        );\n        break;\n\n      case \"AssignmentExpression\":\n        if (node.operator !== \"=\") {\n          this.raise(Errors.MissingEqInAssignment, node.left.loc.end);\n        }\n\n        (node as Node).type = \"AssignmentPattern\";\n        delete node.operator;\n        this.toAssignable(node.left, isLHS);\n        break;\n\n      case \"ParenthesizedExpression\":\n        /*::invariant (parenthesized !== undefined) */\n        this.toAssignable(parenthesized, isLHS);\n        break;\n\n      default:\n      // We don't know how to deal with this node. It will\n      // be reported by a later call to checkLVal\n    }\n  }\n\n  toAssignableObjectExpressionProp(\n    prop: Node,\n    isLast: boolean,\n    isLHS: boolean,\n  ) {\n    if (prop.type === \"ObjectMethod\") {\n      this.raise(\n        prop.kind === \"get\" || prop.kind === \"set\"\n          ? Errors.PatternHasAccessor\n          : Errors.PatternHasMethod,\n        prop.key,\n      );\n    } else if (prop.type === \"SpreadElement\") {\n      (prop as Node).type = \"RestElement\";\n      const arg = prop.argument;\n      this.checkToRestConversion(arg, /* allowPattern */ false);\n      this.toAssignable(arg, isLHS);\n\n      if (!isLast) {\n        this.raise(Errors.RestTrailingComma, prop);\n      }\n    } else {\n      this.toAssignable(prop, isLHS);\n    }\n  }\n\n  // Convert list of expression atoms to binding list.\n\n  toAssignableList(\n    exprList: (Expression | SpreadElement | RestElement)[],\n    trailingCommaLoc: Position | undefined | null,\n    isLHS: boolean,\n  ): void {\n    const end = exprList.length - 1;\n\n    for (let i = 0; i <= end; i++) {\n      const elt = exprList[i];\n      if (!elt) continue;\n\n      if (elt.type === \"SpreadElement\") {\n        (elt as unknown as RestElement).type = \"RestElement\";\n        const arg = elt.argument;\n        this.checkToRestConversion(arg, /* allowPattern */ true);\n        this.toAssignable(arg, isLHS);\n      } else {\n        this.toAssignable(elt, isLHS);\n      }\n\n      if (elt.type === \"RestElement\") {\n        if (i < end) {\n          this.raise(Errors.RestTrailingComma, elt);\n        } else if (trailingCommaLoc) {\n          this.raise(Errors.RestTrailingComma, trailingCommaLoc);\n        }\n      }\n    }\n  }\n\n  isAssignable(node: Node, isBinding?: boolean): boolean {\n    switch (node.type) {\n      case \"Identifier\":\n      case \"ObjectPattern\":\n      case \"ArrayPattern\":\n      case \"AssignmentPattern\":\n      case \"RestElement\":\n        return true;\n\n      case \"ObjectExpression\": {\n        const last = node.properties.length - 1;\n        return node.properties.every((prop, i) => {\n          return (\n            prop.type !== \"ObjectMethod\" &&\n            (i === last || prop.type !== \"SpreadElement\") &&\n            this.isAssignable(prop)\n          );\n        });\n      }\n\n      case \"ObjectProperty\":\n        return this.isAssignable(node.value);\n\n      case \"SpreadElement\":\n        return this.isAssignable(node.argument);\n\n      case \"ArrayExpression\":\n        return node.elements.every(\n          element => element === null || this.isAssignable(element),\n        );\n\n      case \"AssignmentExpression\":\n        return node.operator === \"=\";\n\n      case \"ParenthesizedExpression\":\n        return this.isAssignable(node.expression);\n\n      case \"MemberExpression\":\n      case \"OptionalMemberExpression\":\n        return !isBinding;\n\n      default:\n        return false;\n    }\n  }\n\n  // Convert list of expression atoms to a list of\n\n  toReferencedList(\n    exprList:\n      | ReadonlyArray<Expression | SpreadElement>\n      | ReadonlyArray<Expression | RestElement>,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    isParenthesizedExpr?: boolean,\n  ):\n    | ReadonlyArray<Expression | SpreadElement>\n    | ReadonlyArray<Expression | RestElement> {\n    return exprList;\n  }\n\n  toReferencedListDeep(\n    exprList:\n      | ReadonlyArray<Expression | SpreadElement>\n      | ReadonlyArray<Expression | RestElement>,\n    isParenthesizedExpr?: boolean,\n  ): void {\n    this.toReferencedList(exprList, isParenthesizedExpr);\n\n    for (const expr of exprList) {\n      if (expr?.type === \"ArrayExpression\") {\n        this.toReferencedListDeep(expr.elements);\n      }\n    }\n  }\n\n  // Parses spread element.\n\n  parseSpread(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): SpreadElement {\n    const node = this.startNode<SpreadElement>();\n    this.next();\n    node.argument = this.parseMaybeAssignAllowIn(\n      refExpressionErrors,\n      undefined,\n    );\n    return this.finishNode(node, \"SpreadElement\");\n  }\n\n  // https://tc39.es/ecma262/#prod-BindingRestProperty\n  // https://tc39.es/ecma262/#prod-BindingRestElement\n  parseRestBinding(this: Parser): RestElement {\n    const node = this.startNode<RestElement>();\n    this.next(); // eat `...`\n    node.argument = this.parseBindingAtom();\n    return this.finishNode(node, \"RestElement\");\n  }\n\n  // Parses lvalue (assignable) atom.\n  parseBindingAtom(this: Parser): Pattern {\n    // https://tc39.es/ecma262/#prod-BindingPattern\n    switch (this.state.type) {\n      case tt.bracketL: {\n        const node = this.startNode<ArrayPattern>();\n        this.next();\n        // @ts-expect-error: Fixme: TSParameterProperty can not be assigned to node.elements\n        node.elements = this.parseBindingList(\n          tt.bracketR,\n          charCodes.rightSquareBracket,\n          ParseBindingListFlags.ALLOW_EMPTY,\n        );\n        return this.finishNode(node, \"ArrayPattern\");\n      }\n\n      case tt.braceL:\n        return this.parseObjectLike(tt.braceR, true);\n    }\n\n    // https://tc39.es/ecma262/#prod-BindingIdentifier\n    return this.parseIdentifier();\n  }\n\n  // https://tc39.es/ecma262/#prod-BindingElementList\n  parseBindingList(\n    this: Parser,\n    close: TokenType,\n    closeCharCode: (typeof charCodes)[keyof typeof charCodes],\n    flags: ParseBindingListFlags,\n  ): Array<Pattern | TSParameterProperty> {\n    const allowEmpty = flags & ParseBindingListFlags.ALLOW_EMPTY;\n\n    const elts: Array<Pattern | TSParameterProperty> = [];\n    let first = true;\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n      }\n      if (allowEmpty && this.match(tt.comma)) {\n        elts.push(null);\n      } else if (this.eat(close)) {\n        break;\n      } else if (this.match(tt.ellipsis)) {\n        elts.push(\n          this.parseAssignableListItemTypes(this.parseRestBinding(), flags),\n        );\n        if (!this.checkCommaAfterRest(closeCharCode)) {\n          this.expect(close);\n          break;\n        }\n      } else {\n        const decorators = [];\n        if (this.match(tt.at) && this.hasPlugin(\"decorators\")) {\n          this.raise(Errors.UnsupportedParameterDecorator, this.state.startLoc);\n        }\n        // invariant: hasPlugin(\"decorators-legacy\")\n        while (this.match(tt.at)) {\n          decorators.push(this.parseDecorator());\n        }\n        elts.push(this.parseAssignableListItem(flags, decorators));\n      }\n    }\n    return elts;\n  }\n\n  // https://tc39.es/ecma262/#prod-BindingRestProperty\n  parseBindingRestProperty(\n    this: Parser,\n    prop: Undone<RestElement>,\n  ): RestElement {\n    this.next(); // eat '...'\n    // Don't use parseRestBinding() as we only allow Identifier here.\n    prop.argument = this.parseIdentifier();\n    this.checkCommaAfterRest(charCodes.rightCurlyBrace);\n    return this.finishNode(prop, \"RestElement\");\n  }\n\n  // https://tc39.es/ecma262/#prod-BindingProperty\n  parseBindingProperty(this: Parser): AssignmentProperty | RestElement {\n    const { type, startLoc } = this.state;\n    if (type === tt.ellipsis) {\n      return this.parseBindingRestProperty(this.startNode());\n    }\n\n    const prop = this.startNode<AssignmentProperty>();\n    if (type === tt.privateName) {\n      this.expectPlugin(\"destructuringPrivate\", startLoc);\n      this.classScope.usePrivateName(this.state.value, startLoc);\n      prop.key = this.parsePrivateName();\n    } else {\n      this.parsePropertyName(prop);\n    }\n    prop.method = false;\n    return this.parseObjPropValue(\n      prop,\n      startLoc,\n      false /* isGenerator */,\n      false /* isAsync */,\n      true /* isPattern */,\n      false /* isAccessor */,\n    );\n  }\n\n  parseAssignableListItem(\n    this: Parser,\n    flags: ParseBindingListFlags,\n    decorators: Decorator[],\n  ): Pattern | TSParameterProperty {\n    const left = this.parseMaybeDefault();\n    this.parseAssignableListItemTypes(left, flags);\n    const elt = this.parseMaybeDefault(left.loc.start, left);\n    if (decorators.length) {\n      left.decorators = decorators;\n    }\n    return elt;\n  }\n\n  // Used by flow/typescript plugin to add type annotations to binding elements\n  parseAssignableListItemTypes(\n    param: Pattern,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    flags: ParseBindingListFlags,\n  ): Pattern {\n    return param;\n  }\n\n  // Parses assignment pattern around given atom if possible.\n  // https://tc39.es/ecma262/#prod-BindingElement\n  parseMaybeDefault(\n    this: Parser,\n    startLoc?: Position | null,\n    left?: Pattern | null,\n  ): Pattern {\n    startLoc ??= this.state.startLoc;\n    left = left ?? this.parseBindingAtom();\n    if (!this.eat(tt.eq)) return left;\n\n    const node = this.startNodeAt<AssignmentPattern>(startLoc);\n    node.left = left;\n    node.right = this.parseMaybeAssignAllowIn();\n    return this.finishNode(node, \"AssignmentPattern\");\n  }\n  /**\n   * Return information use in determining whether a Node of a given type is an LVal,\n   * possibly given certain additional context information.\n   *\n   * Subclasser notes: This method has kind of a lot of mixed, but related,\n   * responsibilities. If we can definitively determine with the information\n   * provided that this either *is* or *isn't* a valid `LVal`, then the return\n   * value is easy: just return `true` or `false`. However, if it is a valid\n   * LVal *ancestor*, and thus its descendants must be subsequently visited to\n   * continue the \"investigation\", then this method should return the relevant\n   * child key as a `string`. In some special cases, you additionally want to\n   * convey that this node should be treated as if it were parenthesized. In\n   * that case, a tuple of [key: string, parenthesized: boolean] is returned.\n   * The `string`-only return option is actually just a shorthand for:\n   * `[key: string, parenthesized: false]`.\n   *\n   * @param type A Node `type` string\n   * @param isUnparenthesizedInAssign\n   *        Whether the node in question is unparenthesized and its parent\n   *        is either an assignment pattern or an assignment expression.\n   * @param binding\n   *        The binding operation that is being considered for this potential\n   *        LVal.\n   * @returns `true` or `false` if we can immediately determine whether the node\n   *          type in question can be treated as an `LVal`.\n   *          A `string` key to traverse if we must check this child.\n   *          A `[string, boolean]` tuple if we need to check this child and\n   *          treat is as parenthesized.\n   */\n  isValidLVal(\n    type: string,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    isUnparenthesizedInAssign: boolean,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    binding: BindingFlag,\n  ): string | boolean | [string, boolean] {\n    switch (type) {\n      case \"AssignmentPattern\":\n        return \"left\";\n      case \"RestElement\":\n        return \"argument\";\n      case \"ObjectProperty\":\n        return \"value\";\n      case \"ParenthesizedExpression\":\n        return \"expression\";\n      case \"ArrayPattern\":\n        return \"elements\";\n      case \"ObjectPattern\":\n        return \"properties\";\n    }\n    return false;\n  }\n\n  // Overridden by the estree plugin\n  isOptionalMemberExpression(expression: Node): boolean {\n    return expression.type === \"OptionalMemberExpression\";\n  }\n\n  /**\n   * Verify that a target expression is an lval (something that can be assigned to).\n   *\n   * @param expression The expression in question to check.\n   * @param ancestor\n   *        The relevant ancestor to provide context information for the error\n   *        if the check fails.\n   * @param binding\n   *        The desired binding type. If the given expression is an identifier\n   *        and `binding` is not `BindingFlag.TYPE_NONE`, `checkLVal` will register binding\n   *        to the parser scope See also `src/util/scopeflags.js`\n   * @param checkClashes\n   *        An optional string set to check if an identifier name is included.\n   *        `checkLVal` will add checked identifier name to `checkClashes` It is\n   *        used in tracking duplicates in function parameter lists. If it is\n   *        false, `checkLVal` will skip duplicate checks\n   * @param strictModeChanged\n   *        Whether an identifier has been parsed in a sloppy context but should\n   *        be reinterpreted as strict-mode. e.g. `(arguments) => { \"use strict \"}`\n   * @param hasParenthesizedAncestor\n   *        This is only used internally during recursive calls, and you should\n   *        not have to set it yourself.\n   */\n\n  checkLVal(\n    expression:\n      | Expression\n      | ObjectMember\n      | RestElement\n      | Pattern\n      | TSParameterProperty,\n    ancestor: LValAncestor,\n    binding: BindingFlag = BindingFlag.TYPE_NONE,\n    checkClashes: Set<string> | false = false,\n    strictModeChanged: boolean = false,\n    hasParenthesizedAncestor: boolean = false,\n  ): void {\n    const type = expression.type;\n\n    // If we find here an ObjectMethod, it's because this was originally\n    // an ObjectExpression which has then been converted.\n    // toAssignable already reported this error with a nicer message.\n    if (this.isObjectMethod(expression)) return;\n\n    const isOptionalMemberExpression =\n      this.isOptionalMemberExpression(expression);\n\n    if (isOptionalMemberExpression || type === \"MemberExpression\") {\n      if (isOptionalMemberExpression) {\n        this.expectPlugin(\"optionalChainingAssign\", expression.loc.start);\n        if (ancestor.type !== \"AssignmentExpression\") {\n          this.raise(Errors.InvalidLhsOptionalChaining, expression, {\n            ancestor,\n          });\n        }\n      }\n\n      if (binding !== BindingFlag.TYPE_NONE) {\n        this.raise(Errors.InvalidPropertyBindingPattern, expression);\n      }\n      return;\n    }\n\n    if (type === \"Identifier\") {\n      this.checkIdentifier(expression, binding, strictModeChanged);\n\n      const { name } = expression;\n\n      if (checkClashes) {\n        if (checkClashes.has(name)) {\n          this.raise(Errors.ParamDupe, expression);\n        } else {\n          checkClashes.add(name);\n        }\n      }\n\n      return;\n    }\n\n    const validity = this.isValidLVal(\n      type,\n      !(hasParenthesizedAncestor || expression.extra?.parenthesized) &&\n        ancestor.type === \"AssignmentExpression\",\n      binding,\n    );\n\n    if (validity === true) return;\n    if (validity === false) {\n      const ParseErrorClass =\n        binding === BindingFlag.TYPE_NONE\n          ? Errors.InvalidLhs\n          : Errors.InvalidLhsBinding;\n\n      this.raise(ParseErrorClass, expression, { ancestor });\n      return;\n    }\n\n    let key: string, isParenthesizedExpression: boolean;\n    if (typeof validity === \"string\") {\n      key = validity;\n      isParenthesizedExpression = type === \"ParenthesizedExpression\";\n    } else {\n      [key, isParenthesizedExpression] = validity;\n    }\n\n    const nextAncestor =\n      type === \"ArrayPattern\" || type === \"ObjectPattern\"\n        ? ({ type } as const)\n        : ancestor;\n\n    // @ts-expect-error key may not index expression.\n    const val = expression[key];\n    if (Array.isArray(val)) {\n      for (const child of val) {\n        if (child) {\n          this.checkLVal(\n            child,\n            nextAncestor,\n            binding,\n            checkClashes,\n            strictModeChanged,\n            isParenthesizedExpression,\n          );\n        }\n      }\n    } else if (val) {\n      this.checkLVal(\n        val,\n        nextAncestor,\n        binding,\n        checkClashes,\n        strictModeChanged,\n        isParenthesizedExpression,\n      );\n    }\n  }\n\n  checkIdentifier(\n    at: Identifier,\n    bindingType: BindingFlag,\n    strictModeChanged: boolean = false,\n  ) {\n    if (\n      this.state.strict &&\n      (strictModeChanged\n        ? isStrictBindReservedWord(at.name, this.inModule)\n        : isStrictBindOnlyReservedWord(at.name))\n    ) {\n      if (bindingType === BindingFlag.TYPE_NONE) {\n        this.raise(Errors.StrictEvalArguments, at, { referenceName: at.name });\n      } else {\n        this.raise(Errors.StrictEvalArgumentsBinding, at, {\n          bindingName: at.name,\n        });\n      }\n    }\n\n    if (bindingType & BindingFlag.FLAG_NO_LET_IN_LEXICAL && at.name === \"let\") {\n      this.raise(Errors.LetInLexicalBinding, at);\n    }\n\n    if (!(bindingType & BindingFlag.TYPE_NONE)) {\n      this.declareNameFromIdentifier(at, bindingType);\n    }\n  }\n\n  declareNameFromIdentifier(identifier: Identifier, binding: BindingFlag) {\n    this.scope.declareName(identifier.name, binding, identifier.loc.start);\n  }\n\n  checkToRestConversion(node: Node, allowPattern: boolean): void {\n    switch (node.type) {\n      case \"ParenthesizedExpression\":\n        this.checkToRestConversion(node.expression, allowPattern);\n        break;\n      case \"Identifier\":\n      case \"MemberExpression\":\n        break;\n      case \"ArrayExpression\":\n      case \"ObjectExpression\":\n        if (allowPattern) break;\n      /* falls through */\n      default:\n        this.raise(Errors.InvalidRestAssignmentPattern, node);\n    }\n  }\n\n  checkCommaAfterRest(\n    close: (typeof charCodes)[keyof typeof charCodes],\n  ): boolean {\n    if (!this.match(tt.comma)) {\n      return false;\n    }\n\n    this.raise(\n      this.lookaheadCharCode() === close\n        ? Errors.RestTrailingComma\n        : Errors.ElementAfterRest,\n      this.state.startLoc,\n    );\n\n    return true;\n  }\n}\n", "import type State from \"../../tokenizer/state.ts\";\nimport {\n  tokenIsIdentifier,\n  tokenIsTSDeclarationStart,\n  tokenIsTSTypeOperator,\n  tokenOperatorPrecedence,\n  tokenIsKeywordOrIdentifier,\n  tt,\n  type TokenType,\n  tokenIsTemplate,\n  tokenCanStartExpression,\n} from \"../../tokenizer/types.ts\";\nimport { types as tc } from \"../../tokenizer/context.ts\";\nimport type * as N from \"../../types.ts\";\nimport type { Position } from \"../../util/location.ts\";\nimport { createPositionWithColumnOffset } from \"../../util/location.ts\";\nimport type Parser from \"../../parser/index.ts\";\nimport { ScopeFlag, BindingFlag } from \"../../util/scopeflags.ts\";\nimport TypeScriptScopeHandler from \"./scope.ts\";\nimport * as charCodes from \"charcodes\";\nimport type { ExpressionErrors } from \"../../parser/util.ts\";\nimport type { ParseStatementFlag } from \"../../parser/statement.ts\";\nimport { ParamKind } from \"../../util/production-parameter.ts\";\nimport { Errors, ParseErrorEnum } from \"../../parse-error.ts\";\nimport { cloneIdentifier, type Undone } from \"../../parser/node.ts\";\nimport type { Pattern } from \"../../types.ts\";\nimport type { Expression } from \"../../types.ts\";\nimport type { IJSXParserMixin } from \"../jsx/index.ts\";\nimport { ParseBindingListFlags } from \"../../parser/lval.ts\";\n\ntype TsModifier =\n  | \"readonly\"\n  | \"abstract\"\n  | \"declare\"\n  | \"static\"\n  | \"override\"\n  | \"const\"\n  | N.Accessibility\n  | N.VarianceAnnotations;\n\nfunction nonNull<T>(x?: T | null): T {\n  if (x == null) {\n    throw new Error(`Unexpected ${x} value.`);\n  }\n  return x;\n}\n\nfunction assert(x: boolean): void {\n  if (!x) {\n    throw new Error(\"Assert fail\");\n  }\n}\n\ntype ParsingContext =\n  | \"EnumMembers\"\n  | \"HeritageClauseElement\"\n  | \"TupleElementTypes\"\n  | \"TypeMembers\"\n  | \"TypeParametersOrArguments\";\n\ntype ModifierBase = {\n  accessibility?: N.Accessibility;\n} & {\n  [key in TsModifier]?: boolean | undefined | null;\n};\n\n/* eslint sort-keys: \"error\" */\nconst TSErrors = ParseErrorEnum`typescript`({\n  AbstractMethodHasImplementation: ({ methodName }: { methodName: string }) =>\n    `Method '${methodName}' cannot have an implementation because it is marked abstract.`,\n  AbstractPropertyHasInitializer: ({\n    propertyName,\n  }: {\n    propertyName: string;\n  }) =>\n    `Property '${propertyName}' cannot have an initializer because it is marked abstract.`,\n  // TODO: Accesor -> Accessor\n  AccesorCannotDeclareThisParameter:\n    \"'get' and 'set' accessors cannot declare 'this' parameters.\",\n  AccesorCannotHaveTypeParameters: \"An accessor cannot have type parameters.\",\n  AccessorCannotBeOptional:\n    \"An 'accessor' property cannot be declared optional.\",\n  ClassMethodHasDeclare: \"Class methods cannot have the 'declare' modifier.\",\n  ClassMethodHasReadonly: \"Class methods cannot have the 'readonly' modifier.\",\n  ConstInitiailizerMustBeStringOrNumericLiteralOrLiteralEnumReference:\n    \"A 'const' initializer in an ambient context must be a string or numeric literal or literal enum reference.\",\n  ConstructorHasTypeParameters:\n    \"Type parameters cannot appear on a constructor declaration.\",\n  DeclareAccessor: ({ kind }: { kind: \"get\" | \"set\" }) =>\n    `'declare' is not allowed in ${kind}ters.`,\n  DeclareClassFieldHasInitializer:\n    \"Initializers are not allowed in ambient contexts.\",\n  DeclareFunctionHasImplementation:\n    \"An implementation cannot be declared in ambient contexts.\",\n  DuplicateAccessibilityModifier:\n    // `Accessibility modifier already seen: ${modifier}` would be more helpful.\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    ({ modifier }: { modifier: N.Accessibility }) =>\n      `Accessibility modifier already seen.`,\n  DuplicateModifier: ({ modifier }: { modifier: TsModifier }) =>\n    `Duplicate modifier: '${modifier}'.`,\n  // `token` matches the terminology used by typescript:\n  // https://github.com/microsoft/TypeScript/blob/main/src/compiler/types.ts#L2915\n  EmptyHeritageClauseType: ({ token }: { token: \"extends\" | \"implements\" }) =>\n    `'${token}' list cannot be empty.`,\n  EmptyTypeArguments: \"Type argument list cannot be empty.\",\n  EmptyTypeParameters: \"Type parameter list cannot be empty.\",\n  ExpectedAmbientAfterExportDeclare:\n    \"'export declare' must be followed by an ambient declaration.\",\n  ImportAliasHasImportType: \"An import alias can not use 'import type'.\",\n  ImportReflectionHasImportType:\n    \"An `import module` declaration can not use `type` modifier\",\n  IncompatibleModifiers: ({\n    modifiers,\n  }: {\n    modifiers: [TsModifier, TsModifier];\n  }) =>\n    `'${modifiers[0]}' modifier cannot be used with '${modifiers[1]}' modifier.`,\n  IndexSignatureHasAbstract:\n    \"Index signatures cannot have the 'abstract' modifier.\",\n  IndexSignatureHasAccessibility: ({\n    modifier,\n  }: {\n    modifier: N.Accessibility;\n  }) =>\n    `Index signatures cannot have an accessibility modifier ('${modifier}').`,\n  IndexSignatureHasDeclare:\n    \"Index signatures cannot have the 'declare' modifier.\",\n  IndexSignatureHasOverride:\n    \"'override' modifier cannot appear on an index signature.\",\n  IndexSignatureHasStatic:\n    \"Index signatures cannot have the 'static' modifier.\",\n  InitializerNotAllowedInAmbientContext:\n    \"Initializers are not allowed in ambient contexts.\",\n  InvalidModifierOnTypeMember: ({ modifier }: { modifier: TsModifier }) =>\n    `'${modifier}' modifier cannot appear on a type member.`,\n  InvalidModifierOnTypeParameter: ({ modifier }: { modifier: TsModifier }) =>\n    `'${modifier}' modifier cannot appear on a type parameter.`,\n  InvalidModifierOnTypeParameterPositions: ({\n    modifier,\n  }: {\n    modifier: TsModifier;\n  }) =>\n    `'${modifier}' modifier can only appear on a type parameter of a class, interface or type alias.`,\n  InvalidModifiersOrder: ({\n    orderedModifiers,\n  }: {\n    orderedModifiers: [TsModifier, TsModifier];\n  }) =>\n    `'${orderedModifiers[0]}' modifier must precede '${orderedModifiers[1]}' modifier.`,\n  InvalidPropertyAccessAfterInstantiationExpression:\n    \"Invalid property access after an instantiation expression. \" +\n    \"You can either wrap the instantiation expression in parentheses, or delete the type arguments.\",\n  InvalidTupleMemberLabel:\n    \"Tuple members must be labeled with a simple identifier.\",\n  MissingInterfaceName:\n    \"'interface' declarations must be followed by an identifier.\",\n  NonAbstractClassHasAbstractMethod:\n    \"Abstract methods can only appear within an abstract class.\",\n  NonClassMethodPropertyHasAbstractModifer:\n    \"'abstract' modifier can only appear on a class, method, or property declaration.\",\n  OptionalTypeBeforeRequired:\n    \"A required element cannot follow an optional element.\",\n  OverrideNotInSubClass:\n    \"This member cannot have an 'override' modifier because its containing class does not extend another class.\",\n  PatternIsOptional:\n    \"A binding pattern parameter cannot be optional in an implementation signature.\",\n  PrivateElementHasAbstract:\n    \"Private elements cannot have the 'abstract' modifier.\",\n  PrivateElementHasAccessibility: ({\n    modifier,\n  }: {\n    modifier: N.Accessibility;\n  }) =>\n    `Private elements cannot have an accessibility modifier ('${modifier}').`,\n  ReadonlyForMethodSignature:\n    \"'readonly' modifier can only appear on a property declaration or index signature.\",\n  ReservedArrowTypeParam:\n    \"This syntax is reserved in files with the .mts or .cts extension. Add a trailing comma, as in `<T,>() => ...`.\",\n  ReservedTypeAssertion:\n    \"This syntax is reserved in files with the .mts or .cts extension. Use an `as` expression instead.\",\n  // TODO: Accesor -> Accessor\n  SetAccesorCannotHaveOptionalParameter:\n    \"A 'set' accessor cannot have an optional parameter.\",\n  SetAccesorCannotHaveRestParameter:\n    \"A 'set' accessor cannot have rest parameter.\",\n  SetAccesorCannotHaveReturnType:\n    \"A 'set' accessor cannot have a return type annotation.\",\n  SingleTypeParameterWithoutTrailingComma: ({\n    typeParameterName,\n  }: {\n    typeParameterName: string;\n  }) =>\n    `Single type parameter ${typeParameterName} should have a trailing comma. Example usage: <${typeParameterName},>.`,\n  StaticBlockCannotHaveModifier:\n    \"Static class blocks cannot have any modifier.\",\n  TupleOptionalAfterType:\n    \"A labeled tuple optional element must be declared using a question mark after the name and before the colon (`name?: type`), rather than after the type (`name: type?`).\",\n  TypeAnnotationAfterAssign:\n    \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.\",\n  TypeImportCannotSpecifyDefaultAndNamed:\n    \"A type-only import can specify a default import or named bindings, but not both.\",\n  TypeModifierIsUsedInTypeExports:\n    \"The 'type' modifier cannot be used on a named export when 'export type' is used on its export statement.\",\n  TypeModifierIsUsedInTypeImports:\n    \"The 'type' modifier cannot be used on a named import when 'import type' is used on its import statement.\",\n  UnexpectedParameterModifier:\n    \"A parameter property is only allowed in a constructor implementation.\",\n  UnexpectedReadonly:\n    \"'readonly' type modifier is only permitted on array and tuple literal types.\",\n  UnexpectedTypeAnnotation: \"Did not expect a type annotation here.\",\n  UnexpectedTypeCastInParameter: \"Unexpected type cast in parameter position.\",\n  UnsupportedImportTypeArgument:\n    \"Argument in a type import must be a string literal.\",\n  UnsupportedParameterPropertyKind:\n    \"A parameter property may not be declared using a binding pattern.\",\n  UnsupportedSignatureParameterKind: ({ type }: { type: string }) =>\n    `Name in a signature must be an Identifier, ObjectPattern or ArrayPattern, instead got ${type}.`,\n});\n\n/* eslint-disable sort-keys */\n\n// Doesn't handle \"void\" or \"null\" because those are keywords, not identifiers.\n// It also doesn't handle \"intrinsic\", since usually it's not a keyword.\nfunction keywordTypeFromName(value: string): N.TsKeywordTypeType | undefined {\n  switch (value) {\n    case \"any\":\n      return \"TSAnyKeyword\";\n    case \"boolean\":\n      return \"TSBooleanKeyword\";\n    case \"bigint\":\n      return \"TSBigIntKeyword\";\n    case \"never\":\n      return \"TSNeverKeyword\";\n    case \"number\":\n      return \"TSNumberKeyword\";\n    case \"object\":\n      return \"TSObjectKeyword\";\n    case \"string\":\n      return \"TSStringKeyword\";\n    case \"symbol\":\n      return \"TSSymbolKeyword\";\n    case \"undefined\":\n      return \"TSUndefinedKeyword\";\n    case \"unknown\":\n      return \"TSUnknownKeyword\";\n    default:\n      return undefined;\n  }\n}\n\nfunction tsIsAccessModifier(modifier: string): modifier is N.Accessibility {\n  return (\n    modifier === \"private\" || modifier === \"public\" || modifier === \"protected\"\n  );\n}\n\nfunction tsIsVarianceAnnotations(\n  modifier: string,\n): modifier is N.VarianceAnnotations {\n  return modifier === \"in\" || modifier === \"out\";\n}\n\ntype ClassWithMixin<\n  T extends new (...args: any) => any,\n  M extends object,\n> = T extends new (...args: infer P) => infer I\n  ? new (...args: P) => I & M\n  : never;\n\nexport default (superClass: ClassWithMixin<typeof Parser, IJSXParserMixin>) =>\n  class TypeScriptParserMixin extends superClass implements Parser {\n    getScopeHandler(): new (...args: any) => TypeScriptScopeHandler {\n      return TypeScriptScopeHandler;\n    }\n\n    tsIsIdentifier(): boolean {\n      // TODO: actually a bit more complex in TypeScript, but shouldn't matter.\n      // See https://github.com/Microsoft/TypeScript/issues/15008\n      return tokenIsIdentifier(this.state.type);\n    }\n\n    tsTokenCanFollowModifier() {\n      return (\n        (this.match(tt.bracketL) ||\n          this.match(tt.braceL) ||\n          this.match(tt.star) ||\n          this.match(tt.ellipsis) ||\n          this.match(tt.privateName) ||\n          this.isLiteralPropertyName()) &&\n        !this.hasPrecedingLineBreak()\n      );\n    }\n\n    tsNextTokenCanFollowModifier() {\n      // Note: TypeScript's implementation is much more complicated because\n      // more things are considered modifiers there.\n      // This implementation only handles modifiers not handled by @babel/parser itself. And \"static\".\n      // TODO: Would be nice to avoid lookahead. Want a hasLineBreakUpNext() method...\n      this.next();\n      return this.tsTokenCanFollowModifier();\n    }\n\n    /** Parses a modifier matching one the given modifier names. */\n    tsParseModifier<T extends TsModifier>(\n      allowedModifiers: T[],\n      stopOnStartOfClassStaticBlock?: boolean,\n    ): T | undefined | null {\n      if (\n        !tokenIsIdentifier(this.state.type) &&\n        this.state.type !== tt._in &&\n        this.state.type !== tt._const\n      ) {\n        return undefined;\n      }\n\n      const modifier = this.state.value;\n      if (allowedModifiers.includes(modifier)) {\n        if (stopOnStartOfClassStaticBlock && this.tsIsStartOfStaticBlocks()) {\n          return undefined;\n        }\n        if (this.tsTryParse(this.tsNextTokenCanFollowModifier.bind(this))) {\n          return modifier;\n        }\n      }\n      return undefined;\n    }\n\n    /** Parses a list of modifiers, in any order.\n     *  If you need a specific order, you must call this function multiple times:\n     *    this.tsParseModifiers({ modified: node, allowedModifiers: [\"public\"] });\n     *    this.tsParseModifiers({ modified: node, allowedModifiers: [\"abstract\", \"readonly\"] });\n     */\n    tsParseModifiers<N extends ModifierBase>(\n      {\n        allowedModifiers,\n        disallowedModifiers,\n        stopOnStartOfClassStaticBlock,\n        errorTemplate = TSErrors.InvalidModifierOnTypeMember,\n      }: {\n        allowedModifiers: readonly TsModifier[];\n        disallowedModifiers?: TsModifier[];\n        stopOnStartOfClassStaticBlock?: boolean;\n        errorTemplate?: typeof TSErrors.InvalidModifierOnTypeMember;\n      },\n      modified: N,\n    ): void {\n      const enforceOrder = (\n        loc: Position,\n        modifier: TsModifier,\n        before: TsModifier,\n        after: TsModifier,\n      ) => {\n        if (modifier === before && modified[after]) {\n          this.raise(TSErrors.InvalidModifiersOrder, loc, {\n            orderedModifiers: [before, after],\n          });\n        }\n      };\n      const incompatible = (\n        loc: Position,\n        modifier: TsModifier,\n        mod1: TsModifier,\n        mod2: TsModifier,\n      ) => {\n        if (\n          (modified[mod1] && modifier === mod2) ||\n          (modified[mod2] && modifier === mod1)\n        ) {\n          this.raise(TSErrors.IncompatibleModifiers, loc, {\n            modifiers: [mod1, mod2],\n          });\n        }\n      };\n\n      for (;;) {\n        const { startLoc } = this.state;\n        const modifier: TsModifier | undefined | null = this.tsParseModifier(\n          allowedModifiers.concat(disallowedModifiers ?? []),\n          stopOnStartOfClassStaticBlock,\n        );\n\n        if (!modifier) break;\n\n        if (tsIsAccessModifier(modifier)) {\n          if (modified.accessibility) {\n            this.raise(TSErrors.DuplicateAccessibilityModifier, startLoc, {\n              modifier,\n            });\n          } else {\n            enforceOrder(startLoc, modifier, modifier, \"override\");\n            enforceOrder(startLoc, modifier, modifier, \"static\");\n            enforceOrder(startLoc, modifier, modifier, \"readonly\");\n\n            modified.accessibility = modifier;\n          }\n        } else if (tsIsVarianceAnnotations(modifier)) {\n          if (modified[modifier]) {\n            this.raise(TSErrors.DuplicateModifier, startLoc, { modifier });\n          }\n          modified[modifier] = true;\n\n          enforceOrder(startLoc, modifier, \"in\", \"out\");\n        } else {\n          if (Object.hasOwn(modified, modifier)) {\n            this.raise(TSErrors.DuplicateModifier, startLoc, { modifier });\n          } else {\n            enforceOrder(startLoc, modifier, \"static\", \"readonly\");\n            enforceOrder(startLoc, modifier, \"static\", \"override\");\n            enforceOrder(startLoc, modifier, \"override\", \"readonly\");\n            enforceOrder(startLoc, modifier, \"abstract\", \"override\");\n\n            incompatible(startLoc, modifier, \"declare\", \"override\");\n            incompatible(startLoc, modifier, \"static\", \"abstract\");\n          }\n          modified[modifier] = true;\n        }\n\n        if (disallowedModifiers?.includes(modifier)) {\n          this.raise(errorTemplate, startLoc, {\n            modifier,\n          });\n        }\n      }\n    }\n\n    tsIsListTerminator(kind: ParsingContext): boolean {\n      switch (kind) {\n        case \"EnumMembers\":\n        case \"TypeMembers\":\n          return this.match(tt.braceR);\n        case \"HeritageClauseElement\":\n          return this.match(tt.braceL);\n        case \"TupleElementTypes\":\n          return this.match(tt.bracketR);\n        case \"TypeParametersOrArguments\":\n          return this.match(tt.gt);\n      }\n    }\n\n    tsParseList<T extends N.Node>(\n      kind: ParsingContext,\n      parseElement: () => T,\n    ): T[] {\n      const result: T[] = [];\n      while (!this.tsIsListTerminator(kind)) {\n        // Skipping \"parseListElement\" from the TS source since that's just for error handling.\n        result.push(parseElement());\n      }\n      return result;\n    }\n\n    tsParseDelimitedList<T extends N.Node>(\n      kind: ParsingContext,\n      parseElement: () => T,\n      refTrailingCommaPos?: {\n        value: number;\n      },\n    ): T[] {\n      return nonNull(\n        this.tsParseDelimitedListWorker(\n          kind,\n          parseElement,\n          /* expectSuccess */ true,\n          refTrailingCommaPos,\n        ),\n      );\n    }\n\n    /**\n     * If !expectSuccess, returns undefined instead of failing to parse.\n     * If expectSuccess, parseElement should always return a defined value.\n     */\n    tsParseDelimitedListWorker<T extends N.Node>(\n      kind: ParsingContext,\n      parseElement: () => T | undefined,\n      expectSuccess: boolean,\n      refTrailingCommaPos?: {\n        value: number;\n      },\n    ): T[] | undefined {\n      const result: T[] = [];\n      let trailingCommaPos = -1;\n\n      for (;;) {\n        if (this.tsIsListTerminator(kind)) {\n          break;\n        }\n        trailingCommaPos = -1;\n\n        const element = parseElement();\n        if (element == null) {\n          return undefined;\n        }\n        result.push(element);\n\n        if (this.eat(tt.comma)) {\n          trailingCommaPos = this.state.lastTokStartLoc.index;\n          continue;\n        }\n\n        if (this.tsIsListTerminator(kind)) {\n          break;\n        }\n\n        if (expectSuccess) {\n          // This will fail with an error about a missing comma\n          this.expect(tt.comma);\n        }\n        return undefined;\n      }\n\n      if (refTrailingCommaPos) {\n        refTrailingCommaPos.value = trailingCommaPos;\n      }\n\n      return result;\n    }\n\n    tsParseBracketedList<T extends N.Node>(\n      kind: ParsingContext,\n      parseElement: () => T,\n      bracket: boolean,\n      skipFirstToken: boolean,\n      refTrailingCommaPos?: {\n        value: number;\n      },\n    ): T[] {\n      if (!skipFirstToken) {\n        if (bracket) {\n          this.expect(tt.bracketL);\n        } else {\n          this.expect(tt.lt);\n        }\n      }\n\n      const result = this.tsParseDelimitedList(\n        kind,\n        parseElement,\n        refTrailingCommaPos,\n      );\n\n      if (bracket) {\n        this.expect(tt.bracketR);\n      } else {\n        this.expect(tt.gt);\n      }\n\n      return result;\n    }\n\n    tsParseImportType(): N.TsImportType {\n      const node = this.startNode<N.TsImportType>();\n      this.expect(tt._import);\n      this.expect(tt.parenL);\n      if (!this.match(tt.string)) {\n        this.raise(TSErrors.UnsupportedImportTypeArgument, this.state.startLoc);\n      }\n\n      // For compatibility to estree we cannot call parseLiteral directly here\n      node.argument = super.parseExprAtom() as N.StringLiteral;\n      if (\n        this.hasPlugin(\"importAttributes\") ||\n        this.hasPlugin(\"importAssertions\")\n      ) {\n        node.options = null;\n      }\n      if (this.eat(tt.comma)) {\n        this.expectImportAttributesPlugin();\n        if (!this.match(tt.parenR)) {\n          node.options = super.parseMaybeAssignAllowIn();\n          this.eat(tt.comma);\n        }\n      }\n      this.expect(tt.parenR);\n\n      if (this.eat(tt.dot)) {\n        // In this instance, the entity name will actually itself be a\n        // qualifier, so allow it to be a reserved word as well.\n        node.qualifier = this.tsParseEntityName();\n      }\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.tsParseTypeArguments();\n      }\n      return this.finishNode(node, \"TSImportType\");\n    }\n\n    tsParseEntityName(allowReservedWords: boolean = true): N.TsEntityName {\n      let entity: N.TsEntityName = this.parseIdentifier(allowReservedWords);\n      while (this.eat(tt.dot)) {\n        const node: Undone<N.TsQualifiedName> =\n          this.startNodeAtNode<N.TsQualifiedName>(entity);\n        node.left = entity;\n        node.right = this.parseIdentifier(allowReservedWords);\n        entity = this.finishNode(node, \"TSQualifiedName\");\n      }\n      return entity;\n    }\n\n    tsParseTypeReference(): N.TsTypeReference {\n      const node = this.startNode<N.TsTypeReference>();\n      node.typeName = this.tsParseEntityName();\n      if (!this.hasPrecedingLineBreak() && this.match(tt.lt)) {\n        node.typeParameters = this.tsParseTypeArguments();\n      }\n      return this.finishNode(node, \"TSTypeReference\");\n    }\n\n    tsParseThisTypePredicate(lhs: N.TsThisType): N.TsTypePredicate {\n      this.next();\n      const node = this.startNodeAtNode<N.TsTypePredicate>(lhs);\n      node.parameterName = lhs;\n      node.typeAnnotation = this.tsParseTypeAnnotation(/* eatColon */ false);\n      node.asserts = false;\n      return this.finishNode(node, \"TSTypePredicate\");\n    }\n\n    tsParseThisTypeNode(): N.TsThisType {\n      const node = this.startNode<N.TsThisType>();\n      this.next();\n      return this.finishNode(node, \"TSThisType\");\n    }\n\n    tsParseTypeQuery(): N.TsTypeQuery {\n      const node = this.startNode<N.TsTypeQuery>();\n      this.expect(tt._typeof);\n      if (this.match(tt._import)) {\n        node.exprName = this.tsParseImportType();\n      } else {\n        node.exprName = this.tsParseEntityName();\n      }\n      if (!this.hasPrecedingLineBreak() && this.match(tt.lt)) {\n        node.typeParameters = this.tsParseTypeArguments();\n      }\n      return this.finishNode(node, \"TSTypeQuery\");\n    }\n\n    tsParseInOutModifiers = this.tsParseModifiers.bind(this, {\n      allowedModifiers: [\"in\", \"out\"],\n      disallowedModifiers: [\n        \"const\",\n        \"public\",\n        \"private\",\n        \"protected\",\n        \"readonly\",\n        \"declare\",\n        \"abstract\",\n        \"override\",\n      ],\n      errorTemplate: TSErrors.InvalidModifierOnTypeParameter,\n    });\n\n    tsParseConstModifier = this.tsParseModifiers.bind(this, {\n      allowedModifiers: [\"const\"],\n      // for better error recovery\n      disallowedModifiers: [\"in\", \"out\"],\n      errorTemplate: TSErrors.InvalidModifierOnTypeParameterPositions,\n    });\n\n    tsParseInOutConstModifiers = this.tsParseModifiers.bind(this, {\n      allowedModifiers: [\"in\", \"out\", \"const\"],\n      disallowedModifiers: [\n        \"public\",\n        \"private\",\n        \"protected\",\n        \"readonly\",\n        \"declare\",\n        \"abstract\",\n        \"override\",\n      ],\n      errorTemplate: TSErrors.InvalidModifierOnTypeParameter,\n    });\n\n    tsParseTypeParameter(\n      parseModifiers: (node: Undone<N.TsTypeParameter>) => void,\n    ): N.TsTypeParameter {\n      const node = this.startNode<N.TsTypeParameter>();\n\n      parseModifiers(node);\n\n      node.name = this.tsParseTypeParameterName();\n      node.constraint = this.tsEatThenParseType(tt._extends);\n      node.default = this.tsEatThenParseType(tt.eq);\n      return this.finishNode(node, \"TSTypeParameter\");\n    }\n\n    tsTryParseTypeParameters(\n      parseModifiers: (node: N.TsTypeParameter) => void,\n    ): N.TsTypeParameterDeclaration | undefined | null {\n      if (this.match(tt.lt)) {\n        return this.tsParseTypeParameters(parseModifiers);\n      }\n    }\n\n    tsParseTypeParameters(parseModifiers: (node: N.TsTypeParameter) => void) {\n      const node = this.startNode<N.TsTypeParameterDeclaration>();\n\n      if (this.match(tt.lt) || this.match(tt.jsxTagStart)) {\n        this.next();\n      } else {\n        this.unexpected();\n      }\n\n      const refTrailingCommaPos = { value: -1 };\n\n      node.params = this.tsParseBracketedList(\n        \"TypeParametersOrArguments\",\n        this.tsParseTypeParameter.bind(this, parseModifiers),\n        /* bracket */ false,\n        /* skipFirstToken */ true,\n        refTrailingCommaPos,\n      );\n      if (node.params.length === 0) {\n        this.raise(TSErrors.EmptyTypeParameters, node);\n      }\n      if (refTrailingCommaPos.value !== -1) {\n        this.addExtra(node, \"trailingComma\", refTrailingCommaPos.value);\n      }\n      return this.finishNode(node, \"TSTypeParameterDeclaration\");\n    }\n\n    // Note: In TypeScript implementation we must provide `yieldContext` and `awaitContext`,\n    // but here it's always false, because this is only used for types.\n    tsFillSignature(\n      returnToken: TokenType,\n      signature: Undone<N.TsSignatureDeclaration>,\n    ): void {\n      // Arrow fns *must* have return token (`=>`). Normal functions can omit it.\n      const returnTokenRequired = returnToken === tt.arrow;\n\n      // https://github.com/babel/babel/issues/9231\n      const paramsKey = process.env.BABEL_8_BREAKING ? \"params\" : \"parameters\";\n      const returnTypeKey = process.env.BABEL_8_BREAKING\n        ? \"returnType\"\n        : \"typeAnnotation\";\n\n      signature.typeParameters = this.tsTryParseTypeParameters(\n        this.tsParseConstModifier,\n      );\n      this.expect(tt.parenL);\n      signature[paramsKey] = this.tsParseBindingListForSignature();\n      if (returnTokenRequired) {\n        signature[returnTypeKey] =\n          this.tsParseTypeOrTypePredicateAnnotation(returnToken);\n      } else if (this.match(returnToken)) {\n        signature[returnTypeKey] =\n          this.tsParseTypeOrTypePredicateAnnotation(returnToken);\n      }\n    }\n\n    tsParseBindingListForSignature(): Array<\n      N.Identifier | N.RestElement | N.ObjectPattern | N.ArrayPattern\n    > {\n      const list = super.parseBindingList(\n        tt.parenR,\n        charCodes.rightParenthesis,\n        ParseBindingListFlags.IS_FUNCTION_PARAMS,\n      );\n      for (const pattern of list) {\n        const { type } = pattern;\n        if (type === \"AssignmentPattern\" || type === \"TSParameterProperty\") {\n          this.raise(TSErrors.UnsupportedSignatureParameterKind, pattern, {\n            type,\n          });\n        }\n      }\n      return list as Exclude<\n        (typeof list)[0],\n        N.AssignmentPattern | N.TSParameterProperty\n      >[];\n    }\n\n    tsParseTypeMemberSemicolon(): void {\n      if (!this.eat(tt.comma) && !this.isLineTerminator()) {\n        this.expect(tt.semi);\n      }\n    }\n\n    tsParseSignatureMember(\n      kind: \"TSCallSignatureDeclaration\" | \"TSConstructSignatureDeclaration\",\n      node: Undone<\n        N.TsCallSignatureDeclaration | N.TsConstructSignatureDeclaration\n      >,\n    ): N.TsCallSignatureDeclaration | N.TsConstructSignatureDeclaration {\n      this.tsFillSignature(tt.colon, node);\n      this.tsParseTypeMemberSemicolon();\n      return this.finishNode(node, kind);\n    }\n\n    tsIsUnambiguouslyIndexSignature() {\n      this.next(); // Skip '{'\n      if (tokenIsIdentifier(this.state.type)) {\n        this.next();\n        return this.match(tt.colon);\n      }\n      return false;\n    }\n\n    tsTryParseIndexSignature(\n      node: Undone<N.TsIndexSignature>,\n    ): N.TsIndexSignature | undefined {\n      if (\n        !(\n          this.match(tt.bracketL) &&\n          this.tsLookAhead(this.tsIsUnambiguouslyIndexSignature.bind(this))\n        )\n      ) {\n        return;\n      }\n\n      this.expect(tt.bracketL);\n      const id = this.parseIdentifier();\n      id.typeAnnotation = this.tsParseTypeAnnotation();\n      this.resetEndLocation(id); // set end position to end of type\n\n      this.expect(tt.bracketR);\n      node.parameters = [id];\n\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) node.typeAnnotation = type;\n      this.tsParseTypeMemberSemicolon();\n      return this.finishNode(node, \"TSIndexSignature\");\n    }\n\n    tsParsePropertyOrMethodSignature(\n      node: N.TsPropertySignature | N.TsMethodSignature,\n      readonly: boolean,\n    ): N.TsPropertySignature | N.TsMethodSignature {\n      if (this.eat(tt.question)) node.optional = true;\n      const nodeAny: any = node;\n\n      if (this.match(tt.parenL) || this.match(tt.lt)) {\n        if (readonly) {\n          this.raise(TSErrors.ReadonlyForMethodSignature, node);\n        }\n        const method: N.TsMethodSignature = nodeAny;\n        if (method.kind && this.match(tt.lt)) {\n          this.raise(\n            TSErrors.AccesorCannotHaveTypeParameters,\n            this.state.curPosition(),\n          );\n        }\n        this.tsFillSignature(tt.colon, method);\n        this.tsParseTypeMemberSemicolon();\n        const paramsKey = process.env.BABEL_8_BREAKING\n          ? \"params\"\n          : \"parameters\";\n        const returnTypeKey = process.env.BABEL_8_BREAKING\n          ? \"returnType\"\n          : \"typeAnnotation\";\n        if (method.kind === \"get\") {\n          if (method[paramsKey].length > 0) {\n            this.raise(Errors.BadGetterArity, this.state.curPosition());\n            if (this.isThisParam(method[paramsKey][0])) {\n              this.raise(\n                TSErrors.AccesorCannotDeclareThisParameter,\n                this.state.curPosition(),\n              );\n            }\n          }\n        } else if (method.kind === \"set\") {\n          if (method[paramsKey].length !== 1) {\n            this.raise(Errors.BadSetterArity, this.state.curPosition());\n          } else {\n            const firstParameter = method[paramsKey][0];\n            if (this.isThisParam(firstParameter)) {\n              this.raise(\n                TSErrors.AccesorCannotDeclareThisParameter,\n                this.state.curPosition(),\n              );\n            }\n            if (\n              firstParameter.type === \"Identifier\" &&\n              firstParameter.optional\n            ) {\n              this.raise(\n                TSErrors.SetAccesorCannotHaveOptionalParameter,\n                this.state.curPosition(),\n              );\n            }\n            if (firstParameter.type === \"RestElement\") {\n              this.raise(\n                TSErrors.SetAccesorCannotHaveRestParameter,\n                this.state.curPosition(),\n              );\n            }\n          }\n          if (method[returnTypeKey]) {\n            this.raise(\n              TSErrors.SetAccesorCannotHaveReturnType,\n              method[returnTypeKey],\n            );\n          }\n        } else {\n          method.kind = \"method\";\n        }\n        return this.finishNode(method, \"TSMethodSignature\");\n      } else {\n        const property: N.TsPropertySignature = nodeAny;\n        if (readonly) property.readonly = true;\n        const type = this.tsTryParseTypeAnnotation();\n        if (type) property.typeAnnotation = type;\n        this.tsParseTypeMemberSemicolon();\n        return this.finishNode(property, \"TSPropertySignature\");\n      }\n    }\n\n    tsParseTypeMember(): N.TsTypeElement {\n      const node: any = this.startNode();\n\n      if (this.match(tt.parenL) || this.match(tt.lt)) {\n        return this.tsParseSignatureMember(\"TSCallSignatureDeclaration\", node);\n      }\n\n      if (this.match(tt._new)) {\n        const id = this.startNode<N.Identifier>();\n        this.next();\n        if (this.match(tt.parenL) || this.match(tt.lt)) {\n          return this.tsParseSignatureMember(\n            \"TSConstructSignatureDeclaration\",\n            node,\n          );\n        } else {\n          node.key = this.createIdentifier(id, \"new\");\n          return this.tsParsePropertyOrMethodSignature(node, false);\n        }\n      }\n\n      this.tsParseModifiers(\n        {\n          allowedModifiers: [\"readonly\"],\n          disallowedModifiers: [\n            \"declare\",\n            \"abstract\",\n            \"private\",\n            \"protected\",\n            \"public\",\n            \"static\",\n            \"override\",\n          ],\n        },\n        node,\n      );\n\n      const idx = this.tsTryParseIndexSignature(node);\n      if (idx) {\n        return idx;\n      }\n\n      super.parsePropertyName(node);\n      if (\n        !node.computed &&\n        node.key.type === \"Identifier\" &&\n        (node.key.name === \"get\" || node.key.name === \"set\") &&\n        this.tsTokenCanFollowModifier()\n      ) {\n        node.kind = node.key.name;\n        super.parsePropertyName(node);\n      }\n      return this.tsParsePropertyOrMethodSignature(node, !!node.readonly);\n    }\n\n    tsParseTypeLiteral(): N.TsTypeLiteral {\n      const node = this.startNode<N.TsTypeLiteral>();\n      node.members = this.tsParseObjectTypeMembers();\n      return this.finishNode(node, \"TSTypeLiteral\");\n    }\n\n    tsParseObjectTypeMembers(): Array<N.TsTypeElement> {\n      this.expect(tt.braceL);\n      const members = this.tsParseList(\n        \"TypeMembers\",\n        this.tsParseTypeMember.bind(this),\n      );\n      this.expect(tt.braceR);\n      return members;\n    }\n\n    tsIsStartOfMappedType(): boolean {\n      this.next();\n      if (this.eat(tt.plusMin)) {\n        return this.isContextual(tt._readonly);\n      }\n      if (this.isContextual(tt._readonly)) {\n        this.next();\n      }\n      if (!this.match(tt.bracketL)) {\n        return false;\n      }\n      this.next();\n      if (!this.tsIsIdentifier()) {\n        return false;\n      }\n      this.next();\n      return this.match(tt._in);\n    }\n\n    tsParseMappedTypeParameter(): N.TsTypeParameter {\n      const node = this.startNode<N.TsTypeParameter>();\n      node.name = this.tsParseTypeParameterName();\n      node.constraint = this.tsExpectThenParseType(tt._in);\n      return this.finishNode(node, \"TSTypeParameter\");\n    }\n\n    tsParseMappedType(): N.TsMappedType {\n      const node = this.startNode<N.TsMappedType>();\n\n      this.expect(tt.braceL);\n\n      if (this.match(tt.plusMin)) {\n        node.readonly = this.state.value;\n        this.next();\n        this.expectContextual(tt._readonly);\n      } else if (this.eatContextual(tt._readonly)) {\n        node.readonly = true;\n      }\n\n      this.expect(tt.bracketL);\n      node.typeParameter = this.tsParseMappedTypeParameter();\n      node.nameType = this.eatContextual(tt._as) ? this.tsParseType() : null;\n\n      this.expect(tt.bracketR);\n\n      if (this.match(tt.plusMin)) {\n        node.optional = this.state.value;\n        this.next();\n        this.expect(tt.question);\n      } else if (this.eat(tt.question)) {\n        node.optional = true;\n      }\n\n      node.typeAnnotation = this.tsTryParseType();\n      this.semicolon();\n      this.expect(tt.braceR);\n\n      return this.finishNode(node, \"TSMappedType\");\n    }\n\n    tsParseTupleType(): N.TsTupleType {\n      const node = this.startNode<N.TsTupleType>();\n      node.elementTypes = this.tsParseBracketedList(\n        \"TupleElementTypes\",\n        this.tsParseTupleElementType.bind(this),\n        /* bracket */ true,\n        /* skipFirstToken */ false,\n      );\n\n      // Validate the elementTypes to ensure that no mandatory elements\n      // follow optional elements\n      let seenOptionalElement = false;\n      node.elementTypes.forEach(elementNode => {\n        const { type } = elementNode;\n\n        if (\n          seenOptionalElement &&\n          type !== \"TSRestType\" &&\n          type !== \"TSOptionalType\" &&\n          !(type === \"TSNamedTupleMember\" && elementNode.optional)\n        ) {\n          this.raise(TSErrors.OptionalTypeBeforeRequired, elementNode);\n        }\n\n        seenOptionalElement ||=\n          (type === \"TSNamedTupleMember\" && elementNode.optional) ||\n          type === \"TSOptionalType\";\n      });\n\n      return this.finishNode(node, \"TSTupleType\");\n    }\n\n    tsParseTupleElementType(): N.TsNamedTupleMember | N.TsType {\n      // parses `...TsType[]`\n\n      const { startLoc } = this.state;\n\n      const rest = this.eat(tt.ellipsis);\n\n      let labeled: boolean;\n      let label: N.Identifier;\n      let optional: boolean;\n      let type: N.TsNamedTupleMember | N.TsType;\n\n      const isWord = tokenIsKeywordOrIdentifier(this.state.type);\n      const chAfterWord = isWord ? this.lookaheadCharCode() : null;\n      if (chAfterWord === charCodes.colon) {\n        labeled = true;\n        optional = false;\n        label = this.parseIdentifier(true);\n        this.expect(tt.colon);\n        type = this.tsParseType();\n      } else if (chAfterWord === charCodes.questionMark) {\n        optional = true;\n        const startLoc = this.state.startLoc;\n        const wordName = this.state.value;\n        const typeOrLabel = this.tsParseNonArrayType();\n\n        if (this.lookaheadCharCode() === charCodes.colon) {\n          labeled = true;\n          label = this.createIdentifier(\n            this.startNodeAt<N.Identifier>(startLoc),\n            wordName,\n          );\n          this.expect(tt.question);\n          this.expect(tt.colon);\n          type = this.tsParseType();\n        } else {\n          labeled = false;\n          type = typeOrLabel;\n          this.expect(tt.question);\n        }\n      } else {\n        type = this.tsParseType();\n        optional = this.eat(tt.question);\n        // In this case (labeled === true) could be only in invalid label.\n        // E.g. [x.y:type]\n        // An error is raised while processing node.\n        labeled = this.eat(tt.colon);\n      }\n\n      if (labeled) {\n        let labeledNode: Undone<N.TsNamedTupleMember>;\n        if (label) {\n          labeledNode = this.startNodeAtNode<N.TsNamedTupleMember>(label);\n          labeledNode.optional = optional;\n          labeledNode.label = label;\n          labeledNode.elementType = type;\n\n          if (this.eat(tt.question)) {\n            labeledNode.optional = true;\n            this.raise(\n              TSErrors.TupleOptionalAfterType,\n              this.state.lastTokStartLoc,\n            );\n          }\n        } else {\n          labeledNode = this.startNodeAtNode<N.TsNamedTupleMember>(type);\n          labeledNode.optional = optional;\n          this.raise(TSErrors.InvalidTupleMemberLabel, type);\n          // @ts-expect-error This produces an invalid AST, but at least we don't drop\n          // nodes representing the invalid source.\n          labeledNode.label = type;\n          labeledNode.elementType = this.tsParseType();\n        }\n        type = this.finishNode(labeledNode, \"TSNamedTupleMember\");\n      } else if (optional) {\n        const optionalTypeNode = this.startNodeAtNode<N.TsOptionalType>(type);\n        optionalTypeNode.typeAnnotation = type;\n        type = this.finishNode(optionalTypeNode, \"TSOptionalType\");\n      }\n\n      if (rest) {\n        const restNode = this.startNodeAt<N.TsRestType>(startLoc);\n        restNode.typeAnnotation = type;\n        type = this.finishNode(restNode, \"TSRestType\");\n      }\n\n      return type;\n    }\n\n    tsParseParenthesizedType(): N.TsParenthesizedType {\n      const node = this.startNode<N.TsParenthesizedType>();\n      this.expect(tt.parenL);\n      node.typeAnnotation = this.tsParseType();\n      this.expect(tt.parenR);\n      return this.finishNode(node, \"TSParenthesizedType\");\n    }\n\n    tsParseFunctionOrConstructorType(\n      type: \"TSFunctionType\" | \"TSConstructorType\",\n      abstract?: boolean,\n    ): N.TsFunctionOrConstructorType {\n      const node = this.startNode<\n        N.TsFunctionOrConstructorType | N.TsConstructorType\n      >();\n      if (type === \"TSConstructorType\") {\n        (node as Undone<N.TsConstructorType>).abstract = !!abstract;\n        if (abstract) this.next();\n        this.next(); // eat `new`\n      }\n      this.tsInAllowConditionalTypesContext(() =>\n        this.tsFillSignature(tt.arrow, node),\n      );\n      return this.finishNode(node, type);\n    }\n\n    tsParseLiteralTypeNode(): N.TsLiteralType {\n      const node = this.startNode<N.TsLiteralType>();\n      switch (this.state.type) {\n        case tt.num:\n        case tt.bigint:\n        case tt.string:\n        case tt._true:\n        case tt._false:\n          // For compatibility to estree we cannot call parseLiteral directly here\n          // @ts-expect-error refine typings\n          node.literal = super.parseExprAtom();\n          break;\n        default:\n          this.unexpected();\n      }\n      return this.finishNode(node, \"TSLiteralType\");\n    }\n\n    tsParseTemplateLiteralType(): N.TsType {\n      const node = this.startNode<N.TsLiteralType>();\n      node.literal = super.parseTemplate(false);\n      return this.finishNode(node, \"TSLiteralType\");\n    }\n\n    parseTemplateSubstitution(): N.TsType | N.Expression {\n      if (this.state.inType) return this.tsParseType();\n      return super.parseTemplateSubstitution();\n    }\n\n    tsParseThisTypeOrThisTypePredicate(): N.TsThisType | N.TsTypePredicate {\n      const thisKeyword = this.tsParseThisTypeNode();\n      if (this.isContextual(tt._is) && !this.hasPrecedingLineBreak()) {\n        return this.tsParseThisTypePredicate(thisKeyword);\n      } else {\n        return thisKeyword;\n      }\n    }\n\n    tsParseNonArrayType(): N.TsType {\n      switch (this.state.type) {\n        case tt.string:\n        case tt.num:\n        case tt.bigint:\n        case tt._true:\n        case tt._false:\n          return this.tsParseLiteralTypeNode();\n        case tt.plusMin:\n          if (this.state.value === \"-\") {\n            const node = this.startNode<N.TsLiteralType>();\n            const nextToken = this.lookahead();\n            if (nextToken.type !== tt.num && nextToken.type !== tt.bigint) {\n              this.unexpected();\n            }\n            // @ts-expect-error: parseMaybeUnary must returns unary expression\n            node.literal = this.parseMaybeUnary();\n            return this.finishNode(node, \"TSLiteralType\");\n          }\n          break;\n        case tt._this:\n          return this.tsParseThisTypeOrThisTypePredicate();\n        case tt._typeof:\n          return this.tsParseTypeQuery();\n        case tt._import:\n          return this.tsParseImportType();\n        case tt.braceL:\n          return this.tsLookAhead(this.tsIsStartOfMappedType.bind(this))\n            ? this.tsParseMappedType()\n            : this.tsParseTypeLiteral();\n        case tt.bracketL:\n          return this.tsParseTupleType();\n        case tt.parenL:\n          if (process.env.BABEL_8_BREAKING) {\n            if (!this.options.createParenthesizedExpressions) {\n              const startLoc = this.state.startLoc;\n              this.next();\n              const type = this.tsParseType();\n              this.expect(tt.parenR);\n              this.addExtra(type, \"parenthesized\", true);\n              this.addExtra(type, \"parenStart\", startLoc.index);\n              return type;\n            }\n          }\n\n          return this.tsParseParenthesizedType();\n        case tt.templateNonTail:\n        case tt.templateTail:\n          return this.tsParseTemplateLiteralType();\n        default: {\n          const { type } = this.state;\n          if (\n            tokenIsIdentifier(type) ||\n            type === tt._void ||\n            type === tt._null\n          ) {\n            const nodeType =\n              type === tt._void\n                ? \"TSVoidKeyword\"\n                : type === tt._null\n                  ? \"TSNullKeyword\"\n                  : keywordTypeFromName(this.state.value);\n            if (\n              nodeType !== undefined &&\n              this.lookaheadCharCode() !== charCodes.dot\n            ) {\n              const node = this.startNode<N.TsKeywordType>();\n              this.next();\n              return this.finishNode(node, nodeType);\n            }\n            return this.tsParseTypeReference();\n          }\n        }\n      }\n\n      this.unexpected();\n    }\n\n    tsParseArrayTypeOrHigher(): N.TsType {\n      let type = this.tsParseNonArrayType();\n      while (!this.hasPrecedingLineBreak() && this.eat(tt.bracketL)) {\n        if (this.match(tt.bracketR)) {\n          const node = this.startNodeAtNode<N.TsArrayType>(type);\n          node.elementType = type;\n          this.expect(tt.bracketR);\n          type = this.finishNode(node, \"TSArrayType\");\n        } else {\n          const node = this.startNodeAtNode<N.TsIndexedAccessType>(type);\n          node.objectType = type;\n          node.indexType = this.tsParseType();\n          this.expect(tt.bracketR);\n          type = this.finishNode(node, \"TSIndexedAccessType\");\n        }\n      }\n      return type;\n    }\n\n    tsParseTypeOperator(): N.TsTypeOperator {\n      const node = this.startNode<N.TsTypeOperator>();\n      const operator = this.state.value;\n      this.next(); // eat operator\n      node.operator = operator;\n      node.typeAnnotation = this.tsParseTypeOperatorOrHigher();\n\n      if (operator === \"readonly\") {\n        this.tsCheckTypeAnnotationForReadOnly(node);\n      }\n\n      return this.finishNode(node, \"TSTypeOperator\");\n    }\n\n    tsCheckTypeAnnotationForReadOnly(node: Undone<N.TsTypeOperator>) {\n      switch (node.typeAnnotation.type) {\n        case \"TSTupleType\":\n        case \"TSArrayType\":\n          return;\n        default:\n          this.raise(TSErrors.UnexpectedReadonly, node);\n      }\n    }\n\n    tsParseInferType(): N.TsInferType {\n      const node = this.startNode<N.TsInferType>();\n      this.expectContextual(tt._infer);\n      const typeParameter = this.startNode<N.TsTypeParameter>();\n      typeParameter.name = this.tsParseTypeParameterName();\n      typeParameter.constraint = this.tsTryParse(() =>\n        this.tsParseConstraintForInferType(),\n      );\n      node.typeParameter = this.finishNode(typeParameter, \"TSTypeParameter\");\n      return this.finishNode(node, \"TSInferType\");\n    }\n\n    tsParseConstraintForInferType() {\n      if (this.eat(tt._extends)) {\n        const constraint = this.tsInDisallowConditionalTypesContext(() =>\n          this.tsParseType(),\n        );\n        if (\n          this.state.inDisallowConditionalTypesContext ||\n          !this.match(tt.question)\n        ) {\n          return constraint;\n        }\n      }\n    }\n\n    tsParseTypeOperatorOrHigher(): N.TsType {\n      const isTypeOperator =\n        tokenIsTSTypeOperator(this.state.type) && !this.state.containsEsc;\n      return isTypeOperator\n        ? this.tsParseTypeOperator()\n        : this.isContextual(tt._infer)\n          ? this.tsParseInferType()\n          : this.tsInAllowConditionalTypesContext(() =>\n              this.tsParseArrayTypeOrHigher(),\n            );\n    }\n\n    tsParseUnionOrIntersectionType(\n      kind: \"TSUnionType\" | \"TSIntersectionType\",\n      parseConstituentType: () => N.TsType,\n      operator: TokenType,\n    ): N.TsType {\n      const node = this.startNode<N.TsUnionType | N.TsIntersectionType>();\n      const hasLeadingOperator = this.eat(operator);\n      const types = [];\n      do {\n        types.push(parseConstituentType());\n      } while (this.eat(operator));\n      if (types.length === 1 && !hasLeadingOperator) {\n        return types[0];\n      }\n      node.types = types;\n      return this.finishNode(node, kind);\n    }\n\n    tsParseIntersectionTypeOrHigher(): N.TsType {\n      return this.tsParseUnionOrIntersectionType(\n        \"TSIntersectionType\",\n        this.tsParseTypeOperatorOrHigher.bind(this),\n        tt.bitwiseAND,\n      );\n    }\n\n    tsParseUnionTypeOrHigher() {\n      return this.tsParseUnionOrIntersectionType(\n        \"TSUnionType\",\n        this.tsParseIntersectionTypeOrHigher.bind(this),\n        tt.bitwiseOR,\n      );\n    }\n\n    tsIsStartOfFunctionType() {\n      if (this.match(tt.lt)) {\n        return true;\n      }\n      return (\n        this.match(tt.parenL) &&\n        this.tsLookAhead(this.tsIsUnambiguouslyStartOfFunctionType.bind(this))\n      );\n    }\n\n    tsSkipParameterStart(): boolean {\n      if (tokenIsIdentifier(this.state.type) || this.match(tt._this)) {\n        this.next();\n        return true;\n      }\n\n      if (this.match(tt.braceL)) {\n        // Return true if we can parse an object pattern without errors\n        const { errors } = this.state;\n        const previousErrorCount = errors.length;\n        try {\n          this.parseObjectLike(tt.braceR, true);\n          return errors.length === previousErrorCount;\n        } catch {\n          return false;\n        }\n      }\n\n      if (this.match(tt.bracketL)) {\n        this.next();\n        // Return true if we can parse an array pattern without errors\n        const { errors } = this.state;\n        const previousErrorCount = errors.length;\n        try {\n          super.parseBindingList(\n            tt.bracketR,\n            charCodes.rightSquareBracket,\n            ParseBindingListFlags.ALLOW_EMPTY,\n          );\n          return errors.length === previousErrorCount;\n        } catch {\n          return false;\n        }\n      }\n\n      return false;\n    }\n\n    tsIsUnambiguouslyStartOfFunctionType(): boolean {\n      this.next();\n      if (this.match(tt.parenR) || this.match(tt.ellipsis)) {\n        // ( )\n        // ( ...\n        return true;\n      }\n      if (this.tsSkipParameterStart()) {\n        if (\n          this.match(tt.colon) ||\n          this.match(tt.comma) ||\n          this.match(tt.question) ||\n          this.match(tt.eq)\n        ) {\n          // ( xxx :\n          // ( xxx ,\n          // ( xxx ?\n          // ( xxx =\n          return true;\n        }\n        if (this.match(tt.parenR)) {\n          this.next();\n          if (this.match(tt.arrow)) {\n            // ( xxx ) =>\n            return true;\n          }\n        }\n      }\n      return false;\n    }\n\n    tsParseTypeOrTypePredicateAnnotation(\n      returnToken: TokenType,\n    ): N.TsTypeAnnotation {\n      return this.tsInType(() => {\n        const t = this.startNode<N.TsTypeAnnotation>();\n        this.expect(returnToken);\n\n        const node = this.startNode<N.TsTypePredicate>();\n\n        const asserts = !!this.tsTryParse(\n          this.tsParseTypePredicateAsserts.bind(this),\n        );\n\n        if (asserts && this.match(tt._this)) {\n          // When asserts is false, thisKeyword is handled by tsParseNonArrayType\n          // : asserts this is type\n          let thisTypePredicate = this.tsParseThisTypeOrThisTypePredicate();\n          // if it turns out to be a `TSThisType`, wrap it with `TSTypePredicate`\n          // : asserts this\n          if (thisTypePredicate.type === \"TSThisType\") {\n            node.parameterName = thisTypePredicate;\n            node.asserts = true;\n            (node as N.TsTypePredicate).typeAnnotation = null;\n            thisTypePredicate = this.finishNode(node, \"TSTypePredicate\");\n          } else {\n            this.resetStartLocationFromNode(thisTypePredicate, node);\n            thisTypePredicate.asserts = true;\n          }\n          t.typeAnnotation = thisTypePredicate;\n          return this.finishNode(t, \"TSTypeAnnotation\");\n        }\n\n        const typePredicateVariable =\n          this.tsIsIdentifier() &&\n          this.tsTryParse(this.tsParseTypePredicatePrefix.bind(this));\n\n        if (!typePredicateVariable) {\n          if (!asserts) {\n            // : type\n            return this.tsParseTypeAnnotation(/* eatColon */ false, t);\n          }\n\n          // : asserts foo\n          node.parameterName = this.parseIdentifier();\n          node.asserts = asserts;\n          (node as N.TsTypePredicate).typeAnnotation = null;\n          t.typeAnnotation = this.finishNode(node, \"TSTypePredicate\");\n          return this.finishNode(t, \"TSTypeAnnotation\");\n        }\n\n        // : asserts foo is type\n        const type = this.tsParseTypeAnnotation(/* eatColon */ false);\n        node.parameterName = typePredicateVariable;\n        node.typeAnnotation = type;\n        node.asserts = asserts;\n        t.typeAnnotation = this.finishNode(node, \"TSTypePredicate\");\n        return this.finishNode(t, \"TSTypeAnnotation\");\n      });\n    }\n\n    tsTryParseTypeOrTypePredicateAnnotation(): N.TsTypeAnnotation | undefined {\n      if (this.match(tt.colon)) {\n        return this.tsParseTypeOrTypePredicateAnnotation(tt.colon);\n      }\n    }\n\n    tsTryParseTypeAnnotation(): N.TsTypeAnnotation | undefined {\n      if (this.match(tt.colon)) {\n        return this.tsParseTypeAnnotation();\n      }\n    }\n\n    tsTryParseType(): N.TsType | undefined {\n      return this.tsEatThenParseType(tt.colon);\n    }\n\n    tsParseTypePredicatePrefix(): N.Identifier | undefined {\n      const id = this.parseIdentifier();\n      if (this.isContextual(tt._is) && !this.hasPrecedingLineBreak()) {\n        this.next();\n        return id;\n      }\n    }\n\n    tsParseTypePredicateAsserts(): boolean {\n      if (this.state.type !== tt._asserts) {\n        return false;\n      }\n      const containsEsc = this.state.containsEsc;\n      this.next();\n      if (!tokenIsIdentifier(this.state.type) && !this.match(tt._this)) {\n        return false;\n      }\n\n      if (containsEsc) {\n        this.raise(\n          Errors.InvalidEscapedReservedWord,\n          this.state.lastTokStartLoc,\n          {\n            reservedWord: \"asserts\",\n          },\n        );\n      }\n\n      return true;\n    }\n\n    tsParseTypeAnnotation(\n      eatColon = true,\n      t: Undone<N.TsTypeAnnotation> = this.startNode<N.TsTypeAnnotation>(),\n    ): N.TsTypeAnnotation {\n      this.tsInType(() => {\n        if (eatColon) this.expect(tt.colon);\n        t.typeAnnotation = this.tsParseType();\n      });\n      return this.finishNode(t, \"TSTypeAnnotation\");\n    }\n\n    /** Be sure to be in a type context before calling this, using `tsInType`. */\n    tsParseType(): N.TsType {\n      // Need to set `state.inType` so that we don't parse JSX in a type context.\n      assert(this.state.inType);\n      const type = this.tsParseNonConditionalType();\n\n      if (\n        this.state.inDisallowConditionalTypesContext ||\n        this.hasPrecedingLineBreak() ||\n        !this.eat(tt._extends)\n      ) {\n        return type;\n      }\n      const node = this.startNodeAtNode<N.TsConditionalType>(type);\n      node.checkType = type;\n\n      node.extendsType = this.tsInDisallowConditionalTypesContext(() =>\n        this.tsParseNonConditionalType(),\n      );\n\n      this.expect(tt.question);\n      node.trueType = this.tsInAllowConditionalTypesContext(() =>\n        this.tsParseType(),\n      );\n\n      this.expect(tt.colon);\n      node.falseType = this.tsInAllowConditionalTypesContext(() =>\n        this.tsParseType(),\n      );\n\n      return this.finishNode(node, \"TSConditionalType\");\n    }\n\n    isAbstractConstructorSignature(): boolean {\n      return (\n        this.isContextual(tt._abstract) && this.lookahead().type === tt._new\n      );\n    }\n\n    tsParseNonConditionalType(): N.TsType {\n      if (this.tsIsStartOfFunctionType()) {\n        return this.tsParseFunctionOrConstructorType(\"TSFunctionType\");\n      }\n      if (this.match(tt._new)) {\n        // As in `new () => Date`\n        return this.tsParseFunctionOrConstructorType(\"TSConstructorType\");\n      } else if (this.isAbstractConstructorSignature()) {\n        // As in `abstract new () => Date`\n        return this.tsParseFunctionOrConstructorType(\n          \"TSConstructorType\",\n          /* abstract */ true,\n        );\n      }\n      return this.tsParseUnionTypeOrHigher();\n    }\n\n    tsParseTypeAssertion(): N.TsTypeAssertion {\n      if (this.getPluginOption(\"typescript\", \"disallowAmbiguousJSXLike\")) {\n        this.raise(TSErrors.ReservedTypeAssertion, this.state.startLoc);\n      }\n\n      const node = this.startNode<N.TsTypeAssertion>();\n      node.typeAnnotation = this.tsInType(() => {\n        this.next(); // \"<\"\n        return this.match(tt._const)\n          ? this.tsParseTypeReference()\n          : this.tsParseType();\n      });\n      this.expect(tt.gt);\n      node.expression = this.parseMaybeUnary();\n      return this.finishNode(node, \"TSTypeAssertion\");\n    }\n\n    tsParseHeritageClause(\n      token: \"extends\" | \"implements\",\n    ): Array<N.TsExpressionWithTypeArguments> {\n      const originalStartLoc = this.state.startLoc;\n\n      const delimitedList = this.tsParseDelimitedList(\n        \"HeritageClauseElement\",\n        () => {\n          const node = this.startNode<N.TsExpressionWithTypeArguments>();\n          node.expression = this.tsParseEntityName();\n          if (this.match(tt.lt)) {\n            node.typeParameters = this.tsParseTypeArguments();\n          }\n\n          return this.finishNode(node, \"TSExpressionWithTypeArguments\");\n        },\n      );\n\n      if (!delimitedList.length) {\n        this.raise(TSErrors.EmptyHeritageClauseType, originalStartLoc, {\n          token,\n        });\n      }\n\n      return delimitedList;\n    }\n\n    tsParseInterfaceDeclaration(\n      node: Undone<N.TsInterfaceDeclaration>,\n      properties: {\n        declare?: true;\n      } = {},\n    ): N.TsInterfaceDeclaration | null {\n      if (this.hasFollowingLineBreak()) return null;\n      this.expectContextual(tt._interface);\n      if (properties.declare) node.declare = true;\n      if (tokenIsIdentifier(this.state.type)) {\n        node.id = this.parseIdentifier();\n        this.checkIdentifier(node.id, BindingFlag.TYPE_TS_INTERFACE);\n      } else {\n        node.id = null;\n        this.raise(TSErrors.MissingInterfaceName, this.state.startLoc);\n      }\n\n      node.typeParameters = this.tsTryParseTypeParameters(\n        this.tsParseInOutConstModifiers,\n      );\n      if (this.eat(tt._extends)) {\n        node.extends = this.tsParseHeritageClause(\"extends\");\n      }\n      const body = this.startNode<N.TSInterfaceBody>();\n      body.body = this.tsInType(this.tsParseObjectTypeMembers.bind(this));\n      node.body = this.finishNode(body, \"TSInterfaceBody\");\n      return this.finishNode(node, \"TSInterfaceDeclaration\");\n    }\n\n    tsParseTypeAliasDeclaration(\n      node: N.TsTypeAliasDeclaration,\n    ): N.TsTypeAliasDeclaration {\n      node.id = this.parseIdentifier();\n      this.checkIdentifier(node.id, BindingFlag.TYPE_TS_TYPE);\n\n      node.typeAnnotation = this.tsInType(() => {\n        node.typeParameters = this.tsTryParseTypeParameters(\n          this.tsParseInOutModifiers,\n        );\n\n        this.expect(tt.eq);\n\n        if (\n          this.isContextual(tt._intrinsic) &&\n          this.lookahead().type !== tt.dot\n        ) {\n          const node = this.startNode<N.TsKeywordType>();\n          this.next();\n          return this.finishNode(node, \"TSIntrinsicKeyword\");\n        }\n\n        return this.tsParseType();\n      });\n\n      this.semicolon();\n      return this.finishNode(node, \"TSTypeAliasDeclaration\");\n    }\n\n    tsInNoContext<T>(cb: () => T): T {\n      const oldContext = this.state.context;\n      this.state.context = [oldContext[0]];\n      try {\n        return cb();\n      } finally {\n        this.state.context = oldContext;\n      }\n    }\n\n    /**\n     * Runs `cb` in a type context.\n     * This should be called one token *before* the first type token,\n     * so that the call to `next()` is run in type context.\n     */\n    tsInType<T>(cb: () => T): T {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      try {\n        return cb();\n      } finally {\n        this.state.inType = oldInType;\n      }\n    }\n\n    tsInDisallowConditionalTypesContext<T>(cb: () => T): T {\n      const oldInDisallowConditionalTypesContext =\n        this.state.inDisallowConditionalTypesContext;\n      this.state.inDisallowConditionalTypesContext = true;\n      try {\n        return cb();\n      } finally {\n        this.state.inDisallowConditionalTypesContext =\n          oldInDisallowConditionalTypesContext;\n      }\n    }\n\n    tsInAllowConditionalTypesContext<T>(cb: () => T): T {\n      const oldInDisallowConditionalTypesContext =\n        this.state.inDisallowConditionalTypesContext;\n      this.state.inDisallowConditionalTypesContext = false;\n      try {\n        return cb();\n      } finally {\n        this.state.inDisallowConditionalTypesContext =\n          oldInDisallowConditionalTypesContext;\n      }\n    }\n\n    tsEatThenParseType(token: TokenType): N.TsType | undefined {\n      if (this.match(token)) {\n        return this.tsNextThenParseType();\n      }\n    }\n\n    tsExpectThenParseType(token: TokenType): N.TsType {\n      return this.tsInType(() => {\n        this.expect(token);\n        return this.tsParseType();\n      });\n    }\n\n    tsNextThenParseType(): N.TsType {\n      return this.tsInType(() => {\n        this.next();\n        return this.tsParseType();\n      });\n    }\n\n    tsParseEnumMember(): N.TsEnumMember {\n      const node = this.startNode<N.TsEnumMember>();\n      // Computed property names are grammar errors in an enum, so accept just string literal or identifier.\n      node.id = this.match(tt.string)\n        ? super.parseStringLiteral(this.state.value)\n        : this.parseIdentifier(/* liberal */ true);\n      if (this.eat(tt.eq)) {\n        node.initializer = super.parseMaybeAssignAllowIn();\n      }\n      return this.finishNode(node, \"TSEnumMember\");\n    }\n\n    tsParseEnumDeclaration(\n      node: Undone<N.TsEnumDeclaration>,\n      properties: {\n        const?: true;\n        declare?: true;\n      } = {},\n    ): N.TsEnumDeclaration {\n      if (properties.const) node.const = true;\n      if (properties.declare) node.declare = true;\n      this.expectContextual(tt._enum);\n      node.id = this.parseIdentifier();\n      this.checkIdentifier(\n        node.id,\n        node.const ? BindingFlag.TYPE_TS_CONST_ENUM : BindingFlag.TYPE_TS_ENUM,\n      );\n\n      this.expect(tt.braceL);\n      node.members = this.tsParseDelimitedList(\n        \"EnumMembers\",\n        this.tsParseEnumMember.bind(this),\n      );\n      this.expect(tt.braceR);\n      return this.finishNode(node, \"TSEnumDeclaration\");\n    }\n\n    tsParseModuleBlock(): N.TsModuleBlock {\n      const node = this.startNode<N.TsModuleBlock>();\n      this.scope.enter(ScopeFlag.OTHER);\n\n      this.expect(tt.braceL);\n      // Inside of a module block is considered \"top-level\", meaning it can have imports and exports.\n      super.parseBlockOrModuleBlockBody(\n        (node.body = []),\n        /* directives */ undefined,\n        /* topLevel */ true,\n        /* end */ tt.braceR,\n      );\n      this.scope.exit();\n      return this.finishNode(node, \"TSModuleBlock\");\n    }\n\n    tsParseModuleOrNamespaceDeclaration(\n      node: Undone<N.TsModuleDeclaration>,\n      nested: boolean = false,\n    ): N.TsModuleDeclaration {\n      node.id = this.parseIdentifier();\n\n      if (!nested) {\n        this.checkIdentifier(node.id, BindingFlag.TYPE_TS_NAMESPACE);\n      }\n\n      if (this.eat(tt.dot)) {\n        const inner = this.startNode<N.TsModuleDeclaration>();\n        this.tsParseModuleOrNamespaceDeclaration(inner, true);\n        // @ts-expect-error Fixme: refine typings\n        node.body = inner;\n      } else {\n        this.scope.enter(ScopeFlag.TS_MODULE);\n        this.prodParam.enter(ParamKind.PARAM);\n        node.body = this.tsParseModuleBlock();\n        this.prodParam.exit();\n        this.scope.exit();\n      }\n      return this.finishNode(node, \"TSModuleDeclaration\");\n    }\n\n    tsParseAmbientExternalModuleDeclaration(\n      node: N.TsModuleDeclaration,\n    ): N.TsModuleDeclaration {\n      if (this.isContextual(tt._global)) {\n        node.global = true;\n        node.id = this.parseIdentifier();\n      } else if (this.match(tt.string)) {\n        node.id = super.parseStringLiteral(this.state.value);\n      } else {\n        this.unexpected();\n      }\n      if (this.match(tt.braceL)) {\n        this.scope.enter(ScopeFlag.TS_MODULE);\n        this.prodParam.enter(ParamKind.PARAM);\n        node.body = this.tsParseModuleBlock();\n        this.prodParam.exit();\n        this.scope.exit();\n      } else {\n        this.semicolon();\n      }\n\n      return this.finishNode(node, \"TSModuleDeclaration\");\n    }\n\n    tsParseImportEqualsDeclaration(\n      node: Undone<N.TsImportEqualsDeclaration>,\n      maybeDefaultIdentifier?: N.Identifier | null,\n      isExport?: boolean,\n    ): N.TsImportEqualsDeclaration {\n      node.isExport = isExport || false;\n      node.id = maybeDefaultIdentifier || this.parseIdentifier();\n      this.checkIdentifier(node.id, BindingFlag.TYPE_TS_VALUE_IMPORT);\n      this.expect(tt.eq);\n      const moduleReference = this.tsParseModuleReference();\n      if (\n        node.importKind === \"type\" &&\n        moduleReference.type !== \"TSExternalModuleReference\"\n      ) {\n        this.raise(TSErrors.ImportAliasHasImportType, moduleReference);\n      }\n      node.moduleReference = moduleReference;\n      this.semicolon();\n      return this.finishNode(node, \"TSImportEqualsDeclaration\");\n    }\n\n    tsIsExternalModuleReference(): boolean {\n      return (\n        this.isContextual(tt._require) &&\n        this.lookaheadCharCode() === charCodes.leftParenthesis\n      );\n    }\n\n    tsParseModuleReference(): N.TsModuleReference {\n      return this.tsIsExternalModuleReference()\n        ? this.tsParseExternalModuleReference()\n        : this.tsParseEntityName(/* allowReservedWords */ false);\n    }\n\n    tsParseExternalModuleReference(): N.TsExternalModuleReference {\n      const node = this.startNode<N.TsExternalModuleReference>();\n      this.expectContextual(tt._require);\n      this.expect(tt.parenL);\n      if (!this.match(tt.string)) {\n        this.unexpected();\n      }\n      // For compatibility to estree we cannot call parseLiteral directly here\n      node.expression = super.parseExprAtom() as N.StringLiteral;\n      this.expect(tt.parenR);\n      this.sawUnambiguousESM = true;\n      return this.finishNode(node, \"TSExternalModuleReference\");\n    }\n\n    // Utilities\n\n    tsLookAhead<T>(f: () => T): T {\n      const state = this.state.clone();\n      const res = f();\n      this.state = state;\n      return res;\n    }\n\n    tsTryParseAndCatch<T extends N.NodeBase | undefined | null>(\n      f: () => T,\n    ): T | undefined | null {\n      const result = this.tryParse(\n        abort =>\n          // @ts-expect-error todo(flow->ts)\n          f() || abort(),\n      );\n\n      if (result.aborted || !result.node) return;\n      if (result.error) this.state = result.failState;\n      // @ts-expect-error refine typings\n      return result.node;\n    }\n\n    tsTryParse<T>(f: () => T | undefined | false): T | undefined {\n      const state = this.state.clone();\n      const result = f();\n      if (result !== undefined && result !== false) {\n        return result;\n      }\n      this.state = state;\n    }\n\n    tsTryParseDeclare(nany: any): N.Declaration | undefined {\n      if (this.isLineTerminator()) {\n        return;\n      }\n      let startType = this.state.type;\n      let kind: \"let\" | null;\n\n      if (this.isContextual(tt._let)) {\n        startType = tt._var;\n        kind = \"let\";\n      }\n\n      // @ts-expect-error refine typings\n      return this.tsInAmbientContext(() => {\n        switch (startType) {\n          case tt._function:\n            nany.declare = true;\n            return super.parseFunctionStatement(\n              nany,\n              /* async */ false,\n              /* isHangingDeclaration */ false,\n            );\n          case tt._class:\n            // While this is also set by tsParseExpressionStatement, we need to set it\n            // before parsing the class declaration to know how to register it in the scope.\n            nany.declare = true;\n            return this.parseClass(\n              nany,\n              /* isStatement */ true,\n              /* optionalId */ false,\n            );\n          case tt._enum:\n            return this.tsParseEnumDeclaration(nany, { declare: true });\n          case tt._global:\n            return this.tsParseAmbientExternalModuleDeclaration(nany);\n          case tt._const:\n          case tt._var:\n            if (!this.match(tt._const) || !this.isLookaheadContextual(\"enum\")) {\n              nany.declare = true;\n              return this.parseVarStatement(\n                nany,\n                kind || this.state.value,\n                true,\n              );\n            }\n\n            // `const enum = 0;` not allowed because \"enum\" is a strict mode reserved word.\n            this.expect(tt._const);\n            return this.tsParseEnumDeclaration(nany, {\n              const: true,\n              declare: true,\n            });\n          case tt._interface: {\n            const result = this.tsParseInterfaceDeclaration(nany, {\n              declare: true,\n            });\n            if (result) return result;\n          }\n          // fallthrough\n          default:\n            if (tokenIsIdentifier(startType)) {\n              return this.tsParseDeclaration(\n                nany,\n                this.state.value,\n                /* next */ true,\n                /* decorators */ null,\n              );\n            }\n        }\n      });\n    }\n\n    // Note: this won't be called unless the keyword is allowed in `shouldParseExportDeclaration`.\n    tsTryParseExportDeclaration(): N.Declaration | undefined {\n      return this.tsParseDeclaration(\n        this.startNode(),\n        this.state.value,\n        /* next */ true,\n        /* decorators */ null,\n      );\n    }\n\n    tsParseExpressionStatement(\n      node: Undone<N.TsModuleDeclaration>,\n      expr: N.Identifier,\n      decorators: N.Decorator[] | null,\n    ): N.Declaration | undefined {\n      switch (expr.name) {\n        case \"declare\": {\n          const declaration = this.tsTryParseDeclare(node);\n          if (declaration) {\n            declaration.declare = true;\n          }\n          return declaration;\n        }\n        case \"global\":\n          // `global { }` (with no `declare`) may appear inside an ambient module declaration.\n          // Would like to use tsParseAmbientExternalModuleDeclaration here, but already ran past \"global\".\n          if (this.match(tt.braceL)) {\n            this.scope.enter(ScopeFlag.TS_MODULE);\n            this.prodParam.enter(ParamKind.PARAM);\n            const mod = node;\n            mod.global = true;\n            mod.id = expr;\n            mod.body = this.tsParseModuleBlock();\n            this.scope.exit();\n            this.prodParam.exit();\n            return this.finishNode(mod, \"TSModuleDeclaration\");\n          }\n          break;\n\n        default:\n          return this.tsParseDeclaration(\n            node,\n            expr.name,\n            /* next */ false,\n            decorators,\n          );\n      }\n    }\n\n    // Common to tsTryParseDeclare, tsTryParseExportDeclaration, and tsParseExpressionStatement.\n    tsParseDeclaration(\n      node: any,\n      value: string,\n      next: boolean,\n      decorators: N.Decorator[] | null,\n    ): N.Declaration | undefined | null {\n      // no declaration apart from enum can be followed by a line break.\n      switch (value) {\n        case \"abstract\":\n          if (\n            this.tsCheckLineTerminator(next) &&\n            (this.match(tt._class) || tokenIsIdentifier(this.state.type))\n          ) {\n            return this.tsParseAbstractDeclaration(node, decorators);\n          }\n          break;\n\n        case \"module\":\n          if (this.tsCheckLineTerminator(next)) {\n            if (this.match(tt.string)) {\n              return this.tsParseAmbientExternalModuleDeclaration(node);\n            } else if (tokenIsIdentifier(this.state.type)) {\n              return this.tsParseModuleOrNamespaceDeclaration(node);\n            }\n          }\n          break;\n\n        case \"namespace\":\n          if (\n            this.tsCheckLineTerminator(next) &&\n            tokenIsIdentifier(this.state.type)\n          ) {\n            return this.tsParseModuleOrNamespaceDeclaration(node);\n          }\n          break;\n\n        case \"type\":\n          if (\n            this.tsCheckLineTerminator(next) &&\n            tokenIsIdentifier(this.state.type)\n          ) {\n            return this.tsParseTypeAliasDeclaration(node);\n          }\n          break;\n      }\n    }\n\n    tsCheckLineTerminator(next: boolean) {\n      if (next) {\n        if (this.hasFollowingLineBreak()) return false;\n        this.next();\n        return true;\n      }\n      return !this.isLineTerminator();\n    }\n\n    tsTryParseGenericAsyncArrowFunction(\n      startLoc: Position,\n    ): N.ArrowFunctionExpression | undefined {\n      if (!this.match(tt.lt)) return;\n\n      const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n      this.state.maybeInArrowParameters = true;\n\n      const res: Undone<N.ArrowFunctionExpression> | undefined =\n        this.tsTryParseAndCatch(() => {\n          const node = this.startNodeAt<N.ArrowFunctionExpression>(startLoc);\n          node.typeParameters = this.tsParseTypeParameters(\n            this.tsParseConstModifier,\n          );\n          // Don't use overloaded parseFunctionParams which would look for \"<\" again.\n          super.parseFunctionParams(node);\n          node.returnType = this.tsTryParseTypeOrTypePredicateAnnotation();\n          this.expect(tt.arrow);\n          return node;\n        });\n\n      this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n\n      if (!res) return;\n\n      return super.parseArrowExpression(\n        res,\n        /* params are already set */ null,\n        /* async */ true,\n      );\n    }\n\n    // Used when parsing type arguments from ES productions, where the first token\n    // has been created without state.inType. Thus we need to rescan the lt token.\n    tsParseTypeArgumentsInExpression():\n      | N.TsTypeParameterInstantiation\n      | undefined {\n      if (this.reScan_lt() !== tt.lt) return;\n      return this.tsParseTypeArguments();\n    }\n\n    tsParseTypeArguments(): N.TsTypeParameterInstantiation {\n      const node = this.startNode<N.TsTypeParameterInstantiation>();\n      node.params = this.tsInType(() =>\n        // Temporarily remove a JSX parsing context, which makes us scan different tokens.\n        this.tsInNoContext(() => {\n          this.expect(tt.lt);\n          return this.tsParseDelimitedList(\n            \"TypeParametersOrArguments\",\n            this.tsParseType.bind(this),\n          );\n        }),\n      );\n      if (node.params.length === 0) {\n        this.raise(TSErrors.EmptyTypeArguments, node);\n      } else if (!this.state.inType && this.curContext() === tc.brace) {\n        // rescan `>` when we are no longer in type context and JSX parsing context\n        // since it was tokenized when `inType` is `true`.\n        this.reScan_lt_gt();\n      }\n      this.expect(tt.gt);\n      return this.finishNode(node, \"TSTypeParameterInstantiation\");\n    }\n\n    tsIsDeclarationStart(): boolean {\n      return tokenIsTSDeclarationStart(this.state.type);\n    }\n\n    // ======================================================\n    // OVERRIDES\n    // ======================================================\n\n    isExportDefaultSpecifier(): boolean {\n      if (this.tsIsDeclarationStart()) return false;\n      return super.isExportDefaultSpecifier();\n    }\n\n    parseAssignableListItem(\n      flags: ParseBindingListFlags,\n      decorators: N.Decorator[],\n    ): N.Pattern | N.TSParameterProperty {\n      // Store original location to include modifiers in range\n      const startLoc = this.state.startLoc;\n\n      const modified: ModifierBase = {};\n      this.tsParseModifiers(\n        {\n          allowedModifiers: [\n            \"public\",\n            \"private\",\n            \"protected\",\n            \"override\",\n            \"readonly\",\n          ],\n        },\n        modified,\n      );\n      const accessibility = modified.accessibility;\n      const override = modified.override;\n      const readonly = modified.readonly;\n      if (\n        !(flags & ParseBindingListFlags.IS_CONSTRUCTOR_PARAMS) &&\n        (accessibility || readonly || override)\n      ) {\n        this.raise(TSErrors.UnexpectedParameterModifier, startLoc);\n      }\n\n      const left = this.parseMaybeDefault();\n      this.parseAssignableListItemTypes(left, flags);\n      const elt = this.parseMaybeDefault(left.loc.start, left);\n      if (accessibility || readonly || override) {\n        const pp = this.startNodeAt<N.TSParameterProperty>(startLoc);\n        if (decorators.length) {\n          pp.decorators = decorators;\n        }\n        if (accessibility) pp.accessibility = accessibility;\n        if (readonly) pp.readonly = readonly;\n        if (override) pp.override = override;\n        if (elt.type !== \"Identifier\" && elt.type !== \"AssignmentPattern\") {\n          this.raise(TSErrors.UnsupportedParameterPropertyKind, pp);\n        }\n        pp.parameter = elt as any as N.Identifier | N.AssignmentPattern;\n        return this.finishNode(pp, \"TSParameterProperty\");\n      }\n\n      if (decorators.length) {\n        left.decorators = decorators;\n      }\n\n      return elt;\n    }\n\n    isSimpleParameter(node: N.Pattern | N.TSParameterProperty): boolean {\n      return (\n        (node.type === \"TSParameterProperty\" &&\n          super.isSimpleParameter(node.parameter)) ||\n        super.isSimpleParameter(node)\n      );\n    }\n\n    tsDisallowOptionalPattern(node: Undone<N.Function>) {\n      for (const param of node.params) {\n        if (\n          param.type !== \"Identifier\" &&\n          (param as any).optional &&\n          !this.state.isAmbientContext\n        ) {\n          this.raise(TSErrors.PatternIsOptional, param);\n        }\n      }\n    }\n\n    setArrowFunctionParameters(\n      node: Undone<N.ArrowFunctionExpression>,\n      params: N.Expression[],\n      trailingCommaLoc?: Position | null,\n    ): void {\n      super.setArrowFunctionParameters(node, params, trailingCommaLoc);\n      this.tsDisallowOptionalPattern(node);\n    }\n\n    parseFunctionBodyAndFinish<\n      T extends\n        | N.Function\n        | N.TSDeclareMethod\n        | N.TSDeclareFunction\n        | N.ClassPrivateMethod,\n    >(node: Undone<T>, type: T[\"type\"], isMethod: boolean = false): T {\n      if (this.match(tt.colon)) {\n        node.returnType = this.tsParseTypeOrTypePredicateAnnotation(tt.colon);\n      }\n\n      const bodilessType =\n        type === \"FunctionDeclaration\"\n          ? \"TSDeclareFunction\"\n          : type === \"ClassMethod\" || type === \"ClassPrivateMethod\"\n            ? \"TSDeclareMethod\"\n            : undefined;\n      if (bodilessType && !this.match(tt.braceL) && this.isLineTerminator()) {\n        return this.finishNode(node, bodilessType);\n      }\n      if (bodilessType === \"TSDeclareFunction\" && this.state.isAmbientContext) {\n        this.raise(TSErrors.DeclareFunctionHasImplementation, node);\n        if ((node as Undone<N.FunctionDeclaration>).declare) {\n          return super.parseFunctionBodyAndFinish(node, bodilessType, isMethod);\n        }\n      }\n      this.tsDisallowOptionalPattern(node);\n\n      return super.parseFunctionBodyAndFinish(node, type, isMethod);\n    }\n\n    registerFunctionStatementId(node: N.Function): void {\n      if (!node.body && node.id) {\n        // Function ids are validated after parsing their body.\n        // For bodiless function, we need to do it here.\n        this.checkIdentifier(node.id, BindingFlag.TYPE_TS_AMBIENT);\n      } else {\n        super.registerFunctionStatementId(node);\n      }\n    }\n\n    tsCheckForInvalidTypeCasts(items: Array<N.Expression | N.SpreadElement>) {\n      items.forEach(node => {\n        if (node?.type === \"TSTypeCastExpression\") {\n          this.raise(TSErrors.UnexpectedTypeAnnotation, node.typeAnnotation);\n        }\n      });\n    }\n\n    toReferencedList(\n      exprList: Array<N.Expression | undefined | null>,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      isInParens?: boolean,\n    ): Array<N.Expression | undefined | null> {\n      // Handles invalid scenarios like: `f(a:b)`, `(a:b);`, and `(a:b,c:d)`.\n      //\n      // Note that `f<T>(a:b)` goes through a different path and is handled\n      // in `parseSubscript` directly.\n      this.tsCheckForInvalidTypeCasts(exprList);\n      return exprList;\n    }\n\n    parseArrayLike(\n      close: TokenType,\n      canBePattern: boolean,\n      isTuple: boolean,\n      refExpressionErrors?: ExpressionErrors | null,\n    ): N.ArrayExpression | N.TupleExpression {\n      const node = super.parseArrayLike(\n        close,\n        canBePattern,\n        isTuple,\n        refExpressionErrors,\n      );\n\n      if (node.type === \"ArrayExpression\") {\n        this.tsCheckForInvalidTypeCasts(node.elements);\n      }\n\n      return node;\n    }\n\n    parseSubscript(\n      base: N.Expression,\n\n      startLoc: Position,\n      noCalls: boolean | undefined | null,\n      state: N.ParseSubscriptState,\n    ): N.Expression {\n      if (!this.hasPrecedingLineBreak() && this.match(tt.bang)) {\n        // When ! is consumed as a postfix operator (non-null assertion),\n        // disallow JSX tag forming after. e.g. When parsing `p! < n.p!`\n        // `<n.p` can not be a start of JSX tag\n        this.state.canStartJSXElement = false;\n        this.next();\n\n        const nonNullExpression =\n          this.startNodeAt<N.TsNonNullExpression>(startLoc);\n        nonNullExpression.expression = base;\n        return this.finishNode(nonNullExpression, \"TSNonNullExpression\");\n      }\n\n      let isOptionalCall = false;\n      if (\n        this.match(tt.questionDot) &&\n        this.lookaheadCharCode() === charCodes.lessThan\n      ) {\n        if (noCalls) {\n          state.stop = true;\n          return base;\n        }\n        state.optionalChainMember = isOptionalCall = true;\n        this.next();\n      }\n\n      // handles 'f<<T>'\n      if (this.match(tt.lt) || this.match(tt.bitShiftL)) {\n        let missingParenErrorLoc;\n        // tsTryParseAndCatch is expensive, so avoid if not necessary.\n        // There are number of things we are going to \"maybe\" parse, like type arguments on\n        // tagged template expressions. If any of them fail, walk it back and continue.\n        const result = this.tsTryParseAndCatch(() => {\n          if (!noCalls && this.atPossibleAsyncArrow(base)) {\n            // Almost certainly this is a generic async function `async <T>() => ...\n            // But it might be a call with a type argument `async<T>();`\n            const asyncArrowFn =\n              this.tsTryParseGenericAsyncArrowFunction(startLoc);\n            if (asyncArrowFn) {\n              return asyncArrowFn;\n            }\n          }\n\n          const typeArguments = this.tsParseTypeArgumentsInExpression();\n          if (!typeArguments) return;\n\n          if (isOptionalCall && !this.match(tt.parenL)) {\n            missingParenErrorLoc = this.state.curPosition();\n            return;\n          }\n\n          if (tokenIsTemplate(this.state.type)) {\n            const result = super.parseTaggedTemplateExpression(\n              base,\n              startLoc,\n              state,\n            );\n            result.typeParameters = typeArguments;\n            return result;\n          }\n\n          if (!noCalls && this.eat(tt.parenL)) {\n            const node = this.startNodeAt<\n              N.CallExpression | N.OptionalCallExpression\n            >(startLoc);\n            node.callee = base;\n            // possibleAsync always false here, because we would have handled it above.\n            // @ts-expect-error (won't be any undefined arguments)\n            node.arguments = this.parseCallExpressionArguments(\n              tt.parenR,\n              /* possibleAsync */ false,\n            );\n\n            // Handles invalid case: `f<T>(a:b)`\n            this.tsCheckForInvalidTypeCasts(node.arguments);\n\n            node.typeParameters = typeArguments;\n            if (state.optionalChainMember) {\n              (node as Undone<N.OptionalCallExpression>).optional =\n                isOptionalCall;\n            }\n\n            return this.finishCallExpression(node, state.optionalChainMember);\n          }\n\n          const tokenType = this.state.type;\n          if (\n            // a<b>>c is not (a<b>)>c, but a<(b>>c)\n            tokenType === tt.gt ||\n            // a<b>>>c is not (a<b>)>>c, but a<(b>>>c)\n            tokenType === tt.bitShiftR ||\n            // a<b>c is (a<b)>c\n            (tokenType !== tt.parenL &&\n              tokenCanStartExpression(tokenType) &&\n              !this.hasPrecedingLineBreak())\n          ) {\n            // Bail out.\n            return;\n          }\n\n          const node = this.startNodeAt<N.TsInstantiationExpression>(startLoc);\n          node.expression = base;\n          node.typeParameters = typeArguments;\n          return this.finishNode(node, \"TSInstantiationExpression\");\n        });\n\n        if (missingParenErrorLoc) {\n          this.unexpected(missingParenErrorLoc, tt.parenL);\n        }\n\n        if (result) {\n          if (\n            result.type === \"TSInstantiationExpression\" &&\n            (this.match(tt.dot) ||\n              (this.match(tt.questionDot) &&\n                this.lookaheadCharCode() !== charCodes.leftParenthesis))\n          ) {\n            this.raise(\n              TSErrors.InvalidPropertyAccessAfterInstantiationExpression,\n              this.state.startLoc,\n            );\n          }\n          return result;\n        }\n      }\n\n      return super.parseSubscript(base, startLoc, noCalls, state);\n    }\n\n    parseNewCallee(node: N.NewExpression): void {\n      super.parseNewCallee(node);\n\n      const { callee } = node;\n      if (\n        callee.type === \"TSInstantiationExpression\" &&\n        !callee.extra?.parenthesized\n      ) {\n        node.typeParameters = callee.typeParameters;\n        node.callee = callee.expression;\n      }\n    }\n\n    parseExprOp(\n      left: N.Expression,\n      leftStartLoc: Position,\n      minPrec: number,\n    ): N.Expression {\n      let isSatisfies: boolean;\n      if (\n        tokenOperatorPrecedence(tt._in) > minPrec &&\n        !this.hasPrecedingLineBreak() &&\n        (this.isContextual(tt._as) ||\n          (isSatisfies = this.isContextual(tt._satisfies)))\n      ) {\n        const node = this.startNodeAt<\n          N.TsAsExpression | N.TsSatisfiesExpression\n        >(leftStartLoc);\n        node.expression = left;\n        node.typeAnnotation = this.tsInType(() => {\n          this.next(); // \"as\" or \"satisfies\"\n          if (this.match(tt._const)) {\n            if (isSatisfies) {\n              this.raise(Errors.UnexpectedKeyword, this.state.startLoc, {\n                keyword: \"const\",\n              });\n            }\n            return this.tsParseTypeReference();\n          }\n\n          return this.tsParseType();\n        });\n        this.finishNode(\n          node,\n          isSatisfies ? \"TSSatisfiesExpression\" : \"TSAsExpression\",\n        );\n        // rescan `<`, `>` because they were scanned when this.state.inType was true\n        this.reScan_lt_gt();\n        return this.parseExprOp(\n          // @ts-expect-error todo(flow->ts)\n          node,\n          leftStartLoc,\n          minPrec,\n        );\n      }\n\n      return super.parseExprOp(left, leftStartLoc, minPrec);\n    }\n\n    checkReservedWord(\n      word: string,\n      startLoc: Position,\n      checkKeywords: boolean,\n      isBinding: boolean,\n    ): void {\n      // Strict mode words may be allowed as in `declare namespace N { const static: number; }`.\n      // And we have a type checker anyway, so don't bother having the parser do it.\n      if (!this.state.isAmbientContext) {\n        super.checkReservedWord(word, startLoc, checkKeywords, isBinding);\n      }\n    }\n\n    checkImportReflection(node: Undone<N.ImportDeclaration>) {\n      super.checkImportReflection(node);\n      if (node.module && node.importKind !== \"value\") {\n        this.raise(\n          TSErrors.ImportReflectionHasImportType,\n          node.specifiers[0].loc.start,\n        );\n      }\n    }\n\n    /*\n    Don't bother doing this check in TypeScript code because:\n    1. We may have a nested export statement with the same name:\n      export const x = 0;\n      export namespace N {\n        export const x = 1;\n      }\n    2. We have a type checker to warn us about this sort of thing.\n    */\n    checkDuplicateExports() {}\n\n    isPotentialImportPhase(isExport: boolean): boolean {\n      if (super.isPotentialImportPhase(isExport)) return true;\n      if (this.isContextual(tt._type)) {\n        const ch = this.lookaheadCharCode();\n        return isExport\n          ? ch === charCodes.leftCurlyBrace || ch === charCodes.asterisk\n          : ch !== charCodes.equalsTo;\n      }\n      return !isExport && this.isContextual(tt._typeof);\n    }\n\n    applyImportPhase(\n      node: Undone<N.ImportDeclaration | N.ExportNamedDeclaration>,\n      isExport: boolean,\n      phase: string | null,\n      loc?: Position,\n    ): void {\n      super.applyImportPhase(node, isExport, phase, loc);\n      if (isExport) {\n        (node as N.ExportNamedDeclaration).exportKind =\n          phase === \"type\" ? \"type\" : \"value\";\n      } else {\n        (node as N.ImportDeclaration).importKind =\n          phase === \"type\" || phase === \"typeof\" ? phase : \"value\";\n      }\n    }\n\n    parseImport(\n      node: Undone<N.ImportDeclaration | N.TsImportEqualsDeclaration>,\n    ): N.AnyImport {\n      if (this.match(tt.string)) {\n        node.importKind = \"value\";\n        return super.parseImport(node as Undone<N.ImportDeclaration>);\n      }\n\n      let importNode;\n      if (\n        tokenIsIdentifier(this.state.type) &&\n        this.lookaheadCharCode() === charCodes.equalsTo\n      ) {\n        node.importKind = \"value\";\n        return this.tsParseImportEqualsDeclaration(\n          node as Undone<N.TsImportEqualsDeclaration>,\n        );\n      } else if (this.isContextual(tt._type)) {\n        const maybeDefaultIdentifier = this.parseMaybeImportPhase(\n          node as Undone<N.ImportDeclaration>,\n          /* isExport */ false,\n        );\n        if (this.lookaheadCharCode() === charCodes.equalsTo) {\n          return this.tsParseImportEqualsDeclaration(\n            node as Undone<N.TsImportEqualsDeclaration>,\n            maybeDefaultIdentifier,\n          );\n        } else {\n          importNode = super.parseImportSpecifiersAndAfter(\n            node as Undone<N.ImportDeclaration>,\n            maybeDefaultIdentifier,\n          );\n        }\n      } else {\n        importNode = super.parseImport(node as Undone<N.ImportDeclaration>);\n      }\n\n      // `import type` can only be used on imports with named imports or with a\n      // default import - but not both\n      if (\n        importNode.importKind === \"type\" &&\n        // @ts-expect-error refine typings\n        importNode.specifiers.length > 1 &&\n        // @ts-expect-error refine typings\n        importNode.specifiers[0].type === \"ImportDefaultSpecifier\"\n      ) {\n        this.raise(TSErrors.TypeImportCannotSpecifyDefaultAndNamed, importNode);\n      }\n\n      return importNode;\n    }\n\n    parseExport(\n      node: Undone<\n        | N.ExportDefaultDeclaration\n        | N.ExportAllDeclaration\n        | N.ExportNamedDeclaration\n      >,\n      decorators: N.Decorator[] | null,\n    ): N.AnyExport {\n      if (this.match(tt._import)) {\n        // `export import A = B;`\n        this.next(); // eat `tt._import`\n        const nodeImportEquals = node as Undone<N.TsImportEqualsDeclaration>;\n        let maybeDefaultIdentifier: N.Identifier | null = null;\n        if (\n          this.isContextual(tt._type) &&\n          // We pass false here, because we are parsing an `import ... =`\n          this.isPotentialImportPhase(/* isExport */ false)\n        ) {\n          maybeDefaultIdentifier = this.parseMaybeImportPhase(\n            nodeImportEquals,\n            /* isExport */ false,\n          );\n        } else {\n          nodeImportEquals.importKind = \"value\";\n        }\n        return this.tsParseImportEqualsDeclaration(\n          nodeImportEquals,\n          maybeDefaultIdentifier,\n          /* isExport */ true,\n        );\n      } else if (this.eat(tt.eq)) {\n        // `export = x;`\n        const assign = node as Undone<N.TsExportAssignment>;\n        assign.expression = super.parseExpression();\n        this.semicolon();\n        this.sawUnambiguousESM = true;\n        return this.finishNode(assign, \"TSExportAssignment\");\n      } else if (this.eatContextual(tt._as)) {\n        // `export as namespace A;`\n        const decl = node as Undone<N.TsNamespaceExportDeclaration>;\n        // See `parseNamespaceExportDeclaration` in TypeScript's own parser\n        this.expectContextual(tt._namespace);\n        decl.id = this.parseIdentifier();\n        this.semicolon();\n        return this.finishNode(decl, \"TSNamespaceExportDeclaration\");\n      } else {\n        return super.parseExport(\n          node as Undone<N.ExportAllDeclaration | N.ExportDefaultDeclaration>,\n          decorators,\n        );\n      }\n    }\n\n    isAbstractClass(): boolean {\n      return (\n        this.isContextual(tt._abstract) && this.lookahead().type === tt._class\n      );\n    }\n\n    parseExportDefaultExpression(): N.ExportDefaultDeclaration[\"declaration\"] {\n      if (this.isAbstractClass()) {\n        const cls = this.startNode<N.Class>();\n        this.next(); // Skip \"abstract\"\n        cls.abstract = true;\n        return this.parseClass(cls, true, true);\n      }\n\n      // export default interface allowed in:\n      // https://github.com/Microsoft/TypeScript/pull/16040\n      if (this.match(tt._interface)) {\n        const result = this.tsParseInterfaceDeclaration(\n          this.startNode<N.TsInterfaceDeclaration>(),\n        );\n        if (result) return result;\n      }\n\n      return super.parseExportDefaultExpression();\n    }\n\n    parseVarStatement(\n      node: N.VariableDeclaration,\n      kind: \"var\" | \"let\" | \"const\" | \"using\",\n      allowMissingInitializer: boolean = false,\n    ) {\n      const { isAmbientContext } = this.state;\n      const declaration = super.parseVarStatement(\n        node,\n        kind,\n        allowMissingInitializer || isAmbientContext,\n      );\n\n      if (!isAmbientContext) return declaration;\n\n      for (const { id, init } of declaration.declarations) {\n        // Empty initializer is the easy case that we want.\n        if (!init) continue;\n\n        // var and let aren't ever allowed initializers.\n        if (kind !== \"const\" || !!id.typeAnnotation) {\n          this.raise(TSErrors.InitializerNotAllowedInAmbientContext, init);\n        } else if (\n          !isValidAmbientConstInitializer(init, this.hasPlugin(\"estree\"))\n        ) {\n          this.raise(\n            TSErrors.ConstInitiailizerMustBeStringOrNumericLiteralOrLiteralEnumReference,\n            init,\n          );\n        }\n      }\n\n      return declaration;\n    }\n\n    parseStatementContent(\n      flags: ParseStatementFlag,\n      decorators?: N.Decorator[] | null,\n    ): N.Statement {\n      if (this.match(tt._const) && this.isLookaheadContextual(\"enum\")) {\n        const node = this.startNode<N.TsEnumDeclaration>();\n        this.expect(tt._const); // eat 'const'\n        return this.tsParseEnumDeclaration(node, { const: true });\n      }\n\n      if (this.isContextual(tt._enum)) {\n        return this.tsParseEnumDeclaration(\n          this.startNode<N.TsEnumDeclaration>(),\n        );\n      }\n\n      if (this.isContextual(tt._interface)) {\n        const result = this.tsParseInterfaceDeclaration(this.startNode());\n        if (result) return result;\n      }\n\n      return super.parseStatementContent(flags, decorators);\n    }\n\n    parseAccessModifier(): N.Accessibility | undefined | null {\n      return this.tsParseModifier([\"public\", \"protected\", \"private\"]);\n    }\n\n    tsHasSomeModifiers(member: any, modifiers: readonly TsModifier[]): boolean {\n      return modifiers.some(modifier => {\n        if (tsIsAccessModifier(modifier)) {\n          return member.accessibility === modifier;\n        }\n        return !!member[modifier];\n      });\n    }\n\n    tsIsStartOfStaticBlocks() {\n      return (\n        this.isContextual(tt._static) &&\n        this.lookaheadCharCode() === charCodes.leftCurlyBrace\n      );\n    }\n\n    parseClassMember(\n      classBody: N.ClassBody,\n      member: any,\n      state: N.ParseClassMemberState,\n    ): void {\n      const modifiers = [\n        \"declare\",\n        \"private\",\n        \"public\",\n        \"protected\",\n        \"override\",\n        \"abstract\",\n        \"readonly\",\n        \"static\",\n      ] as const;\n      this.tsParseModifiers(\n        {\n          allowedModifiers: modifiers,\n          disallowedModifiers: [\"in\", \"out\"],\n          stopOnStartOfClassStaticBlock: true,\n          errorTemplate: TSErrors.InvalidModifierOnTypeParameterPositions,\n        },\n        member,\n      );\n\n      const callParseClassMemberWithIsStatic = () => {\n        if (this.tsIsStartOfStaticBlocks()) {\n          this.next(); // eat \"static\"\n          this.next(); // eat \"{\"\n          if (this.tsHasSomeModifiers(member, modifiers)) {\n            this.raise(\n              TSErrors.StaticBlockCannotHaveModifier,\n              this.state.curPosition(),\n            );\n          }\n          super.parseClassStaticBlock(classBody, member as N.StaticBlock);\n        } else {\n          this.parseClassMemberWithIsStatic(\n            classBody,\n            member,\n            state,\n            !!member.static,\n          );\n        }\n      };\n      if (member.declare) {\n        this.tsInAmbientContext(callParseClassMemberWithIsStatic);\n      } else {\n        callParseClassMemberWithIsStatic();\n      }\n    }\n\n    parseClassMemberWithIsStatic(\n      classBody: N.ClassBody,\n      member: Undone<N.ClassMember | N.TsIndexSignature>,\n      state: N.ParseClassMemberState,\n      isStatic: boolean,\n    ): void {\n      const idx = this.tsTryParseIndexSignature(\n        member as Undone<N.TsIndexSignature>,\n      );\n      if (idx) {\n        classBody.body.push(idx);\n\n        if ((member as any).abstract) {\n          this.raise(TSErrors.IndexSignatureHasAbstract, member);\n        }\n        if ((member as any).accessibility) {\n          this.raise(TSErrors.IndexSignatureHasAccessibility, member, {\n            modifier: (member as any).accessibility,\n          });\n        }\n        if ((member as any).declare) {\n          this.raise(TSErrors.IndexSignatureHasDeclare, member);\n        }\n        if ((member as any).override) {\n          this.raise(TSErrors.IndexSignatureHasOverride, member);\n        }\n\n        return;\n      }\n\n      if (!this.state.inAbstractClass && (member as any).abstract) {\n        this.raise(TSErrors.NonAbstractClassHasAbstractMethod, member);\n      }\n\n      if ((member as any).override) {\n        if (!state.hadSuperClass) {\n          this.raise(TSErrors.OverrideNotInSubClass, member);\n        }\n      }\n\n      /*:: invariant(member.type !== \"TSIndexSignature\") */\n\n      super.parseClassMemberWithIsStatic(\n        classBody,\n        member as Undone<N.ClassMember>,\n        state,\n        isStatic,\n      );\n    }\n\n    parsePostMemberNameModifiers(\n      methodOrProp: N.ClassMethod | N.ClassProperty | N.ClassPrivateProperty,\n    ): void {\n      const optional = this.eat(tt.question);\n      if (optional) methodOrProp.optional = true;\n\n      if ((methodOrProp as any).readonly && this.match(tt.parenL)) {\n        this.raise(TSErrors.ClassMethodHasReadonly, methodOrProp);\n      }\n\n      if ((methodOrProp as any).declare && this.match(tt.parenL)) {\n        this.raise(TSErrors.ClassMethodHasDeclare, methodOrProp);\n      }\n    }\n\n    // Note: The reason we do this in `parseExpressionStatement` and not `parseStatement`\n    // is that e.g. `type()` is valid JS, so we must try parsing that first.\n    // If it's really a type, we will parse `type` as the statement, and can correct it here\n    // by parsing the rest.\n    // @ts-expect-error plugin overrides interfaces\n    parseExpressionStatement(\n      node: Undone<N.ExpressionStatement>,\n      expr: N.Expression,\n      decorators: N.Decorator[] | null,\n    ): N.Statement {\n      const decl =\n        expr.type === \"Identifier\"\n          ? // @ts-expect-error refine typings\n            this.tsParseExpressionStatement(node, expr, decorators)\n          : undefined;\n      return decl || super.parseExpressionStatement(node, expr, decorators);\n    }\n\n    // export type\n    // Should be true for anything parsed by `tsTryParseExportDeclaration`.\n    shouldParseExportDeclaration(): boolean {\n      if (this.tsIsDeclarationStart()) return true;\n      return super.shouldParseExportDeclaration();\n    }\n\n    // An apparent conditional expression could actually be an optional parameter in an arrow function.\n    parseConditional(\n      expr: N.Expression,\n\n      startLoc: Position,\n      refExpressionErrors?: ExpressionErrors | null,\n    ): N.Expression {\n      // only do the expensive clone if there is a question mark\n      // and if we come from inside parens\n      if (!this.state.maybeInArrowParameters || !this.match(tt.question)) {\n        return super.parseConditional(\n          expr,\n\n          startLoc,\n          refExpressionErrors,\n        );\n      }\n\n      const result = this.tryParse(() =>\n        super.parseConditional(expr, startLoc),\n      );\n\n      if (!result.node) {\n        if (result.error) {\n          /*:: invariant(refExpressionErrors != null) */\n          super.setOptionalParametersError(refExpressionErrors, result.error);\n        }\n\n        return expr;\n      }\n      if (result.error) this.state = result.failState;\n      return result.node;\n    }\n\n    // Note: These \"type casts\" are *not* valid TS expressions.\n    // But we parse them here and change them when completing the arrow function.\n    parseParenItem<T extends N.Expression | N.RestElement | N.SpreadElement>(\n      node: T,\n      startLoc: Position,\n    ): T | N.TsTypeCastExpression {\n      const newNode = super.parseParenItem(node, startLoc);\n      if (this.eat(tt.question)) {\n        (newNode as N.Identifier).optional = true;\n        // Include questionmark in location of node\n        // Don't use this.finishNode() as otherwise we might process comments twice and\n        // include already consumed parens\n        this.resetEndLocation(node);\n      }\n\n      if (this.match(tt.colon)) {\n        const typeCastNode = this.startNodeAt<N.TsTypeCastExpression>(startLoc);\n        typeCastNode.expression = node as N.Expression;\n        typeCastNode.typeAnnotation = this.tsParseTypeAnnotation();\n\n        return this.finishNode(typeCastNode, \"TSTypeCastExpression\");\n      }\n\n      return node;\n    }\n\n    parseExportDeclaration(\n      node: N.ExportNamedDeclaration,\n    ): N.Declaration | undefined | null {\n      if (!this.state.isAmbientContext && this.isContextual(tt._declare)) {\n        return this.tsInAmbientContext(() => this.parseExportDeclaration(node));\n      }\n\n      // Store original location\n      const startLoc = this.state.startLoc;\n\n      const isDeclare = this.eatContextual(tt._declare);\n\n      if (\n        isDeclare &&\n        (this.isContextual(tt._declare) || !this.shouldParseExportDeclaration())\n      ) {\n        throw this.raise(\n          TSErrors.ExpectedAmbientAfterExportDeclare,\n          this.state.startLoc,\n        );\n      }\n\n      const isIdentifier = tokenIsIdentifier(this.state.type);\n      const declaration: N.Declaration | undefined | null =\n        (isIdentifier && this.tsTryParseExportDeclaration()) ||\n        super.parseExportDeclaration(node);\n\n      if (!declaration) return null;\n\n      if (\n        declaration.type === \"TSInterfaceDeclaration\" ||\n        declaration.type === \"TSTypeAliasDeclaration\" ||\n        isDeclare\n      ) {\n        node.exportKind = \"type\";\n      }\n\n      if (isDeclare) {\n        // Reset location to include `declare` in range\n        this.resetStartLocation(declaration, startLoc);\n\n        declaration.declare = true;\n      }\n\n      return declaration;\n    }\n\n    parseClassId(\n      node: N.Class,\n      isStatement: boolean,\n      optionalId?: boolean | null,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      bindingType?: BindingFlag,\n    ): void {\n      if ((!isStatement || optionalId) && this.isContextual(tt._implements)) {\n        return;\n      }\n\n      super.parseClassId(\n        node,\n        isStatement,\n        optionalId,\n        (node as any).declare\n          ? BindingFlag.TYPE_TS_AMBIENT\n          : BindingFlag.TYPE_CLASS,\n      );\n      const typeParameters = this.tsTryParseTypeParameters(\n        this.tsParseInOutConstModifiers,\n      );\n      if (typeParameters) node.typeParameters = typeParameters;\n    }\n\n    parseClassPropertyAnnotation(\n      node: N.ClassProperty | N.ClassPrivateProperty | N.ClassAccessorProperty,\n    ): void {\n      if (!node.optional) {\n        if (this.eat(tt.bang)) {\n          node.definite = true;\n        } else if (this.eat(tt.question)) {\n          node.optional = true;\n        }\n      }\n\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) node.typeAnnotation = type;\n    }\n\n    parseClassProperty(node: N.ClassProperty): N.ClassProperty {\n      this.parseClassPropertyAnnotation(node);\n\n      if (\n        this.state.isAmbientContext &&\n        !(node.readonly && !node.typeAnnotation) &&\n        this.match(tt.eq)\n      ) {\n        this.raise(\n          TSErrors.DeclareClassFieldHasInitializer,\n          this.state.startLoc,\n        );\n      }\n      if (node.abstract && this.match(tt.eq)) {\n        const { key } = node;\n        this.raise(\n          TSErrors.AbstractPropertyHasInitializer,\n          this.state.startLoc,\n          {\n            propertyName:\n              key.type === \"Identifier\" && !node.computed\n                ? key.name\n                : `[${this.input.slice(key.start, key.end)}]`,\n          },\n        );\n      }\n\n      return super.parseClassProperty(node);\n    }\n\n    parseClassPrivateProperty(\n      node: N.ClassPrivateProperty,\n    ): N.ClassPrivateProperty {\n      // @ts-expect-error abstract may not index node\n      if (node.abstract) {\n        this.raise(TSErrors.PrivateElementHasAbstract, node);\n      }\n\n      // @ts-expect-error accessibility may not index node\n      if (node.accessibility) {\n        this.raise(TSErrors.PrivateElementHasAccessibility, node, {\n          // @ts-expect-error refine typings\n          modifier: node.accessibility,\n        });\n      }\n\n      this.parseClassPropertyAnnotation(node);\n      return super.parseClassPrivateProperty(node);\n    }\n\n    parseClassAccessorProperty(\n      node: N.ClassAccessorProperty,\n    ): N.ClassAccessorProperty {\n      this.parseClassPropertyAnnotation(node);\n      if (node.optional) {\n        this.raise(TSErrors.AccessorCannotBeOptional, node);\n      }\n      return super.parseClassAccessorProperty(node);\n    }\n\n    pushClassMethod(\n      classBody: N.ClassBody,\n      method: N.ClassMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowsDirectSuper: boolean,\n    ): void {\n      const typeParameters = this.tsTryParseTypeParameters(\n        this.tsParseConstModifier,\n      );\n      if (typeParameters && isConstructor) {\n        this.raise(TSErrors.ConstructorHasTypeParameters, typeParameters);\n      }\n\n      // @ts-expect-error declare does not exist in ClassMethod\n      const { declare = false, kind } = method;\n\n      if (declare && (kind === \"get\" || kind === \"set\")) {\n        this.raise(TSErrors.DeclareAccessor, method, { kind });\n      }\n      if (typeParameters) method.typeParameters = typeParameters;\n      super.pushClassMethod(\n        classBody,\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n      );\n    }\n\n    pushClassPrivateMethod(\n      classBody: N.ClassBody,\n      method: N.ClassPrivateMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n    ): void {\n      const typeParameters = this.tsTryParseTypeParameters(\n        this.tsParseConstModifier,\n      );\n      if (typeParameters) method.typeParameters = typeParameters;\n      super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\n    }\n\n    declareClassPrivateMethodInScope(\n      node: N.ClassPrivateMethod | N.TSDeclareMethod,\n      kind: number,\n    ) {\n      if (node.type === \"TSDeclareMethod\") return;\n      // This happens when using the \"estree\" plugin.\n      if (\n        (node as N.Node).type === \"MethodDefinition\" &&\n        !Object.hasOwn(\n          (node as unknown as N.EstreeMethodDefinition).value,\n          \"body\",\n        )\n      ) {\n        return;\n      }\n\n      super.declareClassPrivateMethodInScope(node, kind);\n    }\n\n    parseClassSuper(node: N.Class): void {\n      super.parseClassSuper(node);\n      // handle `extends f<<T>\n      if (node.superClass && (this.match(tt.lt) || this.match(tt.bitShiftL))) {\n        node.superTypeParameters = this.tsParseTypeArgumentsInExpression();\n      }\n      if (this.eatContextual(tt._implements)) {\n        node.implements = this.tsParseHeritageClause(\"implements\");\n      }\n    }\n\n    parseObjPropValue<T extends N.ObjectMember>(\n      prop: Undone<T>,\n      startLoc: Position | undefined | null,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isPattern: boolean,\n      isAccessor: boolean,\n      refExpressionErrors?: ExpressionErrors | null,\n    ): T {\n      const typeParameters = this.tsTryParseTypeParameters(\n        this.tsParseConstModifier,\n      );\n      if (typeParameters) prop.typeParameters = typeParameters;\n\n      return super.parseObjPropValue(\n        prop,\n\n        startLoc,\n        isGenerator,\n        isAsync,\n        isPattern,\n        isAccessor,\n        refExpressionErrors,\n      );\n    }\n\n    parseFunctionParams(node: N.Function, isConstructor: boolean): void {\n      const typeParameters = this.tsTryParseTypeParameters(\n        this.tsParseConstModifier,\n      );\n      if (typeParameters) node.typeParameters = typeParameters;\n      super.parseFunctionParams(node, isConstructor);\n    }\n\n    // `let x: number;`\n    parseVarId(\n      decl: N.VariableDeclarator,\n      kind: \"var\" | \"let\" | \"const\" | \"using\",\n    ): void {\n      super.parseVarId(decl, kind);\n      if (\n        decl.id.type === \"Identifier\" &&\n        !this.hasPrecedingLineBreak() &&\n        this.eat(tt.bang)\n      ) {\n        decl.definite = true;\n      }\n\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) {\n        decl.id.typeAnnotation = type;\n        this.resetEndLocation(decl.id); // set end position to end of type\n      }\n    }\n\n    // parse the return type of an async arrow function - let foo = (async (): number => {});\n    parseAsyncArrowFromCallExpression(\n      node: N.ArrowFunctionExpression,\n      call: N.CallExpression,\n    ): N.ArrowFunctionExpression {\n      if (this.match(tt.colon)) {\n        node.returnType = this.tsParseTypeAnnotation();\n      }\n      return super.parseAsyncArrowFromCallExpression(node, call);\n    }\n\n    parseMaybeAssign(\n      refExpressionErrors?: ExpressionErrors | null,\n      afterLeftParse?: Function,\n    ): N.Expression {\n      // Note: When the JSX plugin is on, type assertions (`<T> x`) aren't valid syntax.\n\n      let state: State | undefined | null;\n      let jsx;\n      let typeCast;\n\n      if (\n        this.hasPlugin(\"jsx\") &&\n        (this.match(tt.jsxTagStart) || this.match(tt.lt))\n      ) {\n        // Prefer to parse JSX if possible. But may be an arrow fn.\n        state = this.state.clone();\n\n        jsx = this.tryParse(\n          () => super.parseMaybeAssign(refExpressionErrors, afterLeftParse),\n          state,\n        );\n\n        /*:: invariant(!jsx.aborted) */\n        /*:: invariant(jsx.node != null) */\n        if (!jsx.error) return jsx.node;\n\n        // Remove `tc.j_expr` or `tc.j_oTag` from context added\n        // by parsing `jsxTagStart` to stop the JSX plugin from\n        // messing with the tokens\n        const { context } = this.state;\n        const currentContext = context[context.length - 1];\n        if (currentContext === tc.j_oTag || currentContext === tc.j_expr) {\n          context.pop();\n        }\n      }\n\n      if (!jsx?.error && !this.match(tt.lt)) {\n        return super.parseMaybeAssign(refExpressionErrors, afterLeftParse);\n      }\n\n      // Either way, we're looking at a '<': tt.jsxTagStart or relational.\n\n      // If the state was cloned in the JSX parsing branch above but there\n      // have been any error in the tryParse call, this.state is set to state\n      // so we still need to clone it.\n      if (!state || state === this.state) state = this.state.clone();\n\n      let typeParameters: N.TsTypeParameterDeclaration | undefined | null;\n      // We need to explicitly annotate 'abort' for microsoft/TypeScript#58170\n      const arrow = this.tryParse((abort: () => never) => {\n        // This is similar to TypeScript's `tryParseParenthesizedArrowFunctionExpression`.\n        typeParameters = this.tsParseTypeParameters(this.tsParseConstModifier);\n        const expr = super.parseMaybeAssign(\n          refExpressionErrors,\n          afterLeftParse,\n        );\n\n        if (\n          expr.type !== \"ArrowFunctionExpression\" ||\n          expr.extra?.parenthesized\n        ) {\n          abort();\n        }\n\n        // Correct TypeScript code should have at least 1 type parameter, but don't crash on bad code.\n        if (typeParameters?.params.length !== 0) {\n          this.resetStartLocationFromNode(expr, typeParameters);\n        }\n        expr.typeParameters = typeParameters;\n\n        if (process.env.BABEL_8_BREAKING) {\n          if (\n            this.hasPlugin(\"jsx\") &&\n            expr.typeParameters.params.length === 1 &&\n            !expr.typeParameters.extra?.trailingComma\n          ) {\n            // report error if single type parameter used without trailing comma.\n            const parameter = expr.typeParameters\n              .params[0] as N.TsTypeParameter;\n            if (!parameter.constraint) {\n              // A single type parameter must either have constraints\n              // or a trailing comma, otherwise it's ambiguous with JSX.\n              this.raise(\n                TSErrors.SingleTypeParameterWithoutTrailingComma,\n                createPositionWithColumnOffset(parameter.loc.end, 1),\n                {\n                  typeParameterName: process.env.BABEL_8_BREAKING\n                    ? (parameter.name as N.Identifier).name\n                    : (parameter.name as string),\n                },\n              );\n            }\n          }\n        }\n\n        return expr;\n      }, state);\n\n      /*:: invariant(arrow.node != null) */\n      if (!arrow.error && !arrow.aborted) {\n        // This error is reported outside of the this.tryParse call so that\n        // in case of <T>(x) => 2, we don't consider <T>(x) as a type assertion\n        // because of this error.\n        if (typeParameters) this.reportReservedArrowTypeParam(typeParameters);\n        return arrow.node;\n      }\n\n      if (!jsx) {\n        // Try parsing a type cast instead of an arrow function.\n        // This will never happen outside of JSX.\n        // (Because in JSX the '<' should be a jsxTagStart and not a relational.\n        assert(!this.hasPlugin(\"jsx\"));\n\n        // This will start with a type assertion (via parseMaybeUnary).\n        // But don't directly call `this.tsParseTypeAssertion` because we want to handle any binary after it.\n        typeCast = this.tryParse(\n          () => super.parseMaybeAssign(refExpressionErrors, afterLeftParse),\n          state,\n        );\n        /*:: invariant(!typeCast.aborted) */\n        /*:: invariant(typeCast.node != null) */\n        if (!typeCast.error) return typeCast.node;\n      }\n\n      if (jsx?.node) {\n        /*:: invariant(jsx.failState) */\n        this.state = jsx.failState;\n        return jsx.node;\n      }\n\n      if (arrow.node) {\n        /*:: invariant(arrow.failState) */\n        this.state = arrow.failState;\n        if (typeParameters) this.reportReservedArrowTypeParam(typeParameters);\n        return arrow.node;\n      }\n\n      if (typeCast?.node) {\n        /*:: invariant(typeCast.failState) */\n        this.state = typeCast.failState;\n        return typeCast.node;\n      }\n\n      throw jsx?.error || arrow.error || typeCast?.error;\n    }\n\n    reportReservedArrowTypeParam(node: any) {\n      if (\n        node.params.length === 1 &&\n        !node.params[0].constraint &&\n        !node.extra?.trailingComma &&\n        this.getPluginOption(\"typescript\", \"disallowAmbiguousJSXLike\")\n      ) {\n        this.raise(TSErrors.ReservedArrowTypeParam, node);\n      }\n    }\n\n    // Handle type assertions\n    parseMaybeUnary(\n      refExpressionErrors?: ExpressionErrors | null,\n      sawUnary?: boolean,\n    ): N.Expression {\n      if (!this.hasPlugin(\"jsx\") && this.match(tt.lt)) {\n        return this.tsParseTypeAssertion();\n      }\n      return super.parseMaybeUnary(refExpressionErrors, sawUnary);\n    }\n\n    parseArrow(\n      node: Undone<N.ArrowFunctionExpression>,\n    ): Undone<N.ArrowFunctionExpression> | undefined | null {\n      if (this.match(tt.colon)) {\n        // This is different from how the TS parser does it.\n        // TS uses lookahead. The Babel Parser parses it as a parenthesized expression and converts.\n\n        const result = this.tryParse(abort => {\n          const returnType = this.tsParseTypeOrTypePredicateAnnotation(\n            tt.colon,\n          );\n          if (this.canInsertSemicolon() || !this.match(tt.arrow)) abort();\n          return returnType;\n        });\n\n        if (result.aborted) return;\n\n        if (!result.thrown) {\n          if (result.error) this.state = result.failState;\n          // @ts-expect-error refine typings\n          node.returnType = result.node;\n        }\n      }\n\n      return super.parseArrow(node);\n    }\n\n    // Allow type annotations inside of a parameter list.\n    parseAssignableListItemTypes(\n      param: N.Pattern,\n      flags: ParseBindingListFlags,\n    ) {\n      if (!(flags & ParseBindingListFlags.IS_FUNCTION_PARAMS)) return param;\n\n      if (this.eat(tt.question)) {\n        (param as any as N.Identifier).optional = true;\n      }\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) param.typeAnnotation = type;\n      this.resetEndLocation(param);\n\n      return param;\n    }\n\n    isAssignable(node: N.Node, isBinding?: boolean): boolean {\n      switch (node.type) {\n        case \"TSTypeCastExpression\":\n          return this.isAssignable(node.expression, isBinding);\n        case \"TSParameterProperty\":\n          return true;\n        default:\n          return super.isAssignable(node, isBinding);\n      }\n    }\n\n    toAssignable(node: N.Node, isLHS: boolean = false): void {\n      switch (node.type) {\n        case \"ParenthesizedExpression\":\n          this.toAssignableParenthesizedExpression(node, isLHS);\n          break;\n        case \"TSAsExpression\":\n        case \"TSSatisfiesExpression\":\n        case \"TSNonNullExpression\":\n        case \"TSTypeAssertion\":\n          if (isLHS) {\n            this.expressionScope.recordArrowParameterBindingError(\n              TSErrors.UnexpectedTypeCastInParameter,\n              node,\n            );\n          } else {\n            this.raise(TSErrors.UnexpectedTypeCastInParameter, node);\n          }\n          this.toAssignable(node.expression, isLHS);\n          break;\n        case \"AssignmentExpression\":\n          if (!isLHS && node.left.type === \"TSTypeCastExpression\") {\n            node.left = this.typeCastToParameter(node.left) as N.Assignable;\n          }\n        /* fall through */\n        default:\n          super.toAssignable(node, isLHS);\n      }\n    }\n\n    toAssignableParenthesizedExpression(\n      node: N.ParenthesizedExpression,\n      isLHS: boolean,\n    ): void {\n      switch (node.expression.type) {\n        case \"TSAsExpression\":\n        case \"TSSatisfiesExpression\":\n        case \"TSNonNullExpression\":\n        case \"TSTypeAssertion\":\n        case \"ParenthesizedExpression\":\n          this.toAssignable(node.expression, isLHS);\n          break;\n        default:\n          super.toAssignable(node, isLHS);\n      }\n    }\n\n    checkToRestConversion(node: N.Node, allowPattern: boolean): void {\n      switch (node.type) {\n        case \"TSAsExpression\":\n        case \"TSSatisfiesExpression\":\n        case \"TSTypeAssertion\":\n        case \"TSNonNullExpression\":\n          this.checkToRestConversion(node.expression, false);\n          break;\n        default:\n          super.checkToRestConversion(node, allowPattern);\n      }\n    }\n\n    isValidLVal(\n      type:\n        | \"TSTypeCastExpression\"\n        | \"TSParameterProperty\"\n        | \"TSNonNullExpression\"\n        | \"TSInstantiationExpression\"\n        | \"TSAsExpression\"\n        | \"TSSatisfiesExpression\"\n        | \"TSTypeAssertion\",\n      isUnparenthesizedInAssign: boolean,\n      binding: BindingFlag,\n    ) {\n      switch (type) {\n        // Allow \"typecasts\" to appear on the left of assignment expressions,\n        // because it may be in an arrow function.\n        // e.g. `const f = (foo: number = 0) => foo;`\n        case \"TSTypeCastExpression\":\n          return true;\n        case \"TSParameterProperty\":\n          return \"parameter\";\n        case \"TSNonNullExpression\":\n        case \"TSInstantiationExpression\":\n          return \"expression\";\n        case \"TSAsExpression\":\n        case \"TSSatisfiesExpression\":\n        case \"TSTypeAssertion\":\n          return (\n            (binding !== BindingFlag.TYPE_NONE || !isUnparenthesizedInAssign) &&\n            ([\"expression\", true] as [string, boolean])\n          );\n        default:\n          return super.isValidLVal(type, isUnparenthesizedInAssign, binding);\n      }\n    }\n\n    parseBindingAtom(): N.Pattern {\n      if (this.state.type === tt._this) {\n        return this.parseIdentifier(/* liberal */ true);\n      }\n      return super.parseBindingAtom();\n    }\n\n    parseMaybeDecoratorArguments(expr: N.Expression): N.Expression {\n      // handles `@f<<T>`\n      if (this.match(tt.lt) || this.match(tt.bitShiftL)) {\n        const typeArguments = this.tsParseTypeArgumentsInExpression();\n\n        if (this.match(tt.parenL)) {\n          const call = super.parseMaybeDecoratorArguments(\n            expr,\n          ) as N.CallExpression;\n          call.typeParameters = typeArguments;\n          return call;\n        }\n\n        this.unexpected(null, tt.parenL);\n      }\n\n      return super.parseMaybeDecoratorArguments(expr);\n    }\n\n    checkCommaAfterRest(\n      close: (typeof charCodes)[keyof typeof charCodes],\n    ): boolean {\n      if (\n        this.state.isAmbientContext &&\n        this.match(tt.comma) &&\n        this.lookaheadCharCode() === close\n      ) {\n        this.next();\n        return false;\n      }\n      return super.checkCommaAfterRest(close);\n    }\n\n    // === === === === === === === === === === === === === === === ===\n    // Note: All below methods are duplicates of something in flow.js.\n    // Not sure what the best way to combine these is.\n    // === === === === === === === === === === === === === === === ===\n\n    isClassMethod(): boolean {\n      return this.match(tt.lt) || super.isClassMethod();\n    }\n\n    isClassProperty(): boolean {\n      return (\n        this.match(tt.bang) || this.match(tt.colon) || super.isClassProperty()\n      );\n    }\n\n    parseMaybeDefault(\n      startLoc?: Position | null,\n      left?: Pattern | null,\n    ): N.Pattern {\n      const node = super.parseMaybeDefault(startLoc, left);\n\n      if (\n        node.type === \"AssignmentPattern\" &&\n        node.typeAnnotation &&\n        node.right.start < node.typeAnnotation.start\n      ) {\n        this.raise(TSErrors.TypeAnnotationAfterAssign, node.typeAnnotation);\n      }\n\n      return node;\n    }\n\n    // ensure that inside types, we bypass the jsx parser plugin\n    getTokenFromCode(code: number): void {\n      if (this.state.inType) {\n        if (code === charCodes.greaterThan) {\n          this.finishOp(tt.gt, 1);\n          return;\n        }\n        if (code === charCodes.lessThan) {\n          this.finishOp(tt.lt, 1);\n          return;\n        }\n      }\n      super.getTokenFromCode(code);\n    }\n\n    // used after we have finished parsing types\n    reScan_lt_gt() {\n      const { type } = this.state;\n      if (type === tt.lt) {\n        this.state.pos -= 1;\n        this.readToken_lt();\n      } else if (type === tt.gt) {\n        this.state.pos -= 1;\n        this.readToken_gt();\n      }\n    }\n\n    reScan_lt() {\n      const { type } = this.state;\n      if (type === tt.bitShiftL) {\n        this.state.pos -= 2;\n        this.finishOp(tt.lt, 1);\n        return tt.lt;\n      }\n      return type;\n    }\n\n    toAssignableList(\n      exprList: Expression[],\n      trailingCommaLoc: Position | undefined | null,\n      isLHS: boolean,\n    ): void {\n      for (let i = 0; i < exprList.length; i++) {\n        const expr = exprList[i];\n        if (expr?.type === \"TSTypeCastExpression\") {\n          exprList[i] = this.typeCastToParameter(expr);\n        }\n      }\n      super.toAssignableList(exprList, trailingCommaLoc, isLHS);\n    }\n\n    typeCastToParameter(node: N.TsTypeCastExpression): N.Expression {\n      (node.expression as N.Identifier).typeAnnotation = node.typeAnnotation;\n\n      this.resetEndLocation(node.expression, node.typeAnnotation.loc.end);\n\n      return node.expression;\n    }\n\n    shouldParseArrow(params: Array<N.Node>) {\n      if (this.match(tt.colon)) {\n        return params.every(expr => this.isAssignable(expr, true));\n      }\n      return super.shouldParseArrow(params);\n    }\n\n    shouldParseAsyncArrow(): boolean {\n      return this.match(tt.colon) || super.shouldParseAsyncArrow();\n    }\n\n    canHaveLeadingDecorator() {\n      // Avoid unnecessary lookahead in checking for abstract class unless needed!\n      return super.canHaveLeadingDecorator() || this.isAbstractClass();\n    }\n\n    jsxParseOpeningElementAfterName(\n      node: N.JSXOpeningElement,\n    ): N.JSXOpeningElement {\n      // handles `<Component<<T>`\n      if (this.match(tt.lt) || this.match(tt.bitShiftL)) {\n        const typeArguments = this.tsTryParseAndCatch(() =>\n          this.tsParseTypeArgumentsInExpression(),\n        );\n        if (typeArguments) node.typeParameters = typeArguments;\n      }\n      return super.jsxParseOpeningElementAfterName(node);\n    }\n\n    getGetterSetterExpectedParamCount(\n      method: N.ObjectMethod | N.ClassMethod,\n    ): number {\n      const baseCount = super.getGetterSetterExpectedParamCount(method);\n      const params = this.getObjectOrClassMethodParams(method);\n      const firstParam = params[0];\n      const hasContextParam = firstParam && this.isThisParam(firstParam);\n\n      return hasContextParam ? baseCount + 1 : baseCount;\n    }\n\n    parseCatchClauseParam(): N.Pattern {\n      const param = super.parseCatchClauseParam();\n      const type = this.tsTryParseTypeAnnotation();\n\n      if (type) {\n        param.typeAnnotation = type;\n        this.resetEndLocation(param);\n      }\n\n      return param;\n    }\n\n    tsInAmbientContext<T>(cb: () => T): T {\n      const { isAmbientContext: oldIsAmbientContext, strict: oldStrict } =\n        this.state;\n      this.state.isAmbientContext = true;\n      this.state.strict = false;\n      try {\n        return cb();\n      } finally {\n        this.state.isAmbientContext = oldIsAmbientContext;\n        this.state.strict = oldStrict;\n      }\n    }\n\n    parseClass<T extends N.Class>(\n      node: Undone<T>,\n      isStatement: boolean,\n      optionalId?: boolean,\n    ): T {\n      const oldInAbstractClass = this.state.inAbstractClass;\n      this.state.inAbstractClass = !!(node as any).abstract;\n      try {\n        return super.parseClass(node, isStatement, optionalId);\n      } finally {\n        this.state.inAbstractClass = oldInAbstractClass;\n      }\n    }\n\n    tsParseAbstractDeclaration(\n      node: any,\n      decorators: N.Decorator[] | null,\n    ): N.ClassDeclaration | N.TsInterfaceDeclaration | undefined | null {\n      if (this.match(tt._class)) {\n        node.abstract = true;\n        return this.maybeTakeDecorators(\n          decorators,\n          this.parseClass<N.ClassDeclaration>(\n            node as N.ClassDeclaration,\n            /* isStatement */ true,\n            /* optionalId */ false,\n          ),\n        );\n      } else if (this.isContextual(tt._interface)) {\n        // for invalid abstract interface\n\n        // To avoid\n        //   abstract interface\n        //   Foo {}\n        if (!this.hasFollowingLineBreak()) {\n          node.abstract = true;\n          this.raise(TSErrors.NonClassMethodPropertyHasAbstractModifer, node);\n          return this.tsParseInterfaceDeclaration(\n            node as N.TsInterfaceDeclaration,\n          );\n        }\n      } else {\n        this.unexpected(null, tt._class);\n      }\n    }\n\n    parseMethod<\n      T extends N.ObjectMethod | N.ClassMethod | N.ClassPrivateMethod,\n    >(\n      node: Undone<T>,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowDirectSuper: boolean,\n      type: T[\"type\"],\n      inClassScope?: boolean,\n    ) {\n      const method = super.parseMethod<T>(\n        node,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowDirectSuper,\n        type,\n        inClassScope,\n      );\n      // @ts-expect-error todo(flow->ts) property not defined for all types in union\n      if (method.abstract) {\n        const hasBody = this.hasPlugin(\"estree\")\n          ? // @ts-expect-error estree typings\n            !!method.value.body\n          : !!method.body;\n        if (hasBody) {\n          const { key } = method;\n          this.raise(TSErrors.AbstractMethodHasImplementation, method, {\n            methodName:\n              key.type === \"Identifier\" && !method.computed\n                ? key.name\n                : `[${this.input.slice(key.start, key.end)}]`,\n          });\n        }\n      }\n      return method;\n    }\n\n    tsParseTypeParameterName(): N.Identifier | string {\n      const typeName: N.Identifier = this.parseIdentifier();\n      return process.env.BABEL_8_BREAKING ? typeName : typeName.name;\n    }\n\n    shouldParseAsAmbientContext(): boolean {\n      return !!this.getPluginOption(\"typescript\", \"dts\");\n    }\n\n    parse() {\n      if (this.shouldParseAsAmbientContext()) {\n        this.state.isAmbientContext = true;\n      }\n      return super.parse();\n    }\n\n    getExpression() {\n      if (this.shouldParseAsAmbientContext()) {\n        this.state.isAmbientContext = true;\n      }\n      return super.getExpression();\n    }\n\n    parseExportSpecifier(\n      node: Undone<N.ExportSpecifier>,\n      isString: boolean,\n      isInTypeExport: boolean,\n      isMaybeTypeOnly: boolean,\n    ) {\n      if (!isString && isMaybeTypeOnly) {\n        this.parseTypeOnlyImportExportSpecifier(\n          node,\n          /* isImport */ false,\n          isInTypeExport,\n        );\n        return this.finishNode<N.ExportSpecifier>(node, \"ExportSpecifier\");\n      }\n      node.exportKind = \"value\";\n      return super.parseExportSpecifier(\n        node,\n        isString,\n        isInTypeExport,\n        isMaybeTypeOnly,\n      );\n    }\n\n    parseImportSpecifier(\n      specifier: Undone<N.ImportSpecifier>,\n      importedIsString: boolean,\n      isInTypeOnlyImport: boolean,\n      isMaybeTypeOnly: boolean,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      bindingType: BindingFlag | undefined,\n    ): N.ImportSpecifier {\n      if (!importedIsString && isMaybeTypeOnly) {\n        this.parseTypeOnlyImportExportSpecifier(\n          specifier,\n          /* isImport */ true,\n          isInTypeOnlyImport,\n        );\n        return this.finishNode<N.ImportSpecifier>(specifier, \"ImportSpecifier\");\n      }\n      specifier.importKind = \"value\";\n      return super.parseImportSpecifier(\n        specifier,\n        importedIsString,\n        isInTypeOnlyImport,\n        isMaybeTypeOnly,\n        isInTypeOnlyImport\n          ? BindingFlag.TYPE_TS_TYPE_IMPORT\n          : BindingFlag.TYPE_TS_VALUE_IMPORT,\n      );\n    }\n\n    parseTypeOnlyImportExportSpecifier(\n      node: any,\n      isImport: boolean,\n      isInTypeOnlyImportExport: boolean,\n    ): void {\n      const leftOfAsKey = isImport ? \"imported\" : \"local\";\n      const rightOfAsKey = isImport ? \"local\" : \"exported\";\n\n      let leftOfAs = node[leftOfAsKey];\n      let rightOfAs;\n\n      let hasTypeSpecifier = false;\n      let canParseAsKeyword = true;\n\n      const loc = leftOfAs.loc.start;\n\n      // https://github.com/microsoft/TypeScript/blob/fc4f9d83d5939047aa6bb2a43965c6e9bbfbc35b/src/compiler/parser.ts#L7411-L7456\n      // import { type } from \"mod\";          - hasTypeSpecifier: false, leftOfAs: type\n      // import { type as } from \"mod\";       - hasTypeSpecifier: true,  leftOfAs: as\n      // import { type as as } from \"mod\";    - hasTypeSpecifier: false, leftOfAs: type, rightOfAs: as\n      // import { type as as as } from \"mod\"; - hasTypeSpecifier: true,  leftOfAs: as,   rightOfAs: as\n      if (this.isContextual(tt._as)) {\n        // { type as ...? }\n        const firstAs = this.parseIdentifier();\n        if (this.isContextual(tt._as)) {\n          // { type as as ...? }\n          const secondAs = this.parseIdentifier();\n          if (tokenIsKeywordOrIdentifier(this.state.type)) {\n            // { type as as something }\n            hasTypeSpecifier = true;\n            leftOfAs = firstAs;\n            rightOfAs = isImport\n              ? this.parseIdentifier()\n              : this.parseModuleExportName();\n            canParseAsKeyword = false;\n          } else {\n            // { type as as }\n            rightOfAs = secondAs;\n            canParseAsKeyword = false;\n          }\n        } else if (tokenIsKeywordOrIdentifier(this.state.type)) {\n          // { type as something }\n          canParseAsKeyword = false;\n          rightOfAs = isImport\n            ? this.parseIdentifier()\n            : this.parseModuleExportName();\n        } else {\n          // { type as }\n          hasTypeSpecifier = true;\n          leftOfAs = firstAs;\n        }\n      } else if (tokenIsKeywordOrIdentifier(this.state.type)) {\n        // { type something ...? }\n        hasTypeSpecifier = true;\n        if (isImport) {\n          leftOfAs = this.parseIdentifier(true);\n          if (!this.isContextual(tt._as)) {\n            this.checkReservedWord(\n              leftOfAs.name,\n              leftOfAs.loc.start,\n              true,\n              true,\n            );\n          }\n        } else {\n          leftOfAs = this.parseModuleExportName();\n        }\n      }\n      if (hasTypeSpecifier && isInTypeOnlyImportExport) {\n        this.raise(\n          isImport\n            ? TSErrors.TypeModifierIsUsedInTypeImports\n            : TSErrors.TypeModifierIsUsedInTypeExports,\n          loc,\n        );\n      }\n\n      node[leftOfAsKey] = leftOfAs;\n      node[rightOfAsKey] = rightOfAs;\n\n      const kindKey = isImport ? \"importKind\" : \"exportKind\";\n      node[kindKey] = hasTypeSpecifier ? \"type\" : \"value\";\n\n      if (canParseAsKeyword && this.eatContextual(tt._as)) {\n        node[rightOfAsKey] = isImport\n          ? this.parseIdentifier()\n          : this.parseModuleExportName();\n      }\n      if (!node[rightOfAsKey]) {\n        node[rightOfAsKey] = cloneIdentifier(node[leftOfAsKey]);\n      }\n      if (isImport) {\n        this.checkIdentifier(\n          node[rightOfAsKey],\n          hasTypeSpecifier\n            ? BindingFlag.TYPE_TS_TYPE_IMPORT\n            : BindingFlag.TYPE_TS_VALUE_IMPORT,\n        );\n      }\n    }\n  };\n\nfunction isPossiblyLiteralEnum(expression: N.Expression): boolean {\n  if (expression.type !== \"MemberExpression\") return false;\n\n  const { computed, property } = expression;\n\n  if (\n    computed &&\n    property.type !== \"StringLiteral\" &&\n    (property.type !== \"TemplateLiteral\" || property.expressions.length > 0)\n  ) {\n    return false;\n  }\n\n  return isUncomputedMemberExpressionChain(expression.object);\n}\n\n// If a const declaration has no type annotation and is initialized to\n// a string literal, numeric literal, or enum reference, then it is\n// allowed. In an ideal world, we'd check whether init was *actually* an\n// enum reference, but we allow anything that \"could be\" a literal enum\n// in `isPossiblyLiteralEnum` since we don't have all the information\n// that the typescript compiler has.\nfunction isValidAmbientConstInitializer(\n  expression: N.Expression,\n  estree: boolean,\n): boolean {\n  const { type } = expression;\n  if (expression.extra?.parenthesized) {\n    return false;\n  }\n  if (estree) {\n    if (type === \"Literal\") {\n      const { value } = expression;\n      if (typeof value === \"string\" || typeof value === \"boolean\") {\n        return true;\n      }\n    }\n  } else {\n    if (type === \"StringLiteral\" || type === \"BooleanLiteral\") {\n      return true;\n    }\n  }\n  if (isNumber(expression, estree) || isNegativeNumber(expression, estree)) {\n    return true;\n  }\n  if (type === \"TemplateLiteral\" && expression.expressions.length === 0) {\n    return true;\n  }\n  if (isPossiblyLiteralEnum(expression)) {\n    return true;\n  }\n  return false;\n}\n\nfunction isNumber(expression: N.Expression, estree: boolean): boolean {\n  if (estree) {\n    return (\n      expression.type === \"Literal\" &&\n      (typeof expression.value === \"number\" || \"bigint\" in expression)\n    );\n  }\n  return (\n    expression.type === \"NumericLiteral\" || expression.type === \"BigIntLiteral\"\n  );\n}\n\nfunction isNegativeNumber(expression: N.Expression, estree: boolean): boolean {\n  if (expression.type === \"UnaryExpression\") {\n    const { operator, argument } = expression;\n    if (operator === \"-\" && isNumber(argument, estree)) {\n      return true;\n    }\n  }\n  return false;\n}\n\nfunction isUncomputedMemberExpressionChain(expression: N.Expression): boolean {\n  if (expression.type === \"Identifier\") return true;\n  if (expression.type !== \"MemberExpression\" || expression.computed) {\n    return false;\n  }\n\n  return isUncomputedMemberExpressionChain(expression.object);\n}\n", "import * as charCodes from \"charcodes\";\n\nimport { tokenLabelName, tt } from \"../tokenizer/types.ts\";\nimport type Parser from \"../parser/index.ts\";\nimport type * as N from \"../types.ts\";\nimport { ParseErrorEnum } from \"../parse-error.ts\";\nimport type { Undone } from \"../parser/node.ts\";\nimport type { ExpressionErrors } from \"../parser/util.ts\";\nimport type { BindingFlag } from \"../util/scopeflags.ts\";\nimport type { Position } from \"../util/location.ts\";\n\ntype PossiblePlaceholders = {\n  Identifier: N.Identifier;\n  StringLiteral: N.StringLiteral;\n  Expression: N.Expression;\n  Statement: N.Statement;\n  Declaration: N.Declaration;\n  BlockStatement: N.BlockStatement;\n  ClassBody: N.ClassBody;\n  Pattern: N.Pattern;\n};\nexport type PlaceholderTypes = keyof PossiblePlaceholders;\n\ntype NodeOf<T extends keyof PossiblePlaceholders> = PossiblePlaceholders[T];\n// todo: when there  is proper union type for Node\n// type NodeOf<T extends PlaceholderTypes> = Extract<N.Node, { type: T }>;\n\n// todo: Placeholder<T> breaks everything, because its type is incompatible with\n// the substituted nodes.\ntype MaybePlaceholder<T extends PlaceholderTypes> = NodeOf<T>; // | Placeholder<T>\n\n/* eslint sort-keys: \"error\" */\nconst PlaceholderErrors = ParseErrorEnum`placeholders`({\n  ClassNameIsRequired: \"A class name is required.\",\n  UnexpectedSpace: \"Unexpected space in placeholder.\",\n});\n\nexport default (superClass: typeof Parser) =>\n  class PlaceholdersParserMixin extends superClass implements Parser {\n    parsePlaceholder<T extends PlaceholderTypes>(\n      expectedNode: T,\n    ): /*?N.Placeholder<T>*/ MaybePlaceholder<T> | undefined {\n      if (this.match(tt.placeholder)) {\n        const node = this.startNode<N.Placeholder<T>>();\n        this.next();\n        this.assertNoSpace();\n\n        // We can't use this.parseIdentifier because\n        // we don't want nested placeholders.\n        node.name = super.parseIdentifier(/* liberal */ true);\n\n        this.assertNoSpace();\n        this.expect(tt.placeholder);\n        return this.finishPlaceholder(node, expectedNode);\n      }\n    }\n\n    finishPlaceholder<T extends PlaceholderTypes>(\n      node: Undone<N.Placeholder> | Undone<NodeOf<PlaceholderTypes>>,\n      expectedNode: T,\n    ): /*N.Placeholder<T>*/ MaybePlaceholder<T> {\n      let placeholder = node as unknown as N.Placeholder<T>;\n\n      if (!placeholder.expectedNode || !placeholder.type) {\n        placeholder = this.finishNode(\n          placeholder,\n          \"Placeholder\",\n        ) as unknown as N.Placeholder<T>;\n      }\n\n      placeholder.expectedNode = expectedNode;\n      return placeholder as unknown as MaybePlaceholder<T>;\n    }\n\n    /* ============================================================ *\n     * tokenizer/index.js                                           *\n     * ============================================================ */\n\n    getTokenFromCode(code: number) {\n      if (\n        code === charCodes.percentSign &&\n        this.input.charCodeAt(this.state.pos + 1) === charCodes.percentSign\n      ) {\n        this.finishOp(tt.placeholder, 2);\n      } else {\n        super.getTokenFromCode(code);\n      }\n    }\n\n    /* ============================================================ *\n     * parser/expression.js                                         *\n     * ============================================================ */\n\n    parseExprAtom(\n      refExpressionErrors?: ExpressionErrors | null,\n    ): MaybePlaceholder<\"Expression\"> {\n      return (\n        this.parsePlaceholder(\"Expression\") ||\n        super.parseExprAtom(refExpressionErrors)\n      );\n    }\n\n    parseIdentifier(liberal?: boolean): MaybePlaceholder<\"Identifier\"> {\n      // NOTE: This function only handles identifiers outside of\n      // expressions and binding patterns, since they are already\n      // handled by the parseExprAtom and parseBindingAtom functions.\n      // This is needed, for example, to parse \"class %%NAME%% {}\".\n      return (\n        this.parsePlaceholder(\"Identifier\") || super.parseIdentifier(liberal)\n      );\n    }\n\n    checkReservedWord(\n      word: string,\n      startLoc: Position,\n      checkKeywords: boolean,\n      isBinding: boolean,\n    ) {\n      // Sometimes we call #checkReservedWord(node.name), expecting\n      // that node is an Identifier. If it is a Placeholder, name\n      // will be undefined.\n      if (word !== undefined) {\n        super.checkReservedWord(word, startLoc, checkKeywords, isBinding);\n      }\n    }\n\n    /* ============================================================ *\n     * parser/lval.js                                               *\n     * ============================================================ */\n\n    parseBindingAtom(): MaybePlaceholder<\"Pattern\"> {\n      return this.parsePlaceholder(\"Pattern\") || super.parseBindingAtom();\n    }\n\n    isValidLVal(type: string, isParenthesized: boolean, binding: BindingFlag) {\n      return (\n        type === \"Placeholder\" ||\n        super.isValidLVal(type, isParenthesized, binding)\n      );\n    }\n\n    toAssignable(node: N.Node, isLHS: boolean): void {\n      if (\n        node &&\n        node.type === \"Placeholder\" &&\n        node.expectedNode === \"Expression\"\n      ) {\n        node.expectedNode = \"Pattern\";\n      } else {\n        super.toAssignable(node, isLHS);\n      }\n    }\n\n    /* ============================================================ *\n     * parser/statement.js                                          *\n     * ============================================================ */\n\n    chStartsBindingIdentifier(ch: number, pos: number): boolean {\n      if (super.chStartsBindingIdentifier(ch, pos)) {\n        return true;\n      }\n\n      // Accept \"let %%\" as the start of \"let %%placeholder%%\", as though the\n      // placeholder were an identifier.\n      const nextToken = this.lookahead();\n      if (nextToken.type === tt.placeholder) {\n        return true;\n      }\n\n      return false;\n    }\n\n    verifyBreakContinue(\n      node: N.BreakStatement | N.ContinueStatement,\n      isBreak: boolean,\n    ) {\n      // @ts-expect-error: node.label could be Placeholder\n      if (node.label && node.label.type === \"Placeholder\") return;\n      super.verifyBreakContinue(node, isBreak);\n    }\n\n    // @ts-expect-error Plugin will override parser interface\n    parseExpressionStatement(\n      node: MaybePlaceholder<\"Statement\">,\n      expr: MaybePlaceholder<\"Expression\">,\n    ): MaybePlaceholder<\"Statement\"> {\n      // @ts-expect-error placeholder typings\n      if (expr.type !== \"Placeholder\" || expr.extra?.parenthesized) {\n        // @ts-expect-error placeholder typings\n        return super.parseExpressionStatement(node, expr);\n      }\n\n      if (this.match(tt.colon)) {\n        // @ts-expect-error placeholder typings\n        const stmt: N.LabeledStatement = node;\n        stmt.label = this.finishPlaceholder(expr, \"Identifier\");\n        this.next();\n        stmt.body = super.parseStatementOrSloppyAnnexBFunctionDeclaration();\n        return this.finishNode(stmt, \"LabeledStatement\");\n      }\n\n      this.semicolon();\n      const stmtPlaceholder = node as unknown as N.Placeholder<\"Statement\">;\n      stmtPlaceholder.name = (expr as N.Placeholder).name;\n      return this.finishPlaceholder(stmtPlaceholder, \"Statement\");\n    }\n\n    parseBlock(\n      allowDirectives?: boolean,\n      createNewLexicalScope?: boolean,\n      afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n    ): MaybePlaceholder<\"BlockStatement\"> {\n      return (\n        this.parsePlaceholder(\"BlockStatement\") ||\n        super.parseBlock(\n          allowDirectives,\n          createNewLexicalScope,\n          afterBlockParse,\n        )\n      );\n    }\n\n    parseFunctionId(\n      requireId?: boolean,\n    ): MaybePlaceholder<\"Identifier\"> | undefined | null {\n      return (\n        this.parsePlaceholder(\"Identifier\") || super.parseFunctionId(requireId)\n      );\n    }\n    // @ts-expect-error Plugin will override parser interface\n    parseClass<T extends N.Class>(\n      node: T,\n      isStatement: /* T === ClassDeclaration */ boolean,\n      optionalId?: boolean,\n    ): T {\n      const type = isStatement ? \"ClassDeclaration\" : \"ClassExpression\";\n\n      this.next();\n      const oldStrict = this.state.strict;\n\n      const placeholder = this.parsePlaceholder(\"Identifier\");\n      if (placeholder) {\n        if (\n          this.match(tt._extends) ||\n          this.match(tt.placeholder) ||\n          this.match(tt.braceL)\n        ) {\n          node.id = placeholder;\n        } else if (optionalId || !isStatement) {\n          node.id = null;\n          node.body = this.finishPlaceholder(placeholder, \"ClassBody\");\n          return this.finishNode(node, type);\n        } else {\n          throw this.raise(\n            PlaceholderErrors.ClassNameIsRequired,\n            this.state.startLoc,\n          );\n        }\n      } else {\n        this.parseClassId(node, isStatement, optionalId);\n      }\n\n      super.parseClassSuper(node);\n      node.body =\n        this.parsePlaceholder(\"ClassBody\") ||\n        super.parseClassBody(!!node.superClass, oldStrict);\n      return this.finishNode(node, type);\n    }\n\n    parseExport(\n      node: Undone<\n        | N.ExportDefaultDeclaration\n        | N.ExportAllDeclaration\n        | N.ExportNamedDeclaration\n      >,\n      decorators: N.Decorator[] | null,\n    ): N.AnyExport {\n      const placeholder = this.parsePlaceholder(\"Identifier\");\n      if (!placeholder) return super.parseExport(node, decorators);\n\n      const node2 = node as Undone<N.ExportNamedDeclaration>;\n\n      if (!this.isContextual(tt._from) && !this.match(tt.comma)) {\n        // export %%DECL%%;\n        node2.specifiers = [];\n        node2.source = null;\n        node2.declaration = this.finishPlaceholder(placeholder, \"Declaration\");\n        return this.finishNode(node2, \"ExportNamedDeclaration\");\n      }\n\n      // export %%NAME%% from \"foo\";\n      this.expectPlugin(\"exportDefaultFrom\");\n      const specifier = this.startNode<N.ExportDefaultSpecifier>();\n      specifier.exported = placeholder;\n      node2.specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\n\n      return super.parseExport(node2, decorators);\n    }\n\n    isExportDefaultSpecifier(): boolean {\n      if (this.match(tt._default)) {\n        const next = this.nextTokenStart();\n        if (this.isUnparsedContextual(next, \"from\")) {\n          if (\n            this.input.startsWith(\n              tokenLabelName(tt.placeholder),\n              this.nextTokenStartSince(next + 4),\n            )\n          ) {\n            return true;\n          }\n        }\n      }\n      return super.isExportDefaultSpecifier();\n    }\n\n    maybeParseExportDefaultSpecifier(\n      node: Undone<\n        | N.ExportDefaultDeclaration\n        | N.ExportAllDeclaration\n        | N.ExportNamedDeclaration\n      >,\n      maybeDefaultIdentifier: N.Identifier | null,\n    ): node is Undone<N.ExportNamedDeclaration> {\n      if ((node as N.ExportNamedDeclaration).specifiers?.length) {\n        // \"export %%NAME%%\" has already been parsed by #parseExport.\n        return true;\n      }\n      return super.maybeParseExportDefaultSpecifier(\n        node,\n        maybeDefaultIdentifier,\n      );\n    }\n\n    checkExport(node: N.ExportNamedDeclaration): void {\n      const { specifiers } = node;\n      if (specifiers?.length) {\n        node.specifiers = specifiers.filter(\n          // @ts-expect-error placeholder typings\n          node => node.exported.type === \"Placeholder\",\n        );\n      }\n      super.checkExport(node);\n      node.specifiers = specifiers;\n    }\n\n    parseImport(\n      node: Undone<N.ImportDeclaration>,\n    ): N.ImportDeclaration | N.TsImportEqualsDeclaration {\n      const placeholder = this.parsePlaceholder(\"Identifier\");\n      if (!placeholder) return super.parseImport(node);\n\n      node.specifiers = [];\n\n      if (!this.isContextual(tt._from) && !this.match(tt.comma)) {\n        // import %%STRING%%;\n        node.source = this.finishPlaceholder(placeholder, \"StringLiteral\");\n        this.semicolon();\n        return this.finishNode(node, \"ImportDeclaration\");\n      }\n\n      // import %%DEFAULT%% ...\n      const specifier =\n        this.startNodeAtNode<N.ImportDefaultSpecifier>(placeholder);\n      specifier.local = placeholder;\n      node.specifiers.push(\n        this.finishNode(specifier, \"ImportDefaultSpecifier\"),\n      );\n\n      if (this.eat(tt.comma)) {\n        // import %%DEFAULT%%, * as ...\n        const hasStarImport = this.maybeParseStarImportSpecifier(node);\n\n        // import %%DEFAULT%%, { ...\n        if (!hasStarImport) this.parseNamedImportSpecifiers(node);\n      }\n\n      this.expectContextual(tt._from);\n      node.source = this.parseImportSource();\n      this.semicolon();\n      return this.finishNode(node, \"ImportDeclaration\");\n    }\n\n    parseImportSource(): MaybePlaceholder<\"StringLiteral\"> {\n      // import ... from %%STRING%%;\n\n      return (\n        this.parsePlaceholder(\"StringLiteral\") || super.parseImportSource()\n      );\n    }\n\n    // Throws if the current token and the prev one are separated by a space.\n    assertNoSpace(): void {\n      if (this.state.start > this.state.lastTokEndLoc.index) {\n        this.raise(PlaceholderErrors.UnexpectedSpace, this.state.lastTokEndLoc);\n      }\n    }\n  };\n", "import type Parser from \"../parser/index.ts\";\nimport { tokenIsIdentifier, tt } from \"../tokenizer/types.ts\";\nimport type * as N from \"../types.ts\";\nimport type { ExpressionErrors } from \"../parser/util.ts\";\n\nexport default (superClass: typeof Parser) =>\n  class V8IntrinsicMixin extends superClass implements Parser {\n    parseV8Intrinsic(): N.Expression {\n      if (this.match(tt.modulo)) {\n        const v8IntrinsicStartLoc = this.state.startLoc;\n        // let the `loc` of Identifier starts from `%`\n        const node = this.startNode<N.Identifier>();\n        this.next(); // eat '%'\n        if (tokenIsIdentifier(this.state.type)) {\n          const name = this.parseIdentifierName();\n          const identifier = this.createIdentifier(node, name);\n          // @ts-expect-error: avoid mutating AST types\n          identifier.type = \"V8IntrinsicIdentifier\";\n          if (this.match(tt.parenL)) {\n            return identifier;\n          }\n        }\n        this.unexpected(v8IntrinsicStartLoc);\n      }\n    }\n\n    /* ============================================================ *\n     * parser/expression.js                                         *\n     * ============================================================ */\n\n    parseExprAtom(refExpressionErrors?: ExpressionErrors | null): N.Expression {\n      return (\n        this.parseV8Intrinsic() || super.parseExprAtom(refExpressionErrors)\n      );\n    }\n  };\n", "import type Parser from \"./parser/index.ts\";\nimport type { PluginConfig } from \"./typings.ts\";\n\nexport type Plugin = PluginConfig;\n\nexport type PluginList = PluginConfig[];\n\nexport type MixinPlugin = (\n  superClass: new (...args: any) => Parser,\n) => new (...args: any) => Parser;\n\nconst PIPELINE_PROPOSALS = [\"minimal\", \"fsharp\", \"hack\", \"smart\"];\nconst TOPIC_TOKENS = [\"^^\", \"@@\", \"^\", \"%\", \"#\"];\n\nexport function validatePlugins(pluginsMap: Map<string, any>) {\n  if (pluginsMap.has(\"decorators\")) {\n    if (pluginsMap.has(\"decorators-legacy\")) {\n      throw new Error(\n        \"Cannot use the decorators and decorators-legacy plugin together\",\n      );\n    }\n\n    const decoratorsBeforeExport =\n      pluginsMap.get(\"decorators\").decoratorsBeforeExport;\n    if (\n      decoratorsBeforeExport != null &&\n      typeof decoratorsBeforeExport !== \"boolean\"\n    ) {\n      throw new Error(\n        \"'decoratorsBeforeExport' must be a boolean, if specified.\",\n      );\n    }\n\n    const allowCallParenthesized =\n      pluginsMap.get(\"decorators\").allowCallParenthesized;\n    if (\n      allowCallParenthesized != null &&\n      typeof allowCallParenthesized !== \"boolean\"\n    ) {\n      throw new Error(\"'allowCallParenthesized' must be a boolean.\");\n    }\n  }\n\n  if (pluginsMap.has(\"flow\") && pluginsMap.has(\"typescript\")) {\n    throw new Error(\"Cannot combine flow and typescript plugins.\");\n  }\n\n  if (pluginsMap.has(\"placeholders\") && pluginsMap.has(\"v8intrinsic\")) {\n    throw new Error(\"Cannot combine placeholders and v8intrinsic plugins.\");\n  }\n\n  if (pluginsMap.has(\"pipelineOperator\")) {\n    const proposal = pluginsMap.get(\"pipelineOperator\").proposal;\n\n    if (!PIPELINE_PROPOSALS.includes(proposal)) {\n      const proposalList = PIPELINE_PROPOSALS.map(p => `\"${p}\"`).join(\", \");\n      throw new Error(\n        `\"pipelineOperator\" requires \"proposal\" option whose value must be one of: ${proposalList}.`,\n      );\n    }\n\n    const tupleSyntaxIsHash = process.env.BABEL_8_BREAKING\n      ? pluginsMap.has(\"recordAndTuple\")\n      : pluginsMap.get(\"recordAndTuple\")?.syntaxType === \"hash\";\n\n    if (proposal === \"hack\") {\n      if (pluginsMap.has(\"placeholders\")) {\n        throw new Error(\n          \"Cannot combine placeholders plugin and Hack-style pipes.\",\n        );\n      }\n\n      if (pluginsMap.has(\"v8intrinsic\")) {\n        throw new Error(\n          \"Cannot combine v8intrinsic plugin and Hack-style pipes.\",\n        );\n      }\n\n      const topicToken = pluginsMap.get(\"pipelineOperator\").topicToken;\n\n      if (!TOPIC_TOKENS.includes(topicToken)) {\n        const tokenList = TOPIC_TOKENS.map(t => `\"${t}\"`).join(\", \");\n\n        throw new Error(\n          `\"pipelineOperator\" in \"proposal\": \"hack\" mode also requires a \"topicToken\" option whose value must be one of: ${tokenList}.`,\n        );\n      }\n\n      if (topicToken === \"#\" && tupleSyntaxIsHash) {\n        throw new Error(\n          `Plugin conflict between \\`[\"pipelineOperator\", { proposal: \"hack\", topicToken: \"#\" }]\\` and \\`${JSON.stringify([\"recordAndTuple\", pluginsMap.get(\"recordAndTuple\")])}\\`.`,\n        );\n      }\n    } else if (proposal === \"smart\" && tupleSyntaxIsHash) {\n      throw new Error(\n        `Plugin conflict between \\`[\"pipelineOperator\", { proposal: \"smart\" }]\\` and \\`${JSON.stringify([\"recordAndTuple\", pluginsMap.get(\"recordAndTuple\")])}\\`.`,\n      );\n    }\n  }\n\n  if (pluginsMap.has(\"moduleAttributes\")) {\n    if (process.env.BABEL_8_BREAKING) {\n      throw new Error(\n        \"`moduleAttributes` has been removed in Babel 8, please use `importAttributes` parser plugin, or `@babel/plugin-syntax-import-attributes`.\",\n      );\n    } else {\n      if (\n        pluginsMap.has(\"importAttributes\") ||\n        pluginsMap.has(\"importAssertions\")\n      ) {\n        throw new Error(\n          \"Cannot combine importAssertions, importAttributes and moduleAttributes plugins.\",\n        );\n      }\n      const moduleAttributesVersionPluginOption =\n        pluginsMap.get(\"moduleAttributes\").version;\n      if (moduleAttributesVersionPluginOption !== \"may-2020\") {\n        throw new Error(\n          \"The 'moduleAttributes' plugin requires a 'version' option,\" +\n            \" representing the last proposal update. Currently, the\" +\n            \" only supported value is 'may-2020'.\",\n        );\n      }\n    }\n  }\n  if (\n    pluginsMap.has(\"importAttributes\") &&\n    pluginsMap.has(\"importAssertions\")\n  ) {\n    throw new Error(\n      \"Cannot combine importAssertions and importAttributes plugins.\",\n    );\n  }\n\n  if (pluginsMap.has(\"recordAndTuple\")) {\n    const syntaxType = pluginsMap.get(\"recordAndTuple\").syntaxType;\n    if (syntaxType != null) {\n      if (process.env.BABEL_8_BREAKING) {\n        if (syntaxType === \"hash\") {\n          throw new Error(\n            'The syntaxType option is no longer required in Babel 8. You can safely remove { syntaxType: \"hash\" } from the recordAndTuple config.',\n          );\n        } else {\n          throw new Error(\n            'The syntaxType option is no longer required in Babel 8. Please remove { syntaxType: \"bar\" } from the recordAndTuple config and migrate to the hash syntax #{} and #[].',\n          );\n        }\n      } else {\n        const RECORD_AND_TUPLE_SYNTAX_TYPES = [\"hash\", \"bar\"];\n        if (!RECORD_AND_TUPLE_SYNTAX_TYPES.includes(syntaxType)) {\n          throw new Error(\n            \"The 'syntaxType' option of the 'recordAndTuple' plugin must be one of: \" +\n              RECORD_AND_TUPLE_SYNTAX_TYPES.map(p => `'${p}'`).join(\", \"),\n          );\n        }\n      }\n    }\n  }\n\n  if (\n    pluginsMap.has(\"asyncDoExpressions\") &&\n    !pluginsMap.has(\"doExpressions\")\n  ) {\n    const error = new Error(\n      \"'asyncDoExpressions' requires 'doExpressions', please add 'doExpressions' to parser plugins.\",\n    );\n    // @ts-expect-error so @babel/core can provide better error message\n    error.missingPlugins = \"doExpressions\";\n    throw error;\n  }\n\n  if (\n    pluginsMap.has(\"optionalChainingAssign\") &&\n    pluginsMap.get(\"optionalChainingAssign\").version !== \"2023-07\"\n  ) {\n    throw new Error(\n      \"The 'optionalChainingAssign' plugin requires a 'version' option,\" +\n        \" representing the last proposal update. Currently, the\" +\n        \" only supported value is '2023-07'.\",\n    );\n  }\n}\n\n// These plugins are defined using a mixin which extends the parser class.\n\nimport estree from \"./plugins/estree.ts\";\nimport flow from \"./plugins/flow/index.ts\";\nimport jsx from \"./plugins/jsx/index.ts\";\nimport typescript from \"./plugins/typescript/index.ts\";\nimport placeholders from \"./plugins/placeholders.ts\";\nimport v8intrinsic from \"./plugins/v8intrinsic.ts\";\n\n// NOTE: order is important. estree must come first; placeholders must come last.\nexport const mixinPlugins = {\n  estree,\n  jsx,\n  flow,\n  typescript,\n  v8intrinsic,\n  placeholders,\n};\n\nexport const mixinPluginNames = Object.keys(mixinPlugins) as ReadonlyArray<\n  \"estree\" | \"jsx\" | \"flow\" | \"typescript\" | \"v8intrinsic\" | \"placeholders\"\n>;\n", "import type { PluginList } from \"./plugin-utils.ts\";\n\n// A second optional argument can be given to further configure\n// the parser process. These options are recognized:\n\nexport type SourceType = \"script\" | \"module\" | \"unambiguous\";\n\nexport interface Options {\n  sourceType?: SourceType;\n  sourceFilename?: string;\n  startColumn?: number;\n  startLine?: number;\n  allowAwaitOutsideFunction?: boolean;\n  allowReturnOutsideFunction?: boolean;\n  allowNewTargetOutsideFunction?: boolean;\n  allowImportExportEverywhere?: boolean;\n  allowSuperOutsideMethod?: boolean;\n  allowUndeclaredExports?: boolean;\n  plugins?: PluginList;\n  strictMode?: boolean | undefined | null;\n  ranges?: boolean;\n  tokens?: boolean;\n  createImportExpressions?: boolean;\n  createParenthesizedExpressions?: boolean;\n  errorRecovery?: boolean;\n  attachComment?: boolean;\n  annexB?: boolean;\n}\n\ntype OptionsWithDefaults = { [P in keyof Options]-?: Options[P] };\n\nexport const defaultOptions: OptionsWithDefaults = {\n  // Source type (\"script\" or \"module\") for different semantics\n  sourceType: \"script\",\n  // Source filename.\n  sourceFilename: undefined,\n  // Column (0-based) from which to start counting source. Useful for\n  // integration with other tools.\n  startColumn: 0,\n  // Line (1-based) from which to start counting source. Useful for\n  // integration with other tools.\n  startLine: 1,\n  // When enabled, await at the top level is not considered an\n  // error.\n  allowAwaitOutsideFunction: false,\n  // When enabled, a return at the top level is not considered an\n  // error.\n  allowReturnOutsideFunction: false,\n  // When enabled, new.target outside a function or class is not\n  // considered an error.\n  allowNewTargetOutsideFunction: false,\n  // When enabled, import/export statements are not constrained to\n  // appearing at the top of the program.\n  allowImportExportEverywhere: false,\n  // TODO\n  allowSuperOutsideMethod: false,\n  // When enabled, export statements can reference undeclared variables.\n  allowUndeclaredExports: false,\n  // An array of plugins to enable\n  plugins: [],\n  // TODO\n  strictMode: null,\n  // Nodes have their start and end characters offsets recorded in\n  // `start` and `end` properties (directly on the node, rather than\n  // the `loc` object, which holds line/column data. To also add a\n  // [semi-standardized][range] `range` property holding a `[start,\n  // end]` array with the same numbers, set the `ranges` option to\n  // `true`.\n  //\n  // [range]: https://bugzilla.mozilla.org/show_bug.cgi?id=745678\n  ranges: false,\n  // Adds all parsed tokens to a `tokens` property on the `File` node\n  tokens: false,\n  // Whether to create ImportExpression AST nodes (if false\n  // `import(foo)` will be parsed as CallExpression(Import, [Identifier(foo)])\n  createImportExpressions: process.env.BABEL_8_BREAKING ? true : false,\n  // Whether to create ParenthesizedExpression AST nodes (if false\n  // the parser sets extra.parenthesized on the expression nodes instead).\n  createParenthesizedExpressions: false,\n  // When enabled, errors are attached to the AST instead of being directly thrown.\n  // Some errors will still throw, because @babel/parser can't always recover.\n  errorRecovery: false,\n  // When enabled, comments will be attached to adjacent AST nodes as one of\n  // `leadingComments`, `trailingComments` and `innerComments`. The comment attachment\n  // is vital to preserve comments after transform. If you don't print AST back,\n  // consider set this option to `false` for performance\n  attachComment: true,\n  // When enabled, the parser will support Annex B syntax.\n  // https://tc39.es/ecma262/#sec-additional-ecmascript-features-for-web-browsers\n  annexB: true,\n};\n\n// Interpret and default an options object\n\nexport function getOptions(opts?: Options | null): OptionsWithDefaults {\n  if (opts == null) {\n    return { ...defaultOptions };\n  }\n  if (opts.annexB != null && opts.annexB !== false) {\n    throw new Error(\"The `annexB` option can only be set to `false`.\");\n  }\n\n  const options: any = {};\n  for (const key of Object.keys(defaultOptions) as (keyof Options)[]) {\n    options[key] = opts[key] ?? defaultOptions[key];\n  }\n  return options;\n}\n", "// A recursive descent parser operates by defining functions for all\n// syntactic elements, and recursively calling those, each function\n// advancing the input stream and returning an AST node. Precedence\n// of constructs (for example, the fact that `!x[1]` means `!(x[1])`\n// instead of `(!x)[1]` is handled by the fact that the parser\n// function that parses unary prefix operators is called first, and\n// in turn calls the function that parses `[]` subscripts \u2014 that\n// way, it'll receive the node for `x[1]` already parsed, and wraps\n// *that* in the unary operator node.\n//\n// Acorn uses an [operator precedence parser][opp] to handle binary\n// operator precedence, because it is much more compact than using\n// the technique outlined above, which uses different, nesting\n// functions to specify precedence, for all of the ten binary\n// precedence levels that JavaScript defines.\n//\n// [opp]: http://en.wikipedia.org/wiki/Operator-precedence_parser\n\nimport {\n  tokenCanStartExpression,\n  tokenIsAssignment,\n  tokenIsIdentifier,\n  tokenIsKeywordOrIdentifier,\n  tokenIsOperator,\n  tokenIsPostfix,\n  tokenIsPrefix,\n  tokenIsRightAssociative,\n  tokenIsTemplate,\n  tokenKeywordOrIdentifierIsKeyword,\n  tokenLabelName,\n  tokenOperatorPrecedence,\n  tt,\n  type TokenType,\n} from \"../tokenizer/types.ts\";\nimport type * as N from \"../types.ts\";\nimport LValParser from \"./lval.ts\";\nimport {\n  isKeyword,\n  isReservedWord,\n  isStrictReservedWord,\n  isStrictBindReservedWord,\n  isIdentifierStart,\n  canBeReservedWord,\n} from \"../util/identifier.ts\";\nimport {\n  type Position,\n  createPositionWithColumnOffset,\n} from \"../util/location.ts\";\nimport * as charCodes from \"charcodes\";\nimport { ScopeFlag, BindingFlag } from \"../util/scopeflags.ts\";\nimport { ExpressionErrors } from \"./util.ts\";\nimport { ParamKind, functionFlags } from \"../util/production-parameter.ts\";\nimport {\n  newArrowHeadScope,\n  newAsyncArrowScope,\n  newExpressionScope,\n} from \"../util/expression-scope.ts\";\nimport { Errors, type ParseError } from \"../parse-error.ts\";\nimport {\n  UnparenthesizedPipeBodyDescriptions,\n  type UnparenthesizedPipeBodyTypes,\n} from \"../parse-error/pipeline-operator-errors.ts\";\nimport { setInnerComments } from \"./comments.ts\";\nimport { cloneIdentifier, type Undone } from \"./node.ts\";\nimport type Parser from \"./index.ts\";\n\nimport type { SourceType } from \"../options.ts\";\n\nexport default abstract class ExpressionParser extends LValParser {\n  // Forward-declaration: defined in statement.js\n  abstract parseBlock(\n    allowDirectives?: boolean,\n    createNewLexicalScope?: boolean,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): N.BlockStatement;\n  abstract parseClass(\n    node: N.Class,\n    isStatement: boolean,\n    optionalId?: boolean,\n  ): N.Class;\n  abstract parseDecorators(allowExport?: boolean): void;\n  abstract parseFunction<T extends N.NormalFunction>(\n    node: T,\n    statement?: number,\n    allowExpressionBody?: boolean,\n    isAsync?: boolean,\n  ): T;\n  abstract parseFunctionParams(node: N.Function, isConstructor?: boolean): void;\n  abstract parseBlockOrModuleBlockBody(\n    body: N.Statement[],\n    directives: N.Directive[] | null | undefined,\n    topLevel: boolean,\n    end: TokenType,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): void;\n  abstract parseProgram(\n    program: N.Program,\n    end: TokenType,\n    sourceType?: SourceType,\n  ): N.Program;\n\n  // For object literal, check if property __proto__ has been used more than once.\n  // If the expression is a destructuring assignment, then __proto__ may appear\n  // multiple times. Otherwise, __proto__ is a duplicated key.\n\n  // For record expression, check if property __proto__ exists\n\n  checkProto(\n    prop: N.ObjectMember | N.SpreadElement,\n    isRecord: boolean | undefined | null,\n    protoRef: {\n      used: boolean;\n    },\n    refExpressionErrors?: ExpressionErrors | null,\n  ): void {\n    if (\n      prop.type === \"SpreadElement\" ||\n      this.isObjectMethod(prop) ||\n      prop.computed ||\n      prop.shorthand\n    ) {\n      return;\n    }\n\n    const key = prop.key as\n      | N.Identifier\n      | N.StringLiteral\n      | N.NumericLiteral\n      | N.BigIntLiteral;\n    // It is either an Identifier or a String/NumericLiteral\n    const name = key.type === \"Identifier\" ? key.name : key.value;\n\n    if (name === \"__proto__\") {\n      if (isRecord) {\n        this.raise(Errors.RecordNoProto, key);\n        return;\n      }\n      if (protoRef.used) {\n        if (refExpressionErrors) {\n          // Store the first redefinition's position, otherwise ignore because\n          // we are parsing ambiguous pattern\n          if (refExpressionErrors.doubleProtoLoc === null) {\n            refExpressionErrors.doubleProtoLoc = key.loc.start;\n          }\n        } else {\n          this.raise(Errors.DuplicateProto, key);\n        }\n      }\n\n      protoRef.used = true;\n    }\n  }\n\n  shouldExitDescending(\n    expr: N.Expression | N.PrivateName,\n    potentialArrowAt: number,\n  ): expr is N.ArrowFunctionExpression {\n    return (\n      expr.type === \"ArrowFunctionExpression\" && expr.start === potentialArrowAt\n    );\n  }\n\n  // Convenience method to parse an Expression only\n  getExpression(this: Parser): N.Expression & N.ParserOutput {\n    this.enterInitialScopes();\n    this.nextToken();\n    const expr = this.parseExpression() as N.Expression & N.ParserOutput;\n    if (!this.match(tt.eof)) {\n      this.unexpected();\n    }\n    // Unlike parseTopLevel, we need to drain remaining commentStacks\n    // because the top level node is _not_ Program.\n    this.finalizeRemainingComments();\n    expr.comments = this.comments;\n    expr.errors = this.state.errors;\n    if (this.options.tokens) {\n      expr.tokens = this.tokens;\n    }\n    return expr;\n  }\n\n  // ### Expression parsing\n\n  // These nest, from the most general expression type at the top to\n  // 'atomic', nondivisible expression types at the bottom. Most of\n  // the functions will simply let the function (s) below them parse,\n  // and, *if* the syntactic construct they handle is present, wrap\n  // the AST node that the inner parser gave them in another node.\n\n  // Parse a full expression.\n  // - `disallowIn`\n  //   is used to forbid the `in` operator (in for loops initialization expressions)\n  //   When `disallowIn` is true, the production parameter [In] is not present.\n\n  // - `refExpressionErrors `\n  //   provides reference for storing '=' operator inside shorthand\n  //   property assignment in contexts where both object expression\n  //   and object pattern might appear (so it's possible to raise\n  //   delayed syntax error at correct position).\n\n  parseExpression(\n    this: Parser,\n    disallowIn?: boolean,\n    refExpressionErrors?: ExpressionErrors,\n  ): N.Expression {\n    if (disallowIn) {\n      return this.disallowInAnd(() =>\n        this.parseExpressionBase(refExpressionErrors),\n      );\n    }\n    return this.allowInAnd(() => this.parseExpressionBase(refExpressionErrors));\n  }\n\n  // https://tc39.es/ecma262/#prod-Expression\n  parseExpressionBase(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n    const expr = this.parseMaybeAssign(refExpressionErrors);\n    if (this.match(tt.comma)) {\n      const node = this.startNodeAt<N.SequenceExpression>(startLoc);\n      node.expressions = [expr];\n      while (this.eat(tt.comma)) {\n        node.expressions.push(this.parseMaybeAssign(refExpressionErrors));\n      }\n      this.toReferencedList(node.expressions);\n      return this.finishNode(node, \"SequenceExpression\");\n    }\n    return expr;\n  }\n\n  // Set [~In] parameter for assignment expression\n  parseMaybeAssignDisallowIn(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n    afterLeftParse?: Function,\n  ) {\n    return this.disallowInAnd(() =>\n      this.parseMaybeAssign(refExpressionErrors, afterLeftParse),\n    );\n  }\n\n  // Set [+In] parameter for assignment expression\n  parseMaybeAssignAllowIn(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n    afterLeftParse?: Function,\n  ) {\n    return this.allowInAnd(() =>\n      this.parseMaybeAssign(refExpressionErrors, afterLeftParse),\n    );\n  }\n\n  // This method is only used by\n  // the typescript and flow plugins.\n  setOptionalParametersError(\n    refExpressionErrors: ExpressionErrors,\n    resultError?: ParseError<any>,\n  ) {\n    refExpressionErrors.optionalParametersLoc =\n      resultError?.loc ?? this.state.startLoc;\n  }\n\n  // Parse an assignment expression. This includes applications of\n  // operators like `+=`.\n  // https://tc39.es/ecma262/#prod-AssignmentExpression\n  parseMaybeAssign(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n    afterLeftParse?: Function,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n    if (this.isContextual(tt._yield)) {\n      if (this.prodParam.hasYield) {\n        let left = this.parseYield();\n        if (afterLeftParse) {\n          left = afterLeftParse.call(this, left, startLoc);\n        }\n        return left;\n      }\n    }\n\n    let ownExpressionErrors;\n    if (refExpressionErrors) {\n      ownExpressionErrors = false;\n    } else {\n      refExpressionErrors = new ExpressionErrors();\n      ownExpressionErrors = true;\n    }\n    const { type } = this.state;\n\n    if (type === tt.parenL || tokenIsIdentifier(type)) {\n      this.state.potentialArrowAt = this.state.start;\n    }\n\n    let left = this.parseMaybeConditional(refExpressionErrors);\n    if (afterLeftParse) {\n      left = afterLeftParse.call(this, left, startLoc);\n    }\n    if (tokenIsAssignment(this.state.type)) {\n      const node = this.startNodeAt<N.AssignmentExpression>(startLoc);\n      const operator = this.state.value;\n      node.operator = operator;\n\n      if (this.match(tt.eq)) {\n        this.toAssignable(left, /* isLHS */ true);\n        node.left = left;\n\n        const startIndex = startLoc.index;\n        if (\n          refExpressionErrors.doubleProtoLoc != null &&\n          refExpressionErrors.doubleProtoLoc.index >= startIndex\n        ) {\n          refExpressionErrors.doubleProtoLoc = null; // reset because double __proto__ is valid in assignment expression\n        }\n        if (\n          refExpressionErrors.shorthandAssignLoc != null &&\n          refExpressionErrors.shorthandAssignLoc.index >= startIndex\n        ) {\n          refExpressionErrors.shorthandAssignLoc = null; // reset because shorthand default was used correctly\n        }\n        if (\n          refExpressionErrors.privateKeyLoc != null &&\n          refExpressionErrors.privateKeyLoc.index >= startIndex\n        ) {\n          this.checkDestructuringPrivate(refExpressionErrors);\n          refExpressionErrors.privateKeyLoc = null; // reset because `({ #x: x })` is an assignable pattern\n        }\n      } else {\n        node.left = left as unknown as N.Assignable; // checked a few lines further down\n      }\n\n      this.next();\n      node.right = this.parseMaybeAssign();\n      this.checkLVal(left, this.finishNode(node, \"AssignmentExpression\"));\n      // @ts-expect-error todo(flow->ts) improve node types\n      return node;\n    } else if (ownExpressionErrors) {\n      this.checkExpressionErrors(refExpressionErrors, true);\n    }\n\n    return left;\n  }\n\n  // Parse a ternary conditional (`?:`) operator.\n  // https://tc39.es/ecma262/#prod-ConditionalExpression\n\n  parseMaybeConditional(\n    this: Parser,\n    refExpressionErrors: ExpressionErrors,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprOps(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseConditional(expr, startLoc, refExpressionErrors);\n  }\n\n  parseConditional(\n    this: Parser,\n    expr: N.Expression,\n    startLoc: Position,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.Expression {\n    if (this.eat(tt.question)) {\n      const node = this.startNodeAt<N.ConditionalExpression>(startLoc);\n      node.test = expr;\n      node.consequent = this.parseMaybeAssignAllowIn();\n      this.expect(tt.colon);\n      node.alternate = this.parseMaybeAssign();\n      return this.finishNode(node, \"ConditionalExpression\");\n    }\n    return expr;\n  }\n\n  parseMaybeUnaryOrPrivate(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors,\n  ): N.Expression | N.PrivateName {\n    return this.match(tt.privateName)\n      ? this.parsePrivateName()\n      : this.parseMaybeUnary(refExpressionErrors);\n  }\n\n  // Start the precedence parser.\n  // https://tc39.es/ecma262/#prod-ShortCircuitExpression\n\n  parseExprOps(\n    this: Parser,\n    refExpressionErrors: ExpressionErrors,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseMaybeUnaryOrPrivate(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseExprOp(expr, startLoc, -1);\n  }\n\n  // Parse binary operators with the operator precedence parsing\n  // algorithm. `left` is the left-hand side of the operator.\n  // `minPrec` provides context that allows the function to stop and\n  // defer further parser to one of its callers when it encounters an\n  // operator that has a lower precedence than the set it is parsing.\n\n  parseExprOp(\n    this: Parser,\n    left: N.Expression | N.PrivateName,\n    leftStartLoc: Position,\n    minPrec: number,\n  ): N.Expression {\n    if (this.isPrivateName(left)) {\n      // https://tc39.es/ecma262/#prod-RelationalExpression\n      // RelationalExpression [In, Yield, Await]\n      //   [+In] PrivateIdentifier in ShiftExpression[?Yield, ?Await]\n\n      const value = this.getPrivateNameSV(left);\n\n      if (\n        minPrec >= tokenOperatorPrecedence(tt._in) ||\n        !this.prodParam.hasIn ||\n        !this.match(tt._in)\n      ) {\n        this.raise(Errors.PrivateInExpectedIn, left, {\n          identifierName: value,\n        });\n      }\n\n      this.classScope.usePrivateName(value, left.loc.start);\n    }\n\n    const op = this.state.type;\n    if (tokenIsOperator(op) && (this.prodParam.hasIn || !this.match(tt._in))) {\n      let prec = tokenOperatorPrecedence(op);\n      if (prec > minPrec) {\n        if (op === tt.pipeline) {\n          this.expectPlugin(\"pipelineOperator\");\n          if (this.state.inFSharpPipelineDirectBody) {\n            // PrivateName must be followed by `in`, but we have `|>`\n            return left as N.Expression;\n          }\n          this.checkPipelineAtInfixOperator(left as N.Expression, leftStartLoc);\n        }\n        const node = this.startNodeAt<N.LogicalExpression | N.BinaryExpression>(\n          leftStartLoc,\n        );\n        node.left = left;\n        node.operator = this.state.value;\n\n        const logical = op === tt.logicalOR || op === tt.logicalAND;\n        const coalesce = op === tt.nullishCoalescing;\n\n        if (coalesce) {\n          // Handle the precedence of `tt.coalesce` as equal to the range of logical expressions.\n          // In other words, `node.right` shouldn't contain logical expressions in order to check the mixed error.\n          prec = tokenOperatorPrecedence(tt.logicalAND);\n        }\n\n        this.next();\n\n        if (\n          op === tt.pipeline &&\n          this.hasPlugin([\"pipelineOperator\", { proposal: \"minimal\" }])\n        ) {\n          if (this.state.type === tt._await && this.prodParam.hasAwait) {\n            throw this.raise(\n              Errors.UnexpectedAwaitAfterPipelineBody,\n              this.state.startLoc,\n            );\n          }\n        }\n\n        node.right = this.parseExprOpRightExpr(op, prec);\n        const finishedNode = this.finishNode(\n          node,\n          logical || coalesce ? \"LogicalExpression\" : \"BinaryExpression\",\n        );\n        /* this check is for all ?? operators\n         * a ?? b && c for this example\n         * when op is coalesce and nextOp is logical (&&), throw at the pos of nextOp that it can not be mixed.\n         * Symmetrically it also throws when op is logical and nextOp is coalesce\n         */\n        const nextOp = this.state.type;\n        if (\n          (coalesce && (nextOp === tt.logicalOR || nextOp === tt.logicalAND)) ||\n          (logical && nextOp === tt.nullishCoalescing)\n        ) {\n          throw this.raise(\n            Errors.MixingCoalesceWithLogical,\n            this.state.startLoc,\n          );\n        }\n\n        return this.parseExprOp(finishedNode, leftStartLoc, minPrec);\n      }\n    }\n    // PrivateName is followed by `in` and handled by the previous if statement\n    return left as N.Expression;\n  }\n\n  // Helper function for `parseExprOp`. Parse the right-hand side of binary-\n  // operator expressions, then apply any operator-specific functions.\n\n  parseExprOpRightExpr(\n    this: Parser,\n    op: TokenType,\n    prec: number,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n    switch (op) {\n      case tt.pipeline:\n        switch (this.getPluginOption(\"pipelineOperator\", \"proposal\")) {\n          case \"hack\":\n            return this.withTopicBindingContext(() => {\n              return this.parseHackPipeBody();\n            });\n\n          case \"smart\":\n            return this.withTopicBindingContext(() => {\n              if (this.prodParam.hasYield && this.isContextual(tt._yield)) {\n                throw this.raise(Errors.PipeBodyIsTighter, this.state.startLoc);\n              }\n              return this.parseSmartPipelineBodyInStyle(\n                this.parseExprOpBaseRightExpr(op, prec),\n                startLoc,\n              );\n            });\n\n          case \"fsharp\":\n            return this.withSoloAwaitPermittingContext(() => {\n              return this.parseFSharpPipelineBody(prec);\n            });\n        }\n\n      // Falls through.\n      default:\n        return this.parseExprOpBaseRightExpr(op, prec);\n    }\n  }\n\n  // Helper function for `parseExprOpRightExpr`. Parse the right-hand side of\n  // binary-operator expressions without applying any operator-specific functions.\n\n  parseExprOpBaseRightExpr(\n    this: Parser,\n    op: TokenType,\n    prec: number,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n\n    return this.parseExprOp(\n      this.parseMaybeUnaryOrPrivate(),\n      startLoc,\n      tokenIsRightAssociative(op) ? prec - 1 : prec,\n    );\n  }\n\n  parseHackPipeBody(this: Parser): N.Expression {\n    const { startLoc } = this.state;\n    const body = this.parseMaybeAssign();\n    const requiredParentheses = UnparenthesizedPipeBodyDescriptions.has(\n      // @ts-expect-error TS2345: Argument of type 'string' is not assignable to parameter of type '\"ArrowFunctionExpression\" | \"YieldExpression\" | \"AssignmentExpression\" | \"ConditionalExpression\"'.\n      body.type,\n    );\n\n    // TODO: Check how to handle type casts in Flow and TS once they are supported\n    if (requiredParentheses && !body.extra?.parenthesized) {\n      this.raise(Errors.PipeUnparenthesizedBody, startLoc, {\n        type: body.type as UnparenthesizedPipeBodyTypes,\n      });\n    }\n    if (!this.topicReferenceWasUsedInCurrentContext()) {\n      // A Hack pipe body must use the topic reference at least once.\n      this.raise(Errors.PipeTopicUnused, startLoc);\n    }\n\n    return body;\n  }\n\n  checkExponentialAfterUnary(\n    node: N.AwaitExpression | Undone<N.UnaryExpression>,\n  ) {\n    if (this.match(tt.exponent)) {\n      this.raise(Errors.UnexpectedTokenUnaryExponentiation, node.argument);\n    }\n  }\n\n  // Parse unary operators, both prefix and postfix.\n  // https://tc39.es/ecma262/#prod-UnaryExpression\n  parseMaybeUnary(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n    sawUnary?: boolean,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n    const isAwait = this.isContextual(tt._await);\n\n    if (isAwait && this.recordAwaitIfAllowed()) {\n      this.next();\n      const expr = this.parseAwait(startLoc);\n      if (!sawUnary) this.checkExponentialAfterUnary(expr);\n      return expr;\n    }\n    const update = this.match(tt.incDec);\n    const node = this.startNode<N.UnaryExpression | N.UpdateExpression>();\n    if (tokenIsPrefix(this.state.type)) {\n      node.operator = this.state.value;\n      node.prefix = true;\n\n      if (this.match(tt._throw)) {\n        this.expectPlugin(\"throwExpressions\");\n      }\n      const isDelete = this.match(tt._delete);\n      this.next();\n\n      node.argument = this.parseMaybeUnary(null, true);\n\n      this.checkExpressionErrors(refExpressionErrors, true);\n\n      if (this.state.strict && isDelete) {\n        const arg = node.argument;\n\n        if (arg.type === \"Identifier\") {\n          this.raise(Errors.StrictDelete, node);\n        } else if (this.hasPropertyAsPrivateName(arg)) {\n          this.raise(Errors.DeletePrivateField, node);\n        }\n      }\n\n      if (!update) {\n        if (!sawUnary) {\n          this.checkExponentialAfterUnary(node as Undone<N.UnaryExpression>);\n        }\n        return this.finishNode(node, \"UnaryExpression\");\n      }\n    }\n\n    const expr = this.parseUpdate(\n      // @ts-expect-error using \"Undone\" node as \"done\"\n      node,\n      update,\n      refExpressionErrors,\n    );\n\n    if (isAwait) {\n      const { type } = this.state;\n      const startsExpr = this.hasPlugin(\"v8intrinsic\")\n        ? tokenCanStartExpression(type)\n        : tokenCanStartExpression(type) && !this.match(tt.modulo);\n      if (startsExpr && !this.isAmbiguousAwait()) {\n        this.raiseOverwrite(Errors.AwaitNotInAsyncContext, startLoc);\n        return this.parseAwait(startLoc);\n      }\n    }\n\n    return expr;\n  }\n\n  // https://tc39.es/ecma262/#prod-UpdateExpression\n  parseUpdate(\n    this: Parser,\n    node: N.Expression,\n    update: boolean,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.Expression {\n    if (update) {\n      const updateExpressionNode = node as Undone<N.UpdateExpression>;\n      this.checkLVal(\n        updateExpressionNode.argument,\n        this.finishNode(updateExpressionNode, \"UpdateExpression\"),\n      );\n      return node;\n    }\n\n    const startLoc = this.state.startLoc;\n    let expr = this.parseExprSubscripts(refExpressionErrors);\n    if (this.checkExpressionErrors(refExpressionErrors, false)) return expr;\n    while (tokenIsPostfix(this.state.type) && !this.canInsertSemicolon()) {\n      const node = this.startNodeAt<N.UpdateExpression>(startLoc);\n      node.operator = this.state.value;\n      node.prefix = false;\n      node.argument = expr;\n      this.next();\n      this.checkLVal(expr, (expr = this.finishNode(node, \"UpdateExpression\")));\n    }\n    return expr;\n  }\n\n  // Parse call, dot, and `[]`-subscript expressions.\n  // https://tc39.es/ecma262/#prod-LeftHandSideExpression\n  parseExprSubscripts(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprAtom(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseSubscripts(expr, startLoc);\n  }\n\n  parseSubscripts(\n    this: Parser,\n    base: N.Expression,\n    startLoc: Position,\n    noCalls?: boolean | null,\n  ): N.Expression {\n    const state = {\n      optionalChainMember: false,\n      maybeAsyncArrow: this.atPossibleAsyncArrow(base),\n      stop: false,\n    };\n    do {\n      base = this.parseSubscript(base, startLoc, noCalls, state);\n\n      // After parsing a subscript, this isn't \"async\" for sure.\n      state.maybeAsyncArrow = false;\n    } while (!state.stop);\n    return base;\n  }\n\n  /**\n   * @param state Set 'state.stop = true' to indicate that we should stop parsing subscripts.\n   *   state.optionalChainMember to indicate that the member is currently in OptionalChain\n   */\n  parseSubscript(\n    this: Parser,\n    base: N.Expression,\n    startLoc: Position,\n    noCalls: boolean | undefined | null,\n    state: N.ParseSubscriptState,\n  ): N.Expression {\n    const { type } = this.state;\n    if (!noCalls && type === tt.doubleColon) {\n      return this.parseBind(base, startLoc, noCalls, state);\n    } else if (tokenIsTemplate(type)) {\n      return this.parseTaggedTemplateExpression(base, startLoc, state);\n    }\n\n    let optional = false;\n\n    if (type === tt.questionDot) {\n      if (noCalls) {\n        this.raise(Errors.OptionalChainingNoNew, this.state.startLoc);\n        if (this.lookaheadCharCode() === charCodes.leftParenthesis) {\n          // stop at `?.` when parsing `new a?.()`\n          state.stop = true;\n          return base;\n        }\n      }\n      state.optionalChainMember = optional = true;\n      this.next();\n    }\n\n    if (!noCalls && this.match(tt.parenL)) {\n      return this.parseCoverCallAndAsyncArrowHead(\n        base,\n        startLoc,\n        state,\n        optional,\n      );\n    } else {\n      const computed = this.eat(tt.bracketL);\n      if (computed || optional || this.eat(tt.dot)) {\n        return this.parseMember(base, startLoc, state, computed, optional);\n      } else {\n        state.stop = true;\n        return base;\n      }\n    }\n  }\n\n  // base[?Yield, ?Await] [ Expression[+In, ?Yield, ?Await] ]\n  // base[?Yield, ?Await] . IdentifierName\n  // base[?Yield, ?Await] . PrivateIdentifier\n  //   where `base` is one of CallExpression, MemberExpression and OptionalChain\n  parseMember(\n    this: Parser,\n    base: N.Expression,\n    startLoc: Position,\n    state: N.ParseSubscriptState,\n    computed: boolean,\n    optional: boolean,\n  ): N.OptionalMemberExpression | N.MemberExpression {\n    const node = this.startNodeAt<\n      N.OptionalMemberExpression | N.MemberExpression\n    >(startLoc);\n    node.object = base;\n    node.computed = computed;\n    if (computed) {\n      node.property = this.parseExpression();\n      this.expect(tt.bracketR);\n    } else if (this.match(tt.privateName)) {\n      if (base.type === \"Super\") {\n        this.raise(Errors.SuperPrivateField, startLoc);\n      }\n      this.classScope.usePrivateName(this.state.value, this.state.startLoc);\n      node.property = this.parsePrivateName();\n    } else {\n      node.property = this.parseIdentifier(true);\n    }\n\n    if (state.optionalChainMember) {\n      (node as N.OptionalMemberExpression).optional = optional;\n      return this.finishNode(node, \"OptionalMemberExpression\");\n    } else {\n      return this.finishNode(node, \"MemberExpression\");\n    }\n  }\n\n  // https://github.com/tc39/proposal-bind-operator#syntax\n  parseBind(\n    this: Parser,\n    base: N.Expression,\n    startLoc: Position,\n    noCalls: boolean | undefined | null,\n    state: N.ParseSubscriptState,\n  ): N.Expression {\n    const node = this.startNodeAt<N.BindExpression>(startLoc);\n    node.object = base;\n    this.next(); // eat '::'\n    node.callee = this.parseNoCallExpr();\n    state.stop = true;\n    return this.parseSubscripts(\n      this.finishNode(node, \"BindExpression\"),\n      startLoc,\n      noCalls,\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-CoverCallExpressionAndAsyncArrowHead\n  // CoverCallExpressionAndAsyncArrowHead\n  // CallExpression[?Yield, ?Await] Arguments[?Yield, ?Await]\n  // OptionalChain[?Yield, ?Await] Arguments[?Yield, ?Await]\n  parseCoverCallAndAsyncArrowHead(\n    this: Parser,\n    base: N.Expression,\n    startLoc: Position,\n    state: N.ParseSubscriptState,\n    optional: boolean,\n  ): N.Expression {\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    let refExpressionErrors: ExpressionErrors | null = null;\n\n    this.state.maybeInArrowParameters = true;\n    this.next(); // eat `(`\n\n    const node = this.startNodeAt<N.CallExpression | N.OptionalCallExpression>(\n      startLoc,\n    );\n    node.callee = base;\n    const { maybeAsyncArrow, optionalChainMember } = state;\n\n    if (maybeAsyncArrow) {\n      this.expressionScope.enter(newAsyncArrowScope());\n      refExpressionErrors = new ExpressionErrors();\n    }\n\n    if (optionalChainMember) {\n      // @ts-expect-error when optionalChainMember is true, node must be an optional call\n      node.optional = optional;\n    }\n\n    if (optional) {\n      node.arguments = this.parseCallExpressionArguments(tt.parenR);\n    } else {\n      node.arguments = this.parseCallExpressionArguments(\n        tt.parenR,\n        base.type === \"Import\",\n        base.type !== \"Super\",\n        // @ts-expect-error todo(flow->ts)\n        node,\n        refExpressionErrors,\n      );\n    }\n    let finishedNode:\n      | N.CallExpression\n      | N.OptionalCallExpression\n      | N.ArrowFunctionExpression = this.finishCallExpression(\n      node,\n      optionalChainMember,\n    );\n\n    if (maybeAsyncArrow && this.shouldParseAsyncArrow() && !optional) {\n      /*:: invariant(refExpressionErrors != null) */\n      state.stop = true;\n      this.checkDestructuringPrivate(refExpressionErrors);\n      this.expressionScope.validateAsPattern();\n      this.expressionScope.exit();\n      finishedNode = this.parseAsyncArrowFromCallExpression(\n        this.startNodeAt<N.ArrowFunctionExpression>(startLoc),\n        finishedNode as N.CallExpression,\n      );\n    } else {\n      if (maybeAsyncArrow) {\n        this.checkExpressionErrors(refExpressionErrors, true);\n        this.expressionScope.exit();\n      }\n      this.toReferencedArguments(finishedNode);\n    }\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n\n    return finishedNode;\n  }\n\n  toReferencedArguments(\n    node: N.CallExpression | N.OptionalCallExpression,\n    isParenthesizedExpr?: boolean,\n  ) {\n    this.toReferencedListDeep(node.arguments, isParenthesizedExpr);\n  }\n\n  // MemberExpression [?Yield, ?Await] TemplateLiteral[?Yield, ?Await, +Tagged]\n  // CallExpression [?Yield, ?Await] TemplateLiteral[?Yield, ?Await, +Tagged]\n  parseTaggedTemplateExpression(\n    this: Parser,\n    base: N.Expression,\n    startLoc: Position,\n    state: N.ParseSubscriptState,\n  ): N.TaggedTemplateExpression {\n    const node = this.startNodeAt<N.TaggedTemplateExpression>(startLoc);\n    node.tag = base;\n    node.quasi = this.parseTemplate(true);\n    if (state.optionalChainMember) {\n      this.raise(Errors.OptionalChainingNoTemplate, startLoc);\n    }\n    return this.finishNode(node, \"TaggedTemplateExpression\");\n  }\n\n  atPossibleAsyncArrow(base: N.Expression): boolean {\n    return (\n      base.type === \"Identifier\" &&\n      base.name === \"async\" &&\n      this.state.lastTokEndLoc.index === base.end &&\n      !this.canInsertSemicolon() &&\n      // check there are no escape sequences, such as \\u{61}sync\n      base.end - base.start === 5 &&\n      base.start === this.state.potentialArrowAt\n    );\n  }\n\n  expectImportAttributesPlugin() {\n    if (!this.hasPlugin(\"importAssertions\")) {\n      this.expectPlugin(\"importAttributes\");\n    }\n  }\n\n  finishCallExpression<T extends N.CallExpression | N.OptionalCallExpression>(\n    node: Undone<T>,\n    optional: boolean,\n  ): T {\n    if (node.callee.type === \"Import\") {\n      if (node.arguments.length === 2) {\n        if (process.env.BABEL_8_BREAKING) {\n          this.expectImportAttributesPlugin();\n        } else {\n          if (!this.hasPlugin(\"moduleAttributes\")) {\n            this.expectImportAttributesPlugin();\n          }\n        }\n      }\n      if (node.arguments.length === 0 || node.arguments.length > 2) {\n        this.raise(Errors.ImportCallArity, node, {\n          maxArgumentCount:\n            this.hasPlugin(\"importAttributes\") ||\n            this.hasPlugin(\"importAssertions\") ||\n            this.hasPlugin(\"moduleAttributes\")\n              ? 2\n              : 1,\n        });\n      } else {\n        for (const arg of node.arguments) {\n          if (arg.type === \"SpreadElement\") {\n            this.raise(Errors.ImportCallSpreadArgument, arg);\n          }\n        }\n      }\n    }\n    return this.finishNode(\n      node,\n      optional ? \"OptionalCallExpression\" : \"CallExpression\",\n    );\n  }\n\n  parseCallExpressionArguments(\n    this: Parser,\n    close: TokenType,\n    dynamicImport?: boolean,\n    allowPlaceholder?: boolean,\n    nodeForExtra?: N.Node | null,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): Array<N.Expression | undefined | null> {\n    const elts: N.Expression[] = [];\n    let first = true;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.match(close)) {\n          if (\n            dynamicImport &&\n            !this.hasPlugin(\"importAttributes\") &&\n            !this.hasPlugin(\"importAssertions\") &&\n            !this.hasPlugin(\"moduleAttributes\")\n          ) {\n            this.raise(\n              Errors.ImportCallArgumentTrailingComma,\n              this.state.lastTokStartLoc,\n            );\n          }\n          if (nodeForExtra) {\n            this.addTrailingCommaExtraToNode(nodeForExtra);\n          }\n          this.next();\n          break;\n        }\n      }\n\n      elts.push(\n        this.parseExprListItem(false, refExpressionErrors, allowPlaceholder),\n      );\n    }\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n\n    return elts;\n  }\n\n  shouldParseAsyncArrow(): boolean {\n    return this.match(tt.arrow) && !this.canInsertSemicolon();\n  }\n\n  parseAsyncArrowFromCallExpression(\n    this: Parser,\n    node: Undone<N.ArrowFunctionExpression>,\n    call: N.CallExpression,\n  ): N.ArrowFunctionExpression {\n    this.resetPreviousNodeTrailingComments(call);\n    this.expect(tt.arrow);\n    this.parseArrowExpression(\n      node,\n      call.arguments,\n      true,\n      call.extra?.trailingCommaLoc,\n    );\n    // mark inner comments of `async()` as inner comments of `async () =>`\n    if (call.innerComments) {\n      setInnerComments(node, call.innerComments);\n    }\n    // mark trailing comments of `async` to be inner comments\n    if (call.callee.trailingComments) {\n      setInnerComments(node, call.callee.trailingComments);\n    }\n    return node as N.ArrowFunctionExpression;\n  }\n\n  // Parse a no-call expression (like argument of `new` or `::` operators).\n  // https://tc39.es/ecma262/#prod-MemberExpression\n  parseNoCallExpr(this: Parser): N.Expression {\n    const startLoc = this.state.startLoc;\n    return this.parseSubscripts(this.parseExprAtom(), startLoc, true);\n  }\n\n  // Parse an atomic expression \u2014 either a single token that is an\n  // expression, an expression started by a keyword like `function` or\n  // `new`, or an expression wrapped in punctuation like `()`, `[]`,\n  // or `{}`.\n\n  // https://tc39.es/ecma262/#prod-PrimaryExpression\n  // https://tc39.es/ecma262/#prod-AsyncArrowFunction\n  // PrimaryExpression\n  // Super\n  // Import\n  // AsyncArrowFunction\n\n  parseExprAtom(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.Expression {\n    let node;\n    let decorators: N.Decorator[] | null = null;\n\n    const { type } = this.state;\n    switch (type) {\n      case tt._super:\n        return this.parseSuper();\n\n      case tt._import:\n        node = this.startNode<N.MetaProperty | N.Import | N.ImportExpression>();\n        this.next();\n\n        if (this.match(tt.dot)) {\n          return this.parseImportMetaProperty(node as Undone<N.MetaProperty>);\n        }\n\n        if (this.match(tt.parenL)) {\n          if (this.options.createImportExpressions) {\n            return this.parseImportCall(node as Undone<N.ImportExpression>);\n          } else {\n            return this.finishNode(node, \"Import\");\n          }\n        } else {\n          this.raise(Errors.UnsupportedImport, this.state.lastTokStartLoc);\n          return this.finishNode(node, \"Import\");\n        }\n\n      case tt._this:\n        node = this.startNode<N.ThisExpression>();\n        this.next();\n        return this.finishNode(node, \"ThisExpression\");\n\n      case tt._do: {\n        return this.parseDo(this.startNode(), false);\n      }\n\n      case tt.slash:\n      case tt.slashAssign: {\n        this.readRegexp();\n        return this.parseRegExpLiteral(this.state.value);\n      }\n\n      case tt.num:\n        return this.parseNumericLiteral(this.state.value);\n\n      case tt.bigint:\n        return this.parseBigIntLiteral(this.state.value);\n\n      case tt.decimal:\n        return this.parseDecimalLiteral(this.state.value);\n\n      case tt.string:\n        return this.parseStringLiteral(this.state.value);\n\n      case tt._null:\n        return this.parseNullLiteral();\n\n      case tt._true:\n        return this.parseBooleanLiteral(true);\n      case tt._false:\n        return this.parseBooleanLiteral(false);\n\n      case tt.parenL: {\n        const canBeArrow = this.state.potentialArrowAt === this.state.start;\n        return this.parseParenAndDistinguishExpression(canBeArrow);\n      }\n\n      case tt.bracketBarL:\n      case tt.bracketHashL: {\n        return this.parseArrayLike(\n          this.state.type === tt.bracketBarL ? tt.bracketBarR : tt.bracketR,\n          /* canBePattern */ false,\n          /* isTuple */ true,\n        );\n      }\n      case tt.bracketL: {\n        return this.parseArrayLike(\n          tt.bracketR,\n          /* canBePattern */ true,\n          /* isTuple */ false,\n          refExpressionErrors,\n        );\n      }\n      case tt.braceBarL:\n      case tt.braceHashL: {\n        return this.parseObjectLike(\n          this.state.type === tt.braceBarL ? tt.braceBarR : tt.braceR,\n          /* isPattern */ false,\n          /* isRecord */ true,\n        );\n      }\n      case tt.braceL: {\n        return this.parseObjectLike(\n          tt.braceR,\n          /* isPattern */ false,\n          /* isRecord */ false,\n          refExpressionErrors,\n        );\n      }\n      case tt._function:\n        return this.parseFunctionOrFunctionSent();\n\n      case tt.at:\n        decorators = this.parseDecorators();\n      // fall through\n      case tt._class:\n        return this.parseClass(\n          this.maybeTakeDecorators(\n            decorators,\n            this.startNode<N.ClassExpression>(),\n          ),\n          false,\n        );\n\n      case tt._new:\n        return this.parseNewOrNewTarget();\n\n      case tt.templateNonTail:\n      case tt.templateTail:\n        return this.parseTemplate(false);\n\n      // BindExpression[Yield]\n      //   :: MemberExpression[?Yield]\n      case tt.doubleColon: {\n        node = this.startNode<N.BindExpression>();\n        this.next();\n        node.object = null;\n        const callee = (node.callee = this.parseNoCallExpr());\n        if (callee.type === \"MemberExpression\") {\n          return this.finishNode(node, \"BindExpression\");\n        } else {\n          throw this.raise(Errors.UnsupportedBind, callee);\n        }\n      }\n\n      case tt.privateName: {\n        // Standalone private names are only allowed in \"#x in obj\"\n        // expressions, and they are directly handled by callers of\n        // parseExprOp. If we reach this, the input is always invalid.\n        // We can throw a better error message and recover, rather than\n        // just throwing \"Unexpected token\" (which is the default\n        // behavior of this big switch statement).\n        this.raise(Errors.PrivateInExpectedIn, this.state.startLoc, {\n          identifierName: this.state.value,\n        });\n        return this.parsePrivateName() as unknown as N.Expression;\n      }\n\n      case tt.moduloAssign: {\n        return this.parseTopicReferenceThenEqualsSign(tt.modulo, \"%\");\n      }\n\n      case tt.xorAssign: {\n        return this.parseTopicReferenceThenEqualsSign(tt.bitwiseXOR, \"^\");\n      }\n\n      case tt.doubleCaret:\n      case tt.doubleAt: {\n        return this.parseTopicReference(\"hack\");\n      }\n\n      case tt.bitwiseXOR:\n      case tt.modulo:\n      case tt.hash: {\n        const pipeProposal = this.getPluginOption(\n          \"pipelineOperator\",\n          \"proposal\",\n        );\n\n        if (pipeProposal) {\n          return this.parseTopicReference(pipeProposal);\n        }\n        this.unexpected();\n        break;\n      }\n\n      case tt.lt: {\n        const lookaheadCh = this.input.codePointAt(this.nextTokenStart());\n        if (\n          isIdentifierStart(lookaheadCh) || // Element/Type Parameter <foo>\n          lookaheadCh === charCodes.greaterThan // Fragment <>\n        ) {\n          this.expectOnePlugin([\"jsx\", \"flow\", \"typescript\"]);\n        } else {\n          this.unexpected();\n        }\n        break;\n      }\n\n      default:\n        if (tokenIsIdentifier(type)) {\n          if (\n            this.isContextual(tt._module) &&\n            this.lookaheadInLineCharCode() === charCodes.leftCurlyBrace\n          ) {\n            return this.parseModuleExpression();\n          }\n          const canBeArrow = this.state.potentialArrowAt === this.state.start;\n          const containsEsc = this.state.containsEsc;\n          const id = this.parseIdentifier();\n\n          if (\n            !containsEsc &&\n            id.name === \"async\" &&\n            !this.canInsertSemicolon()\n          ) {\n            const { type } = this.state;\n            if (type === tt._function) {\n              this.resetPreviousNodeTrailingComments(id);\n              this.next();\n              return this.parseAsyncFunctionExpression(\n                this.startNodeAtNode(id),\n              );\n            } else if (tokenIsIdentifier(type)) {\n              // If the next token begins with \"=\", commit to parsing an async\n              // arrow function. (Peeking ahead for \"=\" lets us avoid a more\n              // expensive full-token lookahead on this common path.)\n              if (this.lookaheadCharCode() === charCodes.equalsTo) {\n                // although `id` is not used in async arrow unary function,\n                // we don't need to reset `async`'s trailing comments because\n                // it will be attached to the upcoming async arrow binding identifier\n                return this.parseAsyncArrowUnaryFunction(\n                  this.startNodeAtNode(id),\n                );\n              } else {\n                // Otherwise, treat \"async\" as an identifier and let calling code\n                // deal with the current tt.name token.\n                return id;\n              }\n            } else if (type === tt._do) {\n              this.resetPreviousNodeTrailingComments(id);\n              return this.parseDo(this.startNodeAtNode(id), true);\n            }\n          }\n\n          if (\n            canBeArrow &&\n            this.match(tt.arrow) &&\n            !this.canInsertSemicolon()\n          ) {\n            this.next();\n            return this.parseArrowExpression(\n              this.startNodeAtNode(id),\n              [id],\n              false,\n            );\n          }\n\n          return id;\n        } else {\n          this.unexpected();\n        }\n    }\n  }\n\n  // This helper method should only be called\n  // when the parser has reached a potential Hack pipe topic token\n  // that is followed by an equals sign.\n  // See <https://github.com/js-choi/proposal-hack-pipes>.\n  // If we find ^= or %= in an expression position\n  // (i.e., the tt.moduloAssign or tt.xorAssign token types), and if the\n  // Hack-pipes proposal is active with ^ or % as its topicToken, then the ^ or\n  // % could be the topic token (e.g., in x |> ^==y or x |> ^===y), and so we\n  // reparse the current token as ^ or %.\n  // Otherwise, this throws an unexpected-token error.\n  parseTopicReferenceThenEqualsSign(\n    topicTokenType: TokenType,\n    topicTokenValue: string,\n  ): N.Expression {\n    const pipeProposal = this.getPluginOption(\"pipelineOperator\", \"proposal\");\n\n    if (pipeProposal) {\n      // Set the most-recent token to be a topic token\n      // given by the tokenType and tokenValue.\n      // Now the next readToken() call (in parseTopicReference)\n      // will consume that \u201Ctopic token\u201D.\n      this.state.type = topicTokenType;\n      this.state.value = topicTokenValue;\n      // Rewind the tokenizer to the end of the \u201Ctopic token\u201D, so that the\n      // following token starts at the equals sign after that topic token.\n      this.state.pos--;\n      this.state.end--;\n      // This is safe to do since the preceding character was either ^ or %, and\n      // thus not a newline.\n      this.state.endLoc = createPositionWithColumnOffset(this.state.endLoc, -1);\n      // Now actually consume the topic token.\n      return this.parseTopicReference(pipeProposal);\n    } else {\n      this.unexpected();\n    }\n  }\n\n  // This helper method should only be called\n  // when the proposal-pipeline-operator plugin is active,\n  // and when the parser has reached a potential Hack pipe topic token.\n  // Although a pipe-operator proposal is assumed to be active,\n  // its configuration might not match the current token\u2019s type.\n  // See <https://github.com/js-choi/proposal-hack-pipes>.\n  parseTopicReference(pipeProposal: string): N.Expression {\n    const node = this.startNode<N.TopicReference>();\n    const startLoc = this.state.startLoc;\n    const tokenType = this.state.type;\n\n    // Consume the current token.\n    this.next();\n\n    // If the pipe-operator plugin\u2019s configuration matches the current token\u2019s type,\n    // then this will return `node`, will have been finished as a topic reference.\n    // Otherwise, this will throw a `PipeTopicUnconfiguredToken` error.\n    return this.finishTopicReference(node, startLoc, pipeProposal, tokenType);\n  }\n\n  // This helper method attempts to finish the given `node`\n  // into a topic-reference node for the given `pipeProposal`.\n  // See <https://github.com/js-choi/proposal-hack-pipes>.\n  //\n  // The method assumes that any topic token was consumed before it was called.\n  //\n  // If the `pipelineOperator` plugin is active,\n  // and if the given `tokenType` matches the plugin\u2019s configuration,\n  // then this method will return the finished `node`.\n  //\n  // If the `pipelineOperator` plugin is active,\n  // but if the given `tokenType` does not match the plugin\u2019s configuration,\n  // then this method will throw a `PipeTopicUnconfiguredToken` error.\n  finishTopicReference<\n    T extends N.PipelinePrimaryTopicReference | N.TopicReference,\n  >(\n    node: Undone<T>,\n    startLoc: Position,\n    pipeProposal: string,\n    tokenType: TokenType,\n  ): T {\n    if (\n      this.testTopicReferenceConfiguration(pipeProposal, startLoc, tokenType)\n    ) {\n      // The token matches the plugin\u2019s configuration.\n      // The token is therefore a topic reference.\n\n      // Determine the node type for the topic reference\n      // that is appropriate for the active pipe-operator proposal.\n      const nodeType =\n        pipeProposal === \"smart\"\n          ? \"PipelinePrimaryTopicReference\"\n          : // The proposal must otherwise be \"hack\",\n            // as enforced by testTopicReferenceConfiguration.\n            \"TopicReference\";\n\n      if (!this.topicReferenceIsAllowedInCurrentContext()) {\n        this.raise(\n          // The topic reference is not allowed in the current context:\n          // it is outside of a pipe body.\n          // Raise recoverable errors.\n          pipeProposal === \"smart\"\n            ? Errors.PrimaryTopicNotAllowed\n            : // In this case, `pipeProposal === \"hack\"` is true.\n              Errors.PipeTopicUnbound,\n          startLoc,\n        );\n      }\n\n      // Register the topic reference so that its pipe body knows\n      // that its topic was used at least once.\n      this.registerTopicReference();\n\n      return this.finishNode(node, nodeType);\n    } else {\n      // The token does not match the plugin\u2019s configuration.\n      throw this.raise(Errors.PipeTopicUnconfiguredToken, startLoc, {\n        token: tokenLabelName(tokenType),\n      });\n    }\n  }\n\n  // This helper method tests whether the given token type\n  // matches the pipelineOperator parser plugin\u2019s configuration.\n  // If the active pipe proposal is Hack style,\n  // and if the given token is the same as the plugin configuration\u2019s `topicToken`,\n  // then this is a valid topic reference.\n  // If the active pipe proposal is smart mix,\n  // then the topic token must always be `#`.\n  // If the active pipe proposal is neither (e.g., \"minimal\" or \"fsharp\"),\n  // then an error is thrown.\n  testTopicReferenceConfiguration(\n    pipeProposal: string,\n    startLoc: Position,\n    tokenType: TokenType,\n  ): boolean {\n    switch (pipeProposal) {\n      case \"hack\": {\n        return this.hasPlugin([\n          \"pipelineOperator\",\n          {\n            // @ts-expect-error token must have a label\n            topicToken: tokenLabelName(tokenType),\n          },\n        ]);\n      }\n      case \"smart\":\n        return tokenType === tt.hash;\n      default:\n        throw this.raise(Errors.PipeTopicRequiresHackPipes, startLoc);\n    }\n  }\n\n  // async [no LineTerminator here] AsyncArrowBindingIdentifier[?Yield] [no LineTerminator here] => AsyncConciseBody[?In]\n  parseAsyncArrowUnaryFunction(\n    this: Parser,\n    node: Undone<N.ArrowFunctionExpression>,\n  ): N.ArrowFunctionExpression {\n    // We don't need to push a new ParameterDeclarationScope here since we are sure\n    // 1) it is an async arrow, 2) no biding pattern is allowed in params\n    this.prodParam.enter(functionFlags(true, this.prodParam.hasYield));\n    const params = [this.parseIdentifier()];\n    this.prodParam.exit();\n    if (this.hasPrecedingLineBreak()) {\n      this.raise(Errors.LineTerminatorBeforeArrow, this.state.curPosition());\n    }\n    this.expect(tt.arrow);\n    // let foo = async bar => {};\n    return this.parseArrowExpression(node, params, true);\n  }\n\n  // https://github.com/tc39/proposal-do-expressions\n  // https://github.com/tc39/proposal-async-do-expressions\n  parseDo(\n    this: Parser,\n    node: Undone<N.DoExpression>,\n    isAsync: boolean,\n  ): N.DoExpression {\n    this.expectPlugin(\"doExpressions\");\n    if (isAsync) {\n      this.expectPlugin(\"asyncDoExpressions\");\n    }\n    node.async = isAsync;\n    this.next(); // eat `do`\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n    if (isAsync) {\n      // AsyncDoExpression :\n      // async [no LineTerminator here] do Block[~Yield, +Await, ~Return]\n      this.prodParam.enter(ParamKind.PARAM_AWAIT);\n      node.body = this.parseBlock();\n      this.prodParam.exit();\n    } else {\n      node.body = this.parseBlock();\n    }\n\n    this.state.labels = oldLabels;\n    return this.finishNode(node, \"DoExpression\");\n  }\n\n  // Parse the `super` keyword\n  parseSuper(): N.Super {\n    const node = this.startNode<N.Super>();\n    this.next(); // eat `super`\n    if (\n      this.match(tt.parenL) &&\n      !this.scope.allowDirectSuper &&\n      !this.options.allowSuperOutsideMethod\n    ) {\n      this.raise(Errors.SuperNotAllowed, node);\n    } else if (\n      !this.scope.allowSuper &&\n      !this.options.allowSuperOutsideMethod\n    ) {\n      this.raise(Errors.UnexpectedSuper, node);\n    }\n\n    if (\n      !this.match(tt.parenL) &&\n      !this.match(tt.bracketL) &&\n      !this.match(tt.dot)\n    ) {\n      this.raise(Errors.UnsupportedSuper, node);\n    }\n\n    return this.finishNode(node, \"Super\");\n  }\n\n  parsePrivateName(): N.PrivateName {\n    const node = this.startNode<N.PrivateName>();\n    const id = this.startNodeAt<N.Identifier>(\n      // The position is hardcoded because we merge `#` and name into a single\n      // tt.privateName token\n      createPositionWithColumnOffset(this.state.startLoc, 1),\n    );\n    const name = this.state.value;\n    this.next(); // eat #name;\n    node.id = this.createIdentifier(id, name);\n    return this.finishNode(node, \"PrivateName\");\n  }\n\n  parseFunctionOrFunctionSent(\n    this: Parser,\n  ): N.FunctionExpression | N.MetaProperty {\n    const node = this.startNode<N.FunctionExpression | N.MetaProperty>();\n\n    // We do not do parseIdentifier here because when parseFunctionOrFunctionSent\n    // is called we already know that the current token is a \"name\" with the value \"function\"\n    // This will improve perf a tiny little bit as we do not do validation but more importantly\n    // here is that parseIdentifier will remove an item from the expression stack\n    // if \"function\" or \"class\" is parsed as identifier (in objects e.g.), which should not happen here.\n    this.next(); // eat `function`\n\n    if (this.prodParam.hasYield && this.match(tt.dot)) {\n      const meta = this.createIdentifier(\n        this.startNodeAtNode<N.Identifier>(node),\n        \"function\",\n      );\n      this.next(); // eat `.`\n      // https://github.com/tc39/proposal-function.sent#syntax-1\n      if (this.match(tt._sent)) {\n        this.expectPlugin(\"functionSent\");\n      } else if (!this.hasPlugin(\"functionSent\")) {\n        // The code wasn't `function.sent` but just `function.`, so a simple error is less confusing.\n        this.unexpected();\n      }\n      return this.parseMetaProperty(\n        node as Undone<N.MetaProperty>,\n        meta,\n        \"sent\",\n      );\n    }\n    return this.parseFunction(node as Undone<N.FunctionExpression>);\n  }\n\n  parseMetaProperty(\n    node: Undone<N.MetaProperty>,\n    meta: N.Identifier,\n    propertyName: string,\n  ): N.MetaProperty {\n    node.meta = meta;\n\n    const containsEsc = this.state.containsEsc;\n\n    node.property = this.parseIdentifier(true);\n\n    if (node.property.name !== propertyName || containsEsc) {\n      this.raise(Errors.UnsupportedMetaProperty, node.property, {\n        target: meta.name,\n        onlyValidPropertyName: propertyName,\n      });\n    }\n\n    return this.finishNode(node, \"MetaProperty\");\n  }\n\n  // https://tc39.es/ecma262/#prod-ImportMeta\n  parseImportMetaProperty(\n    this: Parser,\n    node: Undone<N.MetaProperty | N.ImportExpression>,\n  ): N.MetaProperty | N.ImportExpression {\n    const id = this.createIdentifier(\n      this.startNodeAtNode<N.Identifier>(node),\n      \"import\",\n    );\n    this.next(); // eat `.`\n\n    if (this.isContextual(tt._meta)) {\n      if (!this.inModule) {\n        this.raise(Errors.ImportMetaOutsideModule, id);\n      }\n      this.sawUnambiguousESM = true;\n    } else if (this.isContextual(tt._source) || this.isContextual(tt._defer)) {\n      const isSource = this.isContextual(tt._source);\n\n      // TODO: The proposal doesn't mention import.defer yet because it was\n      // pending on a decision for import.source. Wait to enable it until it's\n      // included in the proposal.\n      if (!isSource) this.unexpected();\n\n      this.expectPlugin(\n        isSource ? \"sourcePhaseImports\" : \"deferredImportEvaluation\",\n      );\n      if (!this.options.createImportExpressions) {\n        throw this.raise(\n          Errors.DynamicImportPhaseRequiresImportExpressions,\n          this.state.startLoc,\n          {\n            phase: this.state.value,\n          },\n        );\n      }\n      this.next();\n      (node as Undone<N.ImportExpression>).phase = isSource\n        ? \"source\"\n        : \"defer\";\n      return this.parseImportCall(node as Undone<N.ImportExpression>);\n    }\n\n    return this.parseMetaProperty(node as Undone<N.MetaProperty>, id, \"meta\");\n  }\n\n  parseLiteralAtNode<T extends N.Node>(\n    value: any,\n    type: T[\"type\"],\n    node: any,\n  ): T {\n    this.addExtra(node, \"rawValue\", value);\n    this.addExtra(node, \"raw\", this.input.slice(node.start, this.state.end));\n    node.value = value;\n    this.next();\n    return this.finishNode<T>(node, type);\n  }\n\n  parseLiteral<T extends N.Node>(value: any, type: T[\"type\"]): T {\n    const node = this.startNode();\n    return this.parseLiteralAtNode(value, type, node);\n  }\n\n  parseStringLiteral(value: any) {\n    return this.parseLiteral<N.StringLiteral>(value, \"StringLiteral\");\n  }\n\n  parseNumericLiteral(value: any) {\n    return this.parseLiteral<N.NumericLiteral>(value, \"NumericLiteral\");\n  }\n\n  parseBigIntLiteral(value: any) {\n    return this.parseLiteral<N.BigIntLiteral>(value, \"BigIntLiteral\");\n  }\n\n  parseDecimalLiteral(value: any) {\n    return this.parseLiteral<N.DecimalLiteral>(value, \"DecimalLiteral\");\n  }\n\n  parseRegExpLiteral(value: {\n    value: any;\n    pattern: string;\n    flags: N.RegExpLiteral[\"flags\"];\n  }) {\n    const node = this.startNode<N.RegExpLiteral>();\n    this.addExtra(node, \"raw\", this.input.slice(node.start, this.state.end));\n    node.pattern = value.pattern;\n    node.flags = value.flags;\n    this.next();\n    return this.finishNode(node, \"RegExpLiteral\");\n  }\n\n  parseBooleanLiteral(value: boolean) {\n    const node = this.startNode<N.BooleanLiteral>();\n    node.value = value;\n    this.next();\n    return this.finishNode(node, \"BooleanLiteral\");\n  }\n\n  parseNullLiteral() {\n    const node = this.startNode<N.NullLiteral>();\n    this.next();\n    return this.finishNode(node, \"NullLiteral\");\n  }\n\n  // https://tc39.es/ecma262/#prod-CoverParenthesizedExpressionAndArrowParameterList\n  parseParenAndDistinguishExpression(\n    this: Parser,\n    canBeArrow: boolean,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n\n    let val;\n    this.next(); // eat `(`\n    this.expressionScope.enter(newArrowHeadScope());\n\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.maybeInArrowParameters = true;\n    this.state.inFSharpPipelineDirectBody = false;\n\n    const innerStartLoc = this.state.startLoc;\n    const exprList: (N.Expression | N.RestElement)[] = [];\n    const refExpressionErrors = new ExpressionErrors();\n    let first = true;\n    let spreadStartLoc;\n    let optionalCommaStartLoc;\n\n    while (!this.match(tt.parenR)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(\n          tt.comma,\n          refExpressionErrors.optionalParametersLoc === null\n            ? null\n            : refExpressionErrors.optionalParametersLoc,\n        );\n        if (this.match(tt.parenR)) {\n          optionalCommaStartLoc = this.state.startLoc;\n          break;\n        }\n      }\n\n      if (this.match(tt.ellipsis)) {\n        const spreadNodeStartLoc = this.state.startLoc;\n        spreadStartLoc = this.state.startLoc;\n        exprList.push(\n          this.parseParenItem(this.parseRestBinding(), spreadNodeStartLoc),\n        );\n\n        if (!this.checkCommaAfterRest(charCodes.rightParenthesis)) {\n          break;\n        }\n      } else {\n        exprList.push(\n          this.parseMaybeAssignAllowIn(\n            refExpressionErrors,\n            this.parseParenItem,\n          ),\n        );\n      }\n    }\n\n    const innerEndLoc = this.state.lastTokEndLoc;\n    this.expect(tt.parenR);\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n\n    let arrowNode = this.startNodeAt<N.ArrowFunctionExpression>(startLoc);\n    if (\n      canBeArrow &&\n      this.shouldParseArrow(exprList) &&\n      (arrowNode = this.parseArrow(arrowNode))\n    ) {\n      this.checkDestructuringPrivate(refExpressionErrors);\n      this.expressionScope.validateAsPattern();\n      this.expressionScope.exit();\n      this.parseArrowExpression(arrowNode, exprList, false);\n      // @ts-expect-error todo(flow->ts) improve node types\n      return arrowNode;\n    }\n    this.expressionScope.exit();\n\n    if (!exprList.length) {\n      this.unexpected(this.state.lastTokStartLoc);\n    }\n    if (optionalCommaStartLoc) this.unexpected(optionalCommaStartLoc);\n    if (spreadStartLoc) this.unexpected(spreadStartLoc);\n    this.checkExpressionErrors(refExpressionErrors, true);\n\n    this.toReferencedListDeep(exprList, /* isParenthesizedExpr */ true);\n    if (exprList.length > 1) {\n      val = this.startNodeAt<N.SequenceExpression>(innerStartLoc);\n      val.expressions = exprList as N.Expression[];\n      // finish node at current location so it can pick up comments after `)`\n      this.finishNode(val, \"SequenceExpression\");\n      this.resetEndLocation(val, innerEndLoc);\n    } else {\n      val = exprList[0];\n    }\n\n    return this.wrapParenthesis(\n      startLoc,\n      // @ts-expect-error todo(flow->ts)\n      val,\n    );\n  }\n\n  wrapParenthesis(startLoc: Position, expression: N.Expression): N.Expression {\n    if (!this.options.createParenthesizedExpressions) {\n      this.addExtra(expression, \"parenthesized\", true);\n      this.addExtra(expression, \"parenStart\", startLoc.index);\n\n      this.takeSurroundingComments(\n        expression,\n        startLoc.index,\n        this.state.lastTokEndLoc.index,\n      );\n\n      return expression;\n    }\n\n    const parenExpression =\n      this.startNodeAt<N.ParenthesizedExpression>(startLoc);\n    parenExpression.expression = expression;\n    return this.finishNode(parenExpression, \"ParenthesizedExpression\");\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars -- `params` is used in typescript plugin\n  shouldParseArrow(params: Array<N.Node>): boolean {\n    return !this.canInsertSemicolon();\n  }\n\n  parseArrow(\n    node: Undone<N.ArrowFunctionExpression>,\n  ): Undone<N.ArrowFunctionExpression> | undefined {\n    if (this.eat(tt.arrow)) {\n      return node;\n    }\n  }\n\n  parseParenItem<T extends N.Expression | N.RestElement | N.SpreadElement>(\n    node: T,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    startLoc: Position,\n  ): T | N.TypeCastExpression | N.TsTypeCastExpression {\n    return node;\n  }\n\n  parseNewOrNewTarget(this: Parser): N.NewExpression | N.MetaProperty {\n    const node = this.startNode<N.NewExpression | N.MetaProperty>();\n    this.next();\n    if (this.match(tt.dot)) {\n      // https://tc39.es/ecma262/#prod-NewTarget\n      const meta = this.createIdentifier(\n        this.startNodeAtNode<N.Identifier>(node),\n        \"new\",\n      );\n      this.next();\n      const metaProp = this.parseMetaProperty(\n        node as Undone<N.MetaProperty>,\n        meta,\n        \"target\",\n      );\n\n      if (\n        !this.scope.inNonArrowFunction &&\n        !this.scope.inClass &&\n        !this.options.allowNewTargetOutsideFunction\n      ) {\n        this.raise(Errors.UnexpectedNewTarget, metaProp);\n      }\n\n      return metaProp;\n    }\n\n    return this.parseNew(node as Undone<N.NewExpression>);\n  }\n\n  // New's precedence is slightly tricky. It must allow its argument to\n  // be a `[]` or dot subscript expression, but not a call \u2014 at least,\n  // not without wrapping it in parentheses. Thus, it uses the noCalls\n  // argument to parseSubscripts to prevent it from consuming the\n  // argument list.\n  // https://tc39.es/ecma262/#prod-NewExpression\n  parseNew(this: Parser, node: Undone<N.NewExpression>): N.NewExpression {\n    this.parseNewCallee(node);\n\n    if (this.eat(tt.parenL)) {\n      const args = this.parseExprList(tt.parenR);\n      this.toReferencedList(args);\n      // (parseExprList should be all non-null in this case)\n      node.arguments = args;\n    } else {\n      node.arguments = [];\n    }\n\n    return this.finishNode(node, \"NewExpression\");\n  }\n\n  parseNewCallee(this: Parser, node: Undone<N.NewExpression>): void {\n    const isImport = this.match(tt._import);\n    const callee = this.parseNoCallExpr();\n    node.callee = callee;\n    if (\n      isImport &&\n      (callee.type === \"Import\" || callee.type === \"ImportExpression\")\n    ) {\n      this.raise(Errors.ImportCallNotNewExpression, callee);\n    }\n  }\n\n  // Parse template expression.\n\n  parseTemplateElement(isTagged: boolean): N.TemplateElement {\n    const { start, startLoc, end, value } = this.state;\n    const elemStart = start + 1;\n    const elem = this.startNodeAt<N.TemplateElement>(\n      createPositionWithColumnOffset(startLoc, 1),\n    );\n    if (value === null) {\n      if (!isTagged) {\n        this.raise(\n          Errors.InvalidEscapeSequenceTemplate,\n          // FIXME: Adding 1 is probably wrong.\n          createPositionWithColumnOffset(\n            this.state.firstInvalidTemplateEscapePos,\n            1,\n          ),\n        );\n      }\n    }\n\n    const isTail = this.match(tt.templateTail);\n    const endOffset = isTail ? -1 : -2;\n    const elemEnd = end + endOffset;\n    elem.value = {\n      raw: this.input.slice(elemStart, elemEnd).replace(/\\r\\n?/g, \"\\n\"),\n      cooked: value === null ? null : value.slice(1, endOffset),\n    };\n    elem.tail = isTail;\n    this.next();\n    const finishedNode = this.finishNode(elem, \"TemplateElement\");\n    this.resetEndLocation(\n      finishedNode,\n      createPositionWithColumnOffset(this.state.lastTokEndLoc, endOffset),\n    );\n    return finishedNode;\n  }\n\n  // https://tc39.es/ecma262/#prod-TemplateLiteral\n  parseTemplate(this: Parser, isTagged: boolean): N.TemplateLiteral {\n    const node = this.startNode<N.TemplateLiteral>();\n    let curElt = this.parseTemplateElement(isTagged);\n    const quasis = [curElt];\n    const substitutions = [];\n    while (!curElt.tail) {\n      substitutions.push(this.parseTemplateSubstitution());\n      this.readTemplateContinuation();\n      quasis.push((curElt = this.parseTemplateElement(isTagged)));\n    }\n    // Type cast from (N.Expression[] | N.TsType[]). parseTemplateSubstitution\n    // returns consistent results.\n    node.expressions = substitutions as N.Expression[] | N.TsType[];\n    node.quasis = quasis;\n    return this.finishNode(node, \"TemplateLiteral\");\n  }\n\n  // This is overwritten by the TypeScript plugin to parse template types\n  parseTemplateSubstitution(this: Parser): N.Expression | N.TsType {\n    return this.parseExpression();\n  }\n\n  // Parse an object literal, binding pattern, or record.\n\n  parseObjectLike(\n    close: TokenType,\n    isPattern: true,\n    isRecord?: boolean | null,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.ObjectPattern;\n  parseObjectLike(\n    close: TokenType,\n    isPattern: false,\n    isRecord?: false | null,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.ObjectExpression;\n  parseObjectLike(\n    close: TokenType,\n    isPattern: false,\n    isRecord?: true,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.RecordExpression;\n  parseObjectLike<T extends N.ObjectPattern | N.ObjectExpression>(\n    this: Parser,\n    close: TokenType,\n    isPattern: boolean,\n    isRecord?: boolean | null,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): T {\n    if (isRecord) {\n      this.expectPlugin(\"recordAndTuple\");\n    }\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n    const propHash: any = Object.create(null);\n    let first = true;\n    const node = this.startNode<\n      N.ObjectExpression | N.ObjectPattern | N.RecordExpression\n    >();\n\n    node.properties = [];\n    this.next();\n\n    while (!this.match(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.match(close)) {\n          this.addTrailingCommaExtraToNode(\n            // @ts-expect-error todo(flow->ts) improve node types\n            node,\n          );\n          break;\n        }\n      }\n\n      let prop;\n      if (isPattern) {\n        prop = this.parseBindingProperty();\n      } else {\n        prop = this.parsePropertyDefinition(refExpressionErrors);\n        this.checkProto(prop, isRecord, propHash, refExpressionErrors);\n      }\n\n      if (\n        isRecord &&\n        !this.isObjectProperty(prop) &&\n        prop.type !== \"SpreadElement\"\n      ) {\n        this.raise(Errors.InvalidRecordProperty, prop);\n      }\n\n      if (!process.env.BABEL_8_BREAKING) {\n        // @ts-expect-error shorthand may not index prop\n        if (prop.shorthand) {\n          this.addExtra(prop, \"shorthand\", true);\n        }\n      }\n\n      // @ts-expect-error Fixme: refine typings\n      node.properties.push(prop);\n    }\n\n    this.next();\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    let type = \"ObjectExpression\";\n    if (isPattern) {\n      type = \"ObjectPattern\";\n    } else if (isRecord) {\n      type = \"RecordExpression\";\n    }\n    // @ts-expect-error type is well defined\n    return this.finishNode(node, type);\n  }\n\n  addTrailingCommaExtraToNode(node: N.Node): void {\n    this.addExtra(node, \"trailingComma\", this.state.lastTokStartLoc.index);\n    this.addExtra(node, \"trailingCommaLoc\", this.state.lastTokStartLoc, false);\n  }\n\n  // Check grammar production:\n  //   IdentifierName *_opt PropertyName\n  // It is used in `parsePropertyDefinition` to detect AsyncMethod and Accessors\n  maybeAsyncOrAccessorProp(\n    prop: Undone<N.ObjectProperty>,\n  ): prop is typeof prop & { key: N.Identifier } {\n    return (\n      !prop.computed &&\n      prop.key.type === \"Identifier\" &&\n      (this.isLiteralPropertyName() ||\n        this.match(tt.bracketL) ||\n        this.match(tt.star))\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-PropertyDefinition\n  parsePropertyDefinition(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.ObjectMember | N.SpreadElement {\n    let decorators = [];\n    if (this.match(tt.at)) {\n      if (this.hasPlugin(\"decorators\")) {\n        this.raise(Errors.UnsupportedPropertyDecorator, this.state.startLoc);\n      }\n\n      // we needn't check if decorators (stage 0) plugin is enabled since it's checked by\n      // the call to this.parseDecorator\n      while (this.match(tt.at)) {\n        decorators.push(this.parseDecorator());\n      }\n    }\n\n    const prop = this.startNode<N.ObjectProperty>();\n    let isAsync = false;\n    let isAccessor = false;\n    let startLoc;\n\n    if (this.match(tt.ellipsis)) {\n      if (decorators.length) this.unexpected();\n      return this.parseSpread();\n    }\n\n    if (decorators.length) {\n      prop.decorators = decorators;\n      decorators = [];\n    }\n\n    prop.method = false;\n\n    if (refExpressionErrors) {\n      startLoc = this.state.startLoc;\n    }\n\n    let isGenerator = this.eat(tt.star);\n    this.parsePropertyNamePrefixOperator(prop);\n    const containsEsc = this.state.containsEsc;\n    this.parsePropertyName(prop, refExpressionErrors);\n\n    if (!isGenerator && !containsEsc && this.maybeAsyncOrAccessorProp(prop)) {\n      const { key } = prop;\n      const keyName = key.name;\n      // https://tc39.es/ecma262/#prod-AsyncMethod\n      // https://tc39.es/ecma262/#prod-AsyncGeneratorMethod\n      if (keyName === \"async\" && !this.hasPrecedingLineBreak()) {\n        isAsync = true;\n        this.resetPreviousNodeTrailingComments(key);\n        isGenerator = this.eat(tt.star);\n        this.parsePropertyName(prop);\n      }\n      // get PropertyName[?Yield, ?Await] () { FunctionBody[~Yield, ~Await] }\n      // set PropertyName[?Yield, ?Await] ( PropertySetParameterList ) { FunctionBody[~Yield, ~Await] }\n      if (keyName === \"get\" || keyName === \"set\") {\n        isAccessor = true;\n        this.resetPreviousNodeTrailingComments(key);\n        prop.kind = keyName;\n        if (this.match(tt.star)) {\n          isGenerator = true;\n          this.raise(Errors.AccessorIsGenerator, this.state.curPosition(), {\n            kind: keyName,\n          });\n          this.next();\n        }\n        this.parsePropertyName(prop);\n      }\n    }\n\n    return this.parseObjPropValue(\n      prop,\n      startLoc,\n      isGenerator,\n      isAsync,\n      false /* isPattern */,\n      isAccessor,\n      refExpressionErrors,\n    );\n  }\n\n  getGetterSetterExpectedParamCount(\n    method: N.ObjectMethod | N.ClassMethod,\n  ): number {\n    return method.kind === \"get\" ? 0 : 1;\n  }\n\n  // This exists so we can override within the ESTree plugin\n  getObjectOrClassMethodParams(method: N.ObjectMethod | N.ClassMethod) {\n    return method.params;\n  }\n\n  // get methods aren't allowed to have any parameters\n  // set methods must have exactly 1 parameter which is not a rest parameter\n  checkGetterSetterParams(method: N.ObjectMethod | N.ClassMethod): void {\n    const paramCount = this.getGetterSetterExpectedParamCount(method);\n    const params = this.getObjectOrClassMethodParams(method);\n\n    if (params.length !== paramCount) {\n      this.raise(\n        method.kind === \"get\" ? Errors.BadGetterArity : Errors.BadSetterArity,\n        method,\n      );\n    }\n\n    if (\n      method.kind === \"set\" &&\n      params[params.length - 1]?.type === \"RestElement\"\n    ) {\n      this.raise(Errors.BadSetterRestParameter, method);\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-MethodDefinition\n  parseObjectMethod(\n    this: Parser,\n    prop: Undone<N.ObjectMethod>,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isPattern: boolean,\n    isAccessor: boolean,\n  ): N.ObjectMethod | undefined | null {\n    if (isAccessor) {\n      // isAccessor implies isAsync: false, isPattern: false, isGenerator: false\n      const finishedProp = this.parseMethod(\n        prop,\n        // This _should_ be false, but with error recovery, we allow it to be\n        // set for informational purposes\n        isGenerator,\n        /* isAsync */ false,\n        /* isConstructor */ false,\n        false,\n        \"ObjectMethod\",\n      );\n      this.checkGetterSetterParams(finishedProp);\n      return finishedProp;\n    }\n\n    if (isAsync || isGenerator || this.match(tt.parenL)) {\n      if (isPattern) this.unexpected();\n      prop.kind = \"method\";\n      prop.method = true;\n      return this.parseMethod(\n        prop,\n        isGenerator,\n        isAsync,\n        /* isConstructor */ false,\n        false,\n        \"ObjectMethod\",\n      );\n    }\n  }\n\n  // if `isPattern` is true, parse https://tc39.es/ecma262/#prod-BindingProperty\n  // else https://tc39.es/ecma262/#prod-PropertyDefinition\n  parseObjectProperty(\n    this: Parser,\n    prop: Undone<N.ObjectProperty>,\n    startLoc: Position | undefined | null,\n    isPattern: boolean,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.ObjectProperty | undefined | null {\n    prop.shorthand = false;\n\n    if (this.eat(tt.colon)) {\n      prop.value = isPattern\n        ? this.parseMaybeDefault(this.state.startLoc)\n        : this.parseMaybeAssignAllowIn(refExpressionErrors);\n\n      return this.finishNode(prop, \"ObjectProperty\");\n    }\n\n    if (!prop.computed && prop.key.type === \"Identifier\") {\n      // PropertyDefinition:\n      //   IdentifierReference\n      //   CoverInitializedName\n      // Note: `{ eval } = {}` will be checked in `checkLVal` later.\n      this.checkReservedWord(prop.key.name, prop.key.loc.start, true, false);\n\n      if (isPattern) {\n        prop.value = this.parseMaybeDefault(\n          startLoc,\n          cloneIdentifier(prop.key),\n        );\n      } else if (this.match(tt.eq)) {\n        const shorthandAssignLoc = this.state.startLoc;\n        if (refExpressionErrors != null) {\n          if (refExpressionErrors.shorthandAssignLoc === null) {\n            refExpressionErrors.shorthandAssignLoc = shorthandAssignLoc;\n          }\n        } else {\n          this.raise(Errors.InvalidCoverInitializedName, shorthandAssignLoc);\n        }\n        prop.value = this.parseMaybeDefault(\n          startLoc,\n          cloneIdentifier(prop.key),\n        );\n      } else {\n        prop.value = cloneIdentifier(prop.key);\n      }\n      prop.shorthand = true;\n\n      return this.finishNode(prop, \"ObjectProperty\");\n    }\n  }\n\n  parseObjPropValue<T extends N.ObjectMember>(\n    this: Parser,\n    prop: Undone<T>,\n    startLoc: Position | undefined | null,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isPattern: boolean,\n    isAccessor: boolean,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): T {\n    const node = (this.parseObjectMethod(\n      prop as Undone<N.ObjectMethod>,\n      isGenerator,\n      isAsync,\n      isPattern,\n      isAccessor,\n    ) ||\n      this.parseObjectProperty(\n        prop as Undone<N.ObjectProperty>,\n        startLoc,\n        isPattern,\n        refExpressionErrors,\n      )) as T;\n\n    if (!node) this.unexpected();\n\n    return node;\n  }\n\n  // https://tc39.es/ecma262/#prod-PropertyName\n  // when refExpressionErrors presents, it will parse private name\n  // and record the position of the first private name\n  parsePropertyName(\n    this: Parser,\n    prop:\n      | Undone<N.ObjectOrClassMember | N.ClassMember>\n      | N.TsNamedTypeElementBase,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): void {\n    if (this.eat(tt.bracketL)) {\n      (prop as Undone<N.ObjectOrClassMember>).computed = true;\n      prop.key = this.parseMaybeAssignAllowIn();\n      this.expect(tt.bracketR);\n    } else {\n      // We check if it's valid for it to be a private name when we push it.\n      const { type, value } = this.state;\n      let key;\n      // most un-computed property names are identifiers\n      if (tokenIsKeywordOrIdentifier(type)) {\n        key = this.parseIdentifier(true);\n      } else {\n        switch (type) {\n          case tt.num:\n            key = this.parseNumericLiteral(value);\n            break;\n          case tt.string:\n            key = this.parseStringLiteral(value);\n            break;\n          case tt.bigint:\n            key = this.parseBigIntLiteral(value);\n            break;\n          case tt.decimal:\n            key = this.parseDecimalLiteral(value);\n            break;\n          case tt.privateName: {\n            // the class private key has been handled in parseClassElementName\n            const privateKeyLoc = this.state.startLoc;\n            if (refExpressionErrors != null) {\n              if (refExpressionErrors.privateKeyLoc === null) {\n                refExpressionErrors.privateKeyLoc = privateKeyLoc;\n              }\n            } else {\n              this.raise(Errors.UnexpectedPrivateField, privateKeyLoc);\n            }\n            key = this.parsePrivateName();\n            break;\n          }\n          default:\n            this.unexpected();\n        }\n      }\n      (prop as any).key = key;\n      if (type !== tt.privateName) {\n        // ClassPrivateProperty is never computed, so we don't assign in that case.\n        prop.computed = false;\n      }\n    }\n  }\n\n  // Initialize empty function node.\n\n  initFunction(node: N.BodilessFunctionOrMethodBase, isAsync: boolean): void {\n    node.id = null;\n    node.generator = false;\n    node.async = isAsync;\n  }\n\n  // Parse object or class method.\n\n  parseMethod<T extends N.ObjectMethod | N.ClassMethod | N.ClassPrivateMethod>(\n    this: Parser,\n    node: Undone<T>,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isConstructor: boolean,\n    allowDirectSuper: boolean,\n    type: T[\"type\"],\n    inClassScope: boolean = false,\n  ): T {\n    this.initFunction(node, isAsync);\n    node.generator = isGenerator;\n    this.scope.enter(\n      ScopeFlag.FUNCTION |\n        ScopeFlag.SUPER |\n        (inClassScope ? ScopeFlag.CLASS : 0) |\n        (allowDirectSuper ? ScopeFlag.DIRECT_SUPER : 0),\n    );\n    this.prodParam.enter(functionFlags(isAsync, node.generator));\n    this.parseFunctionParams(node, isConstructor);\n    const finishedNode = this.parseFunctionBodyAndFinish(node, type, true);\n    this.prodParam.exit();\n    this.scope.exit();\n\n    return finishedNode;\n  }\n\n  // parse an array literal or tuple literal\n  // https://tc39.es/ecma262/#prod-ArrayLiteral\n  // https://tc39.es/proposal-record-tuple/#prod-TupleLiteral\n  parseArrayLike(\n    this: Parser,\n    close: TokenType,\n    canBePattern: boolean,\n    isTuple: boolean,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.ArrayExpression | N.TupleExpression {\n    if (isTuple) {\n      this.expectPlugin(\"recordAndTuple\");\n    }\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n    const node = this.startNode<N.ArrayExpression | N.TupleExpression>();\n    this.next();\n    node.elements = this.parseExprList(\n      close,\n      /* allowEmpty */ !isTuple,\n      refExpressionErrors,\n      // @ts-expect-error todo(flow->ts)\n      node,\n    );\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    return this.finishNode(\n      node,\n      isTuple ? \"TupleExpression\" : \"ArrayExpression\",\n    );\n  }\n\n  // Parse arrow function expression.\n  // If the parameters are provided, they will be converted to an\n  // assignable list.\n  parseArrowExpression(\n    this: Parser,\n    node: Undone<N.ArrowFunctionExpression>,\n    params:\n      | Array<N.Expression | N.SpreadElement>\n      | Array<N.Expression | N.RestElement>,\n    isAsync: boolean,\n    trailingCommaLoc?: Position | null,\n  ): N.ArrowFunctionExpression {\n    this.scope.enter(ScopeFlag.FUNCTION | ScopeFlag.ARROW);\n    let flags = functionFlags(isAsync, false);\n    // ConciseBody[In] :\n    //   [lookahead \u2260 {] ExpressionBody[?In, ~Await]\n    //   { FunctionBody[~Yield, ~Await] }\n    if (!this.match(tt.braceL) && this.prodParam.hasIn) {\n      flags |= ParamKind.PARAM_IN;\n    }\n    this.prodParam.enter(flags);\n    this.initFunction(node, isAsync);\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n\n    if (params) {\n      this.state.maybeInArrowParameters = true;\n      this.setArrowFunctionParameters(node, params, trailingCommaLoc);\n    }\n    this.state.maybeInArrowParameters = false;\n    this.parseFunctionBody(node, true);\n\n    this.prodParam.exit();\n    this.scope.exit();\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n\n    return this.finishNode(node, \"ArrowFunctionExpression\");\n  }\n\n  setArrowFunctionParameters(\n    node: Undone<N.ArrowFunctionExpression>,\n    params:\n      | Array<N.Expression | N.SpreadElement>\n      | Array<N.Expression | N.RestElement>,\n    trailingCommaLoc?: Position | null,\n  ): void {\n    this.toAssignableList(params, trailingCommaLoc, false);\n    node.params = params as (N.Pattern | N.TSParameterProperty)[];\n  }\n\n  parseFunctionBodyAndFinish<\n    T extends\n      | N.Function\n      | N.TSDeclareMethod\n      | N.TSDeclareFunction\n      | N.ClassPrivateMethod,\n  >(node: Undone<T>, type: T[\"type\"], isMethod: boolean = false): T {\n    // @ts-expect-error (node is not bodiless if we get here)\n    this.parseFunctionBody(node, false, isMethod);\n    return this.finishNode(node, type);\n  }\n\n  // Parse function body and check parameters.\n  parseFunctionBody(\n    this: Parser,\n    node: Undone<N.Function>,\n    allowExpression?: boolean | null,\n    isMethod: boolean = false,\n  ): void {\n    const isExpression = allowExpression && !this.match(tt.braceL);\n    this.expressionScope.enter(newExpressionScope());\n\n    if (isExpression) {\n      // https://tc39.es/ecma262/#prod-ExpressionBody\n      (node as Undone<N.ArrowFunctionExpression>).body =\n        this.parseMaybeAssign();\n      this.checkParams(node, false, allowExpression, false);\n    } else {\n      const oldStrict = this.state.strict;\n      // Start a new scope with regard to labels\n      // flag (restore them to their old value afterwards).\n      const oldLabels = this.state.labels;\n      this.state.labels = [];\n\n      // FunctionBody[Yield, Await]:\n      //   StatementList[?Yield, ?Await, +Return] opt\n      this.prodParam.enter(\n        this.prodParam.currentFlags() | ParamKind.PARAM_RETURN,\n      );\n      node.body = this.parseBlock(\n        true,\n        false,\n        // Strict mode function checks after we parse the statements in the function body.\n        (hasStrictModeDirective: boolean) => {\n          const nonSimple = !this.isSimpleParamList(node.params);\n\n          if (hasStrictModeDirective && nonSimple) {\n            // This logic is here to align the error location with the ESTree plugin.\n            this.raise(\n              Errors.IllegalLanguageModeDirective,\n              // @ts-expect-error kind may not index node\n              (node.kind === \"method\" || node.kind === \"constructor\") &&\n                // @ts-expect-error key may not index node\n                !!node.key\n                ? // @ts-expect-error node.key has been guarded\n                  node.key.loc.end\n                : node,\n            );\n          }\n\n          const strictModeChanged = !oldStrict && this.state.strict;\n\n          // Add the params to varDeclaredNames to ensure that an error is thrown\n          // if a let/const declaration in the function clashes with one of the params.\n          this.checkParams(\n            node,\n            !this.state.strict && !allowExpression && !isMethod && !nonSimple,\n            allowExpression,\n            strictModeChanged,\n          );\n\n          // Ensure the function name isn't a forbidden identifier in strict mode, e.g. 'eval'\n          if (this.state.strict && node.id) {\n            this.checkIdentifier(\n              node.id,\n              BindingFlag.TYPE_OUTSIDE,\n              strictModeChanged,\n            );\n          }\n        },\n      );\n      this.prodParam.exit();\n      this.state.labels = oldLabels;\n    }\n    this.expressionScope.exit();\n  }\n\n  isSimpleParameter(node: N.Pattern | N.TSParameterProperty): boolean {\n    return node.type === \"Identifier\";\n  }\n\n  isSimpleParamList(\n    params: ReadonlyArray<N.Pattern | N.TSParameterProperty>,\n  ): boolean {\n    for (let i = 0, len = params.length; i < len; i++) {\n      if (!this.isSimpleParameter(params[i])) return false;\n    }\n    return true;\n  }\n\n  checkParams(\n    node: Undone<N.Function>,\n    allowDuplicates: boolean,\n    isArrowFunction?: boolean | null,\n    strictModeChanged: boolean = true,\n  ): void {\n    const checkClashes = !allowDuplicates && new Set<string>();\n    // We create a fake node with the \"ephemeral\" type `FormalParameters`[1]\n    // since we just store an array of parameters. Perhaps someday we can have\n    // something like class FormalParameters extends Array { ... }, which would\n    // also be helpful when traversing this node.\n    //\n    // 1. https://tc39.es/ecma262/#prod-FormalParameters\n    const formalParameters = { type: \"FormalParameters\" } as const;\n    for (const param of node.params) {\n      this.checkLVal(\n        param,\n        formalParameters,\n        BindingFlag.TYPE_VAR,\n        checkClashes,\n        strictModeChanged,\n      );\n    }\n  }\n\n  // Parses a comma-separated list of expressions, and returns them as\n  // an array. `close` is the token type that ends the list, and\n  // `allowEmpty` can be turned on to allow subsequent commas with\n  // nothing in between them to be parsed as `null` (which is needed\n  // for array literals).\n\n  parseExprList(\n    this: Parser,\n    close: TokenType,\n    allowEmpty?: boolean,\n    refExpressionErrors?: ExpressionErrors | null,\n    nodeForExtra?: N.Node | null,\n  ): (N.Expression | null)[] {\n    const elts: (N.Expression | null)[] = [];\n    let first = true;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.match(close)) {\n          if (nodeForExtra) {\n            this.addTrailingCommaExtraToNode(nodeForExtra);\n          }\n          this.next();\n          break;\n        }\n      }\n\n      elts.push(this.parseExprListItem(allowEmpty, refExpressionErrors));\n    }\n    return elts;\n  }\n\n  parseExprListItem(\n    this: Parser,\n    allowEmpty?: boolean,\n    refExpressionErrors?: ExpressionErrors | null,\n    allowPlaceholder?: boolean | null,\n  ): N.Expression | null;\n  parseExprListItem(\n    this: Parser,\n    allowEmpty?: false,\n    refExpressionErrors?: ExpressionErrors | null,\n    allowPlaceholder?: boolean | null,\n  ): N.Expression;\n  parseExprListItem(\n    this: Parser,\n    allowEmpty?: boolean | null,\n    refExpressionErrors?: ExpressionErrors | null,\n    allowPlaceholder?: boolean | null,\n  ): N.Expression | N.SpreadElement | N.ArgumentPlaceholder | null {\n    let elt;\n    if (this.match(tt.comma)) {\n      if (!allowEmpty) {\n        this.raise(Errors.UnexpectedToken, this.state.curPosition(), {\n          unexpected: \",\",\n        });\n      }\n      elt = null;\n    } else if (this.match(tt.ellipsis)) {\n      const spreadNodeStartLoc = this.state.startLoc;\n\n      elt = this.parseParenItem(\n        this.parseSpread(refExpressionErrors),\n        spreadNodeStartLoc,\n      );\n    } else if (this.match(tt.question)) {\n      this.expectPlugin(\"partialApplication\");\n      if (!allowPlaceholder) {\n        this.raise(Errors.UnexpectedArgumentPlaceholder, this.state.startLoc);\n      }\n      const node = this.startNode<N.ArgumentPlaceholder>();\n      this.next();\n      elt = this.finishNode(node, \"ArgumentPlaceholder\");\n    } else {\n      elt = this.parseMaybeAssignAllowIn(\n        refExpressionErrors,\n        this.parseParenItem,\n      );\n    }\n    return elt;\n  }\n\n  // Parse the next token as an identifier. If `liberal` is true (used\n  // when parsing properties), it will also convert keywords into\n  // identifiers.\n  // This shouldn't be used to parse the keywords of meta properties, since they\n  // are not identifiers and cannot contain escape sequences.\n\n  parseIdentifier(liberal?: boolean): N.Identifier {\n    const node = this.startNode<N.Identifier>();\n    const name = this.parseIdentifierName(liberal);\n\n    return this.createIdentifier(node, name);\n  }\n\n  createIdentifier(\n    node: Omit<N.Identifier, \"type\">,\n    name: string,\n  ): N.Identifier {\n    node.name = name;\n    node.loc.identifierName = name;\n\n    return this.finishNode(node, \"Identifier\");\n  }\n\n  parseIdentifierName(liberal?: boolean): string {\n    let name: string;\n\n    const { startLoc, type } = this.state;\n\n    if (tokenIsKeywordOrIdentifier(type)) {\n      name = this.state.value;\n    } else {\n      this.unexpected();\n    }\n\n    const tokenIsKeyword = tokenKeywordOrIdentifierIsKeyword(type);\n\n    if (liberal) {\n      // If the current token is not used as a keyword, set its type to \"tt.name\".\n      // This will prevent this.next() from throwing about unexpected escapes.\n      if (tokenIsKeyword) {\n        this.replaceToken(tt.name);\n      }\n    } else {\n      this.checkReservedWord(name, startLoc, tokenIsKeyword, false);\n    }\n\n    this.next();\n\n    return name;\n  }\n\n  checkReservedWord(\n    word: string,\n    startLoc: Position,\n    checkKeywords: boolean,\n    isBinding: boolean,\n  ): void {\n    // Every JavaScript reserved word is 10 characters or less.\n    if (word.length > 10) {\n      return;\n    }\n    // Most identifiers are not reservedWord-like, they don't need special\n    // treatments afterward, which very likely ends up throwing errors\n    if (!canBeReservedWord(word)) {\n      return;\n    }\n\n    if (checkKeywords && isKeyword(word)) {\n      this.raise(Errors.UnexpectedKeyword, startLoc, {\n        keyword: word,\n      });\n      return;\n    }\n\n    const reservedTest = !this.state.strict\n      ? isReservedWord\n      : isBinding\n        ? isStrictBindReservedWord\n        : isStrictReservedWord;\n\n    if (reservedTest(word, this.inModule)) {\n      this.raise(Errors.UnexpectedReservedWord, startLoc, {\n        reservedWord: word,\n      });\n      return;\n    } else if (word === \"yield\") {\n      if (this.prodParam.hasYield) {\n        this.raise(Errors.YieldBindingIdentifier, startLoc);\n        return;\n      }\n    } else if (word === \"await\") {\n      if (this.prodParam.hasAwait) {\n        this.raise(Errors.AwaitBindingIdentifier, startLoc);\n        return;\n      }\n\n      if (this.scope.inStaticBlock) {\n        this.raise(Errors.AwaitBindingIdentifierInStaticBlock, startLoc);\n        return;\n      }\n\n      this.expressionScope.recordAsyncArrowParametersError(startLoc);\n    } else if (word === \"arguments\") {\n      if (this.scope.inClassAndNotInNonArrowFunction) {\n        this.raise(Errors.ArgumentsInClass, startLoc);\n        return;\n      }\n    }\n  }\n\n  // Returns wether `await` is allowed or not in this context, and if it is\n  // keeps track of it to determine whether a module uses top-level await.\n  recordAwaitIfAllowed(): boolean {\n    const isAwaitAllowed =\n      this.prodParam.hasAwait ||\n      (this.options.allowAwaitOutsideFunction && !this.scope.inFunction);\n\n    if (isAwaitAllowed && !this.scope.inFunction) {\n      this.state.hasTopLevelAwait = true;\n    }\n\n    return isAwaitAllowed;\n  }\n\n  // Parses await expression inside async function.\n\n  parseAwait(this: Parser, startLoc: Position): N.AwaitExpression {\n    const node = this.startNodeAt<N.AwaitExpression>(startLoc);\n\n    this.expressionScope.recordParameterInitializerError(\n      Errors.AwaitExpressionFormalParameter,\n      // @ts-expect-error todo(flow->ts)\n      node,\n    );\n\n    if (this.eat(tt.star)) {\n      this.raise(Errors.ObsoleteAwaitStar, node);\n    }\n\n    if (!this.scope.inFunction && !this.options.allowAwaitOutsideFunction) {\n      if (this.isAmbiguousAwait()) {\n        this.ambiguousScriptDifferentAst = true;\n      } else {\n        this.sawUnambiguousESM = true;\n      }\n    }\n\n    if (!this.state.soloAwait) {\n      node.argument = this.parseMaybeUnary(null, true);\n    }\n\n    return this.finishNode(node, \"AwaitExpression\");\n  }\n\n  isAmbiguousAwait(): boolean {\n    if (this.hasPrecedingLineBreak()) return true;\n    const { type } = this.state;\n    return (\n      // All the following expressions are ambiguous:\n      //   await + 0, await - 0, await ( 0 ), await [ 0 ], await / 0 /u, await ``, await of []\n      type === tt.plusMin ||\n      type === tt.parenL ||\n      type === tt.bracketL ||\n      tokenIsTemplate(type) ||\n      (type === tt._of && !this.state.containsEsc) ||\n      // Sometimes the tokenizer generates tt.slash for regexps, and this is\n      // handler by parseExprAtom\n      type === tt.regexp ||\n      type === tt.slash ||\n      // This code could be parsed both as a modulo operator or as an intrinsic:\n      //   await %x(0)\n      (this.hasPlugin(\"v8intrinsic\") && type === tt.modulo)\n    );\n  }\n\n  // Parses yield expression inside generator.\n\n  parseYield(this: Parser): N.YieldExpression {\n    const node = this.startNode<N.YieldExpression>();\n\n    this.expressionScope.recordParameterInitializerError(\n      Errors.YieldInParameter,\n      // @ts-expect-error todo(flow->ts)\n      node,\n    );\n\n    this.next();\n    let delegating = false;\n    let argument: N.Expression | null = null;\n    if (!this.hasPrecedingLineBreak()) {\n      delegating = this.eat(tt.star);\n      switch (this.state.type) {\n        case tt.semi:\n        case tt.eof:\n        case tt.braceR:\n        case tt.parenR:\n        case tt.bracketR:\n        case tt.braceBarR:\n        case tt.colon:\n        case tt.comma:\n          // The above is the complete set of tokens that can\n          // follow an AssignmentExpression, and none of them\n          // can start an AssignmentExpression\n          if (!delegating) break;\n        /* fallthrough */\n        default:\n          argument = this.parseMaybeAssign();\n      }\n    }\n    node.delegate = delegating;\n    node.argument = argument;\n    return this.finishNode(node, \"YieldExpression\");\n  }\n\n  // https://tc39.es/ecma262/#prod-ImportCall\n  parseImportCall(\n    this: Parser,\n    node: Undone<N.ImportExpression>,\n  ): N.ImportExpression {\n    this.next(); // eat tt.parenL\n    node.source = this.parseMaybeAssignAllowIn();\n    if (\n      this.hasPlugin(\"importAttributes\") ||\n      this.hasPlugin(\"importAssertions\")\n    ) {\n      node.options = null;\n    }\n    if (this.eat(tt.comma)) {\n      this.expectImportAttributesPlugin();\n      if (!this.match(tt.parenR)) {\n        node.options = this.parseMaybeAssignAllowIn();\n        this.eat(tt.comma);\n      }\n    }\n    this.expect(tt.parenR);\n    return this.finishNode(node, \"ImportExpression\");\n  }\n\n  // Validates a pipeline (for any of the pipeline Babylon plugins) at the point\n  // of the infix operator `|>`.\n\n  checkPipelineAtInfixOperator(left: N.Expression, leftStartLoc: Position) {\n    if (this.hasPlugin([\"pipelineOperator\", { proposal: \"smart\" }])) {\n      if (left.type === \"SequenceExpression\") {\n        // Ensure that the pipeline head is not a comma-delimited\n        // sequence expression.\n        this.raise(Errors.PipelineHeadSequenceExpression, leftStartLoc);\n      }\n    }\n  }\n\n  parseSmartPipelineBodyInStyle(childExpr: N.Expression, startLoc: Position) {\n    if (this.isSimpleReference(childExpr)) {\n      const bodyNode = this.startNodeAt<N.PipelineBareFunction>(startLoc);\n      bodyNode.callee = childExpr;\n      return this.finishNode(bodyNode, \"PipelineBareFunction\");\n    } else {\n      const bodyNode = this.startNodeAt<N.PipelineTopicExpression>(startLoc);\n      this.checkSmartPipeTopicBodyEarlyErrors(startLoc);\n      bodyNode.expression = childExpr;\n      return this.finishNode(bodyNode, \"PipelineTopicExpression\");\n    }\n  }\n\n  isSimpleReference(expression: N.Expression): boolean {\n    switch (expression.type) {\n      case \"MemberExpression\":\n        return (\n          !expression.computed && this.isSimpleReference(expression.object)\n        );\n      case \"Identifier\":\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  // This helper method is to be called immediately\n  // after a topic-style smart-mix pipe body is parsed.\n  // The `startLoc` is the starting position of the pipe body.\n\n  checkSmartPipeTopicBodyEarlyErrors(startLoc: Position): void {\n    // If the following token is invalidly `=>`, then throw a human-friendly error\n    // instead of something like 'Unexpected token, expected \";\"'.\n    // For example, `x => x |> y => #` (assuming `#` is the topic reference)\n    // groups into `x => (x |> y) => #`,\n    // and `(x |> y) => #` is an invalid arrow function.\n    // This is because smart-mix `|>` has tighter precedence than `=>`.\n    if (this.match(tt.arrow)) {\n      throw this.raise(Errors.PipelineBodyNoArrow, this.state.startLoc);\n    }\n\n    // A topic-style smart-mix pipe body must use the topic reference at least once.\n    if (!this.topicReferenceWasUsedInCurrentContext()) {\n      this.raise(Errors.PipelineTopicUnused, startLoc);\n    }\n  }\n\n  // Enable topic references from outer contexts within Hack-style pipe bodies.\n  // The function modifies the parser's topic-context state to enable or disable\n  // the use of topic references.\n  // The function then calls a callback, then resets the parser\n  // to the old topic-context state that it had before the function was called.\n\n  withTopicBindingContext<T>(callback: () => T): T {\n    const outerContextTopicState = this.state.topicContext;\n    this.state.topicContext = {\n      // Enable the use of the primary topic reference.\n      maxNumOfResolvableTopics: 1,\n      // Hide the use of any topic references from outer contexts.\n      maxTopicIndex: null,\n    };\n\n    try {\n      return callback();\n    } finally {\n      this.state.topicContext = outerContextTopicState;\n    }\n  }\n\n  // This helper method is used only with the deprecated smart-mix pipe proposal.\n  // Disables topic references from outer contexts within syntax constructs\n  // such as the bodies of iteration statements.\n  // The function modifies the parser's topic-context state to enable or disable\n  // the use of topic references with the smartPipelines plugin. They then run a\n  // callback, then they reset the parser to the old topic-context state that it\n  // had before the function was called.\n\n  withSmartMixTopicForbiddingContext<T>(callback: () => T): T {\n    if (this.hasPlugin([\"pipelineOperator\", { proposal: \"smart\" }])) {\n      // Reset the parser\u2019s topic context only if the smart-mix pipe proposal is active.\n      const outerContextTopicState = this.state.topicContext;\n      this.state.topicContext = {\n        // Disable the use of the primary topic reference.\n        maxNumOfResolvableTopics: 0,\n        // Hide the use of any topic references from outer contexts.\n        maxTopicIndex: null,\n      };\n\n      try {\n        return callback();\n      } finally {\n        this.state.topicContext = outerContextTopicState;\n      }\n    } else {\n      // If the pipe proposal is \"minimal\", \"fsharp\", or \"hack\",\n      // or if no pipe proposal is active,\n      // then the callback result is returned\n      // without touching any extra parser state.\n      return callback();\n    }\n  }\n\n  withSoloAwaitPermittingContext<T>(callback: () => T): T {\n    const outerContextSoloAwaitState = this.state.soloAwait;\n    this.state.soloAwait = true;\n\n    try {\n      return callback();\n    } finally {\n      this.state.soloAwait = outerContextSoloAwaitState;\n    }\n  }\n\n  allowInAnd<T>(callback: () => T): T {\n    const flags = this.prodParam.currentFlags();\n    const prodParamToSet = ParamKind.PARAM_IN & ~flags;\n    if (prodParamToSet) {\n      this.prodParam.enter(flags | ParamKind.PARAM_IN);\n      try {\n        return callback();\n      } finally {\n        this.prodParam.exit();\n      }\n    }\n    return callback();\n  }\n\n  disallowInAnd<T>(callback: () => T): T {\n    const flags = this.prodParam.currentFlags();\n    const prodParamToClear = ParamKind.PARAM_IN & flags;\n    if (prodParamToClear) {\n      this.prodParam.enter(flags & ~ParamKind.PARAM_IN);\n      try {\n        return callback();\n      } finally {\n        this.prodParam.exit();\n      }\n    }\n    return callback();\n  }\n\n  // Register the use of a topic reference within the current\n  // topic-binding context.\n  registerTopicReference(): void {\n    this.state.topicContext.maxTopicIndex = 0;\n  }\n\n  topicReferenceIsAllowedInCurrentContext(): boolean {\n    return this.state.topicContext.maxNumOfResolvableTopics >= 1;\n  }\n\n  topicReferenceWasUsedInCurrentContext(): boolean {\n    return (\n      this.state.topicContext.maxTopicIndex != null &&\n      this.state.topicContext.maxTopicIndex >= 0\n    );\n  }\n\n  parseFSharpPipelineBody(this: Parser, prec: number): N.Expression {\n    const startLoc = this.state.startLoc;\n\n    this.state.potentialArrowAt = this.state.start;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = true;\n\n    const ret = this.parseExprOp(\n      this.parseMaybeUnaryOrPrivate(),\n      startLoc,\n      prec,\n    );\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n\n    return ret;\n  }\n\n  // https://github.com/tc39/proposal-js-module-blocks\n  parseModuleExpression(this: Parser): N.ModuleExpression {\n    this.expectPlugin(\"moduleBlocks\");\n    const node = this.startNode<N.ModuleExpression>();\n    this.next(); // eat \"module\"\n    if (!this.match(tt.braceL)) {\n      this.unexpected(null, tt.braceL);\n    }\n    // start program node immediately after `{`\n    const program = this.startNodeAt<N.Program>(this.state.endLoc);\n    this.next(); // eat `{`\n\n    const revertScopes = this.initializeScopes(/** inModule */ true);\n    this.enterInitialScopes();\n\n    try {\n      node.body = this.parseProgram(program, tt.braceR, \"module\");\n    } finally {\n      revertScopes();\n    }\n    return this.finishNode<N.ModuleExpression>(node, \"ModuleExpression\");\n  }\n\n  // Used in Flow plugin\n  parsePropertyNamePrefixOperator(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    prop: Undone<N.ObjectOrClassMember | N.ClassMember>,\n  ): void {}\n}\n", "import type * as N from \"../types.ts\";\nimport {\n  tokenIsIdentifier,\n  tokenIsKeywordOrIdentifier,\n  tokenIsLoop,\n  tokenIsTemplate,\n  tt,\n  type TokenType,\n  getExportedToken,\n} from \"../tokenizer/types.ts\";\nimport ExpressionParser from \"./expression.ts\";\nimport { Errors } from \"../parse-error.ts\";\nimport { isIdentifierChar, isIdentifierStart } from \"../util/identifier.ts\";\nimport * as charCodes from \"charcodes\";\nimport {\n  ScopeFlag,\n  ClassElementType,\n  BindingFlag,\n} from \"../util/scopeflags.ts\";\nimport { ExpressionErrors } from \"./util.ts\";\nimport { ParamKind, functionFlags } from \"../util/production-parameter.ts\";\nimport {\n  newExpressionScope,\n  newParameterDeclarationScope,\n} from \"../util/expression-scope.ts\";\nimport type { SourceType } from \"../options.ts\";\nimport { Token } from \"../tokenizer/index.ts\";\nimport type { Position } from \"../util/location.ts\";\nimport { createPositionWithColumnOffset } from \"../util/location.ts\";\nimport { cloneStringLiteral, cloneIdentifier, type Undone } from \"./node.ts\";\nimport type Parser from \"./index.ts\";\nimport { ParseBindingListFlags } from \"./lval.ts\";\nimport { LoopLabelKind } from \"../tokenizer/state.ts\";\n\nconst loopLabel = { kind: LoopLabelKind.Loop } as const,\n  switchLabel = { kind: LoopLabelKind.Switch } as const;\n\nexport const enum ParseFunctionFlag {\n  Expression = 0b0000,\n  Declaration = 0b0001,\n  HangingDeclaration = 0b0010,\n  NullableId = 0b0100,\n  Async = 0b1000,\n}\n\nexport const enum ParseStatementFlag {\n  StatementOnly = 0b0000,\n  AllowImportExport = 0b0001,\n  AllowDeclaration = 0b0010,\n  AllowFunctionDeclaration = 0b0100,\n  AllowLabeledFunction = 0b1000,\n}\n\nconst loneSurrogate = /[\\uD800-\\uDFFF]/u;\n\nconst keywordRelationalOperator = /in(?:stanceof)?/y;\n\n/**\n * Convert tokens for backward Babel 7 compat.\n * tt.privateName => tt.hash + tt.name\n * tt.templateTail => tt.backquote/tt.braceR + tt.template + tt.backquote\n * tt.templateNonTail => tt.backquote/tt.braceR + tt.template + tt.dollarBraceL\n * For performance reasons this routine mutates `tokens`, it is okay\n * here since we execute `parseTopLevel` once for every file.\n */\nfunction babel7CompatTokens(tokens: (Token | N.Comment)[], input: string) {\n  for (let i = 0; i < tokens.length; i++) {\n    const token = tokens[i];\n    const { type } = token;\n    if (typeof type === \"number\") {\n      if (!process.env.BABEL_8_BREAKING) {\n        if (type === tt.privateName) {\n          const { loc, start, value, end } = token;\n          const hashEndPos = start + 1;\n          const hashEndLoc = createPositionWithColumnOffset(loc.start, 1);\n          tokens.splice(\n            i,\n            1,\n            new Token({\n              // @ts-expect-error: hacky way to create token\n              type: getExportedToken(tt.hash),\n              value: \"#\",\n              start: start,\n              end: hashEndPos,\n              startLoc: loc.start,\n              endLoc: hashEndLoc,\n            }),\n            new Token({\n              // @ts-expect-error: hacky way to create token\n              type: getExportedToken(tt.name),\n              value: value,\n              start: hashEndPos,\n              end: end,\n              startLoc: hashEndLoc,\n              endLoc: loc.end,\n            }),\n          );\n          i++;\n          continue;\n        }\n\n        if (tokenIsTemplate(type)) {\n          const { loc, start, value, end } = token;\n          const backquoteEnd = start + 1;\n          const backquoteEndLoc = createPositionWithColumnOffset(loc.start, 1);\n          let startToken;\n          if (input.charCodeAt(start) === charCodes.graveAccent) {\n            startToken = new Token({\n              // @ts-expect-error: hacky way to create token\n              type: getExportedToken(tt.backQuote),\n              value: \"`\",\n              start: start,\n              end: backquoteEnd,\n              startLoc: loc.start,\n              endLoc: backquoteEndLoc,\n            });\n          } else {\n            startToken = new Token({\n              // @ts-expect-error: hacky way to create token\n              type: getExportedToken(tt.braceR),\n              value: \"}\",\n              start: start,\n              end: backquoteEnd,\n              startLoc: loc.start,\n              endLoc: backquoteEndLoc,\n            });\n          }\n          let templateValue,\n            templateElementEnd,\n            templateElementEndLoc,\n            endToken;\n          if (type === tt.templateTail) {\n            // ends with '`'\n            templateElementEnd = end - 1;\n            templateElementEndLoc = createPositionWithColumnOffset(loc.end, -1);\n            templateValue = value === null ? null : value.slice(1, -1);\n            endToken = new Token({\n              // @ts-expect-error: hacky way to create token\n              type: getExportedToken(tt.backQuote),\n              value: \"`\",\n              start: templateElementEnd,\n              end: end,\n              startLoc: templateElementEndLoc,\n              endLoc: loc.end,\n            });\n          } else {\n            // ends with `${`\n            templateElementEnd = end - 2;\n            templateElementEndLoc = createPositionWithColumnOffset(loc.end, -2);\n            templateValue = value === null ? null : value.slice(1, -2);\n            endToken = new Token({\n              // @ts-expect-error: hacky way to create token\n              type: getExportedToken(tt.dollarBraceL),\n              value: \"${\",\n              start: templateElementEnd,\n              end: end,\n              startLoc: templateElementEndLoc,\n              endLoc: loc.end,\n            });\n          }\n          tokens.splice(\n            i,\n            1,\n            startToken,\n            new Token({\n              // @ts-expect-error: hacky way to create token\n              type: getExportedToken(tt.template),\n              value: templateValue,\n              start: backquoteEnd,\n              end: templateElementEnd,\n              startLoc: backquoteEndLoc,\n              endLoc: templateElementEndLoc,\n            }),\n            endToken,\n          );\n          i += 2;\n          continue;\n        }\n      }\n      // @ts-expect-error: we manipulate `token` for performance reasons\n      token.type = getExportedToken(type);\n    }\n  }\n  return tokens;\n}\nexport default abstract class StatementParser extends ExpressionParser {\n  // ### Statement parsing\n\n  // Parse a program. Initializes the parser, reads any number of\n  // statements, and wraps them in a Program node.  Optionally takes a\n  // `program` argument.  If present, the statements will be appended\n  // to its body instead of creating a new node.\n\n  parseTopLevel(\n    this: Parser,\n    file: Undone<N.File>,\n    program: Undone<N.Program>,\n  ): N.File {\n    file.program = this.parseProgram(program);\n    file.comments = this.comments;\n\n    if (this.options.tokens) {\n      file.tokens = babel7CompatTokens(this.tokens, this.input);\n    }\n\n    return this.finishNode(file, \"File\");\n  }\n\n  parseProgram(\n    this: Parser,\n    program: Undone<N.Program>,\n    end: TokenType = tt.eof,\n    sourceType: SourceType = this.options.sourceType,\n  ): N.Program {\n    program.sourceType = sourceType;\n    program.interpreter = this.parseInterpreterDirective();\n    this.parseBlockBody(program, true, true, end);\n    if (this.inModule) {\n      if (\n        !this.options.allowUndeclaredExports &&\n        this.scope.undefinedExports.size > 0\n      ) {\n        for (const [localName, at] of Array.from(this.scope.undefinedExports)) {\n          this.raise(Errors.ModuleExportUndefined, at, { localName });\n        }\n      }\n      this.addExtra(program, \"topLevelAwait\", this.state.hasTopLevelAwait);\n    }\n    let finishedProgram: N.Program;\n    if (end === tt.eof) {\n      // finish at eof for top level program\n      finishedProgram = this.finishNode(program, \"Program\");\n    } else {\n      // finish immediately before the end token\n      finishedProgram = this.finishNodeAt(\n        program,\n        \"Program\",\n        createPositionWithColumnOffset(this.state.startLoc, -1),\n      );\n    }\n    return finishedProgram;\n  }\n\n  /**\n   * cast a Statement to a Directive. This method mutates input statement.\n   */\n  stmtToDirective(stmt: N.Statement): N.Directive {\n    const directive = stmt as any;\n    directive.type = \"Directive\";\n    directive.value = directive.expression;\n    delete directive.expression;\n\n    const directiveLiteral = directive.value;\n    const expressionValue = directiveLiteral.value;\n    const raw = this.input.slice(directiveLiteral.start, directiveLiteral.end);\n    const val = (directiveLiteral.value = raw.slice(1, -1)); // remove quotes\n\n    this.addExtra(directiveLiteral, \"raw\", raw);\n    this.addExtra(directiveLiteral, \"rawValue\", val);\n    this.addExtra(directiveLiteral, \"expressionValue\", expressionValue);\n\n    directiveLiteral.type = \"DirectiveLiteral\";\n\n    return directive;\n  }\n\n  parseInterpreterDirective(): N.InterpreterDirective | null {\n    if (!this.match(tt.interpreterDirective)) {\n      return null;\n    }\n\n    const node = this.startNode<N.InterpreterDirective>();\n    node.value = this.state.value;\n    this.next();\n    return this.finishNode(node, \"InterpreterDirective\");\n  }\n\n  isLet(): boolean {\n    if (!this.isContextual(tt._let)) {\n      return false;\n    }\n    return this.hasFollowingBindingAtom();\n  }\n\n  chStartsBindingIdentifier(ch: number, pos: number) {\n    if (isIdentifierStart(ch)) {\n      keywordRelationalOperator.lastIndex = pos;\n      if (keywordRelationalOperator.test(this.input)) {\n        // We have seen `in` or `instanceof` so far, now check if the identifier\n        // ends here\n        const endCh = this.codePointAtPos(keywordRelationalOperator.lastIndex);\n        if (!isIdentifierChar(endCh) && endCh !== charCodes.backslash) {\n          return false;\n        }\n      }\n      return true;\n    } else if (ch === charCodes.backslash) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  chStartsBindingPattern(ch: number) {\n    return (\n      ch === charCodes.leftSquareBracket || ch === charCodes.leftCurlyBrace\n    );\n  }\n\n  /**\n   * Assuming we have seen a contextual `let` and declaration is allowed, check if it\n   * starts a variable declaration so that it should be interpreted as a keyword.\n   */\n  hasFollowingBindingAtom(): boolean {\n    const next = this.nextTokenStart();\n    const nextCh = this.codePointAtPos(next);\n    return (\n      this.chStartsBindingPattern(nextCh) ||\n      this.chStartsBindingIdentifier(nextCh, next)\n    );\n  }\n\n  /**\n   * Assuming we have seen a contextual `using` and declaration is allowed, check if it\n   * starts a variable declaration in the same line so that it should be interpreted as\n   * a keyword.\n   */\n  hasInLineFollowingBindingIdentifierOrBrace(): boolean {\n    const next = this.nextTokenInLineStart();\n    const nextCh = this.codePointAtPos(next);\n    return (\n      nextCh === charCodes.leftCurlyBrace ||\n      this.chStartsBindingIdentifier(nextCh, next)\n    );\n  }\n\n  startsUsingForOf(): boolean {\n    const { type, containsEsc } = this.lookahead();\n    if (type === tt._of && !containsEsc) {\n      // `using of` must start a for-lhs-of statement\n      return false;\n    } else if (tokenIsIdentifier(type) && !this.hasFollowingLineBreak()) {\n      this.expectPlugin(\"explicitResourceManagement\");\n      return true;\n    }\n  }\n\n  startsAwaitUsing(): boolean {\n    let next = this.nextTokenInLineStart();\n    if (this.isUnparsedContextual(next, \"using\")) {\n      next = this.nextTokenInLineStartSince(next + 5);\n      const nextCh = this.codePointAtPos(next);\n      if (this.chStartsBindingIdentifier(nextCh, next)) {\n        this.expectPlugin(\"explicitResourceManagement\");\n        return true;\n      }\n    }\n    return false;\n  }\n\n  // https://tc39.es/ecma262/#prod-ModuleItem\n  parseModuleItem(this: Parser) {\n    return this.parseStatementLike(\n      ParseStatementFlag.AllowImportExport |\n        ParseStatementFlag.AllowDeclaration |\n        ParseStatementFlag.AllowFunctionDeclaration |\n        // This function is actually also used to parse StatementItems,\n        // which with Annex B enabled allows labeled functions.\n        ParseStatementFlag.AllowLabeledFunction,\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-StatementListItem\n  parseStatementListItem(this: Parser) {\n    return this.parseStatementLike(\n      ParseStatementFlag.AllowDeclaration |\n        ParseStatementFlag.AllowFunctionDeclaration |\n        (!this.options.annexB || this.state.strict\n          ? 0\n          : ParseStatementFlag.AllowLabeledFunction),\n    );\n  }\n\n  parseStatementOrSloppyAnnexBFunctionDeclaration(\n    this: Parser,\n    allowLabeledFunction: boolean = false,\n  ) {\n    let flags: ParseStatementFlag = ParseStatementFlag.StatementOnly;\n    if (this.options.annexB && !this.state.strict) {\n      flags |= ParseStatementFlag.AllowFunctionDeclaration;\n      if (allowLabeledFunction) {\n        flags |= ParseStatementFlag.AllowLabeledFunction;\n      }\n    }\n    return this.parseStatementLike(flags);\n  }\n\n  // Parse a single statement.\n  //\n  // If expecting a statement and finding a slash operator, parse a\n  // regular expression literal. This is to handle cases like\n  // `if (foo) /blah/.exec(foo)`, where looking at the previous token\n  // does not help.\n  // https://tc39.es/ecma262/#prod-Statement\n  parseStatement(this: Parser) {\n    return this.parseStatementLike(ParseStatementFlag.StatementOnly);\n  }\n\n  // ImportDeclaration and ExportDeclaration are also handled here so we can throw recoverable errors\n  // when they are not at the top level\n  parseStatementLike(\n    this: Parser,\n    flags: ParseStatementFlag,\n  ):\n    | N.Statement\n    | N.Declaration\n    | N.ImportDeclaration\n    | N.ExportDefaultDeclaration\n    | N.ExportNamedDeclaration\n    | N.ExportAllDeclaration {\n    let decorators: N.Decorator[] | null = null;\n\n    if (this.match(tt.at)) {\n      decorators = this.parseDecorators(true);\n    }\n    return this.parseStatementContent(flags, decorators);\n  }\n\n  parseStatementContent(\n    this: Parser,\n    flags: ParseStatementFlag,\n    decorators?: N.Decorator[] | null,\n  ): N.Statement {\n    const startType = this.state.type;\n    const node = this.startNode();\n    const allowDeclaration = !!(flags & ParseStatementFlag.AllowDeclaration);\n    const allowFunctionDeclaration = !!(\n      flags & ParseStatementFlag.AllowFunctionDeclaration\n    );\n    const topLevel = flags & ParseStatementFlag.AllowImportExport;\n\n    // Most types of statements are recognized by the keyword they\n    // start with. Many are trivial to parse, some require a bit of\n    // complexity.\n\n    switch (startType) {\n      case tt._break:\n        return this.parseBreakContinueStatement(node, /* isBreak */ true);\n      case tt._continue:\n        return this.parseBreakContinueStatement(node, /* isBreak */ false);\n      case tt._debugger:\n        return this.parseDebuggerStatement(node as Undone<N.DebuggerStatement>);\n      case tt._do:\n        return this.parseDoWhileStatement(node as Undone<N.DoWhileStatement>);\n      case tt._for:\n        return this.parseForStatement(node as Undone<N.ForStatement>);\n      case tt._function:\n        if (this.lookaheadCharCode() === charCodes.dot) break;\n        if (!allowFunctionDeclaration) {\n          this.raise(\n            this.state.strict\n              ? Errors.StrictFunction\n              : this.options.annexB\n                ? Errors.SloppyFunctionAnnexB\n                : Errors.SloppyFunction,\n            this.state.startLoc,\n          );\n        }\n        return this.parseFunctionStatement(\n          node as Undone<N.FunctionDeclaration>,\n          false,\n          !allowDeclaration && allowFunctionDeclaration,\n        );\n      case tt._class:\n        if (!allowDeclaration) this.unexpected();\n        return this.parseClass(\n          this.maybeTakeDecorators(\n            decorators,\n            node as Undone<N.ClassDeclaration>,\n          ),\n          true,\n        );\n\n      case tt._if:\n        return this.parseIfStatement(node as Undone<N.IfStatement>);\n      case tt._return:\n        return this.parseReturnStatement(node as Undone<N.ReturnStatement>);\n      case tt._switch:\n        return this.parseSwitchStatement(node as Undone<N.SwitchStatement>);\n      case tt._throw:\n        return this.parseThrowStatement(node as Undone<N.ThrowStatement>);\n      case tt._try:\n        return this.parseTryStatement(node as Undone<N.TryStatement>);\n\n      case tt._await:\n        // [+Await] await [no LineTerminator here] using [no LineTerminator here] BindingList[+Using]\n        if (!this.state.containsEsc && this.startsAwaitUsing()) {\n          if (!this.recordAwaitIfAllowed()) {\n            this.raise(Errors.AwaitUsingNotInAsyncContext, node);\n          } else if (!allowDeclaration) {\n            this.raise(Errors.UnexpectedLexicalDeclaration, node);\n          }\n          this.next(); // eat 'await'\n          return this.parseVarStatement(\n            node as Undone<N.VariableDeclaration>,\n            \"await using\",\n          );\n        }\n        break;\n      case tt._using:\n        // using [no LineTerminator here] BindingList[+Using]\n        if (\n          this.state.containsEsc ||\n          !this.hasInLineFollowingBindingIdentifierOrBrace()\n        ) {\n          break;\n        }\n        this.expectPlugin(\"explicitResourceManagement\");\n        if (!this.scope.inModule && this.scope.inTopLevel) {\n          this.raise(Errors.UnexpectedUsingDeclaration, this.state.startLoc);\n        } else if (!allowDeclaration) {\n          this.raise(Errors.UnexpectedLexicalDeclaration, this.state.startLoc);\n        }\n        return this.parseVarStatement(\n          node as Undone<N.VariableDeclaration>,\n          \"using\",\n        );\n      case tt._let: {\n        if (this.state.containsEsc) {\n          break;\n        }\n        // `let [` is an explicit negative lookahead for\n        // ExpressionStatement, so special-case it first.\n        const next = this.nextTokenStart();\n        const nextCh = this.codePointAtPos(next);\n        if (nextCh !== charCodes.leftSquareBracket) {\n          if (!allowDeclaration && this.hasFollowingLineBreak()) break;\n          if (\n            !this.chStartsBindingIdentifier(nextCh, next) &&\n            nextCh !== charCodes.leftCurlyBrace\n          ) {\n            break;\n          }\n        }\n      }\n      // fall through\n      case tt._const: {\n        if (!allowDeclaration) {\n          this.raise(Errors.UnexpectedLexicalDeclaration, this.state.startLoc);\n        }\n      }\n      // fall through\n      case tt._var: {\n        const kind = this.state.value;\n        return this.parseVarStatement(\n          node as Undone<N.VariableDeclaration>,\n          kind,\n        );\n      }\n      case tt._while:\n        return this.parseWhileStatement(node as Undone<N.WhileStatement>);\n      case tt._with:\n        return this.parseWithStatement(node as Undone<N.WithStatement>);\n      case tt.braceL:\n        return this.parseBlock();\n      case tt.semi:\n        return this.parseEmptyStatement(node as Undone<N.EmptyStatement>);\n      case tt._import: {\n        const nextTokenCharCode = this.lookaheadCharCode();\n        if (\n          nextTokenCharCode === charCodes.leftParenthesis || // import()\n          nextTokenCharCode === charCodes.dot // import.meta\n        ) {\n          break;\n        }\n      }\n      // fall through\n      case tt._export: {\n        if (!this.options.allowImportExportEverywhere && !topLevel) {\n          this.raise(Errors.UnexpectedImportExport, this.state.startLoc);\n        }\n\n        this.next(); // eat `import`/`export`\n\n        let result;\n        if (startType === tt._import) {\n          result = this.parseImport(node as Undone<N.ImportDeclaration>);\n\n          if (\n            result.type === \"ImportDeclaration\" &&\n            (!result.importKind || result.importKind === \"value\")\n          ) {\n            this.sawUnambiguousESM = true;\n          }\n        } else {\n          result = this.parseExport(\n            node as Undone<\n              | N.ExportAllDeclaration\n              | N.ExportDefaultDeclaration\n              | N.ExportDefaultDeclaration\n            >,\n            decorators,\n          );\n\n          if (\n            (result.type === \"ExportNamedDeclaration\" &&\n              (!result.exportKind || result.exportKind === \"value\")) ||\n            (result.type === \"ExportAllDeclaration\" &&\n              (!result.exportKind || result.exportKind === \"value\")) ||\n            result.type === \"ExportDefaultDeclaration\"\n          ) {\n            this.sawUnambiguousESM = true;\n          }\n        }\n\n        this.assertModuleNodeAllowed(result);\n\n        return result;\n      }\n\n      default: {\n        if (this.isAsyncFunction()) {\n          if (!allowDeclaration) {\n            this.raise(\n              Errors.AsyncFunctionInSingleStatementContext,\n              this.state.startLoc,\n            );\n          }\n          this.next(); // eat 'async'\n          return this.parseFunctionStatement(\n            node as Undone<N.FunctionDeclaration>,\n            true,\n            !allowDeclaration && allowFunctionDeclaration,\n          );\n        }\n      }\n    }\n\n    // If the statement does not start with a statement keyword or a\n    // brace, it's an ExpressionStatement or LabeledStatement. We\n    // simply start parsing an expression, and afterwards, if the\n    // next token is a colon and the expression was a simple\n    // Identifier node, we switch to interpreting it as a label.\n    const maybeName = this.state.value;\n    const expr = this.parseExpression();\n\n    if (\n      tokenIsIdentifier(startType) &&\n      expr.type === \"Identifier\" &&\n      this.eat(tt.colon)\n    ) {\n      return this.parseLabeledStatement(\n        node as Undone<N.LabeledStatement>,\n        maybeName,\n        expr,\n        flags,\n      );\n    } else {\n      return this.parseExpressionStatement(\n        node as Undone<N.ExpressionStatement>,\n        expr,\n        decorators,\n      );\n    }\n  }\n\n  assertModuleNodeAllowed(node: N.Node): void {\n    if (!this.options.allowImportExportEverywhere && !this.inModule) {\n      this.raise(Errors.ImportOutsideModule, node);\n    }\n  }\n\n  decoratorsEnabledBeforeExport(): boolean {\n    if (this.hasPlugin(\"decorators-legacy\")) return true;\n    return (\n      this.hasPlugin(\"decorators\") &&\n      this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\") !== false\n    );\n  }\n\n  // Attach the decorators to the given class.\n  // NOTE: This method changes the .start location of the class, and thus\n  // can affect comment attachment. Calling it before or after finalizing\n  // the class node (and thus finalizing its comments) changes how comments\n  // before the `class` keyword or before the final .start location of the\n  // class are attached.\n  maybeTakeDecorators<T extends Undone<N.Class>>(\n    maybeDecorators: N.Decorator[] | null,\n    classNode: T,\n    exportNode?: Undone<N.ExportDefaultDeclaration | N.ExportNamedDeclaration>,\n  ): T {\n    if (maybeDecorators) {\n      if (classNode.decorators && classNode.decorators.length > 0) {\n        // Note: decorators attachment is only attempred multiple times\n        // when the class is part of an export declaration.\n        if (\n          typeof this.getPluginOption(\n            \"decorators\",\n            \"decoratorsBeforeExport\",\n          ) !== \"boolean\"\n        ) {\n          // If `decoratorsBeforeExport` was set to `true` or `false`, we\n          // already threw an error about decorators not being in a valid\n          // position.\n          this.raise(\n            Errors.DecoratorsBeforeAfterExport,\n            classNode.decorators[0],\n          );\n        }\n        classNode.decorators.unshift(...maybeDecorators);\n      } else {\n        classNode.decorators = maybeDecorators;\n      }\n      this.resetStartLocationFromNode(classNode, maybeDecorators[0]);\n      if (exportNode) this.resetStartLocationFromNode(exportNode, classNode);\n    }\n    return classNode;\n  }\n\n  canHaveLeadingDecorator(): boolean {\n    return this.match(tt._class);\n  }\n\n  parseDecorators(this: Parser, allowExport?: boolean): N.Decorator[] {\n    const decorators = [];\n    do {\n      decorators.push(this.parseDecorator());\n    } while (this.match(tt.at));\n\n    if (this.match(tt._export)) {\n      if (!allowExport) {\n        this.unexpected();\n      }\n\n      if (!this.decoratorsEnabledBeforeExport()) {\n        this.raise(Errors.DecoratorExportClass, this.state.startLoc);\n      }\n    } else if (!this.canHaveLeadingDecorator()) {\n      throw this.raise(Errors.UnexpectedLeadingDecorator, this.state.startLoc);\n    }\n\n    return decorators;\n  }\n\n  parseDecorator(this: Parser): N.Decorator {\n    this.expectOnePlugin([\"decorators\", \"decorators-legacy\"]);\n\n    const node = this.startNode<N.Decorator>();\n    this.next();\n\n    if (this.hasPlugin(\"decorators\")) {\n      const startLoc = this.state.startLoc;\n      let expr: N.Expression;\n\n      if (this.match(tt.parenL)) {\n        const startLoc = this.state.startLoc;\n        this.next(); // eat '('\n        expr = this.parseExpression();\n        this.expect(tt.parenR);\n        expr = this.wrapParenthesis(startLoc, expr);\n\n        const paramsStartLoc = this.state.startLoc;\n        node.expression = this.parseMaybeDecoratorArguments(expr);\n        if (\n          this.getPluginOption(\"decorators\", \"allowCallParenthesized\") ===\n            false &&\n          node.expression !== expr\n        ) {\n          this.raise(\n            Errors.DecoratorArgumentsOutsideParentheses,\n            paramsStartLoc,\n          );\n        }\n      } else {\n        expr = this.parseIdentifier(false);\n\n        while (this.eat(tt.dot)) {\n          const node = this.startNodeAt<N.MemberExpression>(startLoc);\n          node.object = expr;\n          if (this.match(tt.privateName)) {\n            this.classScope.usePrivateName(\n              this.state.value,\n              this.state.startLoc,\n            );\n            node.property = this.parsePrivateName();\n          } else {\n            node.property = this.parseIdentifier(true);\n          }\n          node.computed = false;\n          expr = this.finishNode(node, \"MemberExpression\");\n        }\n\n        node.expression = this.parseMaybeDecoratorArguments(expr);\n      }\n    } else {\n      node.expression = this.parseExprSubscripts();\n    }\n    return this.finishNode(node, \"Decorator\");\n  }\n\n  parseMaybeDecoratorArguments(this: Parser, expr: N.Expression): N.Expression {\n    if (this.eat(tt.parenL)) {\n      const node = this.startNodeAtNode<N.CallExpression>(expr);\n      node.callee = expr;\n      node.arguments = this.parseCallExpressionArguments(tt.parenR, false);\n      this.toReferencedList(node.arguments);\n      return this.finishNode(node, \"CallExpression\");\n    }\n\n    return expr;\n  }\n\n  parseBreakContinueStatement(\n    node: Undone<N.Node>,\n    isBreak: true,\n  ): N.BreakStatement;\n  parseBreakContinueStatement(\n    node: Undone<N.Node>,\n    isBreak: false,\n  ): N.ContinueStatement;\n  parseBreakContinueStatement(\n    node: Undone<N.BreakStatement | N.ContinueStatement>,\n    isBreak: boolean,\n  ): N.BreakStatement | N.ContinueStatement {\n    this.next();\n\n    if (this.isLineTerminator()) {\n      node.label = null;\n    } else {\n      node.label = this.parseIdentifier();\n      this.semicolon();\n    }\n\n    this.verifyBreakContinue(node, isBreak);\n\n    return this.finishNode(\n      node,\n      isBreak ? \"BreakStatement\" : \"ContinueStatement\",\n    );\n  }\n\n  verifyBreakContinue(\n    node: Undone<N.BreakStatement | N.ContinueStatement>,\n    isBreak: boolean,\n  ) {\n    let i;\n    for (i = 0; i < this.state.labels.length; ++i) {\n      const lab = this.state.labels[i];\n      if (node.label == null || lab.name === node.label.name) {\n        if (lab.kind != null && (isBreak || lab.kind === LoopLabelKind.Loop)) {\n          break;\n        }\n        if (node.label && isBreak) break;\n      }\n    }\n    if (i === this.state.labels.length) {\n      const type = isBreak ? \"BreakStatement\" : \"ContinueStatement\";\n      this.raise(Errors.IllegalBreakContinue, node, { type });\n    }\n  }\n\n  parseDebuggerStatement(\n    node: Undone<N.DebuggerStatement>,\n  ): N.DebuggerStatement {\n    this.next();\n    this.semicolon();\n    return this.finishNode(node, \"DebuggerStatement\");\n  }\n\n  parseHeaderExpression(this: Parser): N.Expression {\n    this.expect(tt.parenL);\n    const val = this.parseExpression();\n    this.expect(tt.parenR);\n    return val;\n  }\n\n  // https://tc39.es/ecma262/#prod-DoWhileStatement\n  parseDoWhileStatement(\n    this: Parser,\n    node: Undone<N.DoWhileStatement>,\n  ): N.DoWhileStatement {\n    this.next();\n    this.state.labels.push(loopLabel);\n\n    // Parse the loop body's body.\n    node.body =\n      // For the smartPipelines plugin: Disable topic references from outer\n      // contexts within the loop body. They are permitted in test expressions,\n      // outside of the loop body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse the loop body's body.\n        this.parseStatement(),\n      );\n\n    this.state.labels.pop();\n\n    this.expect(tt._while);\n    node.test = this.parseHeaderExpression();\n    this.eat(tt.semi);\n    return this.finishNode(node, \"DoWhileStatement\");\n  }\n\n  // Disambiguating between a `for` and a `for`/`in` or `for`/`of`\n  // loop is non-trivial. Basically, we have to parse the init `var`\n  // statement or expression, disallowing the `in` operator (see\n  // the second parameter to `parseExpression`), and then check\n  // whether the next token is `in` or `of`. When there is no init\n  // part (semicolon immediately after the opening parenthesis), it\n  // is a regular `for` loop.\n\n  parseForStatement(\n    this: Parser,\n    node: Undone<N.ForStatement | N.ForInOf>,\n  ): N.ForLike {\n    this.next();\n    this.state.labels.push(loopLabel);\n\n    let awaitAt = null;\n\n    if (this.isContextual(tt._await) && this.recordAwaitIfAllowed()) {\n      awaitAt = this.state.startLoc;\n      this.next();\n    }\n    this.scope.enter(ScopeFlag.OTHER);\n    this.expect(tt.parenL);\n\n    if (this.match(tt.semi)) {\n      if (awaitAt !== null) {\n        this.unexpected(awaitAt);\n      }\n      return this.parseFor(node as Undone<N.ForStatement>, null);\n    }\n\n    const startsWithLet = this.isContextual(tt._let);\n    {\n      const startsWithAwaitUsing =\n        this.isContextual(tt._await) && this.startsAwaitUsing();\n      const starsWithUsingDeclaration =\n        startsWithAwaitUsing ||\n        (this.isContextual(tt._using) && this.startsUsingForOf());\n      const isLetOrUsing =\n        (startsWithLet && this.hasFollowingBindingAtom()) ||\n        starsWithUsingDeclaration;\n\n      if (this.match(tt._var) || this.match(tt._const) || isLetOrUsing) {\n        const initNode = this.startNode<N.VariableDeclaration>();\n        let kind;\n        if (startsWithAwaitUsing) {\n          kind = \"await using\";\n          if (!this.recordAwaitIfAllowed()) {\n            this.raise(Errors.AwaitUsingNotInAsyncContext, this.state.startLoc);\n          }\n          this.next(); // eat 'await'\n        } else {\n          kind = this.state.value;\n        }\n        this.next();\n        this.parseVar(initNode, true, kind);\n        const init = this.finishNode(initNode, \"VariableDeclaration\");\n\n        const isForIn = this.match(tt._in);\n        if (isForIn && starsWithUsingDeclaration) {\n          this.raise(Errors.ForInUsing, init);\n        }\n        if (\n          (isForIn || this.isContextual(tt._of)) &&\n          init.declarations.length === 1\n        ) {\n          return this.parseForIn(node as Undone<N.ForInOf>, init, awaitAt);\n        }\n        if (awaitAt !== null) {\n          this.unexpected(awaitAt);\n        }\n        return this.parseFor(node as Undone<N.ForStatement>, init);\n      }\n    }\n\n    // Check whether the first token is possibly a contextual keyword, so that\n    // we can forbid `for (async of` if this turns out to be a for-of loop.\n    const startsWithAsync = this.isContextual(tt._async);\n\n    const refExpressionErrors = new ExpressionErrors();\n    const init = this.parseExpression(true, refExpressionErrors);\n    const isForOf = this.isContextual(tt._of);\n    if (isForOf) {\n      // Check for leading tokens that are forbidden in for-of loops:\n      if (startsWithLet) {\n        this.raise(Errors.ForOfLet, init);\n      }\n\n      if (\n        // `for await (async of []);` is allowed.\n        awaitAt === null &&\n        startsWithAsync &&\n        init.type === \"Identifier\"\n      ) {\n        // This catches the case where the `async` in `for (async of` was\n        // parsed as an identifier. If it was parsed as the start of an async\n        // arrow function (e.g. `for (async of => {} of []);`), the LVal check\n        // further down will raise a more appropriate error.\n        this.raise(Errors.ForOfAsync, init);\n      }\n    }\n    if (isForOf || this.match(tt._in)) {\n      this.checkDestructuringPrivate(refExpressionErrors);\n      this.toAssignable(init, /* isLHS */ true);\n      const type = isForOf ? \"ForOfStatement\" : \"ForInStatement\";\n      this.checkLVal(init, { type });\n      return this.parseForIn(\n        node as Undone<N.ForInStatement | N.ForOfStatement>,\n        // @ts-expect-error init has been transformed to an assignable\n        init,\n        awaitAt,\n      );\n    } else {\n      this.checkExpressionErrors(refExpressionErrors, true);\n    }\n    if (awaitAt !== null) {\n      this.unexpected(awaitAt);\n    }\n    return this.parseFor(node as Undone<N.ForStatement>, init);\n  }\n\n  // https://tc39.es/ecma262/#prod-HoistableDeclaration\n  parseFunctionStatement(\n    this: Parser,\n    node: Undone<N.FunctionDeclaration>,\n    isAsync: boolean,\n    isHangingDeclaration: boolean,\n  ): N.FunctionDeclaration {\n    this.next(); // eat 'function'\n    return this.parseFunction(\n      node,\n      ParseFunctionFlag.Declaration |\n        (isHangingDeclaration ? ParseFunctionFlag.HangingDeclaration : 0) |\n        (isAsync ? ParseFunctionFlag.Async : 0),\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-IfStatement\n  parseIfStatement(this: Parser, node: Undone<N.IfStatement>) {\n    this.next();\n    node.test = this.parseHeaderExpression();\n    // Annex B.3.3\n    // https://tc39.es/ecma262/#sec-functiondeclarations-in-ifstatement-statement-clauses\n    node.consequent = this.parseStatementOrSloppyAnnexBFunctionDeclaration();\n    node.alternate = this.eat(tt._else)\n      ? this.parseStatementOrSloppyAnnexBFunctionDeclaration()\n      : null;\n    return this.finishNode(node, \"IfStatement\");\n  }\n\n  parseReturnStatement(this: Parser, node: Undone<N.ReturnStatement>) {\n    if (!this.prodParam.hasReturn && !this.options.allowReturnOutsideFunction) {\n      this.raise(Errors.IllegalReturn, this.state.startLoc);\n    }\n\n    this.next();\n\n    // In `return` (and `break`/`continue`), the keywords with\n    // optional arguments, we eagerly look for a semicolon or the\n    // possibility to insert one.\n\n    if (this.isLineTerminator()) {\n      node.argument = null;\n    } else {\n      node.argument = this.parseExpression();\n      this.semicolon();\n    }\n\n    return this.finishNode(node, \"ReturnStatement\");\n  }\n\n  // https://tc39.es/ecma262/#prod-SwitchStatement\n  parseSwitchStatement(this: Parser, node: Undone<N.SwitchStatement>) {\n    this.next();\n    node.discriminant = this.parseHeaderExpression();\n    const cases: N.SwitchStatement[\"cases\"] = (node.cases = []);\n    this.expect(tt.braceL);\n    this.state.labels.push(switchLabel);\n    this.scope.enter(ScopeFlag.OTHER);\n\n    // Statements under must be grouped (by label) in SwitchCase\n    // nodes. `cur` is used to keep the node that we are currently\n    // adding statements to.\n\n    let cur;\n    for (let sawDefault; !this.match(tt.braceR); ) {\n      if (this.match(tt._case) || this.match(tt._default)) {\n        const isCase = this.match(tt._case);\n        if (cur) this.finishNode(cur, \"SwitchCase\");\n        // @ts-expect-error Fixme\n        cases.push((cur = this.startNode<N.SwitchCase>()));\n        cur.consequent = [];\n        this.next();\n        if (isCase) {\n          cur.test = this.parseExpression();\n        } else {\n          if (sawDefault) {\n            this.raise(\n              Errors.MultipleDefaultsInSwitch,\n              this.state.lastTokStartLoc,\n            );\n          }\n          sawDefault = true;\n          cur.test = null;\n        }\n        this.expect(tt.colon);\n      } else {\n        if (cur) {\n          cur.consequent.push(this.parseStatementListItem());\n        } else {\n          this.unexpected();\n        }\n      }\n    }\n    this.scope.exit();\n    if (cur) this.finishNode(cur, \"SwitchCase\");\n    this.next(); // Closing brace\n    this.state.labels.pop();\n    return this.finishNode(node, \"SwitchStatement\");\n  }\n\n  parseThrowStatement(this: Parser, node: Undone<N.ThrowStatement>) {\n    this.next();\n    if (this.hasPrecedingLineBreak()) {\n      this.raise(Errors.NewlineAfterThrow, this.state.lastTokEndLoc);\n    }\n    node.argument = this.parseExpression();\n    this.semicolon();\n    return this.finishNode(node, \"ThrowStatement\");\n  }\n\n  parseCatchClauseParam(this: Parser): N.Pattern {\n    const param = this.parseBindingAtom();\n\n    this.scope.enter(\n      this.options.annexB && param.type === \"Identifier\"\n        ? ScopeFlag.SIMPLE_CATCH\n        : 0,\n    );\n    this.checkLVal(\n      param,\n      { type: \"CatchClause\" },\n      BindingFlag.TYPE_CATCH_PARAM,\n    );\n\n    return param;\n  }\n\n  parseTryStatement(\n    this: Parser,\n    node: Undone<N.TryStatement>,\n  ): N.TryStatement {\n    this.next();\n\n    node.block = this.parseBlock();\n    node.handler = null;\n\n    if (this.match(tt._catch)) {\n      const clause = this.startNode<N.CatchClause>();\n      this.next();\n      if (this.match(tt.parenL)) {\n        this.expect(tt.parenL);\n        clause.param = this.parseCatchClauseParam();\n        this.expect(tt.parenR);\n      } else {\n        clause.param = null;\n        this.scope.enter(ScopeFlag.OTHER);\n      }\n\n      // Parse the catch clause's body.\n      clause.body =\n        // For the smartPipelines plugin: Disable topic references from outer\n        // contexts within the catch clause's body.\n        this.withSmartMixTopicForbiddingContext(() =>\n          // Parse the catch clause's body.\n          this.parseBlock(false, false),\n        );\n\n      this.scope.exit();\n      node.handler = this.finishNode(clause, \"CatchClause\");\n    }\n\n    node.finalizer = this.eat(tt._finally) ? this.parseBlock() : null;\n\n    if (!node.handler && !node.finalizer) {\n      this.raise(Errors.NoCatchOrFinally, node);\n    }\n\n    return this.finishNode(node, \"TryStatement\");\n  }\n\n  // https://tc39.es/ecma262/#prod-VariableStatement\n  // https://tc39.es/ecma262/#prod-LexicalDeclaration\n  parseVarStatement(\n    this: Parser,\n    node: Undone<N.VariableDeclaration>,\n    kind: \"var\" | \"let\" | \"const\" | \"using\" | \"await using\",\n    allowMissingInitializer: boolean = false,\n  ): N.VariableDeclaration {\n    this.next();\n    this.parseVar(node, false, kind, allowMissingInitializer);\n    this.semicolon();\n    return this.finishNode(node, \"VariableDeclaration\");\n  }\n\n  // https://tc39.es/ecma262/#prod-WhileStatement\n  parseWhileStatement(\n    this: Parser,\n    node: Undone<N.WhileStatement>,\n  ): N.WhileStatement {\n    this.next();\n    node.test = this.parseHeaderExpression();\n    this.state.labels.push(loopLabel);\n\n    // Parse the loop body.\n    node.body =\n      // For the smartPipelines plugin:\n      // Disable topic references from outer contexts within the loop body.\n      // They are permitted in test expressions, outside of the loop body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse loop body.\n        this.parseStatement(),\n      );\n\n    this.state.labels.pop();\n\n    return this.finishNode(node, \"WhileStatement\");\n  }\n\n  parseWithStatement(\n    this: Parser,\n    node: Undone<N.WithStatement>,\n  ): N.WithStatement {\n    if (this.state.strict) {\n      this.raise(Errors.StrictWith, this.state.startLoc);\n    }\n    this.next();\n    node.object = this.parseHeaderExpression();\n\n    // Parse the statement body.\n    node.body =\n      // For the smartPipelines plugin:\n      // Disable topic references from outer contexts within the with statement's body.\n      // They are permitted in function default-parameter expressions, which are\n      // part of the outer context, outside of the with statement's body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse the statement body.\n        this.parseStatement(),\n      );\n\n    return this.finishNode(node, \"WithStatement\");\n  }\n\n  parseEmptyStatement(node: Undone<N.EmptyStatement>): N.EmptyStatement {\n    this.next();\n    return this.finishNode(node, \"EmptyStatement\");\n  }\n\n  // https://tc39.es/ecma262/#prod-LabelledStatement\n  parseLabeledStatement(\n    this: Parser,\n    node: Undone<N.LabeledStatement>,\n    maybeName: string,\n    expr: N.Identifier,\n    flags: ParseStatementFlag,\n  ): N.LabeledStatement {\n    for (const label of this.state.labels) {\n      if (label.name === maybeName) {\n        this.raise(Errors.LabelRedeclaration, expr, {\n          labelName: maybeName,\n        });\n      }\n    }\n\n    const kind = tokenIsLoop(this.state.type)\n      ? LoopLabelKind.Loop\n      : this.match(tt._switch)\n        ? LoopLabelKind.Switch\n        : null;\n    for (let i = this.state.labels.length - 1; i >= 0; i--) {\n      const label = this.state.labels[i];\n      if (label.statementStart === node.start) {\n        label.statementStart = this.state.start;\n        label.kind = kind;\n      } else {\n        break;\n      }\n    }\n\n    this.state.labels.push({\n      name: maybeName,\n      kind: kind,\n      statementStart: this.state.start,\n    });\n    // https://tc39.es/ecma262/#prod-LabelledItem\n    node.body =\n      flags & ParseStatementFlag.AllowLabeledFunction\n        ? this.parseStatementOrSloppyAnnexBFunctionDeclaration(true)\n        : this.parseStatement();\n\n    this.state.labels.pop();\n    node.label = expr;\n    return this.finishNode(node, \"LabeledStatement\");\n  }\n\n  parseExpressionStatement(\n    node: Undone<N.ExpressionStatement>,\n    expr: N.Expression,\n    /* eslint-disable-next-line @typescript-eslint/no-unused-vars -- used in TypeScript parser */\n    decorators: N.Decorator[] | null,\n  ) {\n    node.expression = expr;\n    this.semicolon();\n    return this.finishNode(node, \"ExpressionStatement\");\n  }\n\n  // Parse a semicolon-enclosed block of statements, handling `\"use\n  // strict\"` declarations when `allowDirectives` is true (used for\n  // function bodies).\n\n  parseBlock(\n    this: Parser,\n    allowDirectives: boolean = false,\n    createNewLexicalScope: boolean = true,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): N.BlockStatement {\n    const node = this.startNode<N.BlockStatement>();\n    if (allowDirectives) {\n      this.state.strictErrors.clear();\n    }\n    this.expect(tt.braceL);\n    if (createNewLexicalScope) {\n      this.scope.enter(ScopeFlag.OTHER);\n    }\n    this.parseBlockBody(\n      node,\n      allowDirectives,\n      false,\n      tt.braceR,\n      afterBlockParse,\n    );\n    if (createNewLexicalScope) {\n      this.scope.exit();\n    }\n    return this.finishNode(node, \"BlockStatement\");\n  }\n\n  isValidDirective(stmt: N.Statement): boolean {\n    return (\n      stmt.type === \"ExpressionStatement\" &&\n      stmt.expression.type === \"StringLiteral\" &&\n      !stmt.expression.extra.parenthesized\n    );\n  }\n\n  parseBlockBody(\n    this: Parser,\n    node: Undone<N.BlockStatementLike>,\n    allowDirectives: boolean | undefined | null,\n    topLevel: boolean,\n    end: TokenType,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): void {\n    const body: N.BlockStatementLike[\"body\"] = (node.body = []);\n    const directives: N.BlockStatementLike[\"directives\"] = (node.directives =\n      []);\n    this.parseBlockOrModuleBlockBody(\n      body,\n      allowDirectives ? directives : undefined,\n      topLevel,\n      end,\n      afterBlockParse,\n    );\n  }\n\n  // Undefined directives means that directives are not allowed.\n  // https://tc39.es/ecma262/#prod-Block\n  // https://tc39.es/ecma262/#prod-ModuleBody\n  parseBlockOrModuleBlockBody(\n    this: Parser,\n    body: N.Statement[],\n    directives: N.Directive[] | undefined | null,\n    topLevel: boolean,\n    end: TokenType,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): void {\n    const oldStrict = this.state.strict;\n    let hasStrictModeDirective = false;\n    let parsedNonDirective = false;\n\n    while (!this.match(end)) {\n      const stmt = topLevel\n        ? this.parseModuleItem()\n        : this.parseStatementListItem();\n\n      if (directives && !parsedNonDirective) {\n        if (this.isValidDirective(stmt)) {\n          const directive = this.stmtToDirective(stmt);\n          directives.push(directive);\n\n          if (\n            !hasStrictModeDirective &&\n            directive.value.value === \"use strict\"\n          ) {\n            hasStrictModeDirective = true;\n            this.setStrict(true);\n          }\n\n          continue;\n        }\n        parsedNonDirective = true;\n        // clear strict errors since the strict mode will not change within the block\n        this.state.strictErrors.clear();\n      }\n      body.push(stmt);\n    }\n\n    afterBlockParse?.call(this, hasStrictModeDirective);\n\n    if (!oldStrict) {\n      this.setStrict(false);\n    }\n\n    this.next();\n  }\n\n  // Parse a regular `for` loop. The disambiguation code in\n  // `parseStatement` will already have parsed the init statement or\n  // expression.\n\n  parseFor(\n    this: Parser,\n    node: Undone<N.ForStatement>,\n    init?: N.VariableDeclaration | N.Expression | null,\n  ): N.ForStatement {\n    node.init = init;\n    this.semicolon(/* allowAsi */ false);\n    node.test = this.match(tt.semi) ? null : this.parseExpression();\n    this.semicolon(/* allowAsi */ false);\n    node.update = this.match(tt.parenR) ? null : this.parseExpression();\n    this.expect(tt.parenR);\n\n    // Parse the loop body.\n    node.body =\n      // For the smartPipelines plugin: Disable topic references from outer\n      // contexts within the loop body. They are permitted in test expressions,\n      // outside of the loop body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse the loop body.\n        this.parseStatement(),\n      );\n\n    this.scope.exit();\n    this.state.labels.pop();\n\n    return this.finishNode(node, \"ForStatement\");\n  }\n\n  // Parse a `for`/`in` and `for`/`of` loop, which are almost\n  // same from parser's perspective.\n\n  parseForIn(\n    this: Parser,\n    node: Undone<N.ForInOf>,\n    init: N.VariableDeclaration | N.AssignmentPattern,\n    awaitAt?: Position | null,\n  ): N.ForInOf {\n    const isForIn = this.match(tt._in);\n    this.next();\n\n    if (isForIn) {\n      if (awaitAt !== null) this.unexpected(awaitAt);\n    } else {\n      node.await = awaitAt !== null;\n    }\n\n    if (\n      init.type === \"VariableDeclaration\" &&\n      init.declarations[0].init != null &&\n      (!isForIn ||\n        !this.options.annexB ||\n        this.state.strict ||\n        init.kind !== \"var\" ||\n        init.declarations[0].id.type !== \"Identifier\")\n    ) {\n      this.raise(Errors.ForInOfLoopInitializer, init, {\n        type: isForIn ? \"ForInStatement\" : \"ForOfStatement\",\n      });\n    }\n\n    if (init.type === \"AssignmentPattern\") {\n      this.raise(Errors.InvalidLhs, init, {\n        ancestor: { type: \"ForStatement\" },\n      });\n    }\n\n    node.left = init;\n    node.right = isForIn\n      ? this.parseExpression()\n      : this.parseMaybeAssignAllowIn();\n    this.expect(tt.parenR);\n\n    // Parse the loop body.\n    node.body =\n      // For the smartPipelines plugin:\n      // Disable topic references from outer contexts within the loop body.\n      // They are permitted in test expressions, outside of the loop body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse loop body.\n        this.parseStatement(),\n      );\n\n    this.scope.exit();\n    this.state.labels.pop();\n\n    return this.finishNode(node, isForIn ? \"ForInStatement\" : \"ForOfStatement\");\n  }\n\n  // Parse a list of variable declarations.\n\n  parseVar(\n    this: Parser,\n    node: Undone<N.VariableDeclaration>,\n    isFor: boolean,\n    kind: \"var\" | \"let\" | \"const\" | \"using\" | \"await using\",\n    allowMissingInitializer: boolean = false,\n  ): Undone<N.VariableDeclaration> {\n    const declarations: N.VariableDeclarator[] = (node.declarations = []);\n    node.kind = kind;\n    for (;;) {\n      const decl = this.startNode<N.VariableDeclarator>();\n      this.parseVarId(decl, kind);\n      decl.init = !this.eat(tt.eq)\n        ? null\n        : isFor\n          ? this.parseMaybeAssignDisallowIn()\n          : this.parseMaybeAssignAllowIn();\n\n      if (decl.init === null && !allowMissingInitializer) {\n        if (\n          decl.id.type !== \"Identifier\" &&\n          !(isFor && (this.match(tt._in) || this.isContextual(tt._of)))\n        ) {\n          this.raise(\n            Errors.DeclarationMissingInitializer,\n            this.state.lastTokEndLoc,\n            {\n              kind: \"destructuring\",\n            },\n          );\n        } else if (\n          (kind === \"const\" || kind === \"using\" || kind === \"await using\") &&\n          !(this.match(tt._in) || this.isContextual(tt._of))\n        ) {\n          this.raise(\n            Errors.DeclarationMissingInitializer,\n            this.state.lastTokEndLoc,\n            { kind },\n          );\n        }\n      }\n      declarations.push(this.finishNode(decl, \"VariableDeclarator\"));\n      if (!this.eat(tt.comma)) break;\n    }\n    return node;\n  }\n\n  parseVarId(\n    this: Parser,\n    decl: Undone<N.VariableDeclarator>,\n    kind: \"var\" | \"let\" | \"const\" | \"using\" | \"await using\",\n  ): void {\n    const id = this.parseBindingAtom();\n    if (kind === \"using\" || kind === \"await using\") {\n      if (id.type === \"ArrayPattern\" || id.type === \"ObjectPattern\") {\n        this.raise(Errors.UsingDeclarationHasBindingPattern, id.loc.start);\n      }\n    }\n    this.checkLVal(\n      id,\n      { type: \"VariableDeclarator\" },\n      kind === \"var\" ? BindingFlag.TYPE_VAR : BindingFlag.TYPE_LEXICAL,\n    );\n    decl.id = id;\n  }\n\n  // https://tc39.es/ecma262/#prod-AsyncFunctionExpression\n  parseAsyncFunctionExpression(\n    this: Parser,\n    node: Undone<N.FunctionExpression>,\n  ): N.FunctionExpression {\n    return this.parseFunction(node, ParseFunctionFlag.Async);\n  }\n\n  // Parse a function declaration or expression (depending on the\n  // ParseFunctionFlag.Declaration flag).\n\n  parseFunction<T extends N.NormalFunction>(\n    this: Parser,\n    node: Undone<T>,\n    flags: ParseFunctionFlag = ParseFunctionFlag.Expression,\n  ): T {\n    const hangingDeclaration = flags & ParseFunctionFlag.HangingDeclaration;\n    const isDeclaration = !!(flags & ParseFunctionFlag.Declaration);\n    const requireId = isDeclaration && !(flags & ParseFunctionFlag.NullableId);\n    const isAsync = !!(flags & ParseFunctionFlag.Async);\n\n    this.initFunction(node, isAsync);\n\n    if (this.match(tt.star)) {\n      if (hangingDeclaration) {\n        this.raise(\n          Errors.GeneratorInSingleStatementContext,\n          this.state.startLoc,\n        );\n      }\n      this.next(); // eat *\n      node.generator = true;\n    }\n\n    if (isDeclaration) {\n      node.id = this.parseFunctionId(requireId);\n    }\n\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    this.state.maybeInArrowParameters = false;\n    this.scope.enter(ScopeFlag.FUNCTION);\n    this.prodParam.enter(functionFlags(isAsync, node.generator));\n\n    if (!isDeclaration) {\n      node.id = this.parseFunctionId();\n    }\n\n    this.parseFunctionParams(node, /* isConstructor */ false);\n\n    // For the smartPipelines plugin: Disable topic references from outer\n    // contexts within the function body. They are permitted in function\n    // default-parameter expressions, outside of the function body.\n    this.withSmartMixTopicForbiddingContext(() => {\n      // Parse the function body.\n      this.parseFunctionBodyAndFinish(\n        node,\n        isDeclaration ? \"FunctionDeclaration\" : \"FunctionExpression\",\n      );\n    });\n\n    this.prodParam.exit();\n    this.scope.exit();\n\n    if (isDeclaration && !hangingDeclaration) {\n      // We need to register this _after_ parsing the function body\n      // because of TypeScript body-less function declarations,\n      // which shouldn't be added to the scope.\n      this.registerFunctionStatementId(node as T);\n    }\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    return node as T;\n  }\n\n  parseFunctionId(requireId?: boolean): N.Identifier | undefined | null {\n    return requireId || tokenIsIdentifier(this.state.type)\n      ? this.parseIdentifier()\n      : null;\n  }\n\n  parseFunctionParams(\n    this: Parser,\n    node: Undone<N.Function>,\n    isConstructor?: boolean,\n  ): void {\n    this.expect(tt.parenL);\n    this.expressionScope.enter(newParameterDeclarationScope());\n    node.params = this.parseBindingList(\n      tt.parenR,\n      charCodes.rightParenthesis,\n      ParseBindingListFlags.IS_FUNCTION_PARAMS |\n        (isConstructor ? ParseBindingListFlags.IS_CONSTRUCTOR_PARAMS : 0),\n    );\n\n    this.expressionScope.exit();\n  }\n\n  registerFunctionStatementId(node: N.Function): void {\n    if (!node.id) return;\n\n    // If it is a regular function declaration in sloppy mode, then it is\n    // subject to Annex B semantics (BindingFlag.TYPE_FUNCTION). Otherwise, the binding\n    // mode depends on properties of the current scope (see\n    // treatFunctionsAsVar).\n    this.scope.declareName(\n      node.id.name,\n      !this.options.annexB || this.state.strict || node.generator || node.async\n        ? this.scope.treatFunctionsAsVar\n          ? BindingFlag.TYPE_VAR\n          : BindingFlag.TYPE_LEXICAL\n        : BindingFlag.TYPE_FUNCTION,\n      node.id.loc.start,\n    );\n  }\n\n  // Parse a class declaration or literal (depending on the\n  // `isStatement` parameter).\n\n  parseClass<T extends N.Class>(\n    this: Parser,\n    node: Undone<T>,\n    isStatement: /* T === ClassDeclaration */ boolean,\n    optionalId?: boolean,\n  ): T {\n    this.next(); // 'class'\n\n    // A class definition is always strict mode code.\n    const oldStrict = this.state.strict;\n    this.state.strict = true;\n\n    this.parseClassId(node, isStatement, optionalId);\n    this.parseClassSuper(node);\n    // this.state.strict is restored in parseClassBody\n    node.body = this.parseClassBody(!!node.superClass, oldStrict);\n\n    return this.finishNode(\n      node,\n      isStatement ? \"ClassDeclaration\" : \"ClassExpression\",\n    );\n  }\n\n  isClassProperty(): boolean {\n    return this.match(tt.eq) || this.match(tt.semi) || this.match(tt.braceR);\n  }\n\n  isClassMethod(): boolean {\n    return this.match(tt.parenL);\n  }\n\n  nameIsConstructor(key: N.Expression | N.PrivateName): boolean {\n    return (\n      (key.type === \"Identifier\" && key.name === \"constructor\") ||\n      (key.type === \"StringLiteral\" && key.value === \"constructor\")\n    );\n  }\n\n  isNonstaticConstructor(method: N.ClassMethod | N.ClassProperty): boolean {\n    return (\n      !method.computed && !method.static && this.nameIsConstructor(method.key)\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-ClassBody\n  parseClassBody(\n    this: Parser,\n    hadSuperClass: boolean,\n    oldStrict: boolean,\n  ): N.ClassBody {\n    this.classScope.enter();\n\n    const state: N.ParseClassMemberState = {\n      hadConstructor: false,\n      hadSuperClass,\n    };\n    let decorators: N.Decorator[] = [];\n    const classBody = this.startNode<N.ClassBody>();\n    classBody.body = [];\n\n    this.expect(tt.braceL);\n\n    // For the smartPipelines plugin: Disable topic references from outer\n    // contexts within the class body.\n    this.withSmartMixTopicForbiddingContext(() => {\n      // Parse the contents within the braces.\n      while (!this.match(tt.braceR)) {\n        if (this.eat(tt.semi)) {\n          if (decorators.length > 0) {\n            throw this.raise(\n              Errors.DecoratorSemicolon,\n              this.state.lastTokEndLoc,\n            );\n          }\n          continue;\n        }\n\n        if (this.match(tt.at)) {\n          decorators.push(this.parseDecorator());\n          continue;\n        }\n\n        const member = this.startNode<N.ClassMember>();\n\n        // steal the decorators if there are any\n        if (decorators.length) {\n          // @ts-expect-error Fixme\n          member.decorators = decorators;\n          this.resetStartLocationFromNode(member, decorators[0]);\n          decorators = [];\n        }\n\n        this.parseClassMember(classBody, member, state);\n\n        if (\n          // @ts-expect-error Fixme\n          member.kind === \"constructor\" &&\n          // @ts-expect-error Fixme\n          member.decorators &&\n          // @ts-expect-error Fixme\n          member.decorators.length > 0\n        ) {\n          this.raise(Errors.DecoratorConstructor, member);\n        }\n      }\n    });\n\n    this.state.strict = oldStrict;\n\n    this.next(); // eat `}`\n\n    if (decorators.length) {\n      throw this.raise(Errors.TrailingDecorator, this.state.startLoc);\n    }\n\n    this.classScope.exit();\n\n    return this.finishNode(classBody, \"ClassBody\");\n  }\n\n  // returns true if the current identifier is a method/field name,\n  // false if it is a modifier\n  parseClassMemberFromModifier(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    member: Undone<N.ClassMember>,\n  ): boolean {\n    const key = this.parseIdentifier(true); // eats the modifier\n\n    if (this.isClassMethod()) {\n      const method: N.ClassMethod = member as any;\n\n      // a method named like the modifier\n      method.kind = \"method\";\n      method.computed = false;\n      method.key = key;\n      method.static = false;\n      this.pushClassMethod(\n        classBody,\n        method,\n        false,\n        false,\n        /* isConstructor */ false,\n        false,\n      );\n      return true;\n    } else if (this.isClassProperty()) {\n      const prop: N.ClassProperty = member as any;\n\n      // a property named like the modifier\n      prop.computed = false;\n      prop.key = key;\n      prop.static = false;\n      classBody.body.push(this.parseClassProperty(prop));\n      return true;\n    }\n    this.resetPreviousNodeTrailingComments(key);\n    return false;\n  }\n\n  parseClassMember(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    member: Undone<N.ClassMember>,\n    state: N.ParseClassMemberState,\n  ): void {\n    const isStatic = this.isContextual(tt._static);\n\n    if (isStatic) {\n      if (this.parseClassMemberFromModifier(classBody, member)) {\n        // a class element named 'static'\n        return;\n      }\n      if (this.eat(tt.braceL)) {\n        this.parseClassStaticBlock(classBody, member as any as N.StaticBlock);\n        return;\n      }\n    }\n\n    this.parseClassMemberWithIsStatic(classBody, member, state, isStatic);\n  }\n\n  parseClassMemberWithIsStatic(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    member: Undone<N.ClassMember>,\n    state: N.ParseClassMemberState,\n    isStatic: boolean,\n  ) {\n    const publicMethod = member as N.ClassMethod;\n    const privateMethod = member as N.ClassPrivateMethod;\n    const publicProp = member as N.ClassProperty;\n    const privateProp = member as N.ClassPrivateProperty;\n    const accessorProp = member as N.ClassAccessorProperty;\n\n    const method: typeof publicMethod | typeof privateMethod = publicMethod;\n    const publicMember: typeof publicMethod | typeof publicProp = publicMethod;\n\n    member.static = isStatic;\n    this.parsePropertyNamePrefixOperator(member);\n\n    if (this.eat(tt.star)) {\n      // a generator\n      method.kind = \"method\";\n      const isPrivateName = this.match(tt.privateName);\n      this.parseClassElementName(method);\n\n      if (isPrivateName) {\n        // Private generator method\n        this.pushClassPrivateMethod(classBody, privateMethod, true, false);\n        return;\n      }\n\n      if (this.isNonstaticConstructor(publicMethod)) {\n        this.raise(Errors.ConstructorIsGenerator, publicMethod.key);\n      }\n\n      this.pushClassMethod(\n        classBody,\n        publicMethod,\n        true,\n        false,\n        /* isConstructor */ false,\n        false,\n      );\n\n      return;\n    }\n\n    const isContextual =\n      !this.state.containsEsc && tokenIsIdentifier(this.state.type);\n    const key = this.parseClassElementName(member);\n    const maybeContextualKw = isContextual ? (key as N.Identifier).name : null;\n    const isPrivate = this.isPrivateName(key);\n    const maybeQuestionTokenStartLoc = this.state.startLoc;\n\n    this.parsePostMemberNameModifiers(publicMember);\n\n    if (this.isClassMethod()) {\n      method.kind = \"method\";\n\n      if (isPrivate) {\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n        return;\n      }\n\n      // a normal method\n      const isConstructor = this.isNonstaticConstructor(publicMethod);\n      let allowsDirectSuper = false;\n      if (isConstructor) {\n        publicMethod.kind = \"constructor\";\n\n        // TypeScript allows multiple overloaded constructor declarations.\n        if (state.hadConstructor && !this.hasPlugin(\"typescript\")) {\n          this.raise(Errors.DuplicateConstructor, key);\n        }\n        if (isConstructor && this.hasPlugin(\"typescript\") && member.override) {\n          this.raise(Errors.OverrideOnConstructor, key);\n        }\n        state.hadConstructor = true;\n        allowsDirectSuper = state.hadSuperClass;\n      }\n\n      this.pushClassMethod(\n        classBody,\n        publicMethod,\n        false,\n        false,\n        isConstructor,\n        allowsDirectSuper,\n      );\n    } else if (this.isClassProperty()) {\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else if (maybeContextualKw === \"async\" && !this.isLineTerminator()) {\n      // an async method\n      this.resetPreviousNodeTrailingComments(key);\n      const isGenerator = this.eat(tt.star);\n\n      if (publicMember.optional) {\n        this.unexpected(maybeQuestionTokenStartLoc);\n      }\n\n      method.kind = \"method\";\n      // The so-called parsed name would have been \"async\": get the real name.\n      const isPrivate = this.match(tt.privateName);\n      this.parseClassElementName(method);\n      this.parsePostMemberNameModifiers(publicMember);\n\n      if (isPrivate) {\n        // private async method\n        this.pushClassPrivateMethod(\n          classBody,\n          privateMethod,\n          isGenerator,\n          true,\n        );\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(Errors.ConstructorIsAsync, publicMethod.key);\n        }\n\n        this.pushClassMethod(\n          classBody,\n          publicMethod,\n          isGenerator,\n          true,\n          /* isConstructor */ false,\n          false,\n        );\n      }\n    } else if (\n      (maybeContextualKw === \"get\" || maybeContextualKw === \"set\") &&\n      !(this.match(tt.star) && this.isLineTerminator())\n    ) {\n      // `get\\n*` is an uninitialized property named 'get' followed by a generator.\n      // a getter or setter\n      this.resetPreviousNodeTrailingComments(key);\n      method.kind = maybeContextualKw;\n      // The so-called parsed name would have been \"get/set\": get the real name.\n      const isPrivate = this.match(tt.privateName);\n      this.parseClassElementName(publicMethod);\n\n      if (isPrivate) {\n        // private getter/setter\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(Errors.ConstructorIsAccessor, publicMethod.key);\n        }\n        this.pushClassMethod(\n          classBody,\n          publicMethod,\n          false,\n          false,\n          /* isConstructor */ false,\n          false,\n        );\n      }\n\n      this.checkGetterSetterParams(publicMethod);\n    } else if (maybeContextualKw === \"accessor\" && !this.isLineTerminator()) {\n      this.expectPlugin(\"decoratorAutoAccessors\");\n      this.resetPreviousNodeTrailingComments(key);\n\n      // The so-called parsed name would have been \"accessor\": get the real name.\n      const isPrivate = this.match(tt.privateName);\n      this.parseClassElementName(publicProp);\n      this.pushClassAccessorProperty(classBody, accessorProp, isPrivate);\n    } else if (this.isLineTerminator()) {\n      // an uninitialized class property (due to ASI, since we don't otherwise recognize the next token)\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else {\n      this.unexpected();\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-ClassElementName\n  parseClassElementName(\n    this: Parser,\n    member: Undone<N.ClassMember>,\n  ): N.Expression | N.Identifier | N.PrivateName {\n    const { type, value } = this.state;\n    if (\n      (type === tt.name || type === tt.string) &&\n      member.static &&\n      value === \"prototype\"\n    ) {\n      this.raise(Errors.StaticPrototype, this.state.startLoc);\n    }\n\n    if (type === tt.privateName) {\n      if (value === \"constructor\") {\n        this.raise(Errors.ConstructorClassPrivateField, this.state.startLoc);\n      }\n      const key = this.parsePrivateName();\n      member.key = key;\n      return key;\n    }\n\n    this.parsePropertyName(member);\n    return member.key;\n  }\n\n  parseClassStaticBlock(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    member: Undone<\n      N.StaticBlock & {\n        decorators?: Array<N.Decorator>;\n      }\n    >,\n  ) {\n    // Start a new lexical scope\n    this.scope.enter(\n      ScopeFlag.CLASS | ScopeFlag.STATIC_BLOCK | ScopeFlag.SUPER,\n    );\n    // Start a new scope with regard to loop labels\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n    // ClassStaticBlockStatementList:\n    //   StatementList[~Yield, ~Await, ~Return] opt\n    this.prodParam.enter(ParamKind.PARAM);\n    const body: N.Statement[] = (member.body = []);\n    this.parseBlockOrModuleBlockBody(body, undefined, false, tt.braceR);\n    this.prodParam.exit();\n    this.scope.exit();\n    this.state.labels = oldLabels;\n    classBody.body.push(this.finishNode<N.StaticBlock>(member, \"StaticBlock\"));\n    if (member.decorators?.length) {\n      this.raise(Errors.DecoratorStaticBlock, member);\n    }\n  }\n\n  pushClassProperty(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    prop: N.ClassProperty,\n  ) {\n    if (!prop.computed && this.nameIsConstructor(prop.key)) {\n      // Non-computed field, which is either an identifier named \"constructor\"\n      // or a string literal named \"constructor\"\n      this.raise(Errors.ConstructorClassField, prop.key);\n    }\n\n    classBody.body.push(this.parseClassProperty(prop));\n  }\n\n  pushClassPrivateProperty(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    prop: Undone<N.ClassPrivateProperty>,\n  ) {\n    const node = this.parseClassPrivateProperty(prop);\n    classBody.body.push(node);\n\n    this.classScope.declarePrivateName(\n      this.getPrivateNameSV(node.key),\n      ClassElementType.OTHER,\n      node.key.loc.start,\n    );\n  }\n\n  pushClassAccessorProperty(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    prop: N.ClassAccessorProperty,\n    isPrivate: boolean,\n  ) {\n    if (!isPrivate && !prop.computed && this.nameIsConstructor(prop.key)) {\n      // Non-computed field, which is either an identifier named \"constructor\"\n      // or a string literal named \"constructor\"\n      this.raise(Errors.ConstructorClassField, prop.key);\n    }\n\n    const node = this.parseClassAccessorProperty(prop);\n    classBody.body.push(node);\n\n    if (isPrivate) {\n      this.classScope.declarePrivateName(\n        this.getPrivateNameSV(node.key as N.PrivateName),\n        ClassElementType.OTHER,\n        node.key.loc.start,\n      );\n    }\n  }\n\n  pushClassMethod(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    method: Undone<N.ClassMethod>,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isConstructor: boolean,\n    allowsDirectSuper: boolean,\n  ): void {\n    classBody.body.push(\n      this.parseMethod(\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n        \"ClassMethod\",\n        true,\n      ),\n    );\n  }\n\n  pushClassPrivateMethod(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    method: Undone<N.ClassPrivateMethod>,\n    isGenerator: boolean,\n    isAsync: boolean,\n  ): void {\n    const node = this.parseMethod(\n      method,\n      isGenerator,\n      isAsync,\n      /* isConstructor */ false,\n      false,\n      \"ClassPrivateMethod\",\n      true,\n    );\n    classBody.body.push(node);\n\n    const kind =\n      node.kind === \"get\"\n        ? node.static\n          ? ClassElementType.STATIC_GETTER\n          : ClassElementType.INSTANCE_GETTER\n        : node.kind === \"set\"\n          ? node.static\n            ? ClassElementType.STATIC_SETTER\n            : ClassElementType.INSTANCE_SETTER\n          : ClassElementType.OTHER;\n    this.declareClassPrivateMethodInScope(node, kind);\n  }\n\n  declareClassPrivateMethodInScope(\n    node: Undone<N.ClassPrivateMethod | N.TSDeclareMethod>,\n    kind: number,\n  ) {\n    this.classScope.declarePrivateName(\n      this.getPrivateNameSV(node.key as N.PrivateName),\n      kind,\n      node.key.loc.start,\n    );\n  }\n\n  // Overridden in typescript.js\n  parsePostMemberNameModifiers(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    methodOrProp: Undone<N.ClassMethod | N.ClassProperty>,\n  ): void {}\n\n  // https://tc39.es/ecma262/#prod-FieldDefinition\n  parseClassPrivateProperty(\n    this: Parser,\n    node: Undone<N.ClassPrivateProperty>,\n  ): N.ClassPrivateProperty {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassPrivateProperty\");\n  }\n\n  // https://tc39.es/ecma262/#prod-FieldDefinition\n  parseClassProperty(this: Parser, node: N.ClassProperty): N.ClassProperty {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassProperty\");\n  }\n\n  parseClassAccessorProperty(\n    this: Parser,\n    node: N.ClassAccessorProperty,\n  ): N.ClassAccessorProperty {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassAccessorProperty\");\n  }\n\n  // https://tc39.es/ecma262/#prod-Initializer\n  parseInitializer(\n    this: Parser,\n    node: Undone<\n      N.ClassProperty | N.ClassPrivateProperty | N.ClassAccessorProperty\n    >,\n  ): void {\n    this.scope.enter(ScopeFlag.CLASS | ScopeFlag.SUPER);\n    this.expressionScope.enter(newExpressionScope());\n    this.prodParam.enter(ParamKind.PARAM);\n    node.value = this.eat(tt.eq) ? this.parseMaybeAssignAllowIn() : null;\n    this.expressionScope.exit();\n    this.prodParam.exit();\n    this.scope.exit();\n  }\n\n  parseClassId(\n    node: Undone<N.Class>,\n    isStatement: boolean,\n    optionalId?: boolean | null,\n    bindingType: BindingFlag = BindingFlag.TYPE_CLASS,\n  ): void {\n    if (tokenIsIdentifier(this.state.type)) {\n      node.id = this.parseIdentifier();\n      if (isStatement) {\n        this.declareNameFromIdentifier(node.id, bindingType);\n      }\n    } else {\n      if (optionalId || !isStatement) {\n        node.id = null;\n      } else {\n        throw this.raise(Errors.MissingClassName, this.state.startLoc);\n      }\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-ClassHeritage\n  parseClassSuper(this: Parser, node: Undone<N.Class>): void {\n    node.superClass = this.eat(tt._extends) ? this.parseExprSubscripts() : null;\n  }\n\n  // Parses module export declaration.\n  // https://tc39.es/ecma262/#prod-ExportDeclaration\n\n  parseExport(\n    this: Parser,\n    node: Undone<\n      | N.ExportDefaultDeclaration\n      | N.ExportAllDeclaration\n      | N.ExportNamedDeclaration\n    >,\n    decorators: N.Decorator[] | null,\n  ): N.AnyExport {\n    const maybeDefaultIdentifier = this.parseMaybeImportPhase(\n      node,\n      /* isExport */ true,\n    );\n    const hasDefault = this.maybeParseExportDefaultSpecifier(\n      node,\n      maybeDefaultIdentifier,\n    );\n    const parseAfterDefault = !hasDefault || this.eat(tt.comma);\n    const hasStar = parseAfterDefault && this.eatExportStar(node);\n    const hasNamespace =\n      hasStar && this.maybeParseExportNamespaceSpecifier(node);\n    const parseAfterNamespace =\n      parseAfterDefault && (!hasNamespace || this.eat(tt.comma));\n    const isFromRequired = hasDefault || hasStar;\n\n    if (hasStar && !hasNamespace) {\n      if (hasDefault) this.unexpected();\n      if (decorators) {\n        throw this.raise(Errors.UnsupportedDecoratorExport, node);\n      }\n      this.parseExportFrom(node, true);\n\n      return this.finishNode(node, \"ExportAllDeclaration\");\n    }\n\n    const hasSpecifiers = this.maybeParseExportNamedSpecifiers(node);\n\n    if (hasDefault && parseAfterDefault && !hasStar && !hasSpecifiers) {\n      this.unexpected(null, tt.braceL);\n    }\n\n    if (hasNamespace && parseAfterNamespace) {\n      this.unexpected(null, tt._from);\n    }\n\n    let hasDeclaration;\n    if (isFromRequired || hasSpecifiers) {\n      hasDeclaration = false;\n      if (decorators) {\n        throw this.raise(Errors.UnsupportedDecoratorExport, node);\n      }\n      this.parseExportFrom(\n        node as Undone<N.ExportNamedDeclaration>,\n        isFromRequired,\n      );\n    } else {\n      hasDeclaration = this.maybeParseExportDeclaration(\n        node as Undone<N.ExportNamedDeclaration>,\n      );\n    }\n\n    if (isFromRequired || hasSpecifiers || hasDeclaration) {\n      const node2 = node as Undone<N.ExportNamedDeclaration>;\n      this.checkExport(node2, true, false, !!node2.source);\n      if (node2.declaration?.type === \"ClassDeclaration\") {\n        this.maybeTakeDecorators(decorators, node2.declaration, node2);\n      } else if (decorators) {\n        throw this.raise(Errors.UnsupportedDecoratorExport, node);\n      }\n      return this.finishNode(node2, \"ExportNamedDeclaration\");\n    }\n\n    if (this.eat(tt._default)) {\n      const node2 = node as Undone<N.ExportDefaultDeclaration>;\n      // export default ...\n      const decl = this.parseExportDefaultExpression();\n      node2.declaration = decl;\n\n      if (decl.type === \"ClassDeclaration\") {\n        this.maybeTakeDecorators(decorators, decl as N.ClassDeclaration, node2);\n      } else if (decorators) {\n        throw this.raise(Errors.UnsupportedDecoratorExport, node);\n      }\n\n      this.checkExport(node2, true, true);\n\n      return this.finishNode(node2, \"ExportDefaultDeclaration\");\n    }\n\n    this.unexpected(null, tt.braceL);\n  }\n\n  eatExportStar(\n    node: Undone<N.Node>,\n  ): node is Undone<N.ExportNamedDeclaration | N.ExportAllDeclaration> {\n    return this.eat(tt.star);\n  }\n\n  maybeParseExportDefaultSpecifier(\n    node: Undone<\n      | N.ExportDefaultDeclaration\n      | N.ExportAllDeclaration\n      | N.ExportNamedDeclaration\n    >,\n    maybeDefaultIdentifier: N.Identifier | null,\n  ): node is Undone<N.ExportNamedDeclaration> {\n    if (maybeDefaultIdentifier || this.isExportDefaultSpecifier()) {\n      // export defaultObj ...\n      this.expectPlugin(\"exportDefaultFrom\", maybeDefaultIdentifier?.loc.start);\n      const id = maybeDefaultIdentifier || this.parseIdentifier(true);\n      const specifier = this.startNodeAtNode<N.ExportDefaultSpecifier>(id);\n      specifier.exported = id;\n      (node as Undone<N.ExportNamedDeclaration>).specifiers = [\n        this.finishNode(specifier, \"ExportDefaultSpecifier\"),\n      ];\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseExportNamespaceSpecifier(\n    node: Undone<N.ExportNamedDeclaration | N.ExportAllDeclaration>,\n  ): node is Undone<N.ExportNamedDeclaration> {\n    if (this.isContextual(tt._as)) {\n      (node as Undone<N.ExportNamedDeclaration>).specifiers ??= [];\n\n      const specifier = this.startNodeAt<N.ExportNamespaceSpecifier>(\n        this.state.lastTokStartLoc,\n      );\n\n      this.next();\n\n      specifier.exported = this.parseModuleExportName();\n      (node as Undone<N.ExportNamedDeclaration>).specifiers.push(\n        this.finishNode(specifier, \"ExportNamespaceSpecifier\"),\n      );\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseExportNamedSpecifiers(\n    node: Undone<N.Node>,\n  ): node is Undone<N.ExportNamedDeclaration> {\n    if (this.match(tt.braceL)) {\n      const node2 = node as Undone<N.ExportNamedDeclaration>;\n\n      if (!node2.specifiers) node2.specifiers = [];\n      const isTypeExport = node2.exportKind === \"type\";\n      node2.specifiers.push(...this.parseExportSpecifiers(isTypeExport));\n\n      node2.source = null;\n      node2.declaration = null;\n      if (this.hasPlugin(\"importAssertions\")) {\n        node2.assertions = [];\n      }\n\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseExportDeclaration(\n    this: Parser,\n    node: Undone<N.ExportNamedDeclaration>,\n  ): boolean {\n    if (this.shouldParseExportDeclaration()) {\n      node.specifiers = [];\n      node.source = null;\n      if (this.hasPlugin(\"importAssertions\")) {\n        node.assertions = [];\n      }\n      node.declaration = this.parseExportDeclaration(node);\n      return true;\n    }\n    return false;\n  }\n\n  isAsyncFunction(): boolean {\n    if (!this.isContextual(tt._async)) return false;\n    const next = this.nextTokenInLineStart();\n    return this.isUnparsedContextual(next, \"function\");\n  }\n\n  parseExportDefaultExpression(\n    this: Parser,\n  ): N.ExportDefaultDeclaration[\"declaration\"] {\n    const expr = this.startNode();\n\n    if (this.match(tt._function)) {\n      this.next();\n      return this.parseFunction(\n        expr as Undone<N.FunctionDeclaration>,\n        ParseFunctionFlag.Declaration | ParseFunctionFlag.NullableId,\n      );\n    } else if (this.isAsyncFunction()) {\n      this.next(); // eat 'async'\n      this.next(); // eat 'function'\n      return this.parseFunction(\n        expr as Undone<N.FunctionDeclaration>,\n        ParseFunctionFlag.Declaration |\n          ParseFunctionFlag.NullableId |\n          ParseFunctionFlag.Async,\n      );\n    }\n\n    if (this.match(tt._class)) {\n      return this.parseClass(expr as Undone<N.ClassExpression>, true, true);\n    }\n\n    if (this.match(tt.at)) {\n      if (\n        this.hasPlugin(\"decorators\") &&\n        this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\") === true\n      ) {\n        this.raise(Errors.DecoratorBeforeExport, this.state.startLoc);\n      }\n      return this.parseClass(\n        this.maybeTakeDecorators(\n          this.parseDecorators(false),\n          this.startNode<N.ClassDeclaration>(),\n        ),\n        true,\n        true,\n      );\n    }\n\n    if (this.match(tt._const) || this.match(tt._var) || this.isLet()) {\n      throw this.raise(Errors.UnsupportedDefaultExport, this.state.startLoc);\n    }\n\n    const res = this.parseMaybeAssignAllowIn();\n    this.semicolon();\n    return res;\n  }\n\n  // https://tc39.es/ecma262/#prod-ExportDeclaration\n  parseExportDeclaration(\n    this: Parser,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    node: Undone<N.ExportNamedDeclaration>,\n  ): N.Declaration | undefined | null {\n    if (this.match(tt._class)) {\n      const node = this.parseClass(\n        this.startNode<N.ClassDeclaration>(),\n        true,\n        false,\n      );\n      return node;\n    }\n    return this.parseStatementListItem() as N.Declaration;\n  }\n\n  isExportDefaultSpecifier(): boolean {\n    const { type } = this.state;\n    if (tokenIsIdentifier(type)) {\n      if ((type === tt._async && !this.state.containsEsc) || type === tt._let) {\n        return false;\n      }\n      if (\n        (type === tt._type || type === tt._interface) &&\n        !this.state.containsEsc\n      ) {\n        const { type: nextType } = this.lookahead();\n        // If we see any variable name other than `from` after `type` keyword,\n        // we consider it as flow/typescript type exports\n        // note that this approach may fail on some pedantic cases\n        // export type from = number\n        if (\n          (tokenIsIdentifier(nextType) && nextType !== tt._from) ||\n          nextType === tt.braceL\n        ) {\n          this.expectOnePlugin([\"flow\", \"typescript\"]);\n          return false;\n        }\n      }\n    } else if (!this.match(tt._default)) {\n      return false;\n    }\n\n    const next = this.nextTokenStart();\n    const hasFrom = this.isUnparsedContextual(next, \"from\");\n    if (\n      this.input.charCodeAt(next) === charCodes.comma ||\n      (tokenIsIdentifier(this.state.type) && hasFrom)\n    ) {\n      return true;\n    }\n    // lookahead again when `export default from` is seen\n    if (this.match(tt._default) && hasFrom) {\n      const nextAfterFrom = this.input.charCodeAt(\n        this.nextTokenStartSince(next + 4),\n      );\n      return (\n        nextAfterFrom === charCodes.quotationMark ||\n        nextAfterFrom === charCodes.apostrophe\n      );\n    }\n    return false;\n  }\n\n  parseExportFrom(\n    this: Parser,\n    node: Undone<N.ExportNamedDeclaration | N.ExportAllDeclaration>,\n    expect?: boolean,\n  ): void {\n    if (this.eatContextual(tt._from)) {\n      node.source = this.parseImportSource();\n      this.checkExport(node);\n      this.maybeParseImportAttributes(node);\n      this.checkJSONModuleImport(node);\n    } else if (expect) {\n      this.unexpected();\n    }\n\n    this.semicolon();\n  }\n\n  shouldParseExportDeclaration(): boolean {\n    const { type } = this.state;\n    if (type === tt.at) {\n      this.expectOnePlugin([\"decorators\", \"decorators-legacy\"]);\n      if (this.hasPlugin(\"decorators\")) {\n        if (\n          this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\") === true\n        ) {\n          this.raise(Errors.DecoratorBeforeExport, this.state.startLoc);\n        }\n\n        return true;\n      }\n    }\n\n    if (this.isContextual(tt._using)) {\n      this.raise(Errors.UsingDeclarationExport, this.state.startLoc);\n      return true;\n    }\n\n    if (this.isContextual(tt._await) && this.startsAwaitUsing()) {\n      this.raise(Errors.UsingDeclarationExport, this.state.startLoc);\n      return true;\n    }\n\n    return (\n      type === tt._var ||\n      type === tt._const ||\n      type === tt._function ||\n      type === tt._class ||\n      this.isLet() ||\n      this.isAsyncFunction()\n    );\n  }\n\n  checkExport(\n    node: Undone<\n      | N.ExportNamedDeclaration\n      | N.ExportAllDeclaration\n      | N.ExportDefaultDeclaration\n    >,\n    checkNames?: boolean,\n    isDefault?: boolean,\n    isFrom?: boolean,\n  ): void {\n    if (checkNames) {\n      // Check for duplicate exports\n      if (isDefault) {\n        // Default exports\n        this.checkDuplicateExports(node, \"default\");\n        if (this.hasPlugin(\"exportDefaultFrom\")) {\n          const declaration = (node as any as N.ExportDefaultDeclaration)\n            .declaration;\n          if (\n            declaration.type === \"Identifier\" &&\n            declaration.name === \"from\" &&\n            declaration.end - declaration.start === 4 && // does not contain escape\n            !declaration.extra?.parenthesized\n          ) {\n            this.raise(Errors.ExportDefaultFromAsIdentifier, declaration);\n          }\n        }\n        // @ts-expect-error node.specifiers may not exist\n      } else if (node.specifiers?.length) {\n        // Named exports\n        // @ts-expect-error node.specifiers may not exist\n        for (const specifier of node.specifiers) {\n          const { exported } = specifier;\n          const exportName =\n            exported.type === \"Identifier\" ? exported.name : exported.value;\n          this.checkDuplicateExports(specifier, exportName);\n          if (!isFrom && specifier.local) {\n            const { local } = specifier;\n            if (local.type !== \"Identifier\") {\n              this.raise(Errors.ExportBindingIsString, specifier, {\n                localName: local.value,\n                exportName,\n              });\n            } else {\n              // check for keywords used as local names\n              this.checkReservedWord(local.name, local.loc.start, true, false);\n              // check if export is defined\n              this.scope.checkLocalExport(local);\n            }\n          }\n        }\n      } else if ((node as Undone<N.ExportNamedDeclaration>).declaration) {\n        const decl = (node as Undone<N.ExportNamedDeclaration>).declaration;\n        // Exported declarations\n        if (\n          decl.type === \"FunctionDeclaration\" ||\n          decl.type === \"ClassDeclaration\"\n        ) {\n          const { id } = decl;\n          if (!id) throw new Error(\"Assertion failure\");\n\n          this.checkDuplicateExports(node, id.name);\n        } else if (decl.type === \"VariableDeclaration\") {\n          for (const declaration of decl.declarations) {\n            this.checkDeclaration(declaration.id);\n          }\n        }\n      }\n    }\n  }\n\n  checkDeclaration(node: N.Pattern | N.ObjectProperty): void {\n    if (node.type === \"Identifier\") {\n      this.checkDuplicateExports(node, node.name);\n    } else if (node.type === \"ObjectPattern\") {\n      for (const prop of node.properties) {\n        this.checkDeclaration(prop);\n      }\n    } else if (node.type === \"ArrayPattern\") {\n      for (const elem of node.elements) {\n        if (elem) {\n          this.checkDeclaration(elem);\n        }\n      }\n    } else if (node.type === \"ObjectProperty\") {\n      // @ts-expect-error migrate to Babel types\n      this.checkDeclaration(node.value);\n    } else if (node.type === \"RestElement\") {\n      this.checkDeclaration(node.argument);\n    } else if (node.type === \"AssignmentPattern\") {\n      this.checkDeclaration(node.left);\n    }\n  }\n\n  checkDuplicateExports(\n    node: Undone<\n      | N.Identifier\n      | N.StringLiteral\n      | N.ExportNamedDeclaration\n      | N.ExportSpecifier\n      | N.ExportDefaultSpecifier\n    >,\n    exportName: string,\n  ): void {\n    if (this.exportedIdentifiers.has(exportName)) {\n      if (exportName === \"default\") {\n        this.raise(Errors.DuplicateDefaultExport, node);\n      } else {\n        this.raise(Errors.DuplicateExport, node, { exportName });\n      }\n    }\n    this.exportedIdentifiers.add(exportName);\n  }\n\n  // Parses a comma-separated list of module exports.\n\n  parseExportSpecifiers(isInTypeExport: boolean): Array<N.ExportSpecifier> {\n    const nodes = [];\n    let first = true;\n\n    // export { x, y as z } [from '...']\n    this.expect(tt.braceL);\n\n    while (!this.eat(tt.braceR)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.eat(tt.braceR)) break;\n      }\n      const isMaybeTypeOnly = this.isContextual(tt._type);\n      const isString = this.match(tt.string);\n      const node = this.startNode<N.ExportSpecifier>();\n      node.local = this.parseModuleExportName() as N.Identifier;\n      nodes.push(\n        this.parseExportSpecifier(\n          node,\n          isString,\n          isInTypeExport,\n          isMaybeTypeOnly,\n        ),\n      );\n    }\n\n    return nodes;\n  }\n\n  parseExportSpecifier(\n    node: any,\n    isString: boolean,\n    /* eslint-disable @typescript-eslint/no-unused-vars -- used in TypeScript parser */\n    isInTypeExport: boolean,\n    isMaybeTypeOnly: boolean,\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n  ): N.ExportSpecifier {\n    if (this.eatContextual(tt._as)) {\n      node.exported = this.parseModuleExportName();\n    } else if (isString) {\n      node.exported = cloneStringLiteral(node.local);\n    } else if (!node.exported) {\n      node.exported = cloneIdentifier(node.local);\n    }\n    return this.finishNode<N.ExportSpecifier>(node, \"ExportSpecifier\");\n  }\n\n  // https://tc39.es/ecma262/#prod-ModuleExportName\n  parseModuleExportName(): N.StringLiteral | N.Identifier {\n    if (this.match(tt.string)) {\n      const result = this.parseStringLiteral(this.state.value);\n      const surrogate = loneSurrogate.exec(result.value);\n      if (surrogate) {\n        this.raise(Errors.ModuleExportNameHasLoneSurrogate, result, {\n          surrogateCharCode: surrogate[0].charCodeAt(0),\n        });\n      }\n      return result;\n    }\n    return this.parseIdentifier(true);\n  }\n\n  isJSONModuleImport(\n    node: Undone<\n      N.ExportAllDeclaration | N.ExportNamedDeclaration | N.ImportDeclaration\n    >,\n  ): boolean {\n    if (node.assertions != null) {\n      return node.assertions.some(({ key, value }) => {\n        return (\n          value.value === \"json\" &&\n          (key.type === \"Identifier\"\n            ? key.name === \"type\"\n            : key.value === \"type\")\n        );\n      });\n    }\n    return false;\n  }\n\n  checkImportReflection(node: Undone<N.ImportDeclaration>) {\n    const { specifiers } = node;\n    const singleBindingType =\n      specifiers.length === 1 ? specifiers[0].type : null;\n\n    if (node.phase === \"source\") {\n      if (singleBindingType !== \"ImportDefaultSpecifier\") {\n        this.raise(\n          Errors.SourcePhaseImportRequiresDefault,\n          specifiers[0].loc.start,\n        );\n      }\n    } else if (node.phase === \"defer\") {\n      if (singleBindingType !== \"ImportNamespaceSpecifier\") {\n        this.raise(\n          Errors.DeferImportRequiresNamespace,\n          specifiers[0].loc.start,\n        );\n      }\n    } else if (node.module) {\n      if (singleBindingType !== \"ImportDefaultSpecifier\") {\n        this.raise(Errors.ImportReflectionNotBinding, specifiers[0].loc.start);\n      }\n      if (node.assertions?.length > 0) {\n        this.raise(\n          Errors.ImportReflectionHasAssertion,\n          specifiers[0].loc.start,\n        );\n      }\n    }\n  }\n\n  checkJSONModuleImport(\n    node: Undone<\n      N.ExportAllDeclaration | N.ExportNamedDeclaration | N.ImportDeclaration\n    >,\n  ) {\n    // @ts-expect-error Fixme: node.type must be undefined because they are undone\n    if (this.isJSONModuleImport(node) && node.type !== \"ExportAllDeclaration\") {\n      // @ts-expect-error specifiers may not index node\n      const { specifiers } = node;\n      if (specifiers != null) {\n        // @ts-expect-error refine specifier types\n        const nonDefaultNamedSpecifier = specifiers.find(specifier => {\n          let imported;\n          if (specifier.type === \"ExportSpecifier\") {\n            imported = specifier.local;\n          } else if (specifier.type === \"ImportSpecifier\") {\n            imported = specifier.imported;\n          }\n          if (imported !== undefined) {\n            return imported.type === \"Identifier\"\n              ? imported.name !== \"default\"\n              : imported.value !== \"default\";\n          }\n        });\n        if (nonDefaultNamedSpecifier !== undefined) {\n          this.raise(\n            Errors.ImportJSONBindingNotDefault,\n            nonDefaultNamedSpecifier.loc.start,\n          );\n        }\n      }\n    }\n  }\n\n  isPotentialImportPhase(isExport: boolean): boolean {\n    if (isExport) return false;\n    return (\n      this.isContextual(tt._source) ||\n      this.isContextual(tt._defer) ||\n      this.isContextual(tt._module)\n    );\n  }\n\n  applyImportPhase(\n    node: Undone<N.ImportDeclaration | N.ExportNamedDeclaration>,\n    isExport: boolean,\n    phase: string | null,\n    loc?: Position,\n  ): void {\n    if (isExport) {\n      if (!process.env.IS_PUBLISH) {\n        if (phase === \"module\" || phase === \"source\") {\n          throw new Error(\n            `Assertion failure: export declarations do not support the '${phase}' phase.`,\n          );\n        }\n      }\n      return;\n    }\n\n    if (phase === \"module\") {\n      this.expectPlugin(\"importReflection\", loc);\n      (node as N.ImportDeclaration).module = true;\n    } else if (this.hasPlugin(\"importReflection\")) {\n      (node as N.ImportDeclaration).module = false;\n    }\n\n    if (phase === \"source\") {\n      this.expectPlugin(\"sourcePhaseImports\", loc);\n      (node as N.ImportDeclaration).phase = \"source\";\n    } else if (phase === \"defer\") {\n      this.expectPlugin(\"deferredImportEvaluation\", loc);\n      (node as N.ImportDeclaration).phase = \"defer\";\n    } else if (this.hasPlugin(\"sourcePhaseImports\")) {\n      (node as N.ImportDeclaration).phase = null;\n    }\n  }\n\n  /*\n   * Parse `module` in `import module x from \"x\"`, disambiguating\n   * `import module from \"x\"` and `import module from from \"x\"`.\n   *\n   * This function might return an identifier representing the `module`\n   * if it eats `module` and then discovers that it was the default import\n   * binding and not the import reflection.\n   *\n   * This function is also used to parse `import type` and `import typeof`\n   * in the TS and Flow plugins.\n   *\n   * Note: the proposal has been updated to use `source` instead of `module`,\n   * but it has not been implemented yet.\n   */\n  parseMaybeImportPhase(\n    node: Undone<N.ImportDeclaration | N.TsImportEqualsDeclaration>,\n    isExport: boolean,\n  ): N.Identifier | null {\n    if (!this.isPotentialImportPhase(isExport)) {\n      this.applyImportPhase(\n        node as Undone<N.ImportDeclaration>,\n        isExport,\n        null,\n      );\n      return null;\n    }\n\n    const phaseIdentifier = this.parseIdentifier(true);\n\n    const { type } = this.state;\n    const isImportPhase = tokenIsKeywordOrIdentifier(type)\n      ? // OK: import <phase> x from \"foo\";\n        // OK: import <phase> from from \"foo\";\n        // NO: import <phase> from \"foo\";\n        // NO: import <phase> from 'foo';\n        // With the module declarations proposals, we will need further disambiguation\n        // for `import module from from;`.\n        type !== tt._from || this.lookaheadCharCode() === charCodes.lowercaseF\n      : // OK: import <phase> { x } from \"foo\";\n        // OK: import <phase> x from \"foo\";\n        // OK: import <phase> * as T from \"foo\";\n        // NO: import <phase> from \"foo\";\n        // OK: import <phase> \"foo\";\n        // The last one is invalid, we will continue parsing and throw\n        // an error later\n        type !== tt.comma;\n\n    if (isImportPhase) {\n      this.resetPreviousIdentifierLeadingComments(phaseIdentifier);\n      this.applyImportPhase(\n        node as Undone<N.ImportDeclaration>,\n        isExport,\n        phaseIdentifier.name,\n        phaseIdentifier.loc.start,\n      );\n      return null;\n    } else {\n      this.applyImportPhase(\n        node as Undone<N.ImportDeclaration>,\n        isExport,\n        null,\n      );\n      // `<phase>` is a default binding, return it to the main import declaration parser\n      return phaseIdentifier;\n    }\n  }\n\n  isPrecedingIdImportPhase(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    phase: string,\n  ) {\n    const { type } = this.state;\n    return tokenIsIdentifier(type)\n      ? // OK: import <phase> x from \"foo\";\n        // OK: import <phase> from from \"foo\";\n        // NO: import <phase> from \"foo\";\n        // NO: import <phase> from 'foo';\n        // With the module declarations proposals, we will need further disambiguation\n        // for `import module from from;`.\n        type !== tt._from || this.lookaheadCharCode() === charCodes.lowercaseF\n      : // OK: import <phase> { x } from \"foo\";\n        // OK: import <phase> x from \"foo\";\n        // OK: import <phase> * as T from \"foo\";\n        // NO: import <phase> from \"foo\";\n        // OK: import <phase> \"foo\";\n        // The last one is invalid, we will continue parsing and throw\n        // an error later\n        type !== tt.comma;\n  }\n\n  // Parses import declaration.\n  // https://tc39.es/ecma262/#prod-ImportDeclaration\n\n  parseImport(this: Parser, node: Undone<N.ImportDeclaration>): N.AnyImport {\n    if (this.match(tt.string)) {\n      // import '...'\n      return this.parseImportSourceAndAttributes(node);\n    }\n\n    return this.parseImportSpecifiersAndAfter(\n      node,\n      this.parseMaybeImportPhase(node, /* isExport */ false),\n    );\n  }\n\n  parseImportSpecifiersAndAfter(\n    this: Parser,\n    node: Undone<N.ImportDeclaration>,\n    maybeDefaultIdentifier: N.Identifier | null,\n  ): N.AnyImport {\n    node.specifiers = [];\n\n    // check if we have a default import like\n    // import React from \"react\";\n    const hasDefault = this.maybeParseDefaultImportSpecifier(\n      node,\n      maybeDefaultIdentifier,\n    );\n    /* we are checking if we do not have a default import, then it is obvious that we need named imports\n     * import { get } from \"axios\";\n     * but if we do have a default import\n     * we need to check if we have a comma after that and\n     * that is where this `|| this.eat` condition comes into play\n     */\n    const parseNext = !hasDefault || this.eat(tt.comma);\n    // if we do have to parse the next set of specifiers, we first check for star imports\n    // import React, * from \"react\";\n    const hasStar = parseNext && this.maybeParseStarImportSpecifier(node);\n    // now we check if we need to parse the next imports\n    // but only if they are not importing * (everything)\n    if (parseNext && !hasStar) this.parseNamedImportSpecifiers(node);\n    this.expectContextual(tt._from);\n\n    return this.parseImportSourceAndAttributes(node);\n  }\n\n  parseImportSourceAndAttributes(\n    this: Parser,\n    node: Undone<N.ImportDeclaration>,\n  ): N.AnyImport {\n    node.specifiers ??= [];\n    node.source = this.parseImportSource();\n    this.maybeParseImportAttributes(node);\n    this.checkImportReflection(node);\n    this.checkJSONModuleImport(node);\n\n    this.semicolon();\n    return this.finishNode(node, \"ImportDeclaration\");\n  }\n\n  parseImportSource(this: Parser): N.StringLiteral {\n    if (!this.match(tt.string)) this.unexpected();\n    return this.parseExprAtom() as N.StringLiteral;\n  }\n\n  parseImportSpecifierLocal<\n    T extends\n      | N.ImportSpecifier\n      | N.ImportDefaultSpecifier\n      | N.ImportNamespaceSpecifier,\n  >(\n    node: Undone<N.ImportDeclaration>,\n    specifier: Undone<T>,\n    type: T[\"type\"],\n  ): void {\n    specifier.local = this.parseIdentifier();\n    node.specifiers.push(this.finishImportSpecifier(specifier, type));\n  }\n\n  finishImportSpecifier<\n    T extends\n      | N.ImportSpecifier\n      | N.ImportDefaultSpecifier\n      | N.ImportNamespaceSpecifier,\n  >(\n    specifier: Undone<T>,\n    type: T[\"type\"],\n    bindingType: BindingFlag = BindingFlag.TYPE_LEXICAL,\n  ) {\n    this.checkLVal(specifier.local, { type }, bindingType);\n    return this.finishNode(specifier, type);\n  }\n\n  /**\n   * parse assert entries\n   *\n   * @see {@link https://tc39.es/proposal-import-attributes/#prod-WithEntries WithEntries}\n   */\n  parseImportAttributes(): N.ImportAttribute[] {\n    this.expect(tt.braceL);\n\n    const attrs = [];\n    const attrNames = new Set();\n\n    do {\n      if (this.match(tt.braceR)) {\n        break;\n      }\n\n      const node = this.startNode<N.ImportAttribute>();\n\n      // parse AssertionKey : IdentifierName, StringLiteral\n      const keyName = this.state.value;\n      // check if we already have an entry for an attribute\n      // if a duplicate entry is found, throw an error\n      // for now this logic will come into play only when someone declares `type` twice\n      if (attrNames.has(keyName)) {\n        this.raise(\n          Errors.ModuleAttributesWithDuplicateKeys,\n          this.state.startLoc,\n          {\n            key: keyName,\n          },\n        );\n      }\n      attrNames.add(keyName);\n      if (this.match(tt.string)) {\n        node.key = this.parseStringLiteral(keyName);\n      } else {\n        node.key = this.parseIdentifier(true);\n      }\n      this.expect(tt.colon);\n\n      if (!this.match(tt.string)) {\n        throw this.raise(\n          Errors.ModuleAttributeInvalidValue,\n          this.state.startLoc,\n        );\n      }\n      node.value = this.parseStringLiteral(this.state.value);\n      attrs.push(this.finishNode(node, \"ImportAttribute\"));\n    } while (this.eat(tt.comma));\n\n    this.expect(tt.braceR);\n\n    return attrs;\n  }\n\n  /**\n   * parse module attributes\n   * @deprecated It will be removed in Babel 8\n   */\n  parseModuleAttributes() {\n    const attrs: N.ImportAttribute[] = [];\n    const attributes = new Set();\n    do {\n      const node = this.startNode<N.ImportAttribute>();\n      node.key = this.parseIdentifier(true);\n\n      if (node.key.name !== \"type\") {\n        this.raise(Errors.ModuleAttributeDifferentFromType, node.key);\n      }\n\n      if (attributes.has(node.key.name)) {\n        this.raise(Errors.ModuleAttributesWithDuplicateKeys, node.key, {\n          key: node.key.name,\n        });\n      }\n      attributes.add(node.key.name);\n      this.expect(tt.colon);\n      if (!this.match(tt.string)) {\n        throw this.raise(\n          Errors.ModuleAttributeInvalidValue,\n          this.state.startLoc,\n        );\n      }\n      node.value = this.parseStringLiteral(this.state.value);\n      attrs.push(this.finishNode(node, \"ImportAttribute\"));\n    } while (this.eat(tt.comma));\n\n    return attrs;\n  }\n\n  maybeParseImportAttributes(\n    node: Undone<\n      N.ImportDeclaration | N.ExportNamedDeclaration | N.ExportAllDeclaration\n    >,\n  ) {\n    let attributes: N.ImportAttribute[];\n    let useWith = false;\n\n    // https://tc39.es/proposal-import-attributes/#prod-WithClause\n    if (this.match(tt._with)) {\n      if (\n        this.hasPrecedingLineBreak() &&\n        this.lookaheadCharCode() === charCodes.leftParenthesis\n      ) {\n        // This will be parsed as a with statement, and we will throw a\n        // better error about it not being supported in strict mode.\n        return;\n      }\n\n      this.next(); // eat `with`\n\n      if (!process.env.BABEL_8_BREAKING) {\n        if (this.hasPlugin(\"moduleAttributes\")) {\n          attributes = this.parseModuleAttributes();\n        } else {\n          this.expectImportAttributesPlugin();\n          attributes = this.parseImportAttributes();\n        }\n      } else {\n        this.expectImportAttributesPlugin();\n        attributes = this.parseImportAttributes();\n      }\n      useWith = true;\n    } else if (this.isContextual(tt._assert) && !this.hasPrecedingLineBreak()) {\n      if (this.hasPlugin(\"importAttributes\")) {\n        if (\n          this.getPluginOption(\"importAttributes\", \"deprecatedAssertSyntax\") !==\n          true\n        ) {\n          this.raise(Errors.ImportAttributesUseAssert, this.state.startLoc);\n        }\n        this.addExtra(node, \"deprecatedAssertSyntax\", true);\n      } else {\n        this.expectOnePlugin([\"importAttributes\", \"importAssertions\"]);\n      }\n      this.next(); // eat `assert`\n      attributes = this.parseImportAttributes();\n    } else if (\n      this.hasPlugin(\"importAttributes\") ||\n      this.hasPlugin(\"importAssertions\")\n    ) {\n      attributes = [];\n    } else if (!process.env.BABEL_8_BREAKING) {\n      if (this.hasPlugin(\"moduleAttributes\")) {\n        attributes = [];\n      } else return;\n    } else return;\n\n    if (!useWith && this.hasPlugin(\"importAssertions\")) {\n      node.assertions = attributes;\n    } else {\n      node.attributes = attributes;\n    }\n  }\n\n  maybeParseDefaultImportSpecifier(\n    node: Undone<N.ImportDeclaration>,\n    maybeDefaultIdentifier: N.Identifier | null,\n  ): boolean {\n    // import defaultObj, { x, y as z } from '...'\n    if (maybeDefaultIdentifier) {\n      const specifier = this.startNodeAtNode<N.ImportDefaultSpecifier>(\n        maybeDefaultIdentifier,\n      );\n      specifier.local = maybeDefaultIdentifier;\n      node.specifiers.push(\n        this.finishImportSpecifier(specifier, \"ImportDefaultSpecifier\"),\n      );\n      return true;\n    } else if (\n      // We allow keywords, and parseImportSpecifierLocal will report a recoverable error\n      tokenIsKeywordOrIdentifier(this.state.type)\n    ) {\n      this.parseImportSpecifierLocal(\n        node,\n        this.startNode<N.ImportDefaultSpecifier>(),\n        \"ImportDefaultSpecifier\",\n      );\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseStarImportSpecifier(node: Undone<N.ImportDeclaration>): boolean {\n    if (this.match(tt.star)) {\n      const specifier = this.startNode<N.ImportNamespaceSpecifier>();\n      this.next();\n      this.expectContextual(tt._as);\n\n      this.parseImportSpecifierLocal(\n        node,\n        specifier,\n        \"ImportNamespaceSpecifier\",\n      );\n      return true;\n    }\n    return false;\n  }\n\n  parseNamedImportSpecifiers(node: Undone<N.ImportDeclaration>) {\n    let first = true;\n    this.expect(tt.braceL);\n    while (!this.eat(tt.braceR)) {\n      if (first) {\n        first = false;\n      } else {\n        // Detect an attempt to deep destructure\n        if (this.eat(tt.colon)) {\n          throw this.raise(Errors.DestructureNamedImport, this.state.startLoc);\n        }\n\n        this.expect(tt.comma);\n        if (this.eat(tt.braceR)) break;\n      }\n\n      const specifier = this.startNode<N.ImportSpecifier>();\n      const importedIsString = this.match(tt.string);\n      const isMaybeTypeOnly = this.isContextual(tt._type);\n      specifier.imported = this.parseModuleExportName();\n      const importSpecifier = this.parseImportSpecifier(\n        specifier,\n        importedIsString,\n        node.importKind === \"type\" || node.importKind === \"typeof\",\n        isMaybeTypeOnly,\n        undefined,\n      );\n      node.specifiers.push(importSpecifier);\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-ImportSpecifier\n  parseImportSpecifier(\n    specifier: Undone<N.ImportSpecifier>,\n    importedIsString: boolean,\n    /* used in TypeScript and Flow parser */\n    isInTypeOnlyImport: boolean,\n    isMaybeTypeOnly: boolean,\n    bindingType: BindingFlag | undefined,\n  ): N.ImportSpecifier {\n    if (this.eatContextual(tt._as)) {\n      specifier.local = this.parseIdentifier();\n    } else {\n      const { imported } = specifier;\n      if (importedIsString) {\n        throw this.raise(Errors.ImportBindingIsString, specifier, {\n          importName: (imported as N.StringLiteral).value,\n        });\n      }\n      this.checkReservedWord(\n        (imported as N.Identifier).name,\n        specifier.loc.start,\n        true,\n        true,\n      );\n      if (!specifier.local) {\n        specifier.local = cloneIdentifier(imported);\n      }\n    }\n    return this.finishImportSpecifier(\n      specifier,\n      \"ImportSpecifier\",\n      bindingType,\n    );\n  }\n\n  // This is used in flow and typescript plugin\n  // Determine whether a parameter is a this param\n  isThisParam(\n    param: N.Pattern | N.Identifier | N.TSParameterProperty,\n  ): boolean {\n    return param.type === \"Identifier\" && param.name === \"this\";\n  }\n}\n", "import type { Options } from \"../options.ts\";\nimport type * as N from \"../types.ts\";\nimport { getOptions } from \"../options.ts\";\nimport StatementParser from \"./statement.ts\";\nimport ScopeHandler from \"../util/scope.ts\";\n\nexport type PluginsMap = Map<\n  string,\n  {\n    [x: string]: any;\n  }\n>;\n\nexport default class Parser extends StatementParser {\n  // Forward-declaration so typescript plugin can override jsx plugin\n  // todo(flow->ts) - this probably can be removed\n  // abstract jsxParseOpeningElementAfterName(\n  //   node: N.JSXOpeningElement,\n  // ): N.JSXOpeningElement;\n\n  constructor(\n    options: Options | undefined | null,\n    input: string,\n    pluginsMap: PluginsMap,\n  ) {\n    options = getOptions(options);\n    super(options, input);\n\n    this.options = options;\n    this.initializeScopes();\n    this.plugins = pluginsMap;\n    this.filename = options.sourceFilename;\n  }\n\n  // This can be overwritten, for example, by the TypeScript plugin.\n  getScopeHandler(): new (...args: any) => ScopeHandler {\n    return ScopeHandler;\n  }\n\n  parse(): N.File {\n    this.enterInitialScopes();\n    const file = this.startNode<N.File>();\n    const program = this.startNode<N.Program>();\n    this.nextToken();\n    file.errors = null;\n    this.parseTopLevel(file, program);\n    file.errors = this.state.errors;\n    file.comments.length = this.state.commentsLen;\n    return file as N.File;\n  }\n}\n", "import type { Options } from \"./options.ts\";\nimport {\n  validatePlugins,\n  mixinPluginNames,\n  mixinPlugins,\n} from \"./plugin-utils.ts\";\nimport type {\n  PluginConfig as ParserPlugin,\n  FlowPluginOptions,\n  RecordAndTuplePluginOptions,\n  PipelineOperatorPluginOptions,\n} from \"./typings.ts\";\nimport Parser, { type PluginsMap } from \"./parser/index.ts\";\n\nimport type { ExportedTokenType } from \"./tokenizer/types.ts\";\nimport {\n  getExportedToken,\n  tt as internalTokenTypes,\n  type InternalTokenTypes,\n} from \"./tokenizer/types.ts\";\n\nimport type { Expression, File } from \"./types.ts\";\nexport type { Expression, File };\n\nexport function parse(input: string, options?: Options): File {\n  if (options?.sourceType === \"unambiguous\") {\n    options = {\n      ...options,\n    };\n    try {\n      options.sourceType = \"module\";\n      const parser = getParser(options, input);\n      const ast = parser.parse();\n\n      if (parser.sawUnambiguousESM) {\n        return ast;\n      }\n\n      if (parser.ambiguousScriptDifferentAst) {\n        // Top level await introduces code which can be both a valid script and\n        // a valid module, but which produces different ASTs:\n        //    await\n        //    0\n        // can be parsed either as an AwaitExpression, or as two ExpressionStatements.\n        try {\n          options.sourceType = \"script\";\n          return getParser(options, input).parse();\n        } catch {}\n      } else {\n        // This is both a valid module and a valid script, but\n        // we parse it as a script by default\n        ast.program.sourceType = \"script\";\n      }\n\n      return ast;\n    } catch (moduleError) {\n      try {\n        options.sourceType = \"script\";\n        return getParser(options, input).parse();\n      } catch {}\n\n      throw moduleError;\n    }\n  } else {\n    return getParser(options, input).parse();\n  }\n}\n\nexport function parseExpression(input: string, options?: Options): Expression {\n  const parser = getParser(options, input);\n  if (parser.options.strictMode) {\n    parser.state.strict = true;\n  }\n  return parser.getExpression();\n}\n\nfunction generateExportedTokenTypes(\n  internalTokenTypes: InternalTokenTypes,\n): Record<string, ExportedTokenType> {\n  const tokenTypes: Record<string, ExportedTokenType> = {};\n  for (const typeName of Object.keys(\n    internalTokenTypes,\n  ) as (keyof InternalTokenTypes)[]) {\n    tokenTypes[typeName] = getExportedToken(internalTokenTypes[typeName]);\n  }\n  return tokenTypes;\n}\n\nexport const tokTypes = generateExportedTokenTypes(internalTokenTypes);\n\nfunction getParser(options: Options | undefined | null, input: string): Parser {\n  let cls = Parser;\n  const pluginsMap: PluginsMap = new Map();\n  if (options?.plugins) {\n    for (const plugin of options.plugins) {\n      let name, opts;\n      if (typeof plugin === \"string\") {\n        name = plugin;\n      } else {\n        [name, opts] = plugin;\n      }\n      if (!pluginsMap.has(name)) {\n        pluginsMap.set(name, opts || {});\n      }\n    }\n    validatePlugins(pluginsMap);\n    cls = getParserClass(pluginsMap);\n  }\n\n  return new cls(options, input, pluginsMap);\n}\n\nconst parserClassCache = new Map<string, new (...args: any) => Parser>();\n\n/** Get a Parser class with plugins applied. */\nfunction getParserClass(\n  pluginsMap: Map<string, any>,\n): new (...args: any) => Parser {\n  const pluginList = [];\n  for (const name of mixinPluginNames) {\n    if (pluginsMap.has(name)) {\n      pluginList.push(name);\n    }\n  }\n  const key = pluginList.join(\"|\");\n  let cls = parserClassCache.get(key);\n  if (!cls) {\n    cls = Parser;\n    for (const plugin of pluginList) {\n      // @ts-expect-error todo(flow->ts)\n      cls = mixinPlugins[plugin](cls);\n    }\n    parserClassCache.set(key, cls);\n  }\n  return cls;\n}\n\nexport type {\n  FlowPluginOptions,\n  ParserPlugin,\n  PipelineOperatorPluginOptions,\n  RecordAndTuplePluginOptions,\n};\nexport type ParserOptions = Partial<Options>;\n", "(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n\ttypeof define === 'function' && define.amd ? define(['exports'], factory) :\n\t(global = global || self, factory(global.estreeWalker = {}));\n}(this, (function (exports) { 'use strict';\n\n\t// @ts-check\n\t/** @typedef { import('estree').BaseNode} BaseNode */\n\n\t/** @typedef {{\n\t\tskip: () => void;\n\t\tremove: () => void;\n\t\treplace: (node: BaseNode) => void;\n\t}} WalkerContext */\n\n\tclass WalkerBase {\n\t\tconstructor() {\n\t\t\t/** @type {boolean} */\n\t\t\tthis.should_skip = false;\n\n\t\t\t/** @type {boolean} */\n\t\t\tthis.should_remove = false;\n\n\t\t\t/** @type {BaseNode | null} */\n\t\t\tthis.replacement = null;\n\n\t\t\t/** @type {WalkerContext} */\n\t\t\tthis.context = {\n\t\t\t\tskip: () => (this.should_skip = true),\n\t\t\t\tremove: () => (this.should_remove = true),\n\t\t\t\treplace: (node) => (this.replacement = node)\n\t\t\t};\n\t\t}\n\n\t\t/**\n\t\t *\n\t\t * @param {any} parent\n\t\t * @param {string} prop\n\t\t * @param {number} index\n\t\t * @param {BaseNode} node\n\t\t */\n\t\treplace(parent, prop, index, node) {\n\t\t\tif (parent) {\n\t\t\t\tif (index !== null) {\n\t\t\t\t\tparent[prop][index] = node;\n\t\t\t\t} else {\n\t\t\t\t\tparent[prop] = node;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t *\n\t\t * @param {any} parent\n\t\t * @param {string} prop\n\t\t * @param {number} index\n\t\t */\n\t\tremove(parent, prop, index) {\n\t\t\tif (parent) {\n\t\t\t\tif (index !== null) {\n\t\t\t\t\tparent[prop].splice(index, 1);\n\t\t\t\t} else {\n\t\t\t\t\tdelete parent[prop];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// @ts-check\n\n\t/** @typedef { import('estree').BaseNode} BaseNode */\n\t/** @typedef { import('./walker.js').WalkerContext} WalkerContext */\n\n\t/** @typedef {(\n\t *    this: WalkerContext,\n\t *    node: BaseNode,\n\t *    parent: BaseNode,\n\t *    key: string,\n\t *    index: number\n\t * ) => void} SyncHandler */\n\n\tclass SyncWalker extends WalkerBase {\n\t\t/**\n\t\t *\n\t\t * @param {SyncHandler} enter\n\t\t * @param {SyncHandler} leave\n\t\t */\n\t\tconstructor(enter, leave) {\n\t\t\tsuper();\n\n\t\t\t/** @type {SyncHandler} */\n\t\t\tthis.enter = enter;\n\n\t\t\t/** @type {SyncHandler} */\n\t\t\tthis.leave = leave;\n\t\t}\n\n\t\t/**\n\t\t *\n\t\t * @param {BaseNode} node\n\t\t * @param {BaseNode} parent\n\t\t * @param {string} [prop]\n\t\t * @param {number} [index]\n\t\t * @returns {BaseNode}\n\t\t */\n\t\tvisit(node, parent, prop, index) {\n\t\t\tif (node) {\n\t\t\t\tif (this.enter) {\n\t\t\t\t\tconst _should_skip = this.should_skip;\n\t\t\t\t\tconst _should_remove = this.should_remove;\n\t\t\t\t\tconst _replacement = this.replacement;\n\t\t\t\t\tthis.should_skip = false;\n\t\t\t\t\tthis.should_remove = false;\n\t\t\t\t\tthis.replacement = null;\n\n\t\t\t\t\tthis.enter.call(this.context, node, parent, prop, index);\n\n\t\t\t\t\tif (this.replacement) {\n\t\t\t\t\t\tnode = this.replacement;\n\t\t\t\t\t\tthis.replace(parent, prop, index, node);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (this.should_remove) {\n\t\t\t\t\t\tthis.remove(parent, prop, index);\n\t\t\t\t\t}\n\n\t\t\t\t\tconst skipped = this.should_skip;\n\t\t\t\t\tconst removed = this.should_remove;\n\n\t\t\t\t\tthis.should_skip = _should_skip;\n\t\t\t\t\tthis.should_remove = _should_remove;\n\t\t\t\t\tthis.replacement = _replacement;\n\n\t\t\t\t\tif (skipped) return node;\n\t\t\t\t\tif (removed) return null;\n\t\t\t\t}\n\n\t\t\t\tfor (const key in node) {\n\t\t\t\t\tconst value = node[key];\n\n\t\t\t\t\tif (typeof value !== \"object\") {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t} else if (Array.isArray(value)) {\n\t\t\t\t\t\tfor (let i = 0; i < value.length; i += 1) {\n\t\t\t\t\t\t\tif (value[i] !== null && typeof value[i].type === 'string') {\n\t\t\t\t\t\t\t\tif (!this.visit(value[i], node, key, i)) {\n\t\t\t\t\t\t\t\t\t// removed\n\t\t\t\t\t\t\t\t\ti--;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (value !== null && typeof value.type === \"string\") {\n\t\t\t\t\t\tthis.visit(value, node, key, null);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (this.leave) {\n\t\t\t\t\tconst _replacement = this.replacement;\n\t\t\t\t\tconst _should_remove = this.should_remove;\n\t\t\t\t\tthis.replacement = null;\n\t\t\t\t\tthis.should_remove = false;\n\n\t\t\t\t\tthis.leave.call(this.context, node, parent, prop, index);\n\n\t\t\t\t\tif (this.replacement) {\n\t\t\t\t\t\tnode = this.replacement;\n\t\t\t\t\t\tthis.replace(parent, prop, index, node);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (this.should_remove) {\n\t\t\t\t\t\tthis.remove(parent, prop, index);\n\t\t\t\t\t}\n\n\t\t\t\t\tconst removed = this.should_remove;\n\n\t\t\t\t\tthis.replacement = _replacement;\n\t\t\t\t\tthis.should_remove = _should_remove;\n\n\t\t\t\t\tif (removed) return null;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn node;\n\t\t}\n\t}\n\n\t// @ts-check\n\n\t/** @typedef { import('estree').BaseNode} BaseNode */\n\t/** @typedef { import('./walker').WalkerContext} WalkerContext */\n\n\t/** @typedef {(\n\t *    this: WalkerContext,\n\t *    node: BaseNode,\n\t *    parent: BaseNode,\n\t *    key: string,\n\t *    index: number\n\t * ) => Promise<void>} AsyncHandler */\n\n\tclass AsyncWalker extends WalkerBase {\n\t\t/**\n\t\t *\n\t\t * @param {AsyncHandler} enter\n\t\t * @param {AsyncHandler} leave\n\t\t */\n\t\tconstructor(enter, leave) {\n\t\t\tsuper();\n\n\t\t\t/** @type {AsyncHandler} */\n\t\t\tthis.enter = enter;\n\n\t\t\t/** @type {AsyncHandler} */\n\t\t\tthis.leave = leave;\n\t\t}\n\n\t\t/**\n\t\t *\n\t\t * @param {BaseNode} node\n\t\t * @param {BaseNode} parent\n\t\t * @param {string} [prop]\n\t\t * @param {number} [index]\n\t\t * @returns {Promise<BaseNode>}\n\t\t */\n\t\tasync visit(node, parent, prop, index) {\n\t\t\tif (node) {\n\t\t\t\tif (this.enter) {\n\t\t\t\t\tconst _should_skip = this.should_skip;\n\t\t\t\t\tconst _should_remove = this.should_remove;\n\t\t\t\t\tconst _replacement = this.replacement;\n\t\t\t\t\tthis.should_skip = false;\n\t\t\t\t\tthis.should_remove = false;\n\t\t\t\t\tthis.replacement = null;\n\n\t\t\t\t\tawait this.enter.call(this.context, node, parent, prop, index);\n\n\t\t\t\t\tif (this.replacement) {\n\t\t\t\t\t\tnode = this.replacement;\n\t\t\t\t\t\tthis.replace(parent, prop, index, node);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (this.should_remove) {\n\t\t\t\t\t\tthis.remove(parent, prop, index);\n\t\t\t\t\t}\n\n\t\t\t\t\tconst skipped = this.should_skip;\n\t\t\t\t\tconst removed = this.should_remove;\n\n\t\t\t\t\tthis.should_skip = _should_skip;\n\t\t\t\t\tthis.should_remove = _should_remove;\n\t\t\t\t\tthis.replacement = _replacement;\n\n\t\t\t\t\tif (skipped) return node;\n\t\t\t\t\tif (removed) return null;\n\t\t\t\t}\n\n\t\t\t\tfor (const key in node) {\n\t\t\t\t\tconst value = node[key];\n\n\t\t\t\t\tif (typeof value !== \"object\") {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t} else if (Array.isArray(value)) {\n\t\t\t\t\t\tfor (let i = 0; i < value.length; i += 1) {\n\t\t\t\t\t\t\tif (value[i] !== null && typeof value[i].type === 'string') {\n\t\t\t\t\t\t\t\tif (!(await this.visit(value[i], node, key, i))) {\n\t\t\t\t\t\t\t\t\t// removed\n\t\t\t\t\t\t\t\t\ti--;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (value !== null && typeof value.type === \"string\") {\n\t\t\t\t\t\tawait this.visit(value, node, key, null);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (this.leave) {\n\t\t\t\t\tconst _replacement = this.replacement;\n\t\t\t\t\tconst _should_remove = this.should_remove;\n\t\t\t\t\tthis.replacement = null;\n\t\t\t\t\tthis.should_remove = false;\n\n\t\t\t\t\tawait this.leave.call(this.context, node, parent, prop, index);\n\n\t\t\t\t\tif (this.replacement) {\n\t\t\t\t\t\tnode = this.replacement;\n\t\t\t\t\t\tthis.replace(parent, prop, index, node);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (this.should_remove) {\n\t\t\t\t\t\tthis.remove(parent, prop, index);\n\t\t\t\t\t}\n\n\t\t\t\t\tconst removed = this.should_remove;\n\n\t\t\t\t\tthis.replacement = _replacement;\n\t\t\t\t\tthis.should_remove = _should_remove;\n\n\t\t\t\t\tif (removed) return null;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn node;\n\t\t}\n\t}\n\n\t// @ts-check\n\n\t/** @typedef { import('estree').BaseNode} BaseNode */\n\t/** @typedef { import('./sync.js').SyncHandler} SyncHandler */\n\t/** @typedef { import('./async.js').AsyncHandler} AsyncHandler */\n\n\t/**\n\t *\n\t * @param {BaseNode} ast\n\t * @param {{\n\t *   enter?: SyncHandler\n\t *   leave?: SyncHandler\n\t * }} walker\n\t * @returns {BaseNode}\n\t */\n\tfunction walk(ast, { enter, leave }) {\n\t\tconst instance = new SyncWalker(enter, leave);\n\t\treturn instance.visit(ast, null);\n\t}\n\n\t/**\n\t *\n\t * @param {BaseNode} ast\n\t * @param {{\n\t *   enter?: AsyncHandler\n\t *   leave?: AsyncHandler\n\t * }} walker\n\t * @returns {Promise<BaseNode>}\n\t */\n\tasync function asyncWalk(ast, { enter, leave }) {\n\t\tconst instance = new AsyncWalker(enter, leave);\n\t\treturn await instance.visit(ast, null);\n\t}\n\n\texports.asyncWalk = asyncWalk;\n\texports.walk = walk;\n\n\tObject.defineProperty(exports, '__esModule', { value: true });\n\n})));\n", "/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\nvar intToCharMap = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'.split('');\n\n/**\n * Encode an integer in the range of 0 to 63 to a single base 64 digit.\n */\nexports.encode = function (number) {\n  if (0 <= number && number < intToCharMap.length) {\n    return intToCharMap[number];\n  }\n  throw new TypeError(\"Must be between 0 and 63: \" + number);\n};\n\n/**\n * Decode a single base 64 character code digit to an integer. Returns -1 on\n * failure.\n */\nexports.decode = function (charCode) {\n  var bigA = 65;     // 'A'\n  var bigZ = 90;     // 'Z'\n\n  var littleA = 97;  // 'a'\n  var littleZ = 122; // 'z'\n\n  var zero = 48;     // '0'\n  var nine = 57;     // '9'\n\n  var plus = 43;     // '+'\n  var slash = 47;    // '/'\n\n  var littleOffset = 26;\n  var numberOffset = 52;\n\n  // 0 - 25: ABCDEFGHIJKLMNOPQRSTUVWXYZ\n  if (bigA <= charCode && charCode <= bigZ) {\n    return (charCode - bigA);\n  }\n\n  // 26 - 51: abcdefghijklmnopqrstuvwxyz\n  if (littleA <= charCode && charCode <= littleZ) {\n    return (charCode - littleA + littleOffset);\n  }\n\n  // 52 - 61: 0123456789\n  if (zero <= charCode && charCode <= nine) {\n    return (charCode - zero + numberOffset);\n  }\n\n  // 62: +\n  if (charCode == plus) {\n    return 62;\n  }\n\n  // 63: /\n  if (charCode == slash) {\n    return 63;\n  }\n\n  // Invalid base64 digit.\n  return -1;\n};\n", "/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n *\n * Based on the Base 64 VLQ implementation in Closure Compiler:\n * https://code.google.com/p/closure-compiler/source/browse/trunk/src/com/google/debugging/sourcemap/Base64VLQ.java\n *\n * Copyright 2011 The Closure Compiler Authors. All rights reserved.\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *  * Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above\n *    copyright notice, this list of conditions and the following\n *    disclaimer in the documentation and/or other materials provided\n *    with the distribution.\n *  * Neither the name of Google Inc. nor the names of its\n *    contributors may be used to endorse or promote products derived\n *    from this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nvar base64 = require('./base64');\n\n// A single base 64 digit can contain 6 bits of data. For the base 64 variable\n// length quantities we use in the source map spec, the first bit is the sign,\n// the next four bits are the actual value, and the 6th bit is the\n// continuation bit. The continuation bit tells us whether there are more\n// digits in this value following this digit.\n//\n//   Continuation\n//   |    Sign\n//   |    |\n//   V    V\n//   101011\n\nvar VLQ_BASE_SHIFT = 5;\n\n// binary: 100000\nvar VLQ_BASE = 1 << VLQ_BASE_SHIFT;\n\n// binary: 011111\nvar VLQ_BASE_MASK = VLQ_BASE - 1;\n\n// binary: 100000\nvar VLQ_CONTINUATION_BIT = VLQ_BASE;\n\n/**\n * Converts from a two-complement value to a value where the sign bit is\n * placed in the least significant bit.  For example, as decimals:\n *   1 becomes 2 (10 binary), -1 becomes 3 (11 binary)\n *   2 becomes 4 (100 binary), -2 becomes 5 (101 binary)\n */\nfunction toVLQSigned(aValue) {\n  return aValue < 0\n    ? ((-aValue) << 1) + 1\n    : (aValue << 1) + 0;\n}\n\n/**\n * Converts to a two-complement value from a value where the sign bit is\n * placed in the least significant bit.  For example, as decimals:\n *   2 (10 binary) becomes 1, 3 (11 binary) becomes -1\n *   4 (100 binary) becomes 2, 5 (101 binary) becomes -2\n */\nfunction fromVLQSigned(aValue) {\n  var isNegative = (aValue & 1) === 1;\n  var shifted = aValue >> 1;\n  return isNegative\n    ? -shifted\n    : shifted;\n}\n\n/**\n * Returns the base 64 VLQ encoded value.\n */\nexports.encode = function base64VLQ_encode(aValue) {\n  var encoded = \"\";\n  var digit;\n\n  var vlq = toVLQSigned(aValue);\n\n  do {\n    digit = vlq & VLQ_BASE_MASK;\n    vlq >>>= VLQ_BASE_SHIFT;\n    if (vlq > 0) {\n      // There are still more digits in this value, so we must make sure the\n      // continuation bit is marked.\n      digit |= VLQ_CONTINUATION_BIT;\n    }\n    encoded += base64.encode(digit);\n  } while (vlq > 0);\n\n  return encoded;\n};\n\n/**\n * Decodes the next base 64 VLQ value from the given string and returns the\n * value and the rest of the string via the out parameter.\n */\nexports.decode = function base64VLQ_decode(aStr, aIndex, aOutParam) {\n  var strLen = aStr.length;\n  var result = 0;\n  var shift = 0;\n  var continuation, digit;\n\n  do {\n    if (aIndex >= strLen) {\n      throw new Error(\"Expected more digits in base 64 VLQ value.\");\n    }\n\n    digit = base64.decode(aStr.charCodeAt(aIndex++));\n    if (digit === -1) {\n      throw new Error(\"Invalid base64 digit: \" + aStr.charAt(aIndex - 1));\n    }\n\n    continuation = !!(digit & VLQ_CONTINUATION_BIT);\n    digit &= VLQ_BASE_MASK;\n    result = result + (digit << shift);\n    shift += VLQ_BASE_SHIFT;\n  } while (continuation);\n\n  aOutParam.value = fromVLQSigned(result);\n  aOutParam.rest = aIndex;\n};\n", "/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\n/**\n * This is a helper function for getting values from parameter/options\n * objects.\n *\n * @param args The object we are extracting values from\n * @param name The name of the property we are getting.\n * @param defaultValue An optional value to return if the property is missing\n * from the object. If this is not specified and the property is missing, an\n * error will be thrown.\n */\nfunction getArg(aArgs, aName, aDefaultValue) {\n  if (aName in aArgs) {\n    return aArgs[aName];\n  } else if (arguments.length === 3) {\n    return aDefaultValue;\n  } else {\n    throw new Error('\"' + aName + '\" is a required argument.');\n  }\n}\nexports.getArg = getArg;\n\nvar urlRegexp = /^(?:([\\w+\\-.]+):)?\\/\\/(?:(\\w+:\\w+)@)?([\\w.-]*)(?::(\\d+))?(.*)$/;\nvar dataUrlRegexp = /^data:.+\\,.+$/;\n\nfunction urlParse(aUrl) {\n  var match = aUrl.match(urlRegexp);\n  if (!match) {\n    return null;\n  }\n  return {\n    scheme: match[1],\n    auth: match[2],\n    host: match[3],\n    port: match[4],\n    path: match[5]\n  };\n}\nexports.urlParse = urlParse;\n\nfunction urlGenerate(aParsedUrl) {\n  var url = '';\n  if (aParsedUrl.scheme) {\n    url += aParsedUrl.scheme + ':';\n  }\n  url += '//';\n  if (aParsedUrl.auth) {\n    url += aParsedUrl.auth + '@';\n  }\n  if (aParsedUrl.host) {\n    url += aParsedUrl.host;\n  }\n  if (aParsedUrl.port) {\n    url += \":\" + aParsedUrl.port\n  }\n  if (aParsedUrl.path) {\n    url += aParsedUrl.path;\n  }\n  return url;\n}\nexports.urlGenerate = urlGenerate;\n\nvar MAX_CACHED_INPUTS = 32;\n\n/**\n * Takes some function `f(input) -> result` and returns a memoized version of\n * `f`.\n *\n * We keep at most `MAX_CACHED_INPUTS` memoized results of `f` alive. The\n * memoization is a dumb-simple, linear least-recently-used cache.\n */\nfunction lruMemoize(f) {\n  var cache = [];\n\n  return function(input) {\n    for (var i = 0; i < cache.length; i++) {\n      if (cache[i].input === input) {\n        var temp = cache[0];\n        cache[0] = cache[i];\n        cache[i] = temp;\n        return cache[0].result;\n      }\n    }\n\n    var result = f(input);\n\n    cache.unshift({\n      input,\n      result,\n    });\n\n    if (cache.length > MAX_CACHED_INPUTS) {\n      cache.pop();\n    }\n\n    return result;\n  };\n}\n\n/**\n * Normalizes a path, or the path portion of a URL:\n *\n * - Replaces consecutive slashes with one slash.\n * - Removes unnecessary '.' parts.\n * - Removes unnecessary '<dir>/..' parts.\n *\n * Based on code in the Node.js 'path' core module.\n *\n * @param aPath The path or url to normalize.\n */\nvar normalize = lruMemoize(function normalize(aPath) {\n  var path = aPath;\n  var url = urlParse(aPath);\n  if (url) {\n    if (!url.path) {\n      return aPath;\n    }\n    path = url.path;\n  }\n  var isAbsolute = exports.isAbsolute(path);\n  // Split the path into parts between `/` characters. This is much faster than\n  // using `.split(/\\/+/g)`.\n  var parts = [];\n  var start = 0;\n  var i = 0;\n  while (true) {\n    start = i;\n    i = path.indexOf(\"/\", start);\n    if (i === -1) {\n      parts.push(path.slice(start));\n      break;\n    } else {\n      parts.push(path.slice(start, i));\n      while (i < path.length && path[i] === \"/\") {\n        i++;\n      }\n    }\n  }\n\n  for (var part, up = 0, i = parts.length - 1; i >= 0; i--) {\n    part = parts[i];\n    if (part === '.') {\n      parts.splice(i, 1);\n    } else if (part === '..') {\n      up++;\n    } else if (up > 0) {\n      if (part === '') {\n        // The first part is blank if the path is absolute. Trying to go\n        // above the root is a no-op. Therefore we can remove all '..' parts\n        // directly after the root.\n        parts.splice(i + 1, up);\n        up = 0;\n      } else {\n        parts.splice(i, 2);\n        up--;\n      }\n    }\n  }\n  path = parts.join('/');\n\n  if (path === '') {\n    path = isAbsolute ? '/' : '.';\n  }\n\n  if (url) {\n    url.path = path;\n    return urlGenerate(url);\n  }\n  return path;\n});\nexports.normalize = normalize;\n\n/**\n * Joins two paths/URLs.\n *\n * @param aRoot The root path or URL.\n * @param aPath The path or URL to be joined with the root.\n *\n * - If aPath is a URL or a data URI, aPath is returned, unless aPath is a\n *   scheme-relative URL: Then the scheme of aRoot, if any, is prepended\n *   first.\n * - Otherwise aPath is a path. If aRoot is a URL, then its path portion\n *   is updated with the result and aRoot is returned. Otherwise the result\n *   is returned.\n *   - If aPath is absolute, the result is aPath.\n *   - Otherwise the two paths are joined with a slash.\n * - Joining for example 'http://' and 'www.example.com' is also supported.\n */\nfunction join(aRoot, aPath) {\n  if (aRoot === \"\") {\n    aRoot = \".\";\n  }\n  if (aPath === \"\") {\n    aPath = \".\";\n  }\n  var aPathUrl = urlParse(aPath);\n  var aRootUrl = urlParse(aRoot);\n  if (aRootUrl) {\n    aRoot = aRootUrl.path || '/';\n  }\n\n  // `join(foo, '//www.example.org')`\n  if (aPathUrl && !aPathUrl.scheme) {\n    if (aRootUrl) {\n      aPathUrl.scheme = aRootUrl.scheme;\n    }\n    return urlGenerate(aPathUrl);\n  }\n\n  if (aPathUrl || aPath.match(dataUrlRegexp)) {\n    return aPath;\n  }\n\n  // `join('http://', 'www.example.com')`\n  if (aRootUrl && !aRootUrl.host && !aRootUrl.path) {\n    aRootUrl.host = aPath;\n    return urlGenerate(aRootUrl);\n  }\n\n  var joined = aPath.charAt(0) === '/'\n    ? aPath\n    : normalize(aRoot.replace(/\\/+$/, '') + '/' + aPath);\n\n  if (aRootUrl) {\n    aRootUrl.path = joined;\n    return urlGenerate(aRootUrl);\n  }\n  return joined;\n}\nexports.join = join;\n\nexports.isAbsolute = function (aPath) {\n  return aPath.charAt(0) === '/' || urlRegexp.test(aPath);\n};\n\n/**\n * Make a path relative to a URL or another path.\n *\n * @param aRoot The root path or URL.\n * @param aPath The path or URL to be made relative to aRoot.\n */\nfunction relative(aRoot, aPath) {\n  if (aRoot === \"\") {\n    aRoot = \".\";\n  }\n\n  aRoot = aRoot.replace(/\\/$/, '');\n\n  // It is possible for the path to be above the root. In this case, simply\n  // checking whether the root is a prefix of the path won't work. Instead, we\n  // need to remove components from the root one by one, until either we find\n  // a prefix that fits, or we run out of components to remove.\n  var level = 0;\n  while (aPath.indexOf(aRoot + '/') !== 0) {\n    var index = aRoot.lastIndexOf(\"/\");\n    if (index < 0) {\n      return aPath;\n    }\n\n    // If the only part of the root that is left is the scheme (i.e. http://,\n    // file:///, etc.), one or more slashes (/), or simply nothing at all, we\n    // have exhausted all components, so the path is not relative to the root.\n    aRoot = aRoot.slice(0, index);\n    if (aRoot.match(/^([^\\/]+:\\/)?\\/*$/)) {\n      return aPath;\n    }\n\n    ++level;\n  }\n\n  // Make sure we add a \"../\" for each component we removed from the root.\n  return Array(level + 1).join(\"../\") + aPath.substr(aRoot.length + 1);\n}\nexports.relative = relative;\n\nvar supportsNullProto = (function () {\n  var obj = Object.create(null);\n  return !('__proto__' in obj);\n}());\n\nfunction identity (s) {\n  return s;\n}\n\n/**\n * Because behavior goes wacky when you set `__proto__` on objects, we\n * have to prefix all the strings in our set with an arbitrary character.\n *\n * See https://github.com/mozilla/source-map/pull/31 and\n * https://github.com/mozilla/source-map/issues/30\n *\n * @param String aStr\n */\nfunction toSetString(aStr) {\n  if (isProtoString(aStr)) {\n    return '$' + aStr;\n  }\n\n  return aStr;\n}\nexports.toSetString = supportsNullProto ? identity : toSetString;\n\nfunction fromSetString(aStr) {\n  if (isProtoString(aStr)) {\n    return aStr.slice(1);\n  }\n\n  return aStr;\n}\nexports.fromSetString = supportsNullProto ? identity : fromSetString;\n\nfunction isProtoString(s) {\n  if (!s) {\n    return false;\n  }\n\n  var length = s.length;\n\n  if (length < 9 /* \"__proto__\".length */) {\n    return false;\n  }\n\n  if (s.charCodeAt(length - 1) !== 95  /* '_' */ ||\n      s.charCodeAt(length - 2) !== 95  /* '_' */ ||\n      s.charCodeAt(length - 3) !== 111 /* 'o' */ ||\n      s.charCodeAt(length - 4) !== 116 /* 't' */ ||\n      s.charCodeAt(length - 5) !== 111 /* 'o' */ ||\n      s.charCodeAt(length - 6) !== 114 /* 'r' */ ||\n      s.charCodeAt(length - 7) !== 112 /* 'p' */ ||\n      s.charCodeAt(length - 8) !== 95  /* '_' */ ||\n      s.charCodeAt(length - 9) !== 95  /* '_' */) {\n    return false;\n  }\n\n  for (var i = length - 10; i >= 0; i--) {\n    if (s.charCodeAt(i) !== 36 /* '$' */) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n/**\n * Comparator between two mappings where the original positions are compared.\n *\n * Optionally pass in `true` as `onlyCompareGenerated` to consider two\n * mappings with the same original source/line/column, but different generated\n * line and column the same. Useful when searching for a mapping with a\n * stubbed out mapping.\n */\nfunction compareByOriginalPositions(mappingA, mappingB, onlyCompareOriginal) {\n  var cmp = strcmp(mappingA.source, mappingB.source);\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  cmp = mappingA.originalLine - mappingB.originalLine;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  cmp = mappingA.originalColumn - mappingB.originalColumn;\n  if (cmp !== 0 || onlyCompareOriginal) {\n    return cmp;\n  }\n\n  cmp = mappingA.generatedColumn - mappingB.generatedColumn;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  cmp = mappingA.generatedLine - mappingB.generatedLine;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  return strcmp(mappingA.name, mappingB.name);\n}\nexports.compareByOriginalPositions = compareByOriginalPositions;\n\nfunction compareByOriginalPositionsNoSource(mappingA, mappingB, onlyCompareOriginal) {\n  var cmp\n\n  cmp = mappingA.originalLine - mappingB.originalLine;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  cmp = mappingA.originalColumn - mappingB.originalColumn;\n  if (cmp !== 0 || onlyCompareOriginal) {\n    return cmp;\n  }\n\n  cmp = mappingA.generatedColumn - mappingB.generatedColumn;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  cmp = mappingA.generatedLine - mappingB.generatedLine;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  return strcmp(mappingA.name, mappingB.name);\n}\nexports.compareByOriginalPositionsNoSource = compareByOriginalPositionsNoSource;\n\n/**\n * Comparator between two mappings with deflated source and name indices where\n * the generated positions are compared.\n *\n * Optionally pass in `true` as `onlyCompareGenerated` to consider two\n * mappings with the same generated line and column, but different\n * source/name/original line and column the same. Useful when searching for a\n * mapping with a stubbed out mapping.\n */\nfunction compareByGeneratedPositionsDeflated(mappingA, mappingB, onlyCompareGenerated) {\n  var cmp = mappingA.generatedLine - mappingB.generatedLine;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  cmp = mappingA.generatedColumn - mappingB.generatedColumn;\n  if (cmp !== 0 || onlyCompareGenerated) {\n    return cmp;\n  }\n\n  cmp = strcmp(mappingA.source, mappingB.source);\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  cmp = mappingA.originalLine - mappingB.originalLine;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  cmp = mappingA.originalColumn - mappingB.originalColumn;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  return strcmp(mappingA.name, mappingB.name);\n}\nexports.compareByGeneratedPositionsDeflated = compareByGeneratedPositionsDeflated;\n\nfunction compareByGeneratedPositionsDeflatedNoLine(mappingA, mappingB, onlyCompareGenerated) {\n  var cmp = mappingA.generatedColumn - mappingB.generatedColumn;\n  if (cmp !== 0 || onlyCompareGenerated) {\n    return cmp;\n  }\n\n  cmp = strcmp(mappingA.source, mappingB.source);\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  cmp = mappingA.originalLine - mappingB.originalLine;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  cmp = mappingA.originalColumn - mappingB.originalColumn;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  return strcmp(mappingA.name, mappingB.name);\n}\nexports.compareByGeneratedPositionsDeflatedNoLine = compareByGeneratedPositionsDeflatedNoLine;\n\nfunction strcmp(aStr1, aStr2) {\n  if (aStr1 === aStr2) {\n    return 0;\n  }\n\n  if (aStr1 === null) {\n    return 1; // aStr2 !== null\n  }\n\n  if (aStr2 === null) {\n    return -1; // aStr1 !== null\n  }\n\n  if (aStr1 > aStr2) {\n    return 1;\n  }\n\n  return -1;\n}\n\n/**\n * Comparator between two mappings with inflated source and name strings where\n * the generated positions are compared.\n */\nfunction compareByGeneratedPositionsInflated(mappingA, mappingB) {\n  var cmp = mappingA.generatedLine - mappingB.generatedLine;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  cmp = mappingA.generatedColumn - mappingB.generatedColumn;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  cmp = strcmp(mappingA.source, mappingB.source);\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  cmp = mappingA.originalLine - mappingB.originalLine;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  cmp = mappingA.originalColumn - mappingB.originalColumn;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  return strcmp(mappingA.name, mappingB.name);\n}\nexports.compareByGeneratedPositionsInflated = compareByGeneratedPositionsInflated;\n\n/**\n * Strip any JSON XSSI avoidance prefix from the string (as documented\n * in the source maps specification), and then parse the string as\n * JSON.\n */\nfunction parseSourceMapInput(str) {\n  return JSON.parse(str.replace(/^\\)]}'[^\\n]*\\n/, ''));\n}\nexports.parseSourceMapInput = parseSourceMapInput;\n\n/**\n * Compute the URL of a source given the the source root, the source's\n * URL, and the source map's URL.\n */\nfunction computeSourceURL(sourceRoot, sourceURL, sourceMapURL) {\n  sourceURL = sourceURL || '';\n\n  if (sourceRoot) {\n    // This follows what Chrome does.\n    if (sourceRoot[sourceRoot.length - 1] !== '/' && sourceURL[0] !== '/') {\n      sourceRoot += '/';\n    }\n    // The spec says:\n    //   Line 4: An optional source root, useful for relocating source\n    //   files on a server or removing repeated values in the\n    //   \u201Csources\u201D entry.  This value is prepended to the individual\n    //   entries in the \u201Csource\u201D field.\n    sourceURL = sourceRoot + sourceURL;\n  }\n\n  // Historically, SourceMapConsumer did not take the sourceMapURL as\n  // a parameter.  This mode is still somewhat supported, which is why\n  // this code block is conditional.  However, it's preferable to pass\n  // the source map URL to SourceMapConsumer, so that this function\n  // can implement the source URL resolution algorithm as outlined in\n  // the spec.  This block is basically the equivalent of:\n  //    new URL(sourceURL, sourceMapURL).toString()\n  // ... except it avoids using URL, which wasn't available in the\n  // older releases of node still supported by this library.\n  //\n  // The spec says:\n  //   If the sources are not absolute URLs after prepending of the\n  //   \u201CsourceRoot\u201D, the sources are resolved relative to the\n  //   SourceMap (like resolving script src in a html document).\n  if (sourceMapURL) {\n    var parsed = urlParse(sourceMapURL);\n    if (!parsed) {\n      throw new Error(\"sourceMapURL could not be parsed\");\n    }\n    if (parsed.path) {\n      // Strip the last path component, but keep the \"/\".\n      var index = parsed.path.lastIndexOf('/');\n      if (index >= 0) {\n        parsed.path = parsed.path.substring(0, index + 1);\n      }\n    }\n    sourceURL = join(urlGenerate(parsed), sourceURL);\n  }\n\n  return normalize(sourceURL);\n}\nexports.computeSourceURL = computeSourceURL;\n", "/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\nvar util = require('./util');\nvar has = Object.prototype.hasOwnProperty;\nvar hasNativeMap = typeof Map !== \"undefined\";\n\n/**\n * A data structure which is a combination of an array and a set. Adding a new\n * member is O(1), testing for membership is O(1), and finding the index of an\n * element is O(1). Removing elements from the set is not supported. Only\n * strings are supported for membership.\n */\nfunction ArraySet() {\n  this._array = [];\n  this._set = hasNativeMap ? new Map() : Object.create(null);\n}\n\n/**\n * Static method for creating ArraySet instances from an existing array.\n */\nArraySet.fromArray = function ArraySet_fromArray(aArray, aAllowDuplicates) {\n  var set = new ArraySet();\n  for (var i = 0, len = aArray.length; i < len; i++) {\n    set.add(aArray[i], aAllowDuplicates);\n  }\n  return set;\n};\n\n/**\n * Return how many unique items are in this ArraySet. If duplicates have been\n * added, than those do not count towards the size.\n *\n * @returns Number\n */\nArraySet.prototype.size = function ArraySet_size() {\n  return hasNativeMap ? this._set.size : Object.getOwnPropertyNames(this._set).length;\n};\n\n/**\n * Add the given string to this set.\n *\n * @param String aStr\n */\nArraySet.prototype.add = function ArraySet_add(aStr, aAllowDuplicates) {\n  var sStr = hasNativeMap ? aStr : util.toSetString(aStr);\n  var isDuplicate = hasNativeMap ? this.has(aStr) : has.call(this._set, sStr);\n  var idx = this._array.length;\n  if (!isDuplicate || aAllowDuplicates) {\n    this._array.push(aStr);\n  }\n  if (!isDuplicate) {\n    if (hasNativeMap) {\n      this._set.set(aStr, idx);\n    } else {\n      this._set[sStr] = idx;\n    }\n  }\n};\n\n/**\n * Is the given string a member of this set?\n *\n * @param String aStr\n */\nArraySet.prototype.has = function ArraySet_has(aStr) {\n  if (hasNativeMap) {\n    return this._set.has(aStr);\n  } else {\n    var sStr = util.toSetString(aStr);\n    return has.call(this._set, sStr);\n  }\n};\n\n/**\n * What is the index of the given string in the array?\n *\n * @param String aStr\n */\nArraySet.prototype.indexOf = function ArraySet_indexOf(aStr) {\n  if (hasNativeMap) {\n    var idx = this._set.get(aStr);\n    if (idx >= 0) {\n        return idx;\n    }\n  } else {\n    var sStr = util.toSetString(aStr);\n    if (has.call(this._set, sStr)) {\n      return this._set[sStr];\n    }\n  }\n\n  throw new Error('\"' + aStr + '\" is not in the set.');\n};\n\n/**\n * What is the element at the given index?\n *\n * @param Number aIdx\n */\nArraySet.prototype.at = function ArraySet_at(aIdx) {\n  if (aIdx >= 0 && aIdx < this._array.length) {\n    return this._array[aIdx];\n  }\n  throw new Error('No element indexed by ' + aIdx);\n};\n\n/**\n * Returns the array representation of this set (which has the proper indices\n * indicated by indexOf). Note that this is a copy of the internal array used\n * for storing the members so that no one can mess with internal state.\n */\nArraySet.prototype.toArray = function ArraySet_toArray() {\n  return this._array.slice();\n};\n\nexports.ArraySet = ArraySet;\n", "/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2014 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\nvar util = require('./util');\n\n/**\n * Determine whether mappingB is after mappingA with respect to generated\n * position.\n */\nfunction generatedPositionAfter(mappingA, mappingB) {\n  // Optimized for most common case\n  var lineA = mappingA.generatedLine;\n  var lineB = mappingB.generatedLine;\n  var columnA = mappingA.generatedColumn;\n  var columnB = mappingB.generatedColumn;\n  return lineB > lineA || lineB == lineA && columnB >= columnA ||\n         util.compareByGeneratedPositionsInflated(mappingA, mappingB) <= 0;\n}\n\n/**\n * A data structure to provide a sorted view of accumulated mappings in a\n * performance conscious manner. It trades a neglibable overhead in general\n * case for a large speedup in case of mappings being added in order.\n */\nfunction MappingList() {\n  this._array = [];\n  this._sorted = true;\n  // Serves as infimum\n  this._last = {generatedLine: -1, generatedColumn: 0};\n}\n\n/**\n * Iterate through internal items. This method takes the same arguments that\n * `Array.prototype.forEach` takes.\n *\n * NOTE: The order of the mappings is NOT guaranteed.\n */\nMappingList.prototype.unsortedForEach =\n  function MappingList_forEach(aCallback, aThisArg) {\n    this._array.forEach(aCallback, aThisArg);\n  };\n\n/**\n * Add the given source mapping.\n *\n * @param Object aMapping\n */\nMappingList.prototype.add = function MappingList_add(aMapping) {\n  if (generatedPositionAfter(this._last, aMapping)) {\n    this._last = aMapping;\n    this._array.push(aMapping);\n  } else {\n    this._sorted = false;\n    this._array.push(aMapping);\n  }\n};\n\n/**\n * Returns the flat, sorted array of mappings. The mappings are sorted by\n * generated position.\n *\n * WARNING: This method returns internal data without copying, for\n * performance. The return value must NOT be mutated, and should be treated as\n * an immutable borrow. If you want to take ownership, you must make your own\n * copy.\n */\nMappingList.prototype.toArray = function MappingList_toArray() {\n  if (!this._sorted) {\n    this._array.sort(util.compareByGeneratedPositionsInflated);\n    this._sorted = true;\n  }\n  return this._array;\n};\n\nexports.MappingList = MappingList;\n", "/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\nvar base64VLQ = require('./base64-vlq');\nvar util = require('./util');\nvar ArraySet = require('./array-set').ArraySet;\nvar MappingList = require('./mapping-list').MappingList;\n\n/**\n * An instance of the SourceMapGenerator represents a source map which is\n * being built incrementally. You may pass an object with the following\n * properties:\n *\n *   - file: The filename of the generated source.\n *   - sourceRoot: A root for all relative URLs in this source map.\n */\nfunction SourceMapGenerator(aArgs) {\n  if (!aArgs) {\n    aArgs = {};\n  }\n  this._file = util.getArg(aArgs, 'file', null);\n  this._sourceRoot = util.getArg(aArgs, 'sourceRoot', null);\n  this._skipValidation = util.getArg(aArgs, 'skipValidation', false);\n  this._ignoreInvalidMapping = util.getArg(aArgs, 'ignoreInvalidMapping', false);\n  this._sources = new ArraySet();\n  this._names = new ArraySet();\n  this._mappings = new MappingList();\n  this._sourcesContents = null;\n}\n\nSourceMapGenerator.prototype._version = 3;\n\n/**\n * Creates a new SourceMapGenerator based on a SourceMapConsumer\n *\n * @param aSourceMapConsumer The SourceMap.\n */\nSourceMapGenerator.fromSourceMap =\n  function SourceMapGenerator_fromSourceMap(aSourceMapConsumer, generatorOps) {\n    var sourceRoot = aSourceMapConsumer.sourceRoot;\n    var generator = new SourceMapGenerator(Object.assign(generatorOps || {}, {\n      file: aSourceMapConsumer.file,\n      sourceRoot: sourceRoot\n    }));\n    aSourceMapConsumer.eachMapping(function (mapping) {\n      var newMapping = {\n        generated: {\n          line: mapping.generatedLine,\n          column: mapping.generatedColumn\n        }\n      };\n\n      if (mapping.source != null) {\n        newMapping.source = mapping.source;\n        if (sourceRoot != null) {\n          newMapping.source = util.relative(sourceRoot, newMapping.source);\n        }\n\n        newMapping.original = {\n          line: mapping.originalLine,\n          column: mapping.originalColumn\n        };\n\n        if (mapping.name != null) {\n          newMapping.name = mapping.name;\n        }\n      }\n\n      generator.addMapping(newMapping);\n    });\n    aSourceMapConsumer.sources.forEach(function (sourceFile) {\n      var sourceRelative = sourceFile;\n      if (sourceRoot !== null) {\n        sourceRelative = util.relative(sourceRoot, sourceFile);\n      }\n\n      if (!generator._sources.has(sourceRelative)) {\n        generator._sources.add(sourceRelative);\n      }\n\n      var content = aSourceMapConsumer.sourceContentFor(sourceFile);\n      if (content != null) {\n        generator.setSourceContent(sourceFile, content);\n      }\n    });\n    return generator;\n  };\n\n/**\n * Add a single mapping from original source line and column to the generated\n * source's line and column for this source map being created. The mapping\n * object should have the following properties:\n *\n *   - generated: An object with the generated line and column positions.\n *   - original: An object with the original line and column positions.\n *   - source: The original source file (relative to the sourceRoot).\n *   - name: An optional original token name for this mapping.\n */\nSourceMapGenerator.prototype.addMapping =\n  function SourceMapGenerator_addMapping(aArgs) {\n    var generated = util.getArg(aArgs, 'generated');\n    var original = util.getArg(aArgs, 'original', null);\n    var source = util.getArg(aArgs, 'source', null);\n    var name = util.getArg(aArgs, 'name', null);\n\n    if (!this._skipValidation) {\n      if (this._validateMapping(generated, original, source, name) === false) {\n        return;\n      }\n    }\n\n    if (source != null) {\n      source = String(source);\n      if (!this._sources.has(source)) {\n        this._sources.add(source);\n      }\n    }\n\n    if (name != null) {\n      name = String(name);\n      if (!this._names.has(name)) {\n        this._names.add(name);\n      }\n    }\n\n    this._mappings.add({\n      generatedLine: generated.line,\n      generatedColumn: generated.column,\n      originalLine: original != null && original.line,\n      originalColumn: original != null && original.column,\n      source: source,\n      name: name\n    });\n  };\n\n/**\n * Set the source content for a source file.\n */\nSourceMapGenerator.prototype.setSourceContent =\n  function SourceMapGenerator_setSourceContent(aSourceFile, aSourceContent) {\n    var source = aSourceFile;\n    if (this._sourceRoot != null) {\n      source = util.relative(this._sourceRoot, source);\n    }\n\n    if (aSourceContent != null) {\n      // Add the source content to the _sourcesContents map.\n      // Create a new _sourcesContents map if the property is null.\n      if (!this._sourcesContents) {\n        this._sourcesContents = Object.create(null);\n      }\n      this._sourcesContents[util.toSetString(source)] = aSourceContent;\n    } else if (this._sourcesContents) {\n      // Remove the source file from the _sourcesContents map.\n      // If the _sourcesContents map is empty, set the property to null.\n      delete this._sourcesContents[util.toSetString(source)];\n      if (Object.keys(this._sourcesContents).length === 0) {\n        this._sourcesContents = null;\n      }\n    }\n  };\n\n/**\n * Applies the mappings of a sub-source-map for a specific source file to the\n * source map being generated. Each mapping to the supplied source file is\n * rewritten using the supplied source map. Note: The resolution for the\n * resulting mappings is the minimium of this map and the supplied map.\n *\n * @param aSourceMapConsumer The source map to be applied.\n * @param aSourceFile Optional. The filename of the source file.\n *        If omitted, SourceMapConsumer's file property will be used.\n * @param aSourceMapPath Optional. The dirname of the path to the source map\n *        to be applied. If relative, it is relative to the SourceMapConsumer.\n *        This parameter is needed when the two source maps aren't in the same\n *        directory, and the source map to be applied contains relative source\n *        paths. If so, those relative source paths need to be rewritten\n *        relative to the SourceMapGenerator.\n */\nSourceMapGenerator.prototype.applySourceMap =\n  function SourceMapGenerator_applySourceMap(aSourceMapConsumer, aSourceFile, aSourceMapPath) {\n    var sourceFile = aSourceFile;\n    // If aSourceFile is omitted, we will use the file property of the SourceMap\n    if (aSourceFile == null) {\n      if (aSourceMapConsumer.file == null) {\n        throw new Error(\n          'SourceMapGenerator.prototype.applySourceMap requires either an explicit source file, ' +\n          'or the source map\\'s \"file\" property. Both were omitted.'\n        );\n      }\n      sourceFile = aSourceMapConsumer.file;\n    }\n    var sourceRoot = this._sourceRoot;\n    // Make \"sourceFile\" relative if an absolute Url is passed.\n    if (sourceRoot != null) {\n      sourceFile = util.relative(sourceRoot, sourceFile);\n    }\n    // Applying the SourceMap can add and remove items from the sources and\n    // the names array.\n    var newSources = new ArraySet();\n    var newNames = new ArraySet();\n\n    // Find mappings for the \"sourceFile\"\n    this._mappings.unsortedForEach(function (mapping) {\n      if (mapping.source === sourceFile && mapping.originalLine != null) {\n        // Check if it can be mapped by the source map, then update the mapping.\n        var original = aSourceMapConsumer.originalPositionFor({\n          line: mapping.originalLine,\n          column: mapping.originalColumn\n        });\n        if (original.source != null) {\n          // Copy mapping\n          mapping.source = original.source;\n          if (aSourceMapPath != null) {\n            mapping.source = util.join(aSourceMapPath, mapping.source)\n          }\n          if (sourceRoot != null) {\n            mapping.source = util.relative(sourceRoot, mapping.source);\n          }\n          mapping.originalLine = original.line;\n          mapping.originalColumn = original.column;\n          if (original.name != null) {\n            mapping.name = original.name;\n          }\n        }\n      }\n\n      var source = mapping.source;\n      if (source != null && !newSources.has(source)) {\n        newSources.add(source);\n      }\n\n      var name = mapping.name;\n      if (name != null && !newNames.has(name)) {\n        newNames.add(name);\n      }\n\n    }, this);\n    this._sources = newSources;\n    this._names = newNames;\n\n    // Copy sourcesContents of applied map.\n    aSourceMapConsumer.sources.forEach(function (sourceFile) {\n      var content = aSourceMapConsumer.sourceContentFor(sourceFile);\n      if (content != null) {\n        if (aSourceMapPath != null) {\n          sourceFile = util.join(aSourceMapPath, sourceFile);\n        }\n        if (sourceRoot != null) {\n          sourceFile = util.relative(sourceRoot, sourceFile);\n        }\n        this.setSourceContent(sourceFile, content);\n      }\n    }, this);\n  };\n\n/**\n * A mapping can have one of the three levels of data:\n *\n *   1. Just the generated position.\n *   2. The Generated position, original position, and original source.\n *   3. Generated and original position, original source, as well as a name\n *      token.\n *\n * To maintain consistency, we validate that any new mapping being added falls\n * in to one of these categories.\n */\nSourceMapGenerator.prototype._validateMapping =\n  function SourceMapGenerator_validateMapping(aGenerated, aOriginal, aSource,\n                                              aName) {\n    // When aOriginal is truthy but has empty values for .line and .column,\n    // it is most likely a programmer error. In this case we throw a very\n    // specific error message to try to guide them the right way.\n    // For example: https://github.com/Polymer/polymer-bundler/pull/519\n    if (aOriginal && typeof aOriginal.line !== 'number' && typeof aOriginal.column !== 'number') {\n      var message = 'original.line and original.column are not numbers -- you probably meant to omit ' +\n      'the original mapping entirely and only map the generated position. If so, pass ' +\n      'null for the original mapping instead of an object with empty or null values.'\n\n      if (this._ignoreInvalidMapping) {\n        if (typeof console !== 'undefined' && console.warn) {\n          console.warn(message);\n        }\n        return false;\n      } else {\n        throw new Error(message);\n      }\n    }\n\n    if (aGenerated && 'line' in aGenerated && 'column' in aGenerated\n        && aGenerated.line > 0 && aGenerated.column >= 0\n        && !aOriginal && !aSource && !aName) {\n      // Case 1.\n      return;\n    }\n    else if (aGenerated && 'line' in aGenerated && 'column' in aGenerated\n             && aOriginal && 'line' in aOriginal && 'column' in aOriginal\n             && aGenerated.line > 0 && aGenerated.column >= 0\n             && aOriginal.line > 0 && aOriginal.column >= 0\n             && aSource) {\n      // Cases 2 and 3.\n      return;\n    }\n    else {\n      var message = 'Invalid mapping: ' + JSON.stringify({\n        generated: aGenerated,\n        source: aSource,\n        original: aOriginal,\n        name: aName\n      });\n\n      if (this._ignoreInvalidMapping) {\n        if (typeof console !== 'undefined' && console.warn) {\n          console.warn(message);\n        }\n        return false;\n      } else {\n        throw new Error(message)\n      }\n    }\n  };\n\n/**\n * Serialize the accumulated mappings in to the stream of base 64 VLQs\n * specified by the source map format.\n */\nSourceMapGenerator.prototype._serializeMappings =\n  function SourceMapGenerator_serializeMappings() {\n    var previousGeneratedColumn = 0;\n    var previousGeneratedLine = 1;\n    var previousOriginalColumn = 0;\n    var previousOriginalLine = 0;\n    var previousName = 0;\n    var previousSource = 0;\n    var result = '';\n    var next;\n    var mapping;\n    var nameIdx;\n    var sourceIdx;\n\n    var mappings = this._mappings.toArray();\n    for (var i = 0, len = mappings.length; i < len; i++) {\n      mapping = mappings[i];\n      next = ''\n\n      if (mapping.generatedLine !== previousGeneratedLine) {\n        previousGeneratedColumn = 0;\n        while (mapping.generatedLine !== previousGeneratedLine) {\n          next += ';';\n          previousGeneratedLine++;\n        }\n      }\n      else {\n        if (i > 0) {\n          if (!util.compareByGeneratedPositionsInflated(mapping, mappings[i - 1])) {\n            continue;\n          }\n          next += ',';\n        }\n      }\n\n      next += base64VLQ.encode(mapping.generatedColumn\n                                 - previousGeneratedColumn);\n      previousGeneratedColumn = mapping.generatedColumn;\n\n      if (mapping.source != null) {\n        sourceIdx = this._sources.indexOf(mapping.source);\n        next += base64VLQ.encode(sourceIdx - previousSource);\n        previousSource = sourceIdx;\n\n        // lines are stored 0-based in SourceMap spec version 3\n        next += base64VLQ.encode(mapping.originalLine - 1\n                                   - previousOriginalLine);\n        previousOriginalLine = mapping.originalLine - 1;\n\n        next += base64VLQ.encode(mapping.originalColumn\n                                   - previousOriginalColumn);\n        previousOriginalColumn = mapping.originalColumn;\n\n        if (mapping.name != null) {\n          nameIdx = this._names.indexOf(mapping.name);\n          next += base64VLQ.encode(nameIdx - previousName);\n          previousName = nameIdx;\n        }\n      }\n\n      result += next;\n    }\n\n    return result;\n  };\n\nSourceMapGenerator.prototype._generateSourcesContent =\n  function SourceMapGenerator_generateSourcesContent(aSources, aSourceRoot) {\n    return aSources.map(function (source) {\n      if (!this._sourcesContents) {\n        return null;\n      }\n      if (aSourceRoot != null) {\n        source = util.relative(aSourceRoot, source);\n      }\n      var key = util.toSetString(source);\n      return Object.prototype.hasOwnProperty.call(this._sourcesContents, key)\n        ? this._sourcesContents[key]\n        : null;\n    }, this);\n  };\n\n/**\n * Externalize the source map.\n */\nSourceMapGenerator.prototype.toJSON =\n  function SourceMapGenerator_toJSON() {\n    var map = {\n      version: this._version,\n      sources: this._sources.toArray(),\n      names: this._names.toArray(),\n      mappings: this._serializeMappings()\n    };\n    if (this._file != null) {\n      map.file = this._file;\n    }\n    if (this._sourceRoot != null) {\n      map.sourceRoot = this._sourceRoot;\n    }\n    if (this._sourcesContents) {\n      map.sourcesContent = this._generateSourcesContent(map.sources, map.sourceRoot);\n    }\n\n    return map;\n  };\n\n/**\n * Render the source map being generated to a string.\n */\nSourceMapGenerator.prototype.toString =\n  function SourceMapGenerator_toString() {\n    return JSON.stringify(this.toJSON());\n  };\n\nexports.SourceMapGenerator = SourceMapGenerator;\n", "/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\nexports.GREATEST_LOWER_BOUND = 1;\nexports.LEAST_UPPER_BOUND = 2;\n\n/**\n * Recursive implementation of binary search.\n *\n * @param aLow Indices here and lower do not contain the needle.\n * @param aHigh Indices here and higher do not contain the needle.\n * @param aNeedle The element being searched for.\n * @param aHaystack The non-empty array being searched.\n * @param aCompare Function which takes two elements and returns -1, 0, or 1.\n * @param aBias Either 'binarySearch.GREATEST_LOWER_BOUND' or\n *     'binarySearch.LEAST_UPPER_BOUND'. Specifies whether to return the\n *     closest element that is smaller than or greater than the one we are\n *     searching for, respectively, if the exact element cannot be found.\n */\nfunction recursiveSearch(aLow, aHigh, aNeedle, aHaystack, aCompare, aBias) {\n  // This function terminates when one of the following is true:\n  //\n  //   1. We find the exact element we are looking for.\n  //\n  //   2. We did not find the exact element, but we can return the index of\n  //      the next-closest element.\n  //\n  //   3. We did not find the exact element, and there is no next-closest\n  //      element than the one we are searching for, so we return -1.\n  var mid = Math.floor((aHigh - aLow) / 2) + aLow;\n  var cmp = aCompare(aNeedle, aHaystack[mid], true);\n  if (cmp === 0) {\n    // Found the element we are looking for.\n    return mid;\n  }\n  else if (cmp > 0) {\n    // Our needle is greater than aHaystack[mid].\n    if (aHigh - mid > 1) {\n      // The element is in the upper half.\n      return recursiveSearch(mid, aHigh, aNeedle, aHaystack, aCompare, aBias);\n    }\n\n    // The exact needle element was not found in this haystack. Determine if\n    // we are in termination case (3) or (2) and return the appropriate thing.\n    if (aBias == exports.LEAST_UPPER_BOUND) {\n      return aHigh < aHaystack.length ? aHigh : -1;\n    } else {\n      return mid;\n    }\n  }\n  else {\n    // Our needle is less than aHaystack[mid].\n    if (mid - aLow > 1) {\n      // The element is in the lower half.\n      return recursiveSearch(aLow, mid, aNeedle, aHaystack, aCompare, aBias);\n    }\n\n    // we are in termination case (3) or (2) and return the appropriate thing.\n    if (aBias == exports.LEAST_UPPER_BOUND) {\n      return mid;\n    } else {\n      return aLow < 0 ? -1 : aLow;\n    }\n  }\n}\n\n/**\n * This is an implementation of binary search which will always try and return\n * the index of the closest element if there is no exact hit. This is because\n * mappings between original and generated line/col pairs are single points,\n * and there is an implicit region between each of them, so a miss just means\n * that you aren't on the very start of a region.\n *\n * @param aNeedle The element you are looking for.\n * @param aHaystack The array that is being searched.\n * @param aCompare A function which takes the needle and an element in the\n *     array and returns -1, 0, or 1 depending on whether the needle is less\n *     than, equal to, or greater than the element, respectively.\n * @param aBias Either 'binarySearch.GREATEST_LOWER_BOUND' or\n *     'binarySearch.LEAST_UPPER_BOUND'. Specifies whether to return the\n *     closest element that is smaller than or greater than the one we are\n *     searching for, respectively, if the exact element cannot be found.\n *     Defaults to 'binarySearch.GREATEST_LOWER_BOUND'.\n */\nexports.search = function search(aNeedle, aHaystack, aCompare, aBias) {\n  if (aHaystack.length === 0) {\n    return -1;\n  }\n\n  var index = recursiveSearch(-1, aHaystack.length, aNeedle, aHaystack,\n                              aCompare, aBias || exports.GREATEST_LOWER_BOUND);\n  if (index < 0) {\n    return -1;\n  }\n\n  // We have found either the exact element, or the next-closest element than\n  // the one we are searching for. However, there may be more than one such\n  // element. Make sure we always return the smallest of these.\n  while (index - 1 >= 0) {\n    if (aCompare(aHaystack[index], aHaystack[index - 1], true) !== 0) {\n      break;\n    }\n    --index;\n  }\n\n  return index;\n};\n", "/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\n// It turns out that some (most?) JavaScript engines don't self-host\n// `Array.prototype.sort`. This makes sense because C++ will likely remain\n// faster than JS when doing raw CPU-intensive sorting. However, when using a\n// custom comparator function, calling back and forth between the VM's C++ and\n// JIT'd JS is rather slow *and* loses JIT type information, resulting in\n// worse generated code for the comparator function than would be optimal. In\n// fact, when sorting with a comparator, these costs outweigh the benefits of\n// sorting in C++. By using our own JS-implemented Quick Sort (below), we get\n// a ~3500ms mean speed-up in `bench/bench.html`.\n\nfunction SortTemplate(comparator) {\n\n/**\n * Swap the elements indexed by `x` and `y` in the array `ary`.\n *\n * @param {Array} ary\n *        The array.\n * @param {Number} x\n *        The index of the first item.\n * @param {Number} y\n *        The index of the second item.\n */\nfunction swap(ary, x, y) {\n  var temp = ary[x];\n  ary[x] = ary[y];\n  ary[y] = temp;\n}\n\n/**\n * Returns a random integer within the range `low .. high` inclusive.\n *\n * @param {Number} low\n *        The lower bound on the range.\n * @param {Number} high\n *        The upper bound on the range.\n */\nfunction randomIntInRange(low, high) {\n  return Math.round(low + (Math.random() * (high - low)));\n}\n\n/**\n * The Quick Sort algorithm.\n *\n * @param {Array} ary\n *        An array to sort.\n * @param {function} comparator\n *        Function to use to compare two items.\n * @param {Number} p\n *        Start index of the array\n * @param {Number} r\n *        End index of the array\n */\nfunction doQuickSort(ary, comparator, p, r) {\n  // If our lower bound is less than our upper bound, we (1) partition the\n  // array into two pieces and (2) recurse on each half. If it is not, this is\n  // the empty array and our base case.\n\n  if (p < r) {\n    // (1) Partitioning.\n    //\n    // The partitioning chooses a pivot between `p` and `r` and moves all\n    // elements that are less than or equal to the pivot to the before it, and\n    // all the elements that are greater than it after it. The effect is that\n    // once partition is done, the pivot is in the exact place it will be when\n    // the array is put in sorted order, and it will not need to be moved\n    // again. This runs in O(n) time.\n\n    // Always choose a random pivot so that an input array which is reverse\n    // sorted does not cause O(n^2) running time.\n    var pivotIndex = randomIntInRange(p, r);\n    var i = p - 1;\n\n    swap(ary, pivotIndex, r);\n    var pivot = ary[r];\n\n    // Immediately after `j` is incremented in this loop, the following hold\n    // true:\n    //\n    //   * Every element in `ary[p .. i]` is less than or equal to the pivot.\n    //\n    //   * Every element in `ary[i+1 .. j-1]` is greater than the pivot.\n    for (var j = p; j < r; j++) {\n      if (comparator(ary[j], pivot, false) <= 0) {\n        i += 1;\n        swap(ary, i, j);\n      }\n    }\n\n    swap(ary, i + 1, j);\n    var q = i + 1;\n\n    // (2) Recurse on each half.\n\n    doQuickSort(ary, comparator, p, q - 1);\n    doQuickSort(ary, comparator, q + 1, r);\n  }\n}\n\n  return doQuickSort;\n}\n\nfunction cloneSort(comparator) {\n  let template = SortTemplate.toString();\n  let templateFn = new Function(`return ${template}`)();\n  return templateFn(comparator);\n}\n\n/**\n * Sort the given array in-place with the given comparator function.\n *\n * @param {Array} ary\n *        An array to sort.\n * @param {function} comparator\n *        Function to use to compare two items.\n */\n\nlet sortCache = new WeakMap();\nexports.quickSort = function (ary, comparator, start = 0) {\n  let doQuickSort = sortCache.get(comparator);\n  if (doQuickSort === void 0) {\n    doQuickSort = cloneSort(comparator);\n    sortCache.set(comparator, doQuickSort);\n  }\n  doQuickSort(ary, comparator, start, ary.length - 1);\n};\n", "/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\nvar util = require('./util');\nvar binarySearch = require('./binary-search');\nvar ArraySet = require('./array-set').ArraySet;\nvar base64VLQ = require('./base64-vlq');\nvar quickSort = require('./quick-sort').quickSort;\n\nfunction SourceMapConsumer(aSourceMap, aSourceMapURL) {\n  var sourceMap = aSourceMap;\n  if (typeof aSourceMap === 'string') {\n    sourceMap = util.parseSourceMapInput(aSourceMap);\n  }\n\n  return sourceMap.sections != null\n    ? new IndexedSourceMapConsumer(sourceMap, aSourceMapURL)\n    : new BasicSourceMapConsumer(sourceMap, aSourceMapURL);\n}\n\nSourceMapConsumer.fromSourceMap = function(aSourceMap, aSourceMapURL) {\n  return BasicSourceMapConsumer.fromSourceMap(aSourceMap, aSourceMapURL);\n}\n\n/**\n * The version of the source mapping spec that we are consuming.\n */\nSourceMapConsumer.prototype._version = 3;\n\n// `__generatedMappings` and `__originalMappings` are arrays that hold the\n// parsed mapping coordinates from the source map's \"mappings\" attribute. They\n// are lazily instantiated, accessed via the `_generatedMappings` and\n// `_originalMappings` getters respectively, and we only parse the mappings\n// and create these arrays once queried for a source location. We jump through\n// these hoops because there can be many thousands of mappings, and parsing\n// them is expensive, so we only want to do it if we must.\n//\n// Each object in the arrays is of the form:\n//\n//     {\n//       generatedLine: The line number in the generated code,\n//       generatedColumn: The column number in the generated code,\n//       source: The path to the original source file that generated this\n//               chunk of code,\n//       originalLine: The line number in the original source that\n//                     corresponds to this chunk of generated code,\n//       originalColumn: The column number in the original source that\n//                       corresponds to this chunk of generated code,\n//       name: The name of the original symbol which generated this chunk of\n//             code.\n//     }\n//\n// All properties except for `generatedLine` and `generatedColumn` can be\n// `null`.\n//\n// `_generatedMappings` is ordered by the generated positions.\n//\n// `_originalMappings` is ordered by the original positions.\n\nSourceMapConsumer.prototype.__generatedMappings = null;\nObject.defineProperty(SourceMapConsumer.prototype, '_generatedMappings', {\n  configurable: true,\n  enumerable: true,\n  get: function () {\n    if (!this.__generatedMappings) {\n      this._parseMappings(this._mappings, this.sourceRoot);\n    }\n\n    return this.__generatedMappings;\n  }\n});\n\nSourceMapConsumer.prototype.__originalMappings = null;\nObject.defineProperty(SourceMapConsumer.prototype, '_originalMappings', {\n  configurable: true,\n  enumerable: true,\n  get: function () {\n    if (!this.__originalMappings) {\n      this._parseMappings(this._mappings, this.sourceRoot);\n    }\n\n    return this.__originalMappings;\n  }\n});\n\nSourceMapConsumer.prototype._charIsMappingSeparator =\n  function SourceMapConsumer_charIsMappingSeparator(aStr, index) {\n    var c = aStr.charAt(index);\n    return c === \";\" || c === \",\";\n  };\n\n/**\n * Parse the mappings in a string in to a data structure which we can easily\n * query (the ordered arrays in the `this.__generatedMappings` and\n * `this.__originalMappings` properties).\n */\nSourceMapConsumer.prototype._parseMappings =\n  function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {\n    throw new Error(\"Subclasses must implement _parseMappings\");\n  };\n\nSourceMapConsumer.GENERATED_ORDER = 1;\nSourceMapConsumer.ORIGINAL_ORDER = 2;\n\nSourceMapConsumer.GREATEST_LOWER_BOUND = 1;\nSourceMapConsumer.LEAST_UPPER_BOUND = 2;\n\n/**\n * Iterate over each mapping between an original source/line/column and a\n * generated line/column in this source map.\n *\n * @param Function aCallback\n *        The function that is called with each mapping.\n * @param Object aContext\n *        Optional. If specified, this object will be the value of `this` every\n *        time that `aCallback` is called.\n * @param aOrder\n *        Either `SourceMapConsumer.GENERATED_ORDER` or\n *        `SourceMapConsumer.ORIGINAL_ORDER`. Specifies whether you want to\n *        iterate over the mappings sorted by the generated file's line/column\n *        order or the original's source/line/column order, respectively. Defaults to\n *        `SourceMapConsumer.GENERATED_ORDER`.\n */\nSourceMapConsumer.prototype.eachMapping =\n  function SourceMapConsumer_eachMapping(aCallback, aContext, aOrder) {\n    var context = aContext || null;\n    var order = aOrder || SourceMapConsumer.GENERATED_ORDER;\n\n    var mappings;\n    switch (order) {\n    case SourceMapConsumer.GENERATED_ORDER:\n      mappings = this._generatedMappings;\n      break;\n    case SourceMapConsumer.ORIGINAL_ORDER:\n      mappings = this._originalMappings;\n      break;\n    default:\n      throw new Error(\"Unknown order of iteration.\");\n    }\n\n    var sourceRoot = this.sourceRoot;\n    var boundCallback = aCallback.bind(context);\n    var names = this._names;\n    var sources = this._sources;\n    var sourceMapURL = this._sourceMapURL;\n\n    for (var i = 0, n = mappings.length; i < n; i++) {\n      var mapping = mappings[i];\n      var source = mapping.source === null ? null : sources.at(mapping.source);\n      source = util.computeSourceURL(sourceRoot, source, sourceMapURL);\n      boundCallback({\n        source: source,\n        generatedLine: mapping.generatedLine,\n        generatedColumn: mapping.generatedColumn,\n        originalLine: mapping.originalLine,\n        originalColumn: mapping.originalColumn,\n        name: mapping.name === null ? null : names.at(mapping.name)\n      });\n    }\n  };\n\n/**\n * Returns all generated line and column information for the original source,\n * line, and column provided. If no column is provided, returns all mappings\n * corresponding to a either the line we are searching for or the next\n * closest line that has any mappings. Otherwise, returns all mappings\n * corresponding to the given line and either the column we are searching for\n * or the next closest column that has any offsets.\n *\n * The only argument is an object with the following properties:\n *\n *   - source: The filename of the original source.\n *   - line: The line number in the original source.  The line number is 1-based.\n *   - column: Optional. the column number in the original source.\n *    The column number is 0-based.\n *\n * and an array of objects is returned, each with the following properties:\n *\n *   - line: The line number in the generated source, or null.  The\n *    line number is 1-based.\n *   - column: The column number in the generated source, or null.\n *    The column number is 0-based.\n */\nSourceMapConsumer.prototype.allGeneratedPositionsFor =\n  function SourceMapConsumer_allGeneratedPositionsFor(aArgs) {\n    var line = util.getArg(aArgs, 'line');\n\n    // When there is no exact match, BasicSourceMapConsumer.prototype._findMapping\n    // returns the index of the closest mapping less than the needle. By\n    // setting needle.originalColumn to 0, we thus find the last mapping for\n    // the given line, provided such a mapping exists.\n    var needle = {\n      source: util.getArg(aArgs, 'source'),\n      originalLine: line,\n      originalColumn: util.getArg(aArgs, 'column', 0)\n    };\n\n    needle.source = this._findSourceIndex(needle.source);\n    if (needle.source < 0) {\n      return [];\n    }\n\n    var mappings = [];\n\n    var index = this._findMapping(needle,\n                                  this._originalMappings,\n                                  \"originalLine\",\n                                  \"originalColumn\",\n                                  util.compareByOriginalPositions,\n                                  binarySearch.LEAST_UPPER_BOUND);\n    if (index >= 0) {\n      var mapping = this._originalMappings[index];\n\n      if (aArgs.column === undefined) {\n        var originalLine = mapping.originalLine;\n\n        // Iterate until either we run out of mappings, or we run into\n        // a mapping for a different line than the one we found. Since\n        // mappings are sorted, this is guaranteed to find all mappings for\n        // the line we found.\n        while (mapping && mapping.originalLine === originalLine) {\n          mappings.push({\n            line: util.getArg(mapping, 'generatedLine', null),\n            column: util.getArg(mapping, 'generatedColumn', null),\n            lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)\n          });\n\n          mapping = this._originalMappings[++index];\n        }\n      } else {\n        var originalColumn = mapping.originalColumn;\n\n        // Iterate until either we run out of mappings, or we run into\n        // a mapping for a different line than the one we were searching for.\n        // Since mappings are sorted, this is guaranteed to find all mappings for\n        // the line we are searching for.\n        while (mapping &&\n               mapping.originalLine === line &&\n               mapping.originalColumn == originalColumn) {\n          mappings.push({\n            line: util.getArg(mapping, 'generatedLine', null),\n            column: util.getArg(mapping, 'generatedColumn', null),\n            lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)\n          });\n\n          mapping = this._originalMappings[++index];\n        }\n      }\n    }\n\n    return mappings;\n  };\n\nexports.SourceMapConsumer = SourceMapConsumer;\n\n/**\n * A BasicSourceMapConsumer instance represents a parsed source map which we can\n * query for information about the original file positions by giving it a file\n * position in the generated source.\n *\n * The first parameter is the raw source map (either as a JSON string, or\n * already parsed to an object). According to the spec, source maps have the\n * following attributes:\n *\n *   - version: Which version of the source map spec this map is following.\n *   - sources: An array of URLs to the original source files.\n *   - names: An array of identifiers which can be referrenced by individual mappings.\n *   - sourceRoot: Optional. The URL root from which all sources are relative.\n *   - sourcesContent: Optional. An array of contents of the original source files.\n *   - mappings: A string of base64 VLQs which contain the actual mappings.\n *   - file: Optional. The generated file this source map is associated with.\n *\n * Here is an example source map, taken from the source map spec[0]:\n *\n *     {\n *       version : 3,\n *       file: \"out.js\",\n *       sourceRoot : \"\",\n *       sources: [\"foo.js\", \"bar.js\"],\n *       names: [\"src\", \"maps\", \"are\", \"fun\"],\n *       mappings: \"AA,AB;;ABCDE;\"\n *     }\n *\n * The second parameter, if given, is a string whose value is the URL\n * at which the source map was found.  This URL is used to compute the\n * sources array.\n *\n * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit?pli=1#\n */\nfunction BasicSourceMapConsumer(aSourceMap, aSourceMapURL) {\n  var sourceMap = aSourceMap;\n  if (typeof aSourceMap === 'string') {\n    sourceMap = util.parseSourceMapInput(aSourceMap);\n  }\n\n  var version = util.getArg(sourceMap, 'version');\n  var sources = util.getArg(sourceMap, 'sources');\n  // Sass 3.3 leaves out the 'names' array, so we deviate from the spec (which\n  // requires the array) to play nice here.\n  var names = util.getArg(sourceMap, 'names', []);\n  var sourceRoot = util.getArg(sourceMap, 'sourceRoot', null);\n  var sourcesContent = util.getArg(sourceMap, 'sourcesContent', null);\n  var mappings = util.getArg(sourceMap, 'mappings');\n  var file = util.getArg(sourceMap, 'file', null);\n\n  // Once again, Sass deviates from the spec and supplies the version as a\n  // string rather than a number, so we use loose equality checking here.\n  if (version != this._version) {\n    throw new Error('Unsupported version: ' + version);\n  }\n\n  if (sourceRoot) {\n    sourceRoot = util.normalize(sourceRoot);\n  }\n\n  sources = sources\n    .map(String)\n    // Some source maps produce relative source paths like \"./foo.js\" instead of\n    // \"foo.js\".  Normalize these first so that future comparisons will succeed.\n    // See bugzil.la/1090768.\n    .map(util.normalize)\n    // Always ensure that absolute sources are internally stored relative to\n    // the source root, if the source root is absolute. Not doing this would\n    // be particularly problematic when the source root is a prefix of the\n    // source (valid, but why??). See github issue #199 and bugzil.la/1188982.\n    .map(function (source) {\n      return sourceRoot && util.isAbsolute(sourceRoot) && util.isAbsolute(source)\n        ? util.relative(sourceRoot, source)\n        : source;\n    });\n\n  // Pass `true` below to allow duplicate names and sources. While source maps\n  // are intended to be compressed and deduplicated, the TypeScript compiler\n  // sometimes generates source maps with duplicates in them. See Github issue\n  // #72 and bugzil.la/889492.\n  this._names = ArraySet.fromArray(names.map(String), true);\n  this._sources = ArraySet.fromArray(sources, true);\n\n  this._absoluteSources = this._sources.toArray().map(function (s) {\n    return util.computeSourceURL(sourceRoot, s, aSourceMapURL);\n  });\n\n  this.sourceRoot = sourceRoot;\n  this.sourcesContent = sourcesContent;\n  this._mappings = mappings;\n  this._sourceMapURL = aSourceMapURL;\n  this.file = file;\n}\n\nBasicSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);\nBasicSourceMapConsumer.prototype.consumer = SourceMapConsumer;\n\n/**\n * Utility function to find the index of a source.  Returns -1 if not\n * found.\n */\nBasicSourceMapConsumer.prototype._findSourceIndex = function(aSource) {\n  var relativeSource = aSource;\n  if (this.sourceRoot != null) {\n    relativeSource = util.relative(this.sourceRoot, relativeSource);\n  }\n\n  if (this._sources.has(relativeSource)) {\n    return this._sources.indexOf(relativeSource);\n  }\n\n  // Maybe aSource is an absolute URL as returned by |sources|.  In\n  // this case we can't simply undo the transform.\n  var i;\n  for (i = 0; i < this._absoluteSources.length; ++i) {\n    if (this._absoluteSources[i] == aSource) {\n      return i;\n    }\n  }\n\n  return -1;\n};\n\n/**\n * Create a BasicSourceMapConsumer from a SourceMapGenerator.\n *\n * @param SourceMapGenerator aSourceMap\n *        The source map that will be consumed.\n * @param String aSourceMapURL\n *        The URL at which the source map can be found (optional)\n * @returns BasicSourceMapConsumer\n */\nBasicSourceMapConsumer.fromSourceMap =\n  function SourceMapConsumer_fromSourceMap(aSourceMap, aSourceMapURL) {\n    var smc = Object.create(BasicSourceMapConsumer.prototype);\n\n    var names = smc._names = ArraySet.fromArray(aSourceMap._names.toArray(), true);\n    var sources = smc._sources = ArraySet.fromArray(aSourceMap._sources.toArray(), true);\n    smc.sourceRoot = aSourceMap._sourceRoot;\n    smc.sourcesContent = aSourceMap._generateSourcesContent(smc._sources.toArray(),\n                                                            smc.sourceRoot);\n    smc.file = aSourceMap._file;\n    smc._sourceMapURL = aSourceMapURL;\n    smc._absoluteSources = smc._sources.toArray().map(function (s) {\n      return util.computeSourceURL(smc.sourceRoot, s, aSourceMapURL);\n    });\n\n    // Because we are modifying the entries (by converting string sources and\n    // names to indices into the sources and names ArraySets), we have to make\n    // a copy of the entry or else bad things happen. Shared mutable state\n    // strikes again! See github issue #191.\n\n    var generatedMappings = aSourceMap._mappings.toArray().slice();\n    var destGeneratedMappings = smc.__generatedMappings = [];\n    var destOriginalMappings = smc.__originalMappings = [];\n\n    for (var i = 0, length = generatedMappings.length; i < length; i++) {\n      var srcMapping = generatedMappings[i];\n      var destMapping = new Mapping;\n      destMapping.generatedLine = srcMapping.generatedLine;\n      destMapping.generatedColumn = srcMapping.generatedColumn;\n\n      if (srcMapping.source) {\n        destMapping.source = sources.indexOf(srcMapping.source);\n        destMapping.originalLine = srcMapping.originalLine;\n        destMapping.originalColumn = srcMapping.originalColumn;\n\n        if (srcMapping.name) {\n          destMapping.name = names.indexOf(srcMapping.name);\n        }\n\n        destOriginalMappings.push(destMapping);\n      }\n\n      destGeneratedMappings.push(destMapping);\n    }\n\n    quickSort(smc.__originalMappings, util.compareByOriginalPositions);\n\n    return smc;\n  };\n\n/**\n * The version of the source mapping spec that we are consuming.\n */\nBasicSourceMapConsumer.prototype._version = 3;\n\n/**\n * The list of original sources.\n */\nObject.defineProperty(BasicSourceMapConsumer.prototype, 'sources', {\n  get: function () {\n    return this._absoluteSources.slice();\n  }\n});\n\n/**\n * Provide the JIT with a nice shape / hidden class.\n */\nfunction Mapping() {\n  this.generatedLine = 0;\n  this.generatedColumn = 0;\n  this.source = null;\n  this.originalLine = null;\n  this.originalColumn = null;\n  this.name = null;\n}\n\n/**\n * Parse the mappings in a string in to a data structure which we can easily\n * query (the ordered arrays in the `this.__generatedMappings` and\n * `this.__originalMappings` properties).\n */\n\nconst compareGenerated = util.compareByGeneratedPositionsDeflatedNoLine;\nfunction sortGenerated(array, start) {\n  let l = array.length;\n  let n = array.length - start;\n  if (n <= 1) {\n    return;\n  } else if (n == 2) {\n    let a = array[start];\n    let b = array[start + 1];\n    if (compareGenerated(a, b) > 0) {\n      array[start] = b;\n      array[start + 1] = a;\n    }\n  } else if (n < 20) {\n    for (let i = start; i < l; i++) {\n      for (let j = i; j > start; j--) {\n        let a = array[j - 1];\n        let b = array[j];\n        if (compareGenerated(a, b) <= 0) {\n          break;\n        }\n        array[j - 1] = b;\n        array[j] = a;\n      }\n    }\n  } else {\n    quickSort(array, compareGenerated, start);\n  }\n}\nBasicSourceMapConsumer.prototype._parseMappings =\n  function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {\n    var generatedLine = 1;\n    var previousGeneratedColumn = 0;\n    var previousOriginalLine = 0;\n    var previousOriginalColumn = 0;\n    var previousSource = 0;\n    var previousName = 0;\n    var length = aStr.length;\n    var index = 0;\n    var cachedSegments = {};\n    var temp = {};\n    var originalMappings = [];\n    var generatedMappings = [];\n    var mapping, str, segment, end, value;\n\n    let subarrayStart = 0;\n    while (index < length) {\n      if (aStr.charAt(index) === ';') {\n        generatedLine++;\n        index++;\n        previousGeneratedColumn = 0;\n\n        sortGenerated(generatedMappings, subarrayStart);\n        subarrayStart = generatedMappings.length;\n      }\n      else if (aStr.charAt(index) === ',') {\n        index++;\n      }\n      else {\n        mapping = new Mapping();\n        mapping.generatedLine = generatedLine;\n\n        for (end = index; end < length; end++) {\n          if (this._charIsMappingSeparator(aStr, end)) {\n            break;\n          }\n        }\n        str = aStr.slice(index, end);\n\n        segment = [];\n        while (index < end) {\n          base64VLQ.decode(aStr, index, temp);\n          value = temp.value;\n          index = temp.rest;\n          segment.push(value);\n        }\n\n        if (segment.length === 2) {\n          throw new Error('Found a source, but no line and column');\n        }\n\n        if (segment.length === 3) {\n          throw new Error('Found a source and line, but no column');\n        }\n\n        // Generated column.\n        mapping.generatedColumn = previousGeneratedColumn + segment[0];\n        previousGeneratedColumn = mapping.generatedColumn;\n\n        if (segment.length > 1) {\n          // Original source.\n          mapping.source = previousSource + segment[1];\n          previousSource += segment[1];\n\n          // Original line.\n          mapping.originalLine = previousOriginalLine + segment[2];\n          previousOriginalLine = mapping.originalLine;\n          // Lines are stored 0-based\n          mapping.originalLine += 1;\n\n          // Original column.\n          mapping.originalColumn = previousOriginalColumn + segment[3];\n          previousOriginalColumn = mapping.originalColumn;\n\n          if (segment.length > 4) {\n            // Original name.\n            mapping.name = previousName + segment[4];\n            previousName += segment[4];\n          }\n        }\n\n        generatedMappings.push(mapping);\n        if (typeof mapping.originalLine === 'number') {\n          let currentSource = mapping.source;\n          while (originalMappings.length <= currentSource) {\n            originalMappings.push(null);\n          }\n          if (originalMappings[currentSource] === null) {\n            originalMappings[currentSource] = [];\n          }\n          originalMappings[currentSource].push(mapping);\n        }\n      }\n    }\n\n    sortGenerated(generatedMappings, subarrayStart);\n    this.__generatedMappings = generatedMappings;\n\n    for (var i = 0; i < originalMappings.length; i++) {\n      if (originalMappings[i] != null) {\n        quickSort(originalMappings[i], util.compareByOriginalPositionsNoSource);\n      }\n    }\n    this.__originalMappings = [].concat(...originalMappings);\n  };\n\n/**\n * Find the mapping that best matches the hypothetical \"needle\" mapping that\n * we are searching for in the given \"haystack\" of mappings.\n */\nBasicSourceMapConsumer.prototype._findMapping =\n  function SourceMapConsumer_findMapping(aNeedle, aMappings, aLineName,\n                                         aColumnName, aComparator, aBias) {\n    // To return the position we are searching for, we must first find the\n    // mapping for the given position and then return the opposite position it\n    // points to. Because the mappings are sorted, we can use binary search to\n    // find the best mapping.\n\n    if (aNeedle[aLineName] <= 0) {\n      throw new TypeError('Line must be greater than or equal to 1, got '\n                          + aNeedle[aLineName]);\n    }\n    if (aNeedle[aColumnName] < 0) {\n      throw new TypeError('Column must be greater than or equal to 0, got '\n                          + aNeedle[aColumnName]);\n    }\n\n    return binarySearch.search(aNeedle, aMappings, aComparator, aBias);\n  };\n\n/**\n * Compute the last column for each generated mapping. The last column is\n * inclusive.\n */\nBasicSourceMapConsumer.prototype.computeColumnSpans =\n  function SourceMapConsumer_computeColumnSpans() {\n    for (var index = 0; index < this._generatedMappings.length; ++index) {\n      var mapping = this._generatedMappings[index];\n\n      // Mappings do not contain a field for the last generated columnt. We\n      // can come up with an optimistic estimate, however, by assuming that\n      // mappings are contiguous (i.e. given two consecutive mappings, the\n      // first mapping ends where the second one starts).\n      if (index + 1 < this._generatedMappings.length) {\n        var nextMapping = this._generatedMappings[index + 1];\n\n        if (mapping.generatedLine === nextMapping.generatedLine) {\n          mapping.lastGeneratedColumn = nextMapping.generatedColumn - 1;\n          continue;\n        }\n      }\n\n      // The last mapping for each line spans the entire line.\n      mapping.lastGeneratedColumn = Infinity;\n    }\n  };\n\n/**\n * Returns the original source, line, and column information for the generated\n * source's line and column positions provided. The only argument is an object\n * with the following properties:\n *\n *   - line: The line number in the generated source.  The line number\n *     is 1-based.\n *   - column: The column number in the generated source.  The column\n *     number is 0-based.\n *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or\n *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the\n *     closest element that is smaller than or greater than the one we are\n *     searching for, respectively, if the exact element cannot be found.\n *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.\n *\n * and an object is returned with the following properties:\n *\n *   - source: The original source file, or null.\n *   - line: The line number in the original source, or null.  The\n *     line number is 1-based.\n *   - column: The column number in the original source, or null.  The\n *     column number is 0-based.\n *   - name: The original identifier, or null.\n */\nBasicSourceMapConsumer.prototype.originalPositionFor =\n  function SourceMapConsumer_originalPositionFor(aArgs) {\n    var needle = {\n      generatedLine: util.getArg(aArgs, 'line'),\n      generatedColumn: util.getArg(aArgs, 'column')\n    };\n\n    var index = this._findMapping(\n      needle,\n      this._generatedMappings,\n      \"generatedLine\",\n      \"generatedColumn\",\n      util.compareByGeneratedPositionsDeflated,\n      util.getArg(aArgs, 'bias', SourceMapConsumer.GREATEST_LOWER_BOUND)\n    );\n\n    if (index >= 0) {\n      var mapping = this._generatedMappings[index];\n\n      if (mapping.generatedLine === needle.generatedLine) {\n        var source = util.getArg(mapping, 'source', null);\n        if (source !== null) {\n          source = this._sources.at(source);\n          source = util.computeSourceURL(this.sourceRoot, source, this._sourceMapURL);\n        }\n        var name = util.getArg(mapping, 'name', null);\n        if (name !== null) {\n          name = this._names.at(name);\n        }\n        return {\n          source: source,\n          line: util.getArg(mapping, 'originalLine', null),\n          column: util.getArg(mapping, 'originalColumn', null),\n          name: name\n        };\n      }\n    }\n\n    return {\n      source: null,\n      line: null,\n      column: null,\n      name: null\n    };\n  };\n\n/**\n * Return true if we have the source content for every source in the source\n * map, false otherwise.\n */\nBasicSourceMapConsumer.prototype.hasContentsOfAllSources =\n  function BasicSourceMapConsumer_hasContentsOfAllSources() {\n    if (!this.sourcesContent) {\n      return false;\n    }\n    return this.sourcesContent.length >= this._sources.size() &&\n      !this.sourcesContent.some(function (sc) { return sc == null; });\n  };\n\n/**\n * Returns the original source content. The only argument is the url of the\n * original source file. Returns null if no original source content is\n * available.\n */\nBasicSourceMapConsumer.prototype.sourceContentFor =\n  function SourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {\n    if (!this.sourcesContent) {\n      return null;\n    }\n\n    var index = this._findSourceIndex(aSource);\n    if (index >= 0) {\n      return this.sourcesContent[index];\n    }\n\n    var relativeSource = aSource;\n    if (this.sourceRoot != null) {\n      relativeSource = util.relative(this.sourceRoot, relativeSource);\n    }\n\n    var url;\n    if (this.sourceRoot != null\n        && (url = util.urlParse(this.sourceRoot))) {\n      // XXX: file:// URIs and absolute paths lead to unexpected behavior for\n      // many users. We can help them out when they expect file:// URIs to\n      // behave like it would if they were running a local HTTP server. See\n      // https://bugzilla.mozilla.org/show_bug.cgi?id=885597.\n      var fileUriAbsPath = relativeSource.replace(/^file:\\/\\//, \"\");\n      if (url.scheme == \"file\"\n          && this._sources.has(fileUriAbsPath)) {\n        return this.sourcesContent[this._sources.indexOf(fileUriAbsPath)]\n      }\n\n      if ((!url.path || url.path == \"/\")\n          && this._sources.has(\"/\" + relativeSource)) {\n        return this.sourcesContent[this._sources.indexOf(\"/\" + relativeSource)];\n      }\n    }\n\n    // This function is used recursively from\n    // IndexedSourceMapConsumer.prototype.sourceContentFor. In that case, we\n    // don't want to throw if we can't find the source - we just want to\n    // return null, so we provide a flag to exit gracefully.\n    if (nullOnMissing) {\n      return null;\n    }\n    else {\n      throw new Error('\"' + relativeSource + '\" is not in the SourceMap.');\n    }\n  };\n\n/**\n * Returns the generated line and column information for the original source,\n * line, and column positions provided. The only argument is an object with\n * the following properties:\n *\n *   - source: The filename of the original source.\n *   - line: The line number in the original source.  The line number\n *     is 1-based.\n *   - column: The column number in the original source.  The column\n *     number is 0-based.\n *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or\n *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the\n *     closest element that is smaller than or greater than the one we are\n *     searching for, respectively, if the exact element cannot be found.\n *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.\n *\n * and an object is returned with the following properties:\n *\n *   - line: The line number in the generated source, or null.  The\n *     line number is 1-based.\n *   - column: The column number in the generated source, or null.\n *     The column number is 0-based.\n */\nBasicSourceMapConsumer.prototype.generatedPositionFor =\n  function SourceMapConsumer_generatedPositionFor(aArgs) {\n    var source = util.getArg(aArgs, 'source');\n    source = this._findSourceIndex(source);\n    if (source < 0) {\n      return {\n        line: null,\n        column: null,\n        lastColumn: null\n      };\n    }\n\n    var needle = {\n      source: source,\n      originalLine: util.getArg(aArgs, 'line'),\n      originalColumn: util.getArg(aArgs, 'column')\n    };\n\n    var index = this._findMapping(\n      needle,\n      this._originalMappings,\n      \"originalLine\",\n      \"originalColumn\",\n      util.compareByOriginalPositions,\n      util.getArg(aArgs, 'bias', SourceMapConsumer.GREATEST_LOWER_BOUND)\n    );\n\n    if (index >= 0) {\n      var mapping = this._originalMappings[index];\n\n      if (mapping.source === needle.source) {\n        return {\n          line: util.getArg(mapping, 'generatedLine', null),\n          column: util.getArg(mapping, 'generatedColumn', null),\n          lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)\n        };\n      }\n    }\n\n    return {\n      line: null,\n      column: null,\n      lastColumn: null\n    };\n  };\n\nexports.BasicSourceMapConsumer = BasicSourceMapConsumer;\n\n/**\n * An IndexedSourceMapConsumer instance represents a parsed source map which\n * we can query for information. It differs from BasicSourceMapConsumer in\n * that it takes \"indexed\" source maps (i.e. ones with a \"sections\" field) as\n * input.\n *\n * The first parameter is a raw source map (either as a JSON string, or already\n * parsed to an object). According to the spec for indexed source maps, they\n * have the following attributes:\n *\n *   - version: Which version of the source map spec this map is following.\n *   - file: Optional. The generated file this source map is associated with.\n *   - sections: A list of section definitions.\n *\n * Each value under the \"sections\" field has two fields:\n *   - offset: The offset into the original specified at which this section\n *       begins to apply, defined as an object with a \"line\" and \"column\"\n *       field.\n *   - map: A source map definition. This source map could also be indexed,\n *       but doesn't have to be.\n *\n * Instead of the \"map\" field, it's also possible to have a \"url\" field\n * specifying a URL to retrieve a source map from, but that's currently\n * unsupported.\n *\n * Here's an example source map, taken from the source map spec[0], but\n * modified to omit a section which uses the \"url\" field.\n *\n *  {\n *    version : 3,\n *    file: \"app.js\",\n *    sections: [{\n *      offset: {line:100, column:10},\n *      map: {\n *        version : 3,\n *        file: \"section.js\",\n *        sources: [\"foo.js\", \"bar.js\"],\n *        names: [\"src\", \"maps\", \"are\", \"fun\"],\n *        mappings: \"AAAA,E;;ABCDE;\"\n *      }\n *    }],\n *  }\n *\n * The second parameter, if given, is a string whose value is the URL\n * at which the source map was found.  This URL is used to compute the\n * sources array.\n *\n * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit#heading=h.535es3xeprgt\n */\nfunction IndexedSourceMapConsumer(aSourceMap, aSourceMapURL) {\n  var sourceMap = aSourceMap;\n  if (typeof aSourceMap === 'string') {\n    sourceMap = util.parseSourceMapInput(aSourceMap);\n  }\n\n  var version = util.getArg(sourceMap, 'version');\n  var sections = util.getArg(sourceMap, 'sections');\n\n  if (version != this._version) {\n    throw new Error('Unsupported version: ' + version);\n  }\n\n  this._sources = new ArraySet();\n  this._names = new ArraySet();\n\n  var lastOffset = {\n    line: -1,\n    column: 0\n  };\n  this._sections = sections.map(function (s) {\n    if (s.url) {\n      // The url field will require support for asynchronicity.\n      // See https://github.com/mozilla/source-map/issues/16\n      throw new Error('Support for url field in sections not implemented.');\n    }\n    var offset = util.getArg(s, 'offset');\n    var offsetLine = util.getArg(offset, 'line');\n    var offsetColumn = util.getArg(offset, 'column');\n\n    if (offsetLine < lastOffset.line ||\n        (offsetLine === lastOffset.line && offsetColumn < lastOffset.column)) {\n      throw new Error('Section offsets must be ordered and non-overlapping.');\n    }\n    lastOffset = offset;\n\n    return {\n      generatedOffset: {\n        // The offset fields are 0-based, but we use 1-based indices when\n        // encoding/decoding from VLQ.\n        generatedLine: offsetLine + 1,\n        generatedColumn: offsetColumn + 1\n      },\n      consumer: new SourceMapConsumer(util.getArg(s, 'map'), aSourceMapURL)\n    }\n  });\n}\n\nIndexedSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);\nIndexedSourceMapConsumer.prototype.constructor = SourceMapConsumer;\n\n/**\n * The version of the source mapping spec that we are consuming.\n */\nIndexedSourceMapConsumer.prototype._version = 3;\n\n/**\n * The list of original sources.\n */\nObject.defineProperty(IndexedSourceMapConsumer.prototype, 'sources', {\n  get: function () {\n    var sources = [];\n    for (var i = 0; i < this._sections.length; i++) {\n      for (var j = 0; j < this._sections[i].consumer.sources.length; j++) {\n        sources.push(this._sections[i].consumer.sources[j]);\n      }\n    }\n    return sources;\n  }\n});\n\n/**\n * Returns the original source, line, and column information for the generated\n * source's line and column positions provided. The only argument is an object\n * with the following properties:\n *\n *   - line: The line number in the generated source.  The line number\n *     is 1-based.\n *   - column: The column number in the generated source.  The column\n *     number is 0-based.\n *\n * and an object is returned with the following properties:\n *\n *   - source: The original source file, or null.\n *   - line: The line number in the original source, or null.  The\n *     line number is 1-based.\n *   - column: The column number in the original source, or null.  The\n *     column number is 0-based.\n *   - name: The original identifier, or null.\n */\nIndexedSourceMapConsumer.prototype.originalPositionFor =\n  function IndexedSourceMapConsumer_originalPositionFor(aArgs) {\n    var needle = {\n      generatedLine: util.getArg(aArgs, 'line'),\n      generatedColumn: util.getArg(aArgs, 'column')\n    };\n\n    // Find the section containing the generated position we're trying to map\n    // to an original position.\n    var sectionIndex = binarySearch.search(needle, this._sections,\n      function(needle, section) {\n        var cmp = needle.generatedLine - section.generatedOffset.generatedLine;\n        if (cmp) {\n          return cmp;\n        }\n\n        return (needle.generatedColumn -\n                section.generatedOffset.generatedColumn);\n      });\n    var section = this._sections[sectionIndex];\n\n    if (!section) {\n      return {\n        source: null,\n        line: null,\n        column: null,\n        name: null\n      };\n    }\n\n    return section.consumer.originalPositionFor({\n      line: needle.generatedLine -\n        (section.generatedOffset.generatedLine - 1),\n      column: needle.generatedColumn -\n        (section.generatedOffset.generatedLine === needle.generatedLine\n         ? section.generatedOffset.generatedColumn - 1\n         : 0),\n      bias: aArgs.bias\n    });\n  };\n\n/**\n * Return true if we have the source content for every source in the source\n * map, false otherwise.\n */\nIndexedSourceMapConsumer.prototype.hasContentsOfAllSources =\n  function IndexedSourceMapConsumer_hasContentsOfAllSources() {\n    return this._sections.every(function (s) {\n      return s.consumer.hasContentsOfAllSources();\n    });\n  };\n\n/**\n * Returns the original source content. The only argument is the url of the\n * original source file. Returns null if no original source content is\n * available.\n */\nIndexedSourceMapConsumer.prototype.sourceContentFor =\n  function IndexedSourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {\n    for (var i = 0; i < this._sections.length; i++) {\n      var section = this._sections[i];\n\n      var content = section.consumer.sourceContentFor(aSource, true);\n      if (content || content === '') {\n        return content;\n      }\n    }\n    if (nullOnMissing) {\n      return null;\n    }\n    else {\n      throw new Error('\"' + aSource + '\" is not in the SourceMap.');\n    }\n  };\n\n/**\n * Returns the generated line and column information for the original source,\n * line, and column positions provided. The only argument is an object with\n * the following properties:\n *\n *   - source: The filename of the original source.\n *   - line: The line number in the original source.  The line number\n *     is 1-based.\n *   - column: The column number in the original source.  The column\n *     number is 0-based.\n *\n * and an object is returned with the following properties:\n *\n *   - line: The line number in the generated source, or null.  The\n *     line number is 1-based. \n *   - column: The column number in the generated source, or null.\n *     The column number is 0-based.\n */\nIndexedSourceMapConsumer.prototype.generatedPositionFor =\n  function IndexedSourceMapConsumer_generatedPositionFor(aArgs) {\n    for (var i = 0; i < this._sections.length; i++) {\n      var section = this._sections[i];\n\n      // Only consider this section if the requested source is in the list of\n      // sources of the consumer.\n      if (section.consumer._findSourceIndex(util.getArg(aArgs, 'source')) === -1) {\n        continue;\n      }\n      var generatedPosition = section.consumer.generatedPositionFor(aArgs);\n      if (generatedPosition) {\n        var ret = {\n          line: generatedPosition.line +\n            (section.generatedOffset.generatedLine - 1),\n          column: generatedPosition.column +\n            (section.generatedOffset.generatedLine === generatedPosition.line\n             ? section.generatedOffset.generatedColumn - 1\n             : 0)\n        };\n        return ret;\n      }\n    }\n\n    return {\n      line: null,\n      column: null\n    };\n  };\n\n/**\n * Parse the mappings in a string in to a data structure which we can easily\n * query (the ordered arrays in the `this.__generatedMappings` and\n * `this.__originalMappings` properties).\n */\nIndexedSourceMapConsumer.prototype._parseMappings =\n  function IndexedSourceMapConsumer_parseMappings(aStr, aSourceRoot) {\n    this.__generatedMappings = [];\n    this.__originalMappings = [];\n    for (var i = 0; i < this._sections.length; i++) {\n      var section = this._sections[i];\n      var sectionMappings = section.consumer._generatedMappings;\n      for (var j = 0; j < sectionMappings.length; j++) {\n        var mapping = sectionMappings[j];\n\n        var source = section.consumer._sources.at(mapping.source);\n        source = util.computeSourceURL(section.consumer.sourceRoot, source, this._sourceMapURL);\n        this._sources.add(source);\n        source = this._sources.indexOf(source);\n\n        var name = null;\n        if (mapping.name) {\n          name = section.consumer._names.at(mapping.name);\n          this._names.add(name);\n          name = this._names.indexOf(name);\n        }\n\n        // The mappings coming from the consumer for the section have\n        // generated positions relative to the start of the section, so we\n        // need to offset them to be relative to the start of the concatenated\n        // generated file.\n        var adjustedMapping = {\n          source: source,\n          generatedLine: mapping.generatedLine +\n            (section.generatedOffset.generatedLine - 1),\n          generatedColumn: mapping.generatedColumn +\n            (section.generatedOffset.generatedLine === mapping.generatedLine\n            ? section.generatedOffset.generatedColumn - 1\n            : 0),\n          originalLine: mapping.originalLine,\n          originalColumn: mapping.originalColumn,\n          name: name\n        };\n\n        this.__generatedMappings.push(adjustedMapping);\n        if (typeof adjustedMapping.originalLine === 'number') {\n          this.__originalMappings.push(adjustedMapping);\n        }\n      }\n    }\n\n    quickSort(this.__generatedMappings, util.compareByGeneratedPositionsDeflated);\n    quickSort(this.__originalMappings, util.compareByOriginalPositions);\n  };\n\nexports.IndexedSourceMapConsumer = IndexedSourceMapConsumer;\n", "/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\nvar SourceMapGenerator = require('./source-map-generator').SourceMapGenerator;\nvar util = require('./util');\n\n// Matches a Windows-style `\\r\\n` newline or a `\\n` newline used by all other\n// operating systems these days (capturing the result).\nvar REGEX_NEWLINE = /(\\r?\\n)/;\n\n// Newline character code for charCodeAt() comparisons\nvar NEWLINE_CODE = 10;\n\n// Private symbol for identifying `SourceNode`s when multiple versions of\n// the source-map library are loaded. This MUST NOT CHANGE across\n// versions!\nvar isSourceNode = \"$$$isSourceNode$$$\";\n\n/**\n * SourceNodes provide a way to abstract over interpolating/concatenating\n * snippets of generated JavaScript source code while maintaining the line and\n * column information associated with the original source code.\n *\n * @param aLine The original line number.\n * @param aColumn The original column number.\n * @param aSource The original source's filename.\n * @param aChunks Optional. An array of strings which are snippets of\n *        generated JS, or other SourceNodes.\n * @param aName The original identifier.\n */\nfunction SourceNode(aLine, aColumn, aSource, aChunks, aName) {\n  this.children = [];\n  this.sourceContents = {};\n  this.line = aLine == null ? null : aLine;\n  this.column = aColumn == null ? null : aColumn;\n  this.source = aSource == null ? null : aSource;\n  this.name = aName == null ? null : aName;\n  this[isSourceNode] = true;\n  if (aChunks != null) this.add(aChunks);\n}\n\n/**\n * Creates a SourceNode from generated code and a SourceMapConsumer.\n *\n * @param aGeneratedCode The generated code\n * @param aSourceMapConsumer The SourceMap for the generated code\n * @param aRelativePath Optional. The path that relative sources in the\n *        SourceMapConsumer should be relative to.\n */\nSourceNode.fromStringWithSourceMap =\n  function SourceNode_fromStringWithSourceMap(aGeneratedCode, aSourceMapConsumer, aRelativePath) {\n    // The SourceNode we want to fill with the generated code\n    // and the SourceMap\n    var node = new SourceNode();\n\n    // All even indices of this array are one line of the generated code,\n    // while all odd indices are the newlines between two adjacent lines\n    // (since `REGEX_NEWLINE` captures its match).\n    // Processed fragments are accessed by calling `shiftNextLine`.\n    var remainingLines = aGeneratedCode.split(REGEX_NEWLINE);\n    var remainingLinesIndex = 0;\n    var shiftNextLine = function() {\n      var lineContents = getNextLine();\n      // The last line of a file might not have a newline.\n      var newLine = getNextLine() || \"\";\n      return lineContents + newLine;\n\n      function getNextLine() {\n        return remainingLinesIndex < remainingLines.length ?\n            remainingLines[remainingLinesIndex++] : undefined;\n      }\n    };\n\n    // We need to remember the position of \"remainingLines\"\n    var lastGeneratedLine = 1, lastGeneratedColumn = 0;\n\n    // The generate SourceNodes we need a code range.\n    // To extract it current and last mapping is used.\n    // Here we store the last mapping.\n    var lastMapping = null;\n\n    aSourceMapConsumer.eachMapping(function (mapping) {\n      if (lastMapping !== null) {\n        // We add the code from \"lastMapping\" to \"mapping\":\n        // First check if there is a new line in between.\n        if (lastGeneratedLine < mapping.generatedLine) {\n          // Associate first line with \"lastMapping\"\n          addMappingWithCode(lastMapping, shiftNextLine());\n          lastGeneratedLine++;\n          lastGeneratedColumn = 0;\n          // The remaining code is added without mapping\n        } else {\n          // There is no new line in between.\n          // Associate the code between \"lastGeneratedColumn\" and\n          // \"mapping.generatedColumn\" with \"lastMapping\"\n          var nextLine = remainingLines[remainingLinesIndex] || '';\n          var code = nextLine.substr(0, mapping.generatedColumn -\n                                        lastGeneratedColumn);\n          remainingLines[remainingLinesIndex] = nextLine.substr(mapping.generatedColumn -\n                                              lastGeneratedColumn);\n          lastGeneratedColumn = mapping.generatedColumn;\n          addMappingWithCode(lastMapping, code);\n          // No more remaining code, continue\n          lastMapping = mapping;\n          return;\n        }\n      }\n      // We add the generated code until the first mapping\n      // to the SourceNode without any mapping.\n      // Each line is added as separate string.\n      while (lastGeneratedLine < mapping.generatedLine) {\n        node.add(shiftNextLine());\n        lastGeneratedLine++;\n      }\n      if (lastGeneratedColumn < mapping.generatedColumn) {\n        var nextLine = remainingLines[remainingLinesIndex] || '';\n        node.add(nextLine.substr(0, mapping.generatedColumn));\n        remainingLines[remainingLinesIndex] = nextLine.substr(mapping.generatedColumn);\n        lastGeneratedColumn = mapping.generatedColumn;\n      }\n      lastMapping = mapping;\n    }, this);\n    // We have processed all mappings.\n    if (remainingLinesIndex < remainingLines.length) {\n      if (lastMapping) {\n        // Associate the remaining code in the current line with \"lastMapping\"\n        addMappingWithCode(lastMapping, shiftNextLine());\n      }\n      // and add the remaining lines without any mapping\n      node.add(remainingLines.splice(remainingLinesIndex).join(\"\"));\n    }\n\n    // Copy sourcesContent into SourceNode\n    aSourceMapConsumer.sources.forEach(function (sourceFile) {\n      var content = aSourceMapConsumer.sourceContentFor(sourceFile);\n      if (content != null) {\n        if (aRelativePath != null) {\n          sourceFile = util.join(aRelativePath, sourceFile);\n        }\n        node.setSourceContent(sourceFile, content);\n      }\n    });\n\n    return node;\n\n    function addMappingWithCode(mapping, code) {\n      if (mapping === null || mapping.source === undefined) {\n        node.add(code);\n      } else {\n        var source = aRelativePath\n          ? util.join(aRelativePath, mapping.source)\n          : mapping.source;\n        node.add(new SourceNode(mapping.originalLine,\n                                mapping.originalColumn,\n                                source,\n                                code,\n                                mapping.name));\n      }\n    }\n  };\n\n/**\n * Add a chunk of generated JS to this source node.\n *\n * @param aChunk A string snippet of generated JS code, another instance of\n *        SourceNode, or an array where each member is one of those things.\n */\nSourceNode.prototype.add = function SourceNode_add(aChunk) {\n  if (Array.isArray(aChunk)) {\n    aChunk.forEach(function (chunk) {\n      this.add(chunk);\n    }, this);\n  }\n  else if (aChunk[isSourceNode] || typeof aChunk === \"string\") {\n    if (aChunk) {\n      this.children.push(aChunk);\n    }\n  }\n  else {\n    throw new TypeError(\n      \"Expected a SourceNode, string, or an array of SourceNodes and strings. Got \" + aChunk\n    );\n  }\n  return this;\n};\n\n/**\n * Add a chunk of generated JS to the beginning of this source node.\n *\n * @param aChunk A string snippet of generated JS code, another instance of\n *        SourceNode, or an array where each member is one of those things.\n */\nSourceNode.prototype.prepend = function SourceNode_prepend(aChunk) {\n  if (Array.isArray(aChunk)) {\n    for (var i = aChunk.length-1; i >= 0; i--) {\n      this.prepend(aChunk[i]);\n    }\n  }\n  else if (aChunk[isSourceNode] || typeof aChunk === \"string\") {\n    this.children.unshift(aChunk);\n  }\n  else {\n    throw new TypeError(\n      \"Expected a SourceNode, string, or an array of SourceNodes and strings. Got \" + aChunk\n    );\n  }\n  return this;\n};\n\n/**\n * Walk over the tree of JS snippets in this node and its children. The\n * walking function is called once for each snippet of JS and is passed that\n * snippet and the its original associated source's line/column location.\n *\n * @param aFn The traversal function.\n */\nSourceNode.prototype.walk = function SourceNode_walk(aFn) {\n  var chunk;\n  for (var i = 0, len = this.children.length; i < len; i++) {\n    chunk = this.children[i];\n    if (chunk[isSourceNode]) {\n      chunk.walk(aFn);\n    }\n    else {\n      if (chunk !== '') {\n        aFn(chunk, { source: this.source,\n                     line: this.line,\n                     column: this.column,\n                     name: this.name });\n      }\n    }\n  }\n};\n\n/**\n * Like `String.prototype.join` except for SourceNodes. Inserts `aStr` between\n * each of `this.children`.\n *\n * @param aSep The separator.\n */\nSourceNode.prototype.join = function SourceNode_join(aSep) {\n  var newChildren;\n  var i;\n  var len = this.children.length;\n  if (len > 0) {\n    newChildren = [];\n    for (i = 0; i < len-1; i++) {\n      newChildren.push(this.children[i]);\n      newChildren.push(aSep);\n    }\n    newChildren.push(this.children[i]);\n    this.children = newChildren;\n  }\n  return this;\n};\n\n/**\n * Call String.prototype.replace on the very right-most source snippet. Useful\n * for trimming whitespace from the end of a source node, etc.\n *\n * @param aPattern The pattern to replace.\n * @param aReplacement The thing to replace the pattern with.\n */\nSourceNode.prototype.replaceRight = function SourceNode_replaceRight(aPattern, aReplacement) {\n  var lastChild = this.children[this.children.length - 1];\n  if (lastChild[isSourceNode]) {\n    lastChild.replaceRight(aPattern, aReplacement);\n  }\n  else if (typeof lastChild === 'string') {\n    this.children[this.children.length - 1] = lastChild.replace(aPattern, aReplacement);\n  }\n  else {\n    this.children.push(''.replace(aPattern, aReplacement));\n  }\n  return this;\n};\n\n/**\n * Set the source content for a source file. This will be added to the SourceMapGenerator\n * in the sourcesContent field.\n *\n * @param aSourceFile The filename of the source file\n * @param aSourceContent The content of the source file\n */\nSourceNode.prototype.setSourceContent =\n  function SourceNode_setSourceContent(aSourceFile, aSourceContent) {\n    this.sourceContents[util.toSetString(aSourceFile)] = aSourceContent;\n  };\n\n/**\n * Walk over the tree of SourceNodes. The walking function is called for each\n * source file content and is passed the filename and source content.\n *\n * @param aFn The traversal function.\n */\nSourceNode.prototype.walkSourceContents =\n  function SourceNode_walkSourceContents(aFn) {\n    for (var i = 0, len = this.children.length; i < len; i++) {\n      if (this.children[i][isSourceNode]) {\n        this.children[i].walkSourceContents(aFn);\n      }\n    }\n\n    var sources = Object.keys(this.sourceContents);\n    for (var i = 0, len = sources.length; i < len; i++) {\n      aFn(util.fromSetString(sources[i]), this.sourceContents[sources[i]]);\n    }\n  };\n\n/**\n * Return the string representation of this source node. Walks over the tree\n * and concatenates all the various snippets together to one string.\n */\nSourceNode.prototype.toString = function SourceNode_toString() {\n  var str = \"\";\n  this.walk(function (chunk) {\n    str += chunk;\n  });\n  return str;\n};\n\n/**\n * Returns the string representation of this source node along with a source\n * map.\n */\nSourceNode.prototype.toStringWithSourceMap = function SourceNode_toStringWithSourceMap(aArgs) {\n  var generated = {\n    code: \"\",\n    line: 1,\n    column: 0\n  };\n  var map = new SourceMapGenerator(aArgs);\n  var sourceMappingActive = false;\n  var lastOriginalSource = null;\n  var lastOriginalLine = null;\n  var lastOriginalColumn = null;\n  var lastOriginalName = null;\n  this.walk(function (chunk, original) {\n    generated.code += chunk;\n    if (original.source !== null\n        && original.line !== null\n        && original.column !== null) {\n      if(lastOriginalSource !== original.source\n         || lastOriginalLine !== original.line\n         || lastOriginalColumn !== original.column\n         || lastOriginalName !== original.name) {\n        map.addMapping({\n          source: original.source,\n          original: {\n            line: original.line,\n            column: original.column\n          },\n          generated: {\n            line: generated.line,\n            column: generated.column\n          },\n          name: original.name\n        });\n      }\n      lastOriginalSource = original.source;\n      lastOriginalLine = original.line;\n      lastOriginalColumn = original.column;\n      lastOriginalName = original.name;\n      sourceMappingActive = true;\n    } else if (sourceMappingActive) {\n      map.addMapping({\n        generated: {\n          line: generated.line,\n          column: generated.column\n        }\n      });\n      lastOriginalSource = null;\n      sourceMappingActive = false;\n    }\n    for (var idx = 0, length = chunk.length; idx < length; idx++) {\n      if (chunk.charCodeAt(idx) === NEWLINE_CODE) {\n        generated.line++;\n        generated.column = 0;\n        // Mappings end at eol\n        if (idx + 1 === length) {\n          lastOriginalSource = null;\n          sourceMappingActive = false;\n        } else if (sourceMappingActive) {\n          map.addMapping({\n            source: original.source,\n            original: {\n              line: original.line,\n              column: original.column\n            },\n            generated: {\n              line: generated.line,\n              column: generated.column\n            },\n            name: original.name\n          });\n        }\n      } else {\n        generated.column++;\n      }\n    }\n  });\n  this.walkSourceContents(function (sourceFile, sourceContent) {\n    map.setSourceContent(sourceFile, sourceContent);\n  });\n\n  return { code: generated.code, map: map };\n};\n\nexports.SourceNode = SourceNode;\n", "/*\n * Copyright 2009-2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE.txt or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\nexports.SourceMapGenerator = require('./lib/source-map-generator').SourceMapGenerator;\nexports.SourceMapConsumer = require('./lib/source-map-consumer').SourceMapConsumer;\nexports.SourceNode = require('./lib/source-node').SourceNode;\n", "/**\n* @vue/compiler-core v3.4.37\n* (c) 2018-present Yuxi (Evan) You and Vue contributors\n* @license MIT\n**/\n'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar shared = require('@vue/shared');\nvar decode_js = require('entities/dist/decode.js');\nvar parser = require('@babel/parser');\nvar estreeWalker = require('estree-walker');\nvar sourceMapJs = require('source-map-js');\n\nconst FRAGMENT = Symbol(`Fragment` );\nconst TELEPORT = Symbol(`Teleport` );\nconst SUSPENSE = Symbol(`Suspense` );\nconst KEEP_ALIVE = Symbol(`KeepAlive` );\nconst BASE_TRANSITION = Symbol(`BaseTransition` );\nconst OPEN_BLOCK = Symbol(`openBlock` );\nconst CREATE_BLOCK = Symbol(`createBlock` );\nconst CREATE_ELEMENT_BLOCK = Symbol(`createElementBlock` );\nconst CREATE_VNODE = Symbol(`createVNode` );\nconst CREATE_ELEMENT_VNODE = Symbol(`createElementVNode` );\nconst CREATE_COMMENT = Symbol(`createCommentVNode` );\nconst CREATE_TEXT = Symbol(`createTextVNode` );\nconst CREATE_STATIC = Symbol(`createStaticVNode` );\nconst RESOLVE_COMPONENT = Symbol(`resolveComponent` );\nconst RESOLVE_DYNAMIC_COMPONENT = Symbol(\n  `resolveDynamicComponent` \n);\nconst RESOLVE_DIRECTIVE = Symbol(`resolveDirective` );\nconst RESOLVE_FILTER = Symbol(`resolveFilter` );\nconst WITH_DIRECTIVES = Symbol(`withDirectives` );\nconst RENDER_LIST = Symbol(`renderList` );\nconst RENDER_SLOT = Symbol(`renderSlot` );\nconst CREATE_SLOTS = Symbol(`createSlots` );\nconst TO_DISPLAY_STRING = Symbol(`toDisplayString` );\nconst MERGE_PROPS = Symbol(`mergeProps` );\nconst NORMALIZE_CLASS = Symbol(`normalizeClass` );\nconst NORMALIZE_STYLE = Symbol(`normalizeStyle` );\nconst NORMALIZE_PROPS = Symbol(`normalizeProps` );\nconst GUARD_REACTIVE_PROPS = Symbol(`guardReactiveProps` );\nconst TO_HANDLERS = Symbol(`toHandlers` );\nconst CAMELIZE = Symbol(`camelize` );\nconst CAPITALIZE = Symbol(`capitalize` );\nconst TO_HANDLER_KEY = Symbol(`toHandlerKey` );\nconst SET_BLOCK_TRACKING = Symbol(`setBlockTracking` );\nconst PUSH_SCOPE_ID = Symbol(`pushScopeId` );\nconst POP_SCOPE_ID = Symbol(`popScopeId` );\nconst WITH_CTX = Symbol(`withCtx` );\nconst UNREF = Symbol(`unref` );\nconst IS_REF = Symbol(`isRef` );\nconst WITH_MEMO = Symbol(`withMemo` );\nconst IS_MEMO_SAME = Symbol(`isMemoSame` );\nconst helperNameMap = {\n  [FRAGMENT]: `Fragment`,\n  [TELEPORT]: `Teleport`,\n  [SUSPENSE]: `Suspense`,\n  [KEEP_ALIVE]: `KeepAlive`,\n  [BASE_TRANSITION]: `BaseTransition`,\n  [OPEN_BLOCK]: `openBlock`,\n  [CREATE_BLOCK]: `createBlock`,\n  [CREATE_ELEMENT_BLOCK]: `createElementBlock`,\n  [CREATE_VNODE]: `createVNode`,\n  [CREATE_ELEMENT_VNODE]: `createElementVNode`,\n  [CREATE_COMMENT]: `createCommentVNode`,\n  [CREATE_TEXT]: `createTextVNode`,\n  [CREATE_STATIC]: `createStaticVNode`,\n  [RESOLVE_COMPONENT]: `resolveComponent`,\n  [RESOLVE_DYNAMIC_COMPONENT]: `resolveDynamicComponent`,\n  [RESOLVE_DIRECTIVE]: `resolveDirective`,\n  [RESOLVE_FILTER]: `resolveFilter`,\n  [WITH_DIRECTIVES]: `withDirectives`,\n  [RENDER_LIST]: `renderList`,\n  [RENDER_SLOT]: `renderSlot`,\n  [CREATE_SLOTS]: `createSlots`,\n  [TO_DISPLAY_STRING]: `toDisplayString`,\n  [MERGE_PROPS]: `mergeProps`,\n  [NORMALIZE_CLASS]: `normalizeClass`,\n  [NORMALIZE_STYLE]: `normalizeStyle`,\n  [NORMALIZE_PROPS]: `normalizeProps`,\n  [GUARD_REACTIVE_PROPS]: `guardReactiveProps`,\n  [TO_HANDLERS]: `toHandlers`,\n  [CAMELIZE]: `camelize`,\n  [CAPITALIZE]: `capitalize`,\n  [TO_HANDLER_KEY]: `toHandlerKey`,\n  [SET_BLOCK_TRACKING]: `setBlockTracking`,\n  [PUSH_SCOPE_ID]: `pushScopeId`,\n  [POP_SCOPE_ID]: `popScopeId`,\n  [WITH_CTX]: `withCtx`,\n  [UNREF]: `unref`,\n  [IS_REF]: `isRef`,\n  [WITH_MEMO]: `withMemo`,\n  [IS_MEMO_SAME]: `isMemoSame`\n};\nfunction registerRuntimeHelpers(helpers) {\n  Object.getOwnPropertySymbols(helpers).forEach((s) => {\n    helperNameMap[s] = helpers[s];\n  });\n}\n\nconst Namespaces = {\n  \"HTML\": 0,\n  \"0\": \"HTML\",\n  \"SVG\": 1,\n  \"1\": \"SVG\",\n  \"MATH_ML\": 2,\n  \"2\": \"MATH_ML\"\n};\nconst NodeTypes = {\n  \"ROOT\": 0,\n  \"0\": \"ROOT\",\n  \"ELEMENT\": 1,\n  \"1\": \"ELEMENT\",\n  \"TEXT\": 2,\n  \"2\": \"TEXT\",\n  \"COMMENT\": 3,\n  \"3\": \"COMMENT\",\n  \"SIMPLE_EXPRESSION\": 4,\n  \"4\": \"SIMPLE_EXPRESSION\",\n  \"INTERPOLATION\": 5,\n  \"5\": \"INTERPOLATION\",\n  \"ATTRIBUTE\": 6,\n  \"6\": \"ATTRIBUTE\",\n  \"DIRECTIVE\": 7,\n  \"7\": \"DIRECTIVE\",\n  \"COMPOUND_EXPRESSION\": 8,\n  \"8\": \"COMPOUND_EXPRESSION\",\n  \"IF\": 9,\n  \"9\": \"IF\",\n  \"IF_BRANCH\": 10,\n  \"10\": \"IF_BRANCH\",\n  \"FOR\": 11,\n  \"11\": \"FOR\",\n  \"TEXT_CALL\": 12,\n  \"12\": \"TEXT_CALL\",\n  \"VNODE_CALL\": 13,\n  \"13\": \"VNODE_CALL\",\n  \"JS_CALL_EXPRESSION\": 14,\n  \"14\": \"JS_CALL_EXPRESSION\",\n  \"JS_OBJECT_EXPRESSION\": 15,\n  \"15\": \"JS_OBJECT_EXPRESSION\",\n  \"JS_PROPERTY\": 16,\n  \"16\": \"JS_PROPERTY\",\n  \"JS_ARRAY_EXPRESSION\": 17,\n  \"17\": \"JS_ARRAY_EXPRESSION\",\n  \"JS_FUNCTION_EXPRESSION\": 18,\n  \"18\": \"JS_FUNCTION_EXPRESSION\",\n  \"JS_CONDITIONAL_EXPRESSION\": 19,\n  \"19\": \"JS_CONDITIONAL_EXPRESSION\",\n  \"JS_CACHE_EXPRESSION\": 20,\n  \"20\": \"JS_CACHE_EXPRESSION\",\n  \"JS_BLOCK_STATEMENT\": 21,\n  \"21\": \"JS_BLOCK_STATEMENT\",\n  \"JS_TEMPLATE_LITERAL\": 22,\n  \"22\": \"JS_TEMPLATE_LITERAL\",\n  \"JS_IF_STATEMENT\": 23,\n  \"23\": \"JS_IF_STATEMENT\",\n  \"JS_ASSIGNMENT_EXPRESSION\": 24,\n  \"24\": \"JS_ASSIGNMENT_EXPRESSION\",\n  \"JS_SEQUENCE_EXPRESSION\": 25,\n  \"25\": \"JS_SEQUENCE_EXPRESSION\",\n  \"JS_RETURN_STATEMENT\": 26,\n  \"26\": \"JS_RETURN_STATEMENT\"\n};\nconst ElementTypes = {\n  \"ELEMENT\": 0,\n  \"0\": \"ELEMENT\",\n  \"COMPONENT\": 1,\n  \"1\": \"COMPONENT\",\n  \"SLOT\": 2,\n  \"2\": \"SLOT\",\n  \"TEMPLATE\": 3,\n  \"3\": \"TEMPLATE\"\n};\nconst ConstantTypes = {\n  \"NOT_CONSTANT\": 0,\n  \"0\": \"NOT_CONSTANT\",\n  \"CAN_SKIP_PATCH\": 1,\n  \"1\": \"CAN_SKIP_PATCH\",\n  \"CAN_HOIST\": 2,\n  \"2\": \"CAN_HOIST\",\n  \"CAN_STRINGIFY\": 3,\n  \"3\": \"CAN_STRINGIFY\"\n};\nconst locStub = {\n  start: { line: 1, column: 1, offset: 0 },\n  end: { line: 1, column: 1, offset: 0 },\n  source: \"\"\n};\nfunction createRoot(children, source = \"\") {\n  return {\n    type: 0,\n    source,\n    children,\n    helpers: /* @__PURE__ */ new Set(),\n    components: [],\n    directives: [],\n    hoists: [],\n    imports: [],\n    cached: 0,\n    temps: 0,\n    codegenNode: void 0,\n    loc: locStub\n  };\n}\nfunction createVNodeCall(context, tag, props, children, patchFlag, dynamicProps, directives, isBlock = false, disableTracking = false, isComponent = false, loc = locStub) {\n  if (context) {\n    if (isBlock) {\n      context.helper(OPEN_BLOCK);\n      context.helper(getVNodeBlockHelper(context.inSSR, isComponent));\n    } else {\n      context.helper(getVNodeHelper(context.inSSR, isComponent));\n    }\n    if (directives) {\n      context.helper(WITH_DIRECTIVES);\n    }\n  }\n  return {\n    type: 13,\n    tag,\n    props,\n    children,\n    patchFlag,\n    dynamicProps,\n    directives,\n    isBlock,\n    disableTracking,\n    isComponent,\n    loc\n  };\n}\nfunction createArrayExpression(elements, loc = locStub) {\n  return {\n    type: 17,\n    loc,\n    elements\n  };\n}\nfunction createObjectExpression(properties, loc = locStub) {\n  return {\n    type: 15,\n    loc,\n    properties\n  };\n}\nfunction createObjectProperty(key, value) {\n  return {\n    type: 16,\n    loc: locStub,\n    key: shared.isString(key) ? createSimpleExpression(key, true) : key,\n    value\n  };\n}\nfunction createSimpleExpression(content, isStatic = false, loc = locStub, constType = 0) {\n  return {\n    type: 4,\n    loc,\n    content,\n    isStatic,\n    constType: isStatic ? 3 : constType\n  };\n}\nfunction createInterpolation(content, loc) {\n  return {\n    type: 5,\n    loc,\n    content: shared.isString(content) ? createSimpleExpression(content, false, loc) : content\n  };\n}\nfunction createCompoundExpression(children, loc = locStub) {\n  return {\n    type: 8,\n    loc,\n    children\n  };\n}\nfunction createCallExpression(callee, args = [], loc = locStub) {\n  return {\n    type: 14,\n    loc,\n    callee,\n    arguments: args\n  };\n}\nfunction createFunctionExpression(params, returns = void 0, newline = false, isSlot = false, loc = locStub) {\n  return {\n    type: 18,\n    params,\n    returns,\n    newline,\n    isSlot,\n    loc\n  };\n}\nfunction createConditionalExpression(test, consequent, alternate, newline = true) {\n  return {\n    type: 19,\n    test,\n    consequent,\n    alternate,\n    newline,\n    loc: locStub\n  };\n}\nfunction createCacheExpression(index, value, isVOnce = false) {\n  return {\n    type: 20,\n    index,\n    value,\n    isVOnce,\n    loc: locStub\n  };\n}\nfunction createBlockStatement(body) {\n  return {\n    type: 21,\n    body,\n    loc: locStub\n  };\n}\nfunction createTemplateLiteral(elements) {\n  return {\n    type: 22,\n    elements,\n    loc: locStub\n  };\n}\nfunction createIfStatement(test, consequent, alternate) {\n  return {\n    type: 23,\n    test,\n    consequent,\n    alternate,\n    loc: locStub\n  };\n}\nfunction createAssignmentExpression(left, right) {\n  return {\n    type: 24,\n    left,\n    right,\n    loc: locStub\n  };\n}\nfunction createSequenceExpression(expressions) {\n  return {\n    type: 25,\n    expressions,\n    loc: locStub\n  };\n}\nfunction createReturnStatement(returns) {\n  return {\n    type: 26,\n    returns,\n    loc: locStub\n  };\n}\nfunction getVNodeHelper(ssr, isComponent) {\n  return ssr || isComponent ? CREATE_VNODE : CREATE_ELEMENT_VNODE;\n}\nfunction getVNodeBlockHelper(ssr, isComponent) {\n  return ssr || isComponent ? CREATE_BLOCK : CREATE_ELEMENT_BLOCK;\n}\nfunction convertToBlock(node, { helper, removeHelper, inSSR }) {\n  if (!node.isBlock) {\n    node.isBlock = true;\n    removeHelper(getVNodeHelper(inSSR, node.isComponent));\n    helper(OPEN_BLOCK);\n    helper(getVNodeBlockHelper(inSSR, node.isComponent));\n  }\n}\n\nconst defaultDelimitersOpen = new Uint8Array([123, 123]);\nconst defaultDelimitersClose = new Uint8Array([125, 125]);\nfunction isTagStartChar(c) {\n  return c >= 97 && c <= 122 || c >= 65 && c <= 90;\n}\nfunction isWhitespace(c) {\n  return c === 32 || c === 10 || c === 9 || c === 12 || c === 13;\n}\nfunction isEndOfTagSection(c) {\n  return c === 47 || c === 62 || isWhitespace(c);\n}\nfunction toCharCodes(str) {\n  const ret = new Uint8Array(str.length);\n  for (let i = 0; i < str.length; i++) {\n    ret[i] = str.charCodeAt(i);\n  }\n  return ret;\n}\nconst Sequences = {\n  Cdata: new Uint8Array([67, 68, 65, 84, 65, 91]),\n  // CDATA[\n  CdataEnd: new Uint8Array([93, 93, 62]),\n  // ]]>\n  CommentEnd: new Uint8Array([45, 45, 62]),\n  // `-->`\n  ScriptEnd: new Uint8Array([60, 47, 115, 99, 114, 105, 112, 116]),\n  // `<\\/script`\n  StyleEnd: new Uint8Array([60, 47, 115, 116, 121, 108, 101]),\n  // `</style`\n  TitleEnd: new Uint8Array([60, 47, 116, 105, 116, 108, 101]),\n  // `</title`\n  TextareaEnd: new Uint8Array([\n    60,\n    47,\n    116,\n    101,\n    120,\n    116,\n    97,\n    114,\n    101,\n    97\n  ])\n  // `</textarea\n};\nclass Tokenizer {\n  constructor(stack, cbs) {\n    this.stack = stack;\n    this.cbs = cbs;\n    /** The current state the tokenizer is in. */\n    this.state = 1;\n    /** The read buffer. */\n    this.buffer = \"\";\n    /** The beginning of the section that is currently being read. */\n    this.sectionStart = 0;\n    /** The index within the buffer that we are currently looking at. */\n    this.index = 0;\n    /** The start of the last entity. */\n    this.entityStart = 0;\n    /** Some behavior, eg. when decoding entities, is done while we are in another state. This keeps track of the other state type. */\n    this.baseState = 1;\n    /** For special parsing behavior inside of script and style tags. */\n    this.inRCDATA = false;\n    /** For disabling RCDATA tags handling */\n    this.inXML = false;\n    /** For disabling interpolation parsing in v-pre */\n    this.inVPre = false;\n    /** Record newline positions for fast line / column calculation */\n    this.newlines = [];\n    this.mode = 0;\n    this.delimiterOpen = defaultDelimitersOpen;\n    this.delimiterClose = defaultDelimitersClose;\n    this.delimiterIndex = -1;\n    this.currentSequence = void 0;\n    this.sequenceIndex = 0;\n    {\n      this.entityDecoder = new decode_js.EntityDecoder(\n        decode_js.htmlDecodeTree,\n        (cp, consumed) => this.emitCodePoint(cp, consumed)\n      );\n    }\n  }\n  get inSFCRoot() {\n    return this.mode === 2 && this.stack.length === 0;\n  }\n  reset() {\n    this.state = 1;\n    this.mode = 0;\n    this.buffer = \"\";\n    this.sectionStart = 0;\n    this.index = 0;\n    this.baseState = 1;\n    this.inRCDATA = false;\n    this.currentSequence = void 0;\n    this.newlines.length = 0;\n    this.delimiterOpen = defaultDelimitersOpen;\n    this.delimiterClose = defaultDelimitersClose;\n  }\n  /**\n   * Generate Position object with line / column information using recorded\n   * newline positions. We know the index is always going to be an already\n   * processed index, so all the newlines up to this index should have been\n   * recorded.\n   */\n  getPos(index) {\n    let line = 1;\n    let column = index + 1;\n    for (let i = this.newlines.length - 1; i >= 0; i--) {\n      const newlineIndex = this.newlines[i];\n      if (index > newlineIndex) {\n        line = i + 2;\n        column = index - newlineIndex;\n        break;\n      }\n    }\n    return {\n      column,\n      line,\n      offset: index\n    };\n  }\n  peek() {\n    return this.buffer.charCodeAt(this.index + 1);\n  }\n  stateText(c) {\n    if (c === 60) {\n      if (this.index > this.sectionStart) {\n        this.cbs.ontext(this.sectionStart, this.index);\n      }\n      this.state = 5;\n      this.sectionStart = this.index;\n    } else if (c === 38) {\n      this.startEntity();\n    } else if (!this.inVPre && c === this.delimiterOpen[0]) {\n      this.state = 2;\n      this.delimiterIndex = 0;\n      this.stateInterpolationOpen(c);\n    }\n  }\n  stateInterpolationOpen(c) {\n    if (c === this.delimiterOpen[this.delimiterIndex]) {\n      if (this.delimiterIndex === this.delimiterOpen.length - 1) {\n        const start = this.index + 1 - this.delimiterOpen.length;\n        if (start > this.sectionStart) {\n          this.cbs.ontext(this.sectionStart, start);\n        }\n        this.state = 3;\n        this.sectionStart = start;\n      } else {\n        this.delimiterIndex++;\n      }\n    } else if (this.inRCDATA) {\n      this.state = 32;\n      this.stateInRCDATA(c);\n    } else {\n      this.state = 1;\n      this.stateText(c);\n    }\n  }\n  stateInterpolation(c) {\n    if (c === this.delimiterClose[0]) {\n      this.state = 4;\n      this.delimiterIndex = 0;\n      this.stateInterpolationClose(c);\n    }\n  }\n  stateInterpolationClose(c) {\n    if (c === this.delimiterClose[this.delimiterIndex]) {\n      if (this.delimiterIndex === this.delimiterClose.length - 1) {\n        this.cbs.oninterpolation(this.sectionStart, this.index + 1);\n        if (this.inRCDATA) {\n          this.state = 32;\n        } else {\n          this.state = 1;\n        }\n        this.sectionStart = this.index + 1;\n      } else {\n        this.delimiterIndex++;\n      }\n    } else {\n      this.state = 3;\n      this.stateInterpolation(c);\n    }\n  }\n  stateSpecialStartSequence(c) {\n    const isEnd = this.sequenceIndex === this.currentSequence.length;\n    const isMatch = isEnd ? (\n      // If we are at the end of the sequence, make sure the tag name has ended\n      isEndOfTagSection(c)\n    ) : (\n      // Otherwise, do a case-insensitive comparison\n      (c | 32) === this.currentSequence[this.sequenceIndex]\n    );\n    if (!isMatch) {\n      this.inRCDATA = false;\n    } else if (!isEnd) {\n      this.sequenceIndex++;\n      return;\n    }\n    this.sequenceIndex = 0;\n    this.state = 6;\n    this.stateInTagName(c);\n  }\n  /** Look for an end tag. For <title> and <textarea>, also decode entities. */\n  stateInRCDATA(c) {\n    if (this.sequenceIndex === this.currentSequence.length) {\n      if (c === 62 || isWhitespace(c)) {\n        const endOfText = this.index - this.currentSequence.length;\n        if (this.sectionStart < endOfText) {\n          const actualIndex = this.index;\n          this.index = endOfText;\n          this.cbs.ontext(this.sectionStart, endOfText);\n          this.index = actualIndex;\n        }\n        this.sectionStart = endOfText + 2;\n        this.stateInClosingTagName(c);\n        this.inRCDATA = false;\n        return;\n      }\n      this.sequenceIndex = 0;\n    }\n    if ((c | 32) === this.currentSequence[this.sequenceIndex]) {\n      this.sequenceIndex += 1;\n    } else if (this.sequenceIndex === 0) {\n      if (this.currentSequence === Sequences.TitleEnd || this.currentSequence === Sequences.TextareaEnd && !this.inSFCRoot) {\n        if (c === 38) {\n          this.startEntity();\n        } else if (c === this.delimiterOpen[0]) {\n          this.state = 2;\n          this.delimiterIndex = 0;\n          this.stateInterpolationOpen(c);\n        }\n      } else if (this.fastForwardTo(60)) {\n        this.sequenceIndex = 1;\n      }\n    } else {\n      this.sequenceIndex = Number(c === 60);\n    }\n  }\n  stateCDATASequence(c) {\n    if (c === Sequences.Cdata[this.sequenceIndex]) {\n      if (++this.sequenceIndex === Sequences.Cdata.length) {\n        this.state = 28;\n        this.currentSequence = Sequences.CdataEnd;\n        this.sequenceIndex = 0;\n        this.sectionStart = this.index + 1;\n      }\n    } else {\n      this.sequenceIndex = 0;\n      this.state = 23;\n      this.stateInDeclaration(c);\n    }\n  }\n  /**\n   * When we wait for one specific character, we can speed things up\n   * by skipping through the buffer until we find it.\n   *\n   * @returns Whether the character was found.\n   */\n  fastForwardTo(c) {\n    while (++this.index < this.buffer.length) {\n      const cc = this.buffer.charCodeAt(this.index);\n      if (cc === 10) {\n        this.newlines.push(this.index);\n      }\n      if (cc === c) {\n        return true;\n      }\n    }\n    this.index = this.buffer.length - 1;\n    return false;\n  }\n  /**\n   * Comments and CDATA end with `-->` and `]]>`.\n   *\n   * Their common qualities are:\n   * - Their end sequences have a distinct character they start with.\n   * - That character is then repeated, so we have to check multiple repeats.\n   * - All characters but the start character of the sequence can be skipped.\n   */\n  stateInCommentLike(c) {\n    if (c === this.currentSequence[this.sequenceIndex]) {\n      if (++this.sequenceIndex === this.currentSequence.length) {\n        if (this.currentSequence === Sequences.CdataEnd) {\n          this.cbs.oncdata(this.sectionStart, this.index - 2);\n        } else {\n          this.cbs.oncomment(this.sectionStart, this.index - 2);\n        }\n        this.sequenceIndex = 0;\n        this.sectionStart = this.index + 1;\n        this.state = 1;\n      }\n    } else if (this.sequenceIndex === 0) {\n      if (this.fastForwardTo(this.currentSequence[0])) {\n        this.sequenceIndex = 1;\n      }\n    } else if (c !== this.currentSequence[this.sequenceIndex - 1]) {\n      this.sequenceIndex = 0;\n    }\n  }\n  startSpecial(sequence, offset) {\n    this.enterRCDATA(sequence, offset);\n    this.state = 31;\n  }\n  enterRCDATA(sequence, offset) {\n    this.inRCDATA = true;\n    this.currentSequence = sequence;\n    this.sequenceIndex = offset;\n  }\n  stateBeforeTagName(c) {\n    if (c === 33) {\n      this.state = 22;\n      this.sectionStart = this.index + 1;\n    } else if (c === 63) {\n      this.state = 24;\n      this.sectionStart = this.index + 1;\n    } else if (isTagStartChar(c)) {\n      this.sectionStart = this.index;\n      if (this.mode === 0) {\n        this.state = 6;\n      } else if (this.inSFCRoot) {\n        this.state = 34;\n      } else if (!this.inXML) {\n        if (c === 116) {\n          this.state = 30;\n        } else {\n          this.state = c === 115 ? 29 : 6;\n        }\n      } else {\n        this.state = 6;\n      }\n    } else if (c === 47) {\n      this.state = 8;\n    } else {\n      this.state = 1;\n      this.stateText(c);\n    }\n  }\n  stateInTagName(c) {\n    if (isEndOfTagSection(c)) {\n      this.handleTagName(c);\n    }\n  }\n  stateInSFCRootTagName(c) {\n    if (isEndOfTagSection(c)) {\n      const tag = this.buffer.slice(this.sectionStart, this.index);\n      if (tag !== \"template\") {\n        this.enterRCDATA(toCharCodes(`</` + tag), 0);\n      }\n      this.handleTagName(c);\n    }\n  }\n  handleTagName(c) {\n    this.cbs.onopentagname(this.sectionStart, this.index);\n    this.sectionStart = -1;\n    this.state = 11;\n    this.stateBeforeAttrName(c);\n  }\n  stateBeforeClosingTagName(c) {\n    if (isWhitespace(c)) ; else if (c === 62) {\n      {\n        this.cbs.onerr(14, this.index);\n      }\n      this.state = 1;\n      this.sectionStart = this.index + 1;\n    } else {\n      this.state = isTagStartChar(c) ? 9 : 27;\n      this.sectionStart = this.index;\n    }\n  }\n  stateInClosingTagName(c) {\n    if (c === 62 || isWhitespace(c)) {\n      this.cbs.onclosetag(this.sectionStart, this.index);\n      this.sectionStart = -1;\n      this.state = 10;\n      this.stateAfterClosingTagName(c);\n    }\n  }\n  stateAfterClosingTagName(c) {\n    if (c === 62) {\n      this.state = 1;\n      this.sectionStart = this.index + 1;\n    }\n  }\n  stateBeforeAttrName(c) {\n    if (c === 62) {\n      this.cbs.onopentagend(this.index);\n      if (this.inRCDATA) {\n        this.state = 32;\n      } else {\n        this.state = 1;\n      }\n      this.sectionStart = this.index + 1;\n    } else if (c === 47) {\n      this.state = 7;\n      if (this.peek() !== 62) {\n        this.cbs.onerr(22, this.index);\n      }\n    } else if (c === 60 && this.peek() === 47) {\n      this.cbs.onopentagend(this.index);\n      this.state = 5;\n      this.sectionStart = this.index;\n    } else if (!isWhitespace(c)) {\n      if (c === 61) {\n        this.cbs.onerr(\n          19,\n          this.index\n        );\n      }\n      this.handleAttrStart(c);\n    }\n  }\n  handleAttrStart(c) {\n    if (c === 118 && this.peek() === 45) {\n      this.state = 13;\n      this.sectionStart = this.index;\n    } else if (c === 46 || c === 58 || c === 64 || c === 35) {\n      this.cbs.ondirname(this.index, this.index + 1);\n      this.state = 14;\n      this.sectionStart = this.index + 1;\n    } else {\n      this.state = 12;\n      this.sectionStart = this.index;\n    }\n  }\n  stateInSelfClosingTag(c) {\n    if (c === 62) {\n      this.cbs.onselfclosingtag(this.index);\n      this.state = 1;\n      this.sectionStart = this.index + 1;\n      this.inRCDATA = false;\n    } else if (!isWhitespace(c)) {\n      this.state = 11;\n      this.stateBeforeAttrName(c);\n    }\n  }\n  stateInAttrName(c) {\n    if (c === 61 || isEndOfTagSection(c)) {\n      this.cbs.onattribname(this.sectionStart, this.index);\n      this.handleAttrNameEnd(c);\n    } else if (c === 34 || c === 39 || c === 60) {\n      this.cbs.onerr(\n        17,\n        this.index\n      );\n    }\n  }\n  stateInDirName(c) {\n    if (c === 61 || isEndOfTagSection(c)) {\n      this.cbs.ondirname(this.sectionStart, this.index);\n      this.handleAttrNameEnd(c);\n    } else if (c === 58) {\n      this.cbs.ondirname(this.sectionStart, this.index);\n      this.state = 14;\n      this.sectionStart = this.index + 1;\n    } else if (c === 46) {\n      this.cbs.ondirname(this.sectionStart, this.index);\n      this.state = 16;\n      this.sectionStart = this.index + 1;\n    }\n  }\n  stateInDirArg(c) {\n    if (c === 61 || isEndOfTagSection(c)) {\n      this.cbs.ondirarg(this.sectionStart, this.index);\n      this.handleAttrNameEnd(c);\n    } else if (c === 91) {\n      this.state = 15;\n    } else if (c === 46) {\n      this.cbs.ondirarg(this.sectionStart, this.index);\n      this.state = 16;\n      this.sectionStart = this.index + 1;\n    }\n  }\n  stateInDynamicDirArg(c) {\n    if (c === 93) {\n      this.state = 14;\n    } else if (c === 61 || isEndOfTagSection(c)) {\n      this.cbs.ondirarg(this.sectionStart, this.index + 1);\n      this.handleAttrNameEnd(c);\n      {\n        this.cbs.onerr(\n          27,\n          this.index\n        );\n      }\n    }\n  }\n  stateInDirModifier(c) {\n    if (c === 61 || isEndOfTagSection(c)) {\n      this.cbs.ondirmodifier(this.sectionStart, this.index);\n      this.handleAttrNameEnd(c);\n    } else if (c === 46) {\n      this.cbs.ondirmodifier(this.sectionStart, this.index);\n      this.sectionStart = this.index + 1;\n    }\n  }\n  handleAttrNameEnd(c) {\n    this.sectionStart = this.index;\n    this.state = 17;\n    this.cbs.onattribnameend(this.index);\n    this.stateAfterAttrName(c);\n  }\n  stateAfterAttrName(c) {\n    if (c === 61) {\n      this.state = 18;\n    } else if (c === 47 || c === 62) {\n      this.cbs.onattribend(0, this.sectionStart);\n      this.sectionStart = -1;\n      this.state = 11;\n      this.stateBeforeAttrName(c);\n    } else if (!isWhitespace(c)) {\n      this.cbs.onattribend(0, this.sectionStart);\n      this.handleAttrStart(c);\n    }\n  }\n  stateBeforeAttrValue(c) {\n    if (c === 34) {\n      this.state = 19;\n      this.sectionStart = this.index + 1;\n    } else if (c === 39) {\n      this.state = 20;\n      this.sectionStart = this.index + 1;\n    } else if (!isWhitespace(c)) {\n      this.sectionStart = this.index;\n      this.state = 21;\n      this.stateInAttrValueNoQuotes(c);\n    }\n  }\n  handleInAttrValue(c, quote) {\n    if (c === quote || false) {\n      this.cbs.onattribdata(this.sectionStart, this.index);\n      this.sectionStart = -1;\n      this.cbs.onattribend(\n        quote === 34 ? 3 : 2,\n        this.index + 1\n      );\n      this.state = 11;\n    } else if (c === 38) {\n      this.startEntity();\n    }\n  }\n  stateInAttrValueDoubleQuotes(c) {\n    this.handleInAttrValue(c, 34);\n  }\n  stateInAttrValueSingleQuotes(c) {\n    this.handleInAttrValue(c, 39);\n  }\n  stateInAttrValueNoQuotes(c) {\n    if (isWhitespace(c) || c === 62) {\n      this.cbs.onattribdata(this.sectionStart, this.index);\n      this.sectionStart = -1;\n      this.cbs.onattribend(1, this.index);\n      this.state = 11;\n      this.stateBeforeAttrName(c);\n    } else if (c === 34 || c === 39 || c === 60 || c === 61 || c === 96) {\n      this.cbs.onerr(\n        18,\n        this.index\n      );\n    } else if (c === 38) {\n      this.startEntity();\n    }\n  }\n  stateBeforeDeclaration(c) {\n    if (c === 91) {\n      this.state = 26;\n      this.sequenceIndex = 0;\n    } else {\n      this.state = c === 45 ? 25 : 23;\n    }\n  }\n  stateInDeclaration(c) {\n    if (c === 62 || this.fastForwardTo(62)) {\n      this.state = 1;\n      this.sectionStart = this.index + 1;\n    }\n  }\n  stateInProcessingInstruction(c) {\n    if (c === 62 || this.fastForwardTo(62)) {\n      this.cbs.onprocessinginstruction(this.sectionStart, this.index);\n      this.state = 1;\n      this.sectionStart = this.index + 1;\n    }\n  }\n  stateBeforeComment(c) {\n    if (c === 45) {\n      this.state = 28;\n      this.currentSequence = Sequences.CommentEnd;\n      this.sequenceIndex = 2;\n      this.sectionStart = this.index + 1;\n    } else {\n      this.state = 23;\n    }\n  }\n  stateInSpecialComment(c) {\n    if (c === 62 || this.fastForwardTo(62)) {\n      this.cbs.oncomment(this.sectionStart, this.index);\n      this.state = 1;\n      this.sectionStart = this.index + 1;\n    }\n  }\n  stateBeforeSpecialS(c) {\n    if (c === Sequences.ScriptEnd[3]) {\n      this.startSpecial(Sequences.ScriptEnd, 4);\n    } else if (c === Sequences.StyleEnd[3]) {\n      this.startSpecial(Sequences.StyleEnd, 4);\n    } else {\n      this.state = 6;\n      this.stateInTagName(c);\n    }\n  }\n  stateBeforeSpecialT(c) {\n    if (c === Sequences.TitleEnd[3]) {\n      this.startSpecial(Sequences.TitleEnd, 4);\n    } else if (c === Sequences.TextareaEnd[3]) {\n      this.startSpecial(Sequences.TextareaEnd, 4);\n    } else {\n      this.state = 6;\n      this.stateInTagName(c);\n    }\n  }\n  startEntity() {\n    {\n      this.baseState = this.state;\n      this.state = 33;\n      this.entityStart = this.index;\n      this.entityDecoder.startEntity(\n        this.baseState === 1 || this.baseState === 32 ? decode_js.DecodingMode.Legacy : decode_js.DecodingMode.Attribute\n      );\n    }\n  }\n  stateInEntity() {\n    {\n      const length = this.entityDecoder.write(this.buffer, this.index);\n      if (length >= 0) {\n        this.state = this.baseState;\n        if (length === 0) {\n          this.index = this.entityStart;\n        }\n      } else {\n        this.index = this.buffer.length - 1;\n      }\n    }\n  }\n  /**\n   * Iterates through the buffer, calling the function corresponding to the current state.\n   *\n   * States that are more likely to be hit are higher up, as a performance improvement.\n   */\n  parse(input) {\n    this.buffer = input;\n    while (this.index < this.buffer.length) {\n      const c = this.buffer.charCodeAt(this.index);\n      if (c === 10) {\n        this.newlines.push(this.index);\n      }\n      switch (this.state) {\n        case 1: {\n          this.stateText(c);\n          break;\n        }\n        case 2: {\n          this.stateInterpolationOpen(c);\n          break;\n        }\n        case 3: {\n          this.stateInterpolation(c);\n          break;\n        }\n        case 4: {\n          this.stateInterpolationClose(c);\n          break;\n        }\n        case 31: {\n          this.stateSpecialStartSequence(c);\n          break;\n        }\n        case 32: {\n          this.stateInRCDATA(c);\n          break;\n        }\n        case 26: {\n          this.stateCDATASequence(c);\n          break;\n        }\n        case 19: {\n          this.stateInAttrValueDoubleQuotes(c);\n          break;\n        }\n        case 12: {\n          this.stateInAttrName(c);\n          break;\n        }\n        case 13: {\n          this.stateInDirName(c);\n          break;\n        }\n        case 14: {\n          this.stateInDirArg(c);\n          break;\n        }\n        case 15: {\n          this.stateInDynamicDirArg(c);\n          break;\n        }\n        case 16: {\n          this.stateInDirModifier(c);\n          break;\n        }\n        case 28: {\n          this.stateInCommentLike(c);\n          break;\n        }\n        case 27: {\n          this.stateInSpecialComment(c);\n          break;\n        }\n        case 11: {\n          this.stateBeforeAttrName(c);\n          break;\n        }\n        case 6: {\n          this.stateInTagName(c);\n          break;\n        }\n        case 34: {\n          this.stateInSFCRootTagName(c);\n          break;\n        }\n        case 9: {\n          this.stateInClosingTagName(c);\n          break;\n        }\n        case 5: {\n          this.stateBeforeTagName(c);\n          break;\n        }\n        case 17: {\n          this.stateAfterAttrName(c);\n          break;\n        }\n        case 20: {\n          this.stateInAttrValueSingleQuotes(c);\n          break;\n        }\n        case 18: {\n          this.stateBeforeAttrValue(c);\n          break;\n        }\n        case 8: {\n          this.stateBeforeClosingTagName(c);\n          break;\n        }\n        case 10: {\n          this.stateAfterClosingTagName(c);\n          break;\n        }\n        case 29: {\n          this.stateBeforeSpecialS(c);\n          break;\n        }\n        case 30: {\n          this.stateBeforeSpecialT(c);\n          break;\n        }\n        case 21: {\n          this.stateInAttrValueNoQuotes(c);\n          break;\n        }\n        case 7: {\n          this.stateInSelfClosingTag(c);\n          break;\n        }\n        case 23: {\n          this.stateInDeclaration(c);\n          break;\n        }\n        case 22: {\n          this.stateBeforeDeclaration(c);\n          break;\n        }\n        case 25: {\n          this.stateBeforeComment(c);\n          break;\n        }\n        case 24: {\n          this.stateInProcessingInstruction(c);\n          break;\n        }\n        case 33: {\n          this.stateInEntity();\n          break;\n        }\n      }\n      this.index++;\n    }\n    this.cleanup();\n    this.finish();\n  }\n  /**\n   * Remove data that has already been consumed from the buffer.\n   */\n  cleanup() {\n    if (this.sectionStart !== this.index) {\n      if (this.state === 1 || this.state === 32 && this.sequenceIndex === 0) {\n        this.cbs.ontext(this.sectionStart, this.index);\n        this.sectionStart = this.index;\n      } else if (this.state === 19 || this.state === 20 || this.state === 21) {\n        this.cbs.onattribdata(this.sectionStart, this.index);\n        this.sectionStart = this.index;\n      }\n    }\n  }\n  finish() {\n    if (this.state === 33) {\n      this.entityDecoder.end();\n      this.state = this.baseState;\n    }\n    this.handleTrailingData();\n    this.cbs.onend();\n  }\n  /** Handle any trailing data. */\n  handleTrailingData() {\n    const endIndex = this.buffer.length;\n    if (this.sectionStart >= endIndex) {\n      return;\n    }\n    if (this.state === 28) {\n      if (this.currentSequence === Sequences.CdataEnd) {\n        this.cbs.oncdata(this.sectionStart, endIndex);\n      } else {\n        this.cbs.oncomment(this.sectionStart, endIndex);\n      }\n    } else if (this.state === 6 || this.state === 11 || this.state === 18 || this.state === 17 || this.state === 12 || this.state === 13 || this.state === 14 || this.state === 15 || this.state === 16 || this.state === 20 || this.state === 19 || this.state === 21 || this.state === 9) ; else {\n      this.cbs.ontext(this.sectionStart, endIndex);\n    }\n  }\n  emitCodePoint(cp, consumed) {\n    {\n      if (this.baseState !== 1 && this.baseState !== 32) {\n        if (this.sectionStart < this.entityStart) {\n          this.cbs.onattribdata(this.sectionStart, this.entityStart);\n        }\n        this.sectionStart = this.entityStart + consumed;\n        this.index = this.sectionStart - 1;\n        this.cbs.onattribentity(\n          decode_js.fromCodePoint(cp),\n          this.entityStart,\n          this.sectionStart\n        );\n      } else {\n        if (this.sectionStart < this.entityStart) {\n          this.cbs.ontext(this.sectionStart, this.entityStart);\n        }\n        this.sectionStart = this.entityStart + consumed;\n        this.index = this.sectionStart - 1;\n        this.cbs.ontextentity(\n          decode_js.fromCodePoint(cp),\n          this.entityStart,\n          this.sectionStart\n        );\n      }\n    }\n  }\n}\n\nconst CompilerDeprecationTypes = {\n  \"COMPILER_IS_ON_ELEMENT\": \"COMPILER_IS_ON_ELEMENT\",\n  \"COMPILER_V_BIND_SYNC\": \"COMPILER_V_BIND_SYNC\",\n  \"COMPILER_V_BIND_OBJECT_ORDER\": \"COMPILER_V_BIND_OBJECT_ORDER\",\n  \"COMPILER_V_ON_NATIVE\": \"COMPILER_V_ON_NATIVE\",\n  \"COMPILER_V_IF_V_FOR_PRECEDENCE\": \"COMPILER_V_IF_V_FOR_PRECEDENCE\",\n  \"COMPILER_NATIVE_TEMPLATE\": \"COMPILER_NATIVE_TEMPLATE\",\n  \"COMPILER_INLINE_TEMPLATE\": \"COMPILER_INLINE_TEMPLATE\",\n  \"COMPILER_FILTERS\": \"COMPILER_FILTERS\"\n};\nconst deprecationData = {\n  [\"COMPILER_IS_ON_ELEMENT\"]: {\n    message: `Platform-native elements with \"is\" prop will no longer be treated as components in Vue 3 unless the \"is\" value is explicitly prefixed with \"vue:\".`,\n    link: `https://v3-migration.vuejs.org/breaking-changes/custom-elements-interop.html`\n  },\n  [\"COMPILER_V_BIND_SYNC\"]: {\n    message: (key) => `.sync modifier for v-bind has been removed. Use v-model with argument instead. \\`v-bind:${key}.sync\\` should be changed to \\`v-model:${key}\\`.`,\n    link: `https://v3-migration.vuejs.org/breaking-changes/v-model.html`\n  },\n  [\"COMPILER_V_BIND_OBJECT_ORDER\"]: {\n    message: `v-bind=\"obj\" usage is now order sensitive and behaves like JavaScript object spread: it will now overwrite an existing non-mergeable attribute that appears before v-bind in the case of conflict. To retain 2.x behavior, move v-bind to make it the first attribute. You can also suppress this warning if the usage is intended.`,\n    link: `https://v3-migration.vuejs.org/breaking-changes/v-bind.html`\n  },\n  [\"COMPILER_V_ON_NATIVE\"]: {\n    message: `.native modifier for v-on has been removed as is no longer necessary.`,\n    link: `https://v3-migration.vuejs.org/breaking-changes/v-on-native-modifier-removed.html`\n  },\n  [\"COMPILER_V_IF_V_FOR_PRECEDENCE\"]: {\n    message: `v-if / v-for precedence when used on the same element has changed in Vue 3: v-if now takes higher precedence and will no longer have access to v-for scope variables. It is best to avoid the ambiguity with <template> tags or use a computed property that filters v-for data source.`,\n    link: `https://v3-migration.vuejs.org/breaking-changes/v-if-v-for.html`\n  },\n  [\"COMPILER_NATIVE_TEMPLATE\"]: {\n    message: `<template> with no special directives will render as a native template element instead of its inner content in Vue 3.`\n  },\n  [\"COMPILER_INLINE_TEMPLATE\"]: {\n    message: `\"inline-template\" has been removed in Vue 3.`,\n    link: `https://v3-migration.vuejs.org/breaking-changes/inline-template-attribute.html`\n  },\n  [\"COMPILER_FILTERS\"]: {\n    message: `filters have been removed in Vue 3. The \"|\" symbol will be treated as native JavaScript bitwise OR operator. Use method calls or computed properties instead.`,\n    link: `https://v3-migration.vuejs.org/breaking-changes/filters.html`\n  }\n};\nfunction getCompatValue(key, { compatConfig }) {\n  const value = compatConfig && compatConfig[key];\n  if (key === \"MODE\") {\n    return value || 3;\n  } else {\n    return value;\n  }\n}\nfunction isCompatEnabled(key, context) {\n  const mode = getCompatValue(\"MODE\", context);\n  const value = getCompatValue(key, context);\n  return mode === 3 ? value === true : value !== false;\n}\nfunction checkCompatEnabled(key, context, loc, ...args) {\n  const enabled = isCompatEnabled(key, context);\n  if (enabled) {\n    warnDeprecation(key, context, loc, ...args);\n  }\n  return enabled;\n}\nfunction warnDeprecation(key, context, loc, ...args) {\n  const val = getCompatValue(key, context);\n  if (val === \"suppress-warning\") {\n    return;\n  }\n  const { message, link } = deprecationData[key];\n  const msg = `(deprecation ${key}) ${typeof message === \"function\" ? message(...args) : message}${link ? `\n  Details: ${link}` : ``}`;\n  const err = new SyntaxError(msg);\n  err.code = key;\n  if (loc) err.loc = loc;\n  context.onWarn(err);\n}\n\nfunction defaultOnError(error) {\n  throw error;\n}\nfunction defaultOnWarn(msg) {\n  console.warn(`[Vue warn] ${msg.message}`);\n}\nfunction createCompilerError(code, loc, messages, additionalMessage) {\n  const msg = (messages || errorMessages)[code] + (additionalMessage || ``) ;\n  const error = new SyntaxError(String(msg));\n  error.code = code;\n  error.loc = loc;\n  return error;\n}\nconst ErrorCodes = {\n  \"ABRUPT_CLOSING_OF_EMPTY_COMMENT\": 0,\n  \"0\": \"ABRUPT_CLOSING_OF_EMPTY_COMMENT\",\n  \"CDATA_IN_HTML_CONTENT\": 1,\n  \"1\": \"CDATA_IN_HTML_CONTENT\",\n  \"DUPLICATE_ATTRIBUTE\": 2,\n  \"2\": \"DUPLICATE_ATTRIBUTE\",\n  \"END_TAG_WITH_ATTRIBUTES\": 3,\n  \"3\": \"END_TAG_WITH_ATTRIBUTES\",\n  \"END_TAG_WITH_TRAILING_SOLIDUS\": 4,\n  \"4\": \"END_TAG_WITH_TRAILING_SOLIDUS\",\n  \"EOF_BEFORE_TAG_NAME\": 5,\n  \"5\": \"EOF_BEFORE_TAG_NAME\",\n  \"EOF_IN_CDATA\": 6,\n  \"6\": \"EOF_IN_CDATA\",\n  \"EOF_IN_COMMENT\": 7,\n  \"7\": \"EOF_IN_COMMENT\",\n  \"EOF_IN_SCRIPT_HTML_COMMENT_LIKE_TEXT\": 8,\n  \"8\": \"EOF_IN_SCRIPT_HTML_COMMENT_LIKE_TEXT\",\n  \"EOF_IN_TAG\": 9,\n  \"9\": \"EOF_IN_TAG\",\n  \"INCORRECTLY_CLOSED_COMMENT\": 10,\n  \"10\": \"INCORRECTLY_CLOSED_COMMENT\",\n  \"INCORRECTLY_OPENED_COMMENT\": 11,\n  \"11\": \"INCORRECTLY_OPENED_COMMENT\",\n  \"INVALID_FIRST_CHARACTER_OF_TAG_NAME\": 12,\n  \"12\": \"INVALID_FIRST_CHARACTER_OF_TAG_NAME\",\n  \"MISSING_ATTRIBUTE_VALUE\": 13,\n  \"13\": \"MISSING_ATTRIBUTE_VALUE\",\n  \"MISSING_END_TAG_NAME\": 14,\n  \"14\": \"MISSING_END_TAG_NAME\",\n  \"MISSING_WHITESPACE_BETWEEN_ATTRIBUTES\": 15,\n  \"15\": \"MISSING_WHITESPACE_BETWEEN_ATTRIBUTES\",\n  \"NESTED_COMMENT\": 16,\n  \"16\": \"NESTED_COMMENT\",\n  \"UNEXPECTED_CHARACTER_IN_ATTRIBUTE_NAME\": 17,\n  \"17\": \"UNEXPECTED_CHARACTER_IN_ATTRIBUTE_NAME\",\n  \"UNEXPECTED_CHARACTER_IN_UNQUOTED_ATTRIBUTE_VALUE\": 18,\n  \"18\": \"UNEXPECTED_CHARACTER_IN_UNQUOTED_ATTRIBUTE_VALUE\",\n  \"UNEXPECTED_EQUALS_SIGN_BEFORE_ATTRIBUTE_NAME\": 19,\n  \"19\": \"UNEXPECTED_EQUALS_SIGN_BEFORE_ATTRIBUTE_NAME\",\n  \"UNEXPECTED_NULL_CHARACTER\": 20,\n  \"20\": \"UNEXPECTED_NULL_CHARACTER\",\n  \"UNEXPECTED_QUESTION_MARK_INSTEAD_OF_TAG_NAME\": 21,\n  \"21\": \"UNEXPECTED_QUESTION_MARK_INSTEAD_OF_TAG_NAME\",\n  \"UNEXPECTED_SOLIDUS_IN_TAG\": 22,\n  \"22\": \"UNEXPECTED_SOLIDUS_IN_TAG\",\n  \"X_INVALID_END_TAG\": 23,\n  \"23\": \"X_INVALID_END_TAG\",\n  \"X_MISSING_END_TAG\": 24,\n  \"24\": \"X_MISSING_END_TAG\",\n  \"X_MISSING_INTERPOLATION_END\": 25,\n  \"25\": \"X_MISSING_INTERPOLATION_END\",\n  \"X_MISSING_DIRECTIVE_NAME\": 26,\n  \"26\": \"X_MISSING_DIRECTIVE_NAME\",\n  \"X_MISSING_DYNAMIC_DIRECTIVE_ARGUMENT_END\": 27,\n  \"27\": \"X_MISSING_DYNAMIC_DIRECTIVE_ARGUMENT_END\",\n  \"X_V_IF_NO_EXPRESSION\": 28,\n  \"28\": \"X_V_IF_NO_EXPRESSION\",\n  \"X_V_IF_SAME_KEY\": 29,\n  \"29\": \"X_V_IF_SAME_KEY\",\n  \"X_V_ELSE_NO_ADJACENT_IF\": 30,\n  \"30\": \"X_V_ELSE_NO_ADJACENT_IF\",\n  \"X_V_FOR_NO_EXPRESSION\": 31,\n  \"31\": \"X_V_FOR_NO_EXPRESSION\",\n  \"X_V_FOR_MALFORMED_EXPRESSION\": 32,\n  \"32\": \"X_V_FOR_MALFORMED_EXPRESSION\",\n  \"X_V_FOR_TEMPLATE_KEY_PLACEMENT\": 33,\n  \"33\": \"X_V_FOR_TEMPLATE_KEY_PLACEMENT\",\n  \"X_V_BIND_NO_EXPRESSION\": 34,\n  \"34\": \"X_V_BIND_NO_EXPRESSION\",\n  \"X_V_ON_NO_EXPRESSION\": 35,\n  \"35\": \"X_V_ON_NO_EXPRESSION\",\n  \"X_V_SLOT_UNEXPECTED_DIRECTIVE_ON_SLOT_OUTLET\": 36,\n  \"36\": \"X_V_SLOT_UNEXPECTED_DIRECTIVE_ON_SLOT_OUTLET\",\n  \"X_V_SLOT_MIXED_SLOT_USAGE\": 37,\n  \"37\": \"X_V_SLOT_MIXED_SLOT_USAGE\",\n  \"X_V_SLOT_DUPLICATE_SLOT_NAMES\": 38,\n  \"38\": \"X_V_SLOT_DUPLICATE_SLOT_NAMES\",\n  \"X_V_SLOT_EXTRANEOUS_DEFAULT_SLOT_CHILDREN\": 39,\n  \"39\": \"X_V_SLOT_EXTRANEOUS_DEFAULT_SLOT_CHILDREN\",\n  \"X_V_SLOT_MISPLACED\": 40,\n  \"40\": \"X_V_SLOT_MISPLACED\",\n  \"X_V_MODEL_NO_EXPRESSION\": 41,\n  \"41\": \"X_V_MODEL_NO_EXPRESSION\",\n  \"X_V_MODEL_MALFORMED_EXPRESSION\": 42,\n  \"42\": \"X_V_MODEL_MALFORMED_EXPRESSION\",\n  \"X_V_MODEL_ON_SCOPE_VARIABLE\": 43,\n  \"43\": \"X_V_MODEL_ON_SCOPE_VARIABLE\",\n  \"X_V_MODEL_ON_PROPS\": 44,\n  \"44\": \"X_V_MODEL_ON_PROPS\",\n  \"X_INVALID_EXPRESSION\": 45,\n  \"45\": \"X_INVALID_EXPRESSION\",\n  \"X_KEEP_ALIVE_INVALID_CHILDREN\": 46,\n  \"46\": \"X_KEEP_ALIVE_INVALID_CHILDREN\",\n  \"X_PREFIX_ID_NOT_SUPPORTED\": 47,\n  \"47\": \"X_PREFIX_ID_NOT_SUPPORTED\",\n  \"X_MODULE_MODE_NOT_SUPPORTED\": 48,\n  \"48\": \"X_MODULE_MODE_NOT_SUPPORTED\",\n  \"X_CACHE_HANDLER_NOT_SUPPORTED\": 49,\n  \"49\": \"X_CACHE_HANDLER_NOT_SUPPORTED\",\n  \"X_SCOPE_ID_NOT_SUPPORTED\": 50,\n  \"50\": \"X_SCOPE_ID_NOT_SUPPORTED\",\n  \"X_VNODE_HOOKS\": 51,\n  \"51\": \"X_VNODE_HOOKS\",\n  \"X_V_BIND_INVALID_SAME_NAME_ARGUMENT\": 52,\n  \"52\": \"X_V_BIND_INVALID_SAME_NAME_ARGUMENT\",\n  \"__EXTEND_POINT__\": 53,\n  \"53\": \"__EXTEND_POINT__\"\n};\nconst errorMessages = {\n  // parse errors\n  [0]: \"Illegal comment.\",\n  [1]: \"CDATA section is allowed only in XML context.\",\n  [2]: \"Duplicate attribute.\",\n  [3]: \"End tag cannot have attributes.\",\n  [4]: \"Illegal '/' in tags.\",\n  [5]: \"Unexpected EOF in tag.\",\n  [6]: \"Unexpected EOF in CDATA section.\",\n  [7]: \"Unexpected EOF in comment.\",\n  [8]: \"Unexpected EOF in script.\",\n  [9]: \"Unexpected EOF in tag.\",\n  [10]: \"Incorrectly closed comment.\",\n  [11]: \"Incorrectly opened comment.\",\n  [12]: \"Illegal tag name. Use '&lt;' to print '<'.\",\n  [13]: \"Attribute value was expected.\",\n  [14]: \"End tag name was expected.\",\n  [15]: \"Whitespace was expected.\",\n  [16]: \"Unexpected '<!--' in comment.\",\n  [17]: `Attribute name cannot contain U+0022 (\"), U+0027 ('), and U+003C (<).`,\n  [18]: \"Unquoted attribute value cannot contain U+0022 (\\\"), U+0027 ('), U+003C (<), U+003D (=), and U+0060 (`).\",\n  [19]: \"Attribute name cannot start with '='.\",\n  [21]: \"'<?' is allowed only in XML context.\",\n  [20]: `Unexpected null character.`,\n  [22]: \"Illegal '/' in tags.\",\n  // Vue-specific parse errors\n  [23]: \"Invalid end tag.\",\n  [24]: \"Element is missing end tag.\",\n  [25]: \"Interpolation end sign was not found.\",\n  [27]: \"End bracket for dynamic directive argument was not found. Note that dynamic directive argument cannot contain spaces.\",\n  [26]: \"Legal directive name was expected.\",\n  // transform errors\n  [28]: `v-if/v-else-if is missing expression.`,\n  [29]: `v-if/else branches must use unique keys.`,\n  [30]: `v-else/v-else-if has no adjacent v-if or v-else-if.`,\n  [31]: `v-for is missing expression.`,\n  [32]: `v-for has invalid expression.`,\n  [33]: `<template v-for> key should be placed on the <template> tag.`,\n  [34]: `v-bind is missing expression.`,\n  [52]: `v-bind with same-name shorthand only allows static argument.`,\n  [35]: `v-on is missing expression.`,\n  [36]: `Unexpected custom directive on <slot> outlet.`,\n  [37]: `Mixed v-slot usage on both the component and nested <template>. When there are multiple named slots, all slots should use <template> syntax to avoid scope ambiguity.`,\n  [38]: `Duplicate slot names found. `,\n  [39]: `Extraneous children found when component already has explicitly named default slot. These children will be ignored.`,\n  [40]: `v-slot can only be used on components or <template> tags.`,\n  [41]: `v-model is missing expression.`,\n  [42]: `v-model value must be a valid JavaScript member expression.`,\n  [43]: `v-model cannot be used on v-for or v-slot scope variables because they are not writable.`,\n  [44]: `v-model cannot be used on a prop, because local prop bindings are not writable.\nUse a v-bind binding combined with a v-on listener that emits update:x event instead.`,\n  [45]: `Error parsing JavaScript expression: `,\n  [46]: `<KeepAlive> expects exactly one child component.`,\n  [51]: `@vnode-* hooks in templates are no longer supported. Use the vue: prefix instead. For example, @vnode-mounted should be changed to @vue:mounted. @vnode-* hooks support has been removed in 3.4.`,\n  // generic errors\n  [47]: `\"prefixIdentifiers\" option is not supported in this build of compiler.`,\n  [48]: `ES module mode is not supported in this build of compiler.`,\n  [49]: `\"cacheHandlers\" option is only supported when the \"prefixIdentifiers\" option is enabled.`,\n  [50]: `\"scopeId\" option is only supported in module mode.`,\n  // just to fulfill types\n  [53]: ``\n};\n\nfunction walkIdentifiers(root, onIdentifier, includeAll = false, parentStack = [], knownIds = /* @__PURE__ */ Object.create(null)) {\n  const rootExp = root.type === \"Program\" ? root.body[0].type === \"ExpressionStatement\" && root.body[0].expression : root;\n  estreeWalker.walk(root, {\n    enter(node, parent) {\n      parent && parentStack.push(parent);\n      if (parent && parent.type.startsWith(\"TS\") && !TS_NODE_TYPES.includes(parent.type)) {\n        return this.skip();\n      }\n      if (node.type === \"Identifier\") {\n        const isLocal = !!knownIds[node.name];\n        const isRefed = isReferencedIdentifier(node, parent, parentStack);\n        if (includeAll || isRefed && !isLocal) {\n          onIdentifier(node, parent, parentStack, isRefed, isLocal);\n        }\n      } else if (node.type === \"ObjectProperty\" && // eslint-disable-next-line no-restricted-syntax\n      (parent == null ? void 0 : parent.type) === \"ObjectPattern\") {\n        node.inPattern = true;\n      } else if (isFunctionType(node)) {\n        if (node.scopeIds) {\n          node.scopeIds.forEach((id) => markKnownIds(id, knownIds));\n        } else {\n          walkFunctionParams(\n            node,\n            (id) => markScopeIdentifier(node, id, knownIds)\n          );\n        }\n      } else if (node.type === \"BlockStatement\") {\n        if (node.scopeIds) {\n          node.scopeIds.forEach((id) => markKnownIds(id, knownIds));\n        } else {\n          walkBlockDeclarations(\n            node,\n            (id) => markScopeIdentifier(node, id, knownIds)\n          );\n        }\n      } else if (node.type === \"CatchClause\" && node.param) {\n        for (const id of extractIdentifiers(node.param)) {\n          markScopeIdentifier(node, id, knownIds);\n        }\n      } else if (isForStatement(node)) {\n        walkForStatement(\n          node,\n          false,\n          (id) => markScopeIdentifier(node, id, knownIds)\n        );\n      }\n    },\n    leave(node, parent) {\n      parent && parentStack.pop();\n      if (node !== rootExp && node.scopeIds) {\n        for (const id of node.scopeIds) {\n          knownIds[id]--;\n          if (knownIds[id] === 0) {\n            delete knownIds[id];\n          }\n        }\n      }\n    }\n  });\n}\nfunction isReferencedIdentifier(id, parent, parentStack) {\n  if (!parent) {\n    return true;\n  }\n  if (id.name === \"arguments\") {\n    return false;\n  }\n  if (isReferenced(id, parent)) {\n    return true;\n  }\n  switch (parent.type) {\n    case \"AssignmentExpression\":\n    case \"AssignmentPattern\":\n      return true;\n    case \"ObjectPattern\":\n    case \"ArrayPattern\":\n      return isInDestructureAssignment(parent, parentStack);\n  }\n  return false;\n}\nfunction isInDestructureAssignment(parent, parentStack) {\n  if (parent && (parent.type === \"ObjectProperty\" || parent.type === \"ArrayPattern\")) {\n    let i = parentStack.length;\n    while (i--) {\n      const p = parentStack[i];\n      if (p.type === \"AssignmentExpression\") {\n        return true;\n      } else if (p.type !== \"ObjectProperty\" && !p.type.endsWith(\"Pattern\")) {\n        break;\n      }\n    }\n  }\n  return false;\n}\nfunction isInNewExpression(parentStack) {\n  let i = parentStack.length;\n  while (i--) {\n    const p = parentStack[i];\n    if (p.type === \"NewExpression\") {\n      return true;\n    } else if (p.type !== \"MemberExpression\") {\n      break;\n    }\n  }\n  return false;\n}\nfunction walkFunctionParams(node, onIdent) {\n  for (const p of node.params) {\n    for (const id of extractIdentifiers(p)) {\n      onIdent(id);\n    }\n  }\n}\nfunction walkBlockDeclarations(block, onIdent) {\n  for (const stmt of block.body) {\n    if (stmt.type === \"VariableDeclaration\") {\n      if (stmt.declare) continue;\n      for (const decl of stmt.declarations) {\n        for (const id of extractIdentifiers(decl.id)) {\n          onIdent(id);\n        }\n      }\n    } else if (stmt.type === \"FunctionDeclaration\" || stmt.type === \"ClassDeclaration\") {\n      if (stmt.declare || !stmt.id) continue;\n      onIdent(stmt.id);\n    } else if (isForStatement(stmt)) {\n      walkForStatement(stmt, true, onIdent);\n    }\n  }\n}\nfunction isForStatement(stmt) {\n  return stmt.type === \"ForOfStatement\" || stmt.type === \"ForInStatement\" || stmt.type === \"ForStatement\";\n}\nfunction walkForStatement(stmt, isVar, onIdent) {\n  const variable = stmt.type === \"ForStatement\" ? stmt.init : stmt.left;\n  if (variable && variable.type === \"VariableDeclaration\" && (variable.kind === \"var\" ? isVar : !isVar)) {\n    for (const decl of variable.declarations) {\n      for (const id of extractIdentifiers(decl.id)) {\n        onIdent(id);\n      }\n    }\n  }\n}\nfunction extractIdentifiers(param, nodes = []) {\n  switch (param.type) {\n    case \"Identifier\":\n      nodes.push(param);\n      break;\n    case \"MemberExpression\":\n      let object = param;\n      while (object.type === \"MemberExpression\") {\n        object = object.object;\n      }\n      nodes.push(object);\n      break;\n    case \"ObjectPattern\":\n      for (const prop of param.properties) {\n        if (prop.type === \"RestElement\") {\n          extractIdentifiers(prop.argument, nodes);\n        } else {\n          extractIdentifiers(prop.value, nodes);\n        }\n      }\n      break;\n    case \"ArrayPattern\":\n      param.elements.forEach((element) => {\n        if (element) extractIdentifiers(element, nodes);\n      });\n      break;\n    case \"RestElement\":\n      extractIdentifiers(param.argument, nodes);\n      break;\n    case \"AssignmentPattern\":\n      extractIdentifiers(param.left, nodes);\n      break;\n  }\n  return nodes;\n}\nfunction markKnownIds(name, knownIds) {\n  if (name in knownIds) {\n    knownIds[name]++;\n  } else {\n    knownIds[name] = 1;\n  }\n}\nfunction markScopeIdentifier(node, child, knownIds) {\n  const { name } = child;\n  if (node.scopeIds && node.scopeIds.has(name)) {\n    return;\n  }\n  markKnownIds(name, knownIds);\n  (node.scopeIds || (node.scopeIds = /* @__PURE__ */ new Set())).add(name);\n}\nconst isFunctionType = (node) => {\n  return /Function(?:Expression|Declaration)$|Method$/.test(node.type);\n};\nconst isStaticProperty = (node) => node && (node.type === \"ObjectProperty\" || node.type === \"ObjectMethod\") && !node.computed;\nconst isStaticPropertyKey = (node, parent) => isStaticProperty(parent) && parent.key === node;\nfunction isReferenced(node, parent, grandparent) {\n  switch (parent.type) {\n    case \"MemberExpression\":\n    case \"OptionalMemberExpression\":\n      if (parent.property === node) {\n        return !!parent.computed;\n      }\n      return parent.object === node;\n    case \"JSXMemberExpression\":\n      return parent.object === node;\n    case \"VariableDeclarator\":\n      return parent.init === node;\n    case \"ArrowFunctionExpression\":\n      return parent.body === node;\n    case \"PrivateName\":\n      return false;\n    case \"ClassMethod\":\n    case \"ClassPrivateMethod\":\n    case \"ObjectMethod\":\n      if (parent.key === node) {\n        return !!parent.computed;\n      }\n      return false;\n    case \"ObjectProperty\":\n      if (parent.key === node) {\n        return !!parent.computed;\n      }\n      return !grandparent;\n    case \"ClassProperty\":\n      if (parent.key === node) {\n        return !!parent.computed;\n      }\n      return true;\n    case \"ClassPrivateProperty\":\n      return parent.key !== node;\n    case \"ClassDeclaration\":\n    case \"ClassExpression\":\n      return parent.superClass === node;\n    case \"AssignmentExpression\":\n      return parent.right === node;\n    case \"AssignmentPattern\":\n      return parent.right === node;\n    case \"LabeledStatement\":\n      return false;\n    case \"CatchClause\":\n      return false;\n    case \"RestElement\":\n      return false;\n    case \"BreakStatement\":\n    case \"ContinueStatement\":\n      return false;\n    case \"FunctionDeclaration\":\n    case \"FunctionExpression\":\n      return false;\n    case \"ExportNamespaceSpecifier\":\n    case \"ExportDefaultSpecifier\":\n      return false;\n    case \"ExportSpecifier\":\n      return parent.local === node;\n    case \"ImportDefaultSpecifier\":\n    case \"ImportNamespaceSpecifier\":\n    case \"ImportSpecifier\":\n      return false;\n    case \"ImportAttribute\":\n      return false;\n    case \"JSXAttribute\":\n      return false;\n    case \"ObjectPattern\":\n    case \"ArrayPattern\":\n      return false;\n    case \"MetaProperty\":\n      return false;\n    case \"ObjectTypeProperty\":\n      return parent.key !== node;\n    case \"TSEnumMember\":\n      return parent.id !== node;\n    case \"TSPropertySignature\":\n      if (parent.key === node) {\n        return !!parent.computed;\n      }\n      return true;\n  }\n  return true;\n}\nconst TS_NODE_TYPES = [\n  \"TSAsExpression\",\n  // foo as number\n  \"TSTypeAssertion\",\n  // (<number>foo)\n  \"TSNonNullExpression\",\n  // foo!\n  \"TSInstantiationExpression\",\n  // foo<string>\n  \"TSSatisfiesExpression\"\n  // foo satisfies T\n];\nfunction unwrapTSNode(node) {\n  if (TS_NODE_TYPES.includes(node.type)) {\n    return unwrapTSNode(node.expression);\n  } else {\n    return node;\n  }\n}\n\nconst isStaticExp = (p) => p.type === 4 && p.isStatic;\nfunction isCoreComponent(tag) {\n  switch (tag) {\n    case \"Teleport\":\n    case \"teleport\":\n      return TELEPORT;\n    case \"Suspense\":\n    case \"suspense\":\n      return SUSPENSE;\n    case \"KeepAlive\":\n    case \"keep-alive\":\n      return KEEP_ALIVE;\n    case \"BaseTransition\":\n    case \"base-transition\":\n      return BASE_TRANSITION;\n  }\n}\nconst nonIdentifierRE = /^\\d|[^\\$\\w\\xA0-\\uFFFF]/;\nconst isSimpleIdentifier = (name) => !nonIdentifierRE.test(name);\nconst validFirstIdentCharRE = /[A-Za-z_$\\xA0-\\uFFFF]/;\nconst validIdentCharRE = /[\\.\\?\\w$\\xA0-\\uFFFF]/;\nconst whitespaceRE = /\\s+[.[]\\s*|\\s*[.[]\\s+/g;\nconst isMemberExpressionBrowser = (path) => {\n  path = path.trim().replace(whitespaceRE, (s) => s.trim());\n  let state = 0 /* inMemberExp */;\n  let stateStack = [];\n  let currentOpenBracketCount = 0;\n  let currentOpenParensCount = 0;\n  let currentStringType = null;\n  for (let i = 0; i < path.length; i++) {\n    const char = path.charAt(i);\n    switch (state) {\n      case 0 /* inMemberExp */:\n        if (char === \"[\") {\n          stateStack.push(state);\n          state = 1 /* inBrackets */;\n          currentOpenBracketCount++;\n        } else if (char === \"(\") {\n          stateStack.push(state);\n          state = 2 /* inParens */;\n          currentOpenParensCount++;\n        } else if (!(i === 0 ? validFirstIdentCharRE : validIdentCharRE).test(char)) {\n          return false;\n        }\n        break;\n      case 1 /* inBrackets */:\n        if (char === `'` || char === `\"` || char === \"`\") {\n          stateStack.push(state);\n          state = 3 /* inString */;\n          currentStringType = char;\n        } else if (char === `[`) {\n          currentOpenBracketCount++;\n        } else if (char === `]`) {\n          if (!--currentOpenBracketCount) {\n            state = stateStack.pop();\n          }\n        }\n        break;\n      case 2 /* inParens */:\n        if (char === `'` || char === `\"` || char === \"`\") {\n          stateStack.push(state);\n          state = 3 /* inString */;\n          currentStringType = char;\n        } else if (char === `(`) {\n          currentOpenParensCount++;\n        } else if (char === `)`) {\n          if (i === path.length - 1) {\n            return false;\n          }\n          if (!--currentOpenParensCount) {\n            state = stateStack.pop();\n          }\n        }\n        break;\n      case 3 /* inString */:\n        if (char === currentStringType) {\n          state = stateStack.pop();\n          currentStringType = null;\n        }\n        break;\n    }\n  }\n  return !currentOpenBracketCount && !currentOpenParensCount;\n};\nconst isMemberExpressionNode = (path, context) => {\n  try {\n    let ret = parser.parseExpression(path, {\n      plugins: context.expressionPlugins\n    });\n    ret = unwrapTSNode(ret);\n    return ret.type === \"MemberExpression\" || ret.type === \"OptionalMemberExpression\" || ret.type === \"Identifier\" && ret.name !== \"undefined\";\n  } catch (e) {\n    return false;\n  }\n};\nconst isMemberExpression = isMemberExpressionNode;\nfunction advancePositionWithClone(pos, source, numberOfCharacters = source.length) {\n  return advancePositionWithMutation(\n    {\n      offset: pos.offset,\n      line: pos.line,\n      column: pos.column\n    },\n    source,\n    numberOfCharacters\n  );\n}\nfunction advancePositionWithMutation(pos, source, numberOfCharacters = source.length) {\n  let linesCount = 0;\n  let lastNewLinePos = -1;\n  for (let i = 0; i < numberOfCharacters; i++) {\n    if (source.charCodeAt(i) === 10) {\n      linesCount++;\n      lastNewLinePos = i;\n    }\n  }\n  pos.offset += numberOfCharacters;\n  pos.line += linesCount;\n  pos.column = lastNewLinePos === -1 ? pos.column + numberOfCharacters : numberOfCharacters - lastNewLinePos;\n  return pos;\n}\nfunction assert(condition, msg) {\n  if (!condition) {\n    throw new Error(msg || `unexpected compiler condition`);\n  }\n}\nfunction findDir(node, name, allowEmpty = false) {\n  for (let i = 0; i < node.props.length; i++) {\n    const p = node.props[i];\n    if (p.type === 7 && (allowEmpty || p.exp) && (shared.isString(name) ? p.name === name : name.test(p.name))) {\n      return p;\n    }\n  }\n}\nfunction findProp(node, name, dynamicOnly = false, allowEmpty = false) {\n  for (let i = 0; i < node.props.length; i++) {\n    const p = node.props[i];\n    if (p.type === 6) {\n      if (dynamicOnly) continue;\n      if (p.name === name && (p.value || allowEmpty)) {\n        return p;\n      }\n    } else if (p.name === \"bind\" && (p.exp || allowEmpty) && isStaticArgOf(p.arg, name)) {\n      return p;\n    }\n  }\n}\nfunction isStaticArgOf(arg, name) {\n  return !!(arg && isStaticExp(arg) && arg.content === name);\n}\nfunction hasDynamicKeyVBind(node) {\n  return node.props.some(\n    (p) => p.type === 7 && p.name === \"bind\" && (!p.arg || // v-bind=\"obj\"\n    p.arg.type !== 4 || // v-bind:[_ctx.foo]\n    !p.arg.isStatic)\n    // v-bind:[foo]\n  );\n}\nfunction isText$1(node) {\n  return node.type === 5 || node.type === 2;\n}\nfunction isVSlot(p) {\n  return p.type === 7 && p.name === \"slot\";\n}\nfunction isTemplateNode(node) {\n  return node.type === 1 && node.tagType === 3;\n}\nfunction isSlotOutlet(node) {\n  return node.type === 1 && node.tagType === 2;\n}\nconst propsHelperSet = /* @__PURE__ */ new Set([NORMALIZE_PROPS, GUARD_REACTIVE_PROPS]);\nfunction getUnnormalizedProps(props, callPath = []) {\n  if (props && !shared.isString(props) && props.type === 14) {\n    const callee = props.callee;\n    if (!shared.isString(callee) && propsHelperSet.has(callee)) {\n      return getUnnormalizedProps(\n        props.arguments[0],\n        callPath.concat(props)\n      );\n    }\n  }\n  return [props, callPath];\n}\nfunction injectProp(node, prop, context) {\n  let propsWithInjection;\n  let props = node.type === 13 ? node.props : node.arguments[2];\n  let callPath = [];\n  let parentCall;\n  if (props && !shared.isString(props) && props.type === 14) {\n    const ret = getUnnormalizedProps(props);\n    props = ret[0];\n    callPath = ret[1];\n    parentCall = callPath[callPath.length - 1];\n  }\n  if (props == null || shared.isString(props)) {\n    propsWithInjection = createObjectExpression([prop]);\n  } else if (props.type === 14) {\n    const first = props.arguments[0];\n    if (!shared.isString(first) && first.type === 15) {\n      if (!hasProp(prop, first)) {\n        first.properties.unshift(prop);\n      }\n    } else {\n      if (props.callee === TO_HANDLERS) {\n        propsWithInjection = createCallExpression(context.helper(MERGE_PROPS), [\n          createObjectExpression([prop]),\n          props\n        ]);\n      } else {\n        props.arguments.unshift(createObjectExpression([prop]));\n      }\n    }\n    !propsWithInjection && (propsWithInjection = props);\n  } else if (props.type === 15) {\n    if (!hasProp(prop, props)) {\n      props.properties.unshift(prop);\n    }\n    propsWithInjection = props;\n  } else {\n    propsWithInjection = createCallExpression(context.helper(MERGE_PROPS), [\n      createObjectExpression([prop]),\n      props\n    ]);\n    if (parentCall && parentCall.callee === GUARD_REACTIVE_PROPS) {\n      parentCall = callPath[callPath.length - 2];\n    }\n  }\n  if (node.type === 13) {\n    if (parentCall) {\n      parentCall.arguments[0] = propsWithInjection;\n    } else {\n      node.props = propsWithInjection;\n    }\n  } else {\n    if (parentCall) {\n      parentCall.arguments[0] = propsWithInjection;\n    } else {\n      node.arguments[2] = propsWithInjection;\n    }\n  }\n}\nfunction hasProp(prop, props) {\n  let result = false;\n  if (prop.key.type === 4) {\n    const propKeyName = prop.key.content;\n    result = props.properties.some(\n      (p) => p.key.type === 4 && p.key.content === propKeyName\n    );\n  }\n  return result;\n}\nfunction toValidAssetId(name, type) {\n  return `_${type}_${name.replace(/[^\\w]/g, (searchValue, replaceValue) => {\n    return searchValue === \"-\" ? \"_\" : name.charCodeAt(replaceValue).toString();\n  })}`;\n}\nfunction hasScopeRef(node, ids) {\n  if (!node || Object.keys(ids).length === 0) {\n    return false;\n  }\n  switch (node.type) {\n    case 1:\n      for (let i = 0; i < node.props.length; i++) {\n        const p = node.props[i];\n        if (p.type === 7 && (hasScopeRef(p.arg, ids) || hasScopeRef(p.exp, ids))) {\n          return true;\n        }\n      }\n      return node.children.some((c) => hasScopeRef(c, ids));\n    case 11:\n      if (hasScopeRef(node.source, ids)) {\n        return true;\n      }\n      return node.children.some((c) => hasScopeRef(c, ids));\n    case 9:\n      return node.branches.some((b) => hasScopeRef(b, ids));\n    case 10:\n      if (hasScopeRef(node.condition, ids)) {\n        return true;\n      }\n      return node.children.some((c) => hasScopeRef(c, ids));\n    case 4:\n      return !node.isStatic && isSimpleIdentifier(node.content) && !!ids[node.content];\n    case 8:\n      return node.children.some((c) => shared.isObject(c) && hasScopeRef(c, ids));\n    case 5:\n    case 12:\n      return hasScopeRef(node.content, ids);\n    case 2:\n    case 3:\n      return false;\n    default:\n      return false;\n  }\n}\nfunction getMemoedVNodeCall(node) {\n  if (node.type === 14 && node.callee === WITH_MEMO) {\n    return node.arguments[1].returns;\n  } else {\n    return node;\n  }\n}\nconst forAliasRE = /([\\s\\S]*?)\\s+(?:in|of)\\s+(\\S[\\s\\S]*)/;\n\nconst defaultParserOptions = {\n  parseMode: \"base\",\n  ns: 0,\n  delimiters: [`{{`, `}}`],\n  getNamespace: () => 0,\n  isVoidTag: shared.NO,\n  isPreTag: shared.NO,\n  isCustomElement: shared.NO,\n  onError: defaultOnError,\n  onWarn: defaultOnWarn,\n  comments: true,\n  prefixIdentifiers: false\n};\nlet currentOptions = defaultParserOptions;\nlet currentRoot = null;\nlet currentInput = \"\";\nlet currentOpenTag = null;\nlet currentProp = null;\nlet currentAttrValue = \"\";\nlet currentAttrStartIndex = -1;\nlet currentAttrEndIndex = -1;\nlet inPre = 0;\nlet inVPre = false;\nlet currentVPreBoundary = null;\nconst stack = [];\nconst tokenizer = new Tokenizer(stack, {\n  onerr: emitError,\n  ontext(start, end) {\n    onText(getSlice(start, end), start, end);\n  },\n  ontextentity(char, start, end) {\n    onText(char, start, end);\n  },\n  oninterpolation(start, end) {\n    if (inVPre) {\n      return onText(getSlice(start, end), start, end);\n    }\n    let innerStart = start + tokenizer.delimiterOpen.length;\n    let innerEnd = end - tokenizer.delimiterClose.length;\n    while (isWhitespace(currentInput.charCodeAt(innerStart))) {\n      innerStart++;\n    }\n    while (isWhitespace(currentInput.charCodeAt(innerEnd - 1))) {\n      innerEnd--;\n    }\n    let exp = getSlice(innerStart, innerEnd);\n    if (exp.includes(\"&\")) {\n      {\n        exp = decode_js.decodeHTML(exp);\n      }\n    }\n    addNode({\n      type: 5,\n      content: createExp(exp, false, getLoc(innerStart, innerEnd)),\n      loc: getLoc(start, end)\n    });\n  },\n  onopentagname(start, end) {\n    const name = getSlice(start, end);\n    currentOpenTag = {\n      type: 1,\n      tag: name,\n      ns: currentOptions.getNamespace(name, stack[0], currentOptions.ns),\n      tagType: 0,\n      // will be refined on tag close\n      props: [],\n      children: [],\n      loc: getLoc(start - 1, end),\n      codegenNode: void 0\n    };\n  },\n  onopentagend(end) {\n    endOpenTag(end);\n  },\n  onclosetag(start, end) {\n    const name = getSlice(start, end);\n    if (!currentOptions.isVoidTag(name)) {\n      let found = false;\n      for (let i = 0; i < stack.length; i++) {\n        const e = stack[i];\n        if (e.tag.toLowerCase() === name.toLowerCase()) {\n          found = true;\n          if (i > 0) {\n            emitError(24, stack[0].loc.start.offset);\n          }\n          for (let j = 0; j <= i; j++) {\n            const el = stack.shift();\n            onCloseTag(el, end, j < i);\n          }\n          break;\n        }\n      }\n      if (!found) {\n        emitError(23, backTrack(start, 60));\n      }\n    }\n  },\n  onselfclosingtag(end) {\n    const name = currentOpenTag.tag;\n    currentOpenTag.isSelfClosing = true;\n    endOpenTag(end);\n    if (stack[0] && stack[0].tag === name) {\n      onCloseTag(stack.shift(), end);\n    }\n  },\n  onattribname(start, end) {\n    currentProp = {\n      type: 6,\n      name: getSlice(start, end),\n      nameLoc: getLoc(start, end),\n      value: void 0,\n      loc: getLoc(start)\n    };\n  },\n  ondirname(start, end) {\n    const raw = getSlice(start, end);\n    const name = raw === \".\" || raw === \":\" ? \"bind\" : raw === \"@\" ? \"on\" : raw === \"#\" ? \"slot\" : raw.slice(2);\n    if (!inVPre && name === \"\") {\n      emitError(26, start);\n    }\n    if (inVPre || name === \"\") {\n      currentProp = {\n        type: 6,\n        name: raw,\n        nameLoc: getLoc(start, end),\n        value: void 0,\n        loc: getLoc(start)\n      };\n    } else {\n      currentProp = {\n        type: 7,\n        name,\n        rawName: raw,\n        exp: void 0,\n        arg: void 0,\n        modifiers: raw === \".\" ? [\"prop\"] : [],\n        loc: getLoc(start)\n      };\n      if (name === \"pre\") {\n        inVPre = tokenizer.inVPre = true;\n        currentVPreBoundary = currentOpenTag;\n        const props = currentOpenTag.props;\n        for (let i = 0; i < props.length; i++) {\n          if (props[i].type === 7) {\n            props[i] = dirToAttr(props[i]);\n          }\n        }\n      }\n    }\n  },\n  ondirarg(start, end) {\n    if (start === end) return;\n    const arg = getSlice(start, end);\n    if (inVPre) {\n      currentProp.name += arg;\n      setLocEnd(currentProp.nameLoc, end);\n    } else {\n      const isStatic = arg[0] !== `[`;\n      currentProp.arg = createExp(\n        isStatic ? arg : arg.slice(1, -1),\n        isStatic,\n        getLoc(start, end),\n        isStatic ? 3 : 0\n      );\n    }\n  },\n  ondirmodifier(start, end) {\n    const mod = getSlice(start, end);\n    if (inVPre) {\n      currentProp.name += \".\" + mod;\n      setLocEnd(currentProp.nameLoc, end);\n    } else if (currentProp.name === \"slot\") {\n      const arg = currentProp.arg;\n      if (arg) {\n        arg.content += \".\" + mod;\n        setLocEnd(arg.loc, end);\n      }\n    } else {\n      currentProp.modifiers.push(mod);\n    }\n  },\n  onattribdata(start, end) {\n    currentAttrValue += getSlice(start, end);\n    if (currentAttrStartIndex < 0) currentAttrStartIndex = start;\n    currentAttrEndIndex = end;\n  },\n  onattribentity(char, start, end) {\n    currentAttrValue += char;\n    if (currentAttrStartIndex < 0) currentAttrStartIndex = start;\n    currentAttrEndIndex = end;\n  },\n  onattribnameend(end) {\n    const start = currentProp.loc.start.offset;\n    const name = getSlice(start, end);\n    if (currentProp.type === 7) {\n      currentProp.rawName = name;\n    }\n    if (currentOpenTag.props.some(\n      (p) => (p.type === 7 ? p.rawName : p.name) === name\n    )) {\n      emitError(2, start);\n    }\n  },\n  onattribend(quote, end) {\n    if (currentOpenTag && currentProp) {\n      setLocEnd(currentProp.loc, end);\n      if (quote !== 0) {\n        if (currentProp.type === 6) {\n          if (currentProp.name === \"class\") {\n            currentAttrValue = condense(currentAttrValue).trim();\n          }\n          if (quote === 1 && !currentAttrValue) {\n            emitError(13, end);\n          }\n          currentProp.value = {\n            type: 2,\n            content: currentAttrValue,\n            loc: quote === 1 ? getLoc(currentAttrStartIndex, currentAttrEndIndex) : getLoc(currentAttrStartIndex - 1, currentAttrEndIndex + 1)\n          };\n          if (tokenizer.inSFCRoot && currentOpenTag.tag === \"template\" && currentProp.name === \"lang\" && currentAttrValue && currentAttrValue !== \"html\") {\n            tokenizer.enterRCDATA(toCharCodes(`</template`), 0);\n          }\n        } else {\n          let expParseMode = 0 /* Normal */;\n          {\n            if (currentProp.name === \"for\") {\n              expParseMode = 3 /* Skip */;\n            } else if (currentProp.name === \"slot\") {\n              expParseMode = 1 /* Params */;\n            } else if (currentProp.name === \"on\" && currentAttrValue.includes(\";\")) {\n              expParseMode = 2 /* Statements */;\n            }\n          }\n          currentProp.exp = createExp(\n            currentAttrValue,\n            false,\n            getLoc(currentAttrStartIndex, currentAttrEndIndex),\n            0,\n            expParseMode\n          );\n          if (currentProp.name === \"for\") {\n            currentProp.forParseResult = parseForExpression(currentProp.exp);\n          }\n          let syncIndex = -1;\n          if (currentProp.name === \"bind\" && (syncIndex = currentProp.modifiers.indexOf(\"sync\")) > -1 && checkCompatEnabled(\n            \"COMPILER_V_BIND_SYNC\",\n            currentOptions,\n            currentProp.loc,\n            currentProp.rawName\n          )) {\n            currentProp.name = \"model\";\n            currentProp.modifiers.splice(syncIndex, 1);\n          }\n        }\n      }\n      if (currentProp.type !== 7 || currentProp.name !== \"pre\") {\n        currentOpenTag.props.push(currentProp);\n      }\n    }\n    currentAttrValue = \"\";\n    currentAttrStartIndex = currentAttrEndIndex = -1;\n  },\n  oncomment(start, end) {\n    if (currentOptions.comments) {\n      addNode({\n        type: 3,\n        content: getSlice(start, end),\n        loc: getLoc(start - 4, end + 3)\n      });\n    }\n  },\n  onend() {\n    const end = currentInput.length;\n    if (tokenizer.state !== 1) {\n      switch (tokenizer.state) {\n        case 5:\n        case 8:\n          emitError(5, end);\n          break;\n        case 3:\n        case 4:\n          emitError(\n            25,\n            tokenizer.sectionStart\n          );\n          break;\n        case 28:\n          if (tokenizer.currentSequence === Sequences.CdataEnd) {\n            emitError(6, end);\n          } else {\n            emitError(7, end);\n          }\n          break;\n        case 6:\n        case 7:\n        case 9:\n        case 11:\n        case 12:\n        case 13:\n        case 14:\n        case 15:\n        case 16:\n        case 17:\n        case 18:\n        case 19:\n        case 20:\n        case 21:\n          emitError(9, end);\n          break;\n      }\n    }\n    for (let index = 0; index < stack.length; index++) {\n      onCloseTag(stack[index], end - 1);\n      emitError(24, stack[index].loc.start.offset);\n    }\n  },\n  oncdata(start, end) {\n    if (stack[0].ns !== 0) {\n      onText(getSlice(start, end), start, end);\n    } else {\n      emitError(1, start - 9);\n    }\n  },\n  onprocessinginstruction(start) {\n    if ((stack[0] ? stack[0].ns : currentOptions.ns) === 0) {\n      emitError(\n        21,\n        start - 1\n      );\n    }\n  }\n});\nconst forIteratorRE = /,([^,\\}\\]]*)(?:,([^,\\}\\]]*))?$/;\nconst stripParensRE = /^\\(|\\)$/g;\nfunction parseForExpression(input) {\n  const loc = input.loc;\n  const exp = input.content;\n  const inMatch = exp.match(forAliasRE);\n  if (!inMatch) return;\n  const [, LHS, RHS] = inMatch;\n  const createAliasExpression = (content, offset, asParam = false) => {\n    const start = loc.start.offset + offset;\n    const end = start + content.length;\n    return createExp(\n      content,\n      false,\n      getLoc(start, end),\n      0,\n      asParam ? 1 /* Params */ : 0 /* Normal */\n    );\n  };\n  const result = {\n    source: createAliasExpression(RHS.trim(), exp.indexOf(RHS, LHS.length)),\n    value: void 0,\n    key: void 0,\n    index: void 0,\n    finalized: false\n  };\n  let valueContent = LHS.trim().replace(stripParensRE, \"\").trim();\n  const trimmedOffset = LHS.indexOf(valueContent);\n  const iteratorMatch = valueContent.match(forIteratorRE);\n  if (iteratorMatch) {\n    valueContent = valueContent.replace(forIteratorRE, \"\").trim();\n    const keyContent = iteratorMatch[1].trim();\n    let keyOffset;\n    if (keyContent) {\n      keyOffset = exp.indexOf(keyContent, trimmedOffset + valueContent.length);\n      result.key = createAliasExpression(keyContent, keyOffset, true);\n    }\n    if (iteratorMatch[2]) {\n      const indexContent = iteratorMatch[2].trim();\n      if (indexContent) {\n        result.index = createAliasExpression(\n          indexContent,\n          exp.indexOf(\n            indexContent,\n            result.key ? keyOffset + keyContent.length : trimmedOffset + valueContent.length\n          ),\n          true\n        );\n      }\n    }\n  }\n  if (valueContent) {\n    result.value = createAliasExpression(valueContent, trimmedOffset, true);\n  }\n  return result;\n}\nfunction getSlice(start, end) {\n  return currentInput.slice(start, end);\n}\nfunction endOpenTag(end) {\n  if (tokenizer.inSFCRoot) {\n    currentOpenTag.innerLoc = getLoc(end + 1, end + 1);\n  }\n  addNode(currentOpenTag);\n  const { tag, ns } = currentOpenTag;\n  if (ns === 0 && currentOptions.isPreTag(tag)) {\n    inPre++;\n  }\n  if (currentOptions.isVoidTag(tag)) {\n    onCloseTag(currentOpenTag, end);\n  } else {\n    stack.unshift(currentOpenTag);\n    if (ns === 1 || ns === 2) {\n      tokenizer.inXML = true;\n    }\n  }\n  currentOpenTag = null;\n}\nfunction onText(content, start, end) {\n  const parent = stack[0] || currentRoot;\n  const lastNode = parent.children[parent.children.length - 1];\n  if (lastNode && lastNode.type === 2) {\n    lastNode.content += content;\n    setLocEnd(lastNode.loc, end);\n  } else {\n    parent.children.push({\n      type: 2,\n      content,\n      loc: getLoc(start, end)\n    });\n  }\n}\nfunction onCloseTag(el, end, isImplied = false) {\n  if (isImplied) {\n    setLocEnd(el.loc, backTrack(end, 60));\n  } else {\n    setLocEnd(el.loc, lookAhead(end, 62) + 1);\n  }\n  if (tokenizer.inSFCRoot) {\n    if (el.children.length) {\n      el.innerLoc.end = shared.extend({}, el.children[el.children.length - 1].loc.end);\n    } else {\n      el.innerLoc.end = shared.extend({}, el.innerLoc.start);\n    }\n    el.innerLoc.source = getSlice(\n      el.innerLoc.start.offset,\n      el.innerLoc.end.offset\n    );\n  }\n  const { tag, ns } = el;\n  if (!inVPre) {\n    if (tag === \"slot\") {\n      el.tagType = 2;\n    } else if (isFragmentTemplate(el)) {\n      el.tagType = 3;\n    } else if (isComponent(el)) {\n      el.tagType = 1;\n    }\n  }\n  if (!tokenizer.inRCDATA) {\n    el.children = condenseWhitespace(el.children, el.tag);\n  }\n  if (ns === 0 && currentOptions.isPreTag(tag)) {\n    inPre--;\n  }\n  if (currentVPreBoundary === el) {\n    inVPre = tokenizer.inVPre = false;\n    currentVPreBoundary = null;\n  }\n  if (tokenizer.inXML && (stack[0] ? stack[0].ns : currentOptions.ns) === 0) {\n    tokenizer.inXML = false;\n  }\n  {\n    const props = el.props;\n    if (isCompatEnabled(\n      \"COMPILER_V_IF_V_FOR_PRECEDENCE\",\n      currentOptions\n    )) {\n      let hasIf = false;\n      let hasFor = false;\n      for (let i = 0; i < props.length; i++) {\n        const p = props[i];\n        if (p.type === 7) {\n          if (p.name === \"if\") {\n            hasIf = true;\n          } else if (p.name === \"for\") {\n            hasFor = true;\n          }\n        }\n        if (hasIf && hasFor) {\n          warnDeprecation(\n            \"COMPILER_V_IF_V_FOR_PRECEDENCE\",\n            currentOptions,\n            el.loc\n          );\n          break;\n        }\n      }\n    }\n    if (!tokenizer.inSFCRoot && isCompatEnabled(\n      \"COMPILER_NATIVE_TEMPLATE\",\n      currentOptions\n    ) && el.tag === \"template\" && !isFragmentTemplate(el)) {\n      warnDeprecation(\n        \"COMPILER_NATIVE_TEMPLATE\",\n        currentOptions,\n        el.loc\n      );\n      const parent = stack[0] || currentRoot;\n      const index = parent.children.indexOf(el);\n      parent.children.splice(index, 1, ...el.children);\n    }\n    const inlineTemplateProp = props.find(\n      (p) => p.type === 6 && p.name === \"inline-template\"\n    );\n    if (inlineTemplateProp && checkCompatEnabled(\n      \"COMPILER_INLINE_TEMPLATE\",\n      currentOptions,\n      inlineTemplateProp.loc\n    ) && el.children.length) {\n      inlineTemplateProp.value = {\n        type: 2,\n        content: getSlice(\n          el.children[0].loc.start.offset,\n          el.children[el.children.length - 1].loc.end.offset\n        ),\n        loc: inlineTemplateProp.loc\n      };\n    }\n  }\n}\nfunction lookAhead(index, c) {\n  let i = index;\n  while (currentInput.charCodeAt(i) !== c && i < currentInput.length - 1) i++;\n  return i;\n}\nfunction backTrack(index, c) {\n  let i = index;\n  while (currentInput.charCodeAt(i) !== c && i >= 0) i--;\n  return i;\n}\nconst specialTemplateDir = /* @__PURE__ */ new Set([\"if\", \"else\", \"else-if\", \"for\", \"slot\"]);\nfunction isFragmentTemplate({ tag, props }) {\n  if (tag === \"template\") {\n    for (let i = 0; i < props.length; i++) {\n      if (props[i].type === 7 && specialTemplateDir.has(props[i].name)) {\n        return true;\n      }\n    }\n  }\n  return false;\n}\nfunction isComponent({ tag, props }) {\n  if (currentOptions.isCustomElement(tag)) {\n    return false;\n  }\n  if (tag === \"component\" || isUpperCase(tag.charCodeAt(0)) || isCoreComponent(tag) || currentOptions.isBuiltInComponent && currentOptions.isBuiltInComponent(tag) || currentOptions.isNativeTag && !currentOptions.isNativeTag(tag)) {\n    return true;\n  }\n  for (let i = 0; i < props.length; i++) {\n    const p = props[i];\n    if (p.type === 6) {\n      if (p.name === \"is\" && p.value) {\n        if (p.value.content.startsWith(\"vue:\")) {\n          return true;\n        } else if (checkCompatEnabled(\n          \"COMPILER_IS_ON_ELEMENT\",\n          currentOptions,\n          p.loc\n        )) {\n          return true;\n        }\n      }\n    } else if (// :is on plain element - only treat as component in compat mode\n    p.name === \"bind\" && isStaticArgOf(p.arg, \"is\") && checkCompatEnabled(\n      \"COMPILER_IS_ON_ELEMENT\",\n      currentOptions,\n      p.loc\n    )) {\n      return true;\n    }\n  }\n  return false;\n}\nfunction isUpperCase(c) {\n  return c > 64 && c < 91;\n}\nconst windowsNewlineRE = /\\r\\n/g;\nfunction condenseWhitespace(nodes, tag) {\n  const shouldCondense = currentOptions.whitespace !== \"preserve\";\n  let removedWhitespace = false;\n  for (let i = 0; i < nodes.length; i++) {\n    const node = nodes[i];\n    if (node.type === 2) {\n      if (!inPre) {\n        if (isAllWhitespace(node.content)) {\n          const prev = nodes[i - 1] && nodes[i - 1].type;\n          const next = nodes[i + 1] && nodes[i + 1].type;\n          if (!prev || !next || shouldCondense && (prev === 3 && (next === 3 || next === 1) || prev === 1 && (next === 3 || next === 1 && hasNewlineChar(node.content)))) {\n            removedWhitespace = true;\n            nodes[i] = null;\n          } else {\n            node.content = \" \";\n          }\n        } else if (shouldCondense) {\n          node.content = condense(node.content);\n        }\n      } else {\n        node.content = node.content.replace(windowsNewlineRE, \"\\n\");\n      }\n    }\n  }\n  if (inPre && tag && currentOptions.isPreTag(tag)) {\n    const first = nodes[0];\n    if (first && first.type === 2) {\n      first.content = first.content.replace(/^\\r?\\n/, \"\");\n    }\n  }\n  return removedWhitespace ? nodes.filter(Boolean) : nodes;\n}\nfunction isAllWhitespace(str) {\n  for (let i = 0; i < str.length; i++) {\n    if (!isWhitespace(str.charCodeAt(i))) {\n      return false;\n    }\n  }\n  return true;\n}\nfunction hasNewlineChar(str) {\n  for (let i = 0; i < str.length; i++) {\n    const c = str.charCodeAt(i);\n    if (c === 10 || c === 13) {\n      return true;\n    }\n  }\n  return false;\n}\nfunction condense(str) {\n  let ret = \"\";\n  let prevCharIsWhitespace = false;\n  for (let i = 0; i < str.length; i++) {\n    if (isWhitespace(str.charCodeAt(i))) {\n      if (!prevCharIsWhitespace) {\n        ret += \" \";\n        prevCharIsWhitespace = true;\n      }\n    } else {\n      ret += str[i];\n      prevCharIsWhitespace = false;\n    }\n  }\n  return ret;\n}\nfunction addNode(node) {\n  (stack[0] || currentRoot).children.push(node);\n}\nfunction getLoc(start, end) {\n  return {\n    start: tokenizer.getPos(start),\n    // @ts-expect-error allow late attachment\n    end: end == null ? end : tokenizer.getPos(end),\n    // @ts-expect-error allow late attachment\n    source: end == null ? end : getSlice(start, end)\n  };\n}\nfunction setLocEnd(loc, end) {\n  loc.end = tokenizer.getPos(end);\n  loc.source = getSlice(loc.start.offset, end);\n}\nfunction dirToAttr(dir) {\n  const attr = {\n    type: 6,\n    name: dir.rawName,\n    nameLoc: getLoc(\n      dir.loc.start.offset,\n      dir.loc.start.offset + dir.rawName.length\n    ),\n    value: void 0,\n    loc: dir.loc\n  };\n  if (dir.exp) {\n    const loc = dir.exp.loc;\n    if (loc.end.offset < dir.loc.end.offset) {\n      loc.start.offset--;\n      loc.start.column--;\n      loc.end.offset++;\n      loc.end.column++;\n    }\n    attr.value = {\n      type: 2,\n      content: dir.exp.content,\n      loc\n    };\n  }\n  return attr;\n}\nfunction createExp(content, isStatic = false, loc, constType = 0, parseMode = 0 /* Normal */) {\n  const exp = createSimpleExpression(content, isStatic, loc, constType);\n  if (!isStatic && currentOptions.prefixIdentifiers && parseMode !== 3 /* Skip */ && content.trim()) {\n    if (isSimpleIdentifier(content)) {\n      exp.ast = null;\n      return exp;\n    }\n    try {\n      const plugins = currentOptions.expressionPlugins;\n      const options = {\n        plugins: plugins ? [...plugins, \"typescript\"] : [\"typescript\"]\n      };\n      if (parseMode === 2 /* Statements */) {\n        exp.ast = parser.parse(` ${content} `, options).program;\n      } else if (parseMode === 1 /* Params */) {\n        exp.ast = parser.parseExpression(`(${content})=>{}`, options);\n      } else {\n        exp.ast = parser.parseExpression(`(${content})`, options);\n      }\n    } catch (e) {\n      exp.ast = false;\n      emitError(45, loc.start.offset, e.message);\n    }\n  }\n  return exp;\n}\nfunction emitError(code, index, message) {\n  currentOptions.onError(\n    createCompilerError(code, getLoc(index, index), void 0, message)\n  );\n}\nfunction reset() {\n  tokenizer.reset();\n  currentOpenTag = null;\n  currentProp = null;\n  currentAttrValue = \"\";\n  currentAttrStartIndex = -1;\n  currentAttrEndIndex = -1;\n  stack.length = 0;\n}\nfunction baseParse(input, options) {\n  reset();\n  currentInput = input;\n  currentOptions = shared.extend({}, defaultParserOptions);\n  if (options) {\n    let key;\n    for (key in options) {\n      if (options[key] != null) {\n        currentOptions[key] = options[key];\n      }\n    }\n  }\n  {\n    if (currentOptions.decodeEntities) {\n      console.warn(\n        `[@vue/compiler-core] decodeEntities option is passed but will be ignored in non-browser builds.`\n      );\n    }\n  }\n  tokenizer.mode = currentOptions.parseMode === \"html\" ? 1 : currentOptions.parseMode === \"sfc\" ? 2 : 0;\n  tokenizer.inXML = currentOptions.ns === 1 || currentOptions.ns === 2;\n  const delimiters = options && options.delimiters;\n  if (delimiters) {\n    tokenizer.delimiterOpen = toCharCodes(delimiters[0]);\n    tokenizer.delimiterClose = toCharCodes(delimiters[1]);\n  }\n  const root = currentRoot = createRoot([], input);\n  tokenizer.parse(currentInput);\n  root.loc = getLoc(0, input.length);\n  root.children = condenseWhitespace(root.children);\n  currentRoot = null;\n  return root;\n}\n\nfunction hoistStatic(root, context) {\n  walk(\n    root,\n    context,\n    // Root node is unfortunately non-hoistable due to potential parent\n    // fallthrough attributes.\n    isSingleElementRoot(root, root.children[0])\n  );\n}\nfunction isSingleElementRoot(root, child) {\n  const { children } = root;\n  return children.length === 1 && child.type === 1 && !isSlotOutlet(child);\n}\nfunction walk(node, context, doNotHoistNode = false) {\n  const { children } = node;\n  const originalCount = children.length;\n  let hoistedCount = 0;\n  for (let i = 0; i < children.length; i++) {\n    const child = children[i];\n    if (child.type === 1 && child.tagType === 0) {\n      const constantType = doNotHoistNode ? 0 : getConstantType(child, context);\n      if (constantType > 0) {\n        if (constantType >= 2) {\n          child.codegenNode.patchFlag = -1;\n          child.codegenNode = context.hoist(child.codegenNode);\n          hoistedCount++;\n          continue;\n        }\n      } else {\n        const codegenNode = child.codegenNode;\n        if (codegenNode.type === 13) {\n          const flag = codegenNode.patchFlag;\n          if ((flag === void 0 || flag === 512 || flag === 1) && getGeneratedPropsConstantType(child, context) >= 2) {\n            const props = getNodeProps(child);\n            if (props) {\n              codegenNode.props = context.hoist(props);\n            }\n          }\n          if (codegenNode.dynamicProps) {\n            codegenNode.dynamicProps = context.hoist(codegenNode.dynamicProps);\n          }\n        }\n      }\n    }\n    if (child.type === 1) {\n      const isComponent = child.tagType === 1;\n      if (isComponent) {\n        context.scopes.vSlot++;\n      }\n      walk(child, context);\n      if (isComponent) {\n        context.scopes.vSlot--;\n      }\n    } else if (child.type === 11) {\n      walk(child, context, child.children.length === 1);\n    } else if (child.type === 9) {\n      for (let i2 = 0; i2 < child.branches.length; i2++) {\n        walk(\n          child.branches[i2],\n          context,\n          child.branches[i2].children.length === 1\n        );\n      }\n    }\n  }\n  if (hoistedCount && context.transformHoist) {\n    context.transformHoist(children, context, node);\n  }\n  if (hoistedCount && hoistedCount === originalCount && node.type === 1 && node.tagType === 0 && node.codegenNode && node.codegenNode.type === 13 && shared.isArray(node.codegenNode.children)) {\n    const hoisted = context.hoist(\n      createArrayExpression(node.codegenNode.children)\n    );\n    if (context.hmr) {\n      hoisted.content = `[...${hoisted.content}]`;\n    }\n    node.codegenNode.children = hoisted;\n  }\n}\nfunction getConstantType(node, context) {\n  const { constantCache } = context;\n  switch (node.type) {\n    case 1:\n      if (node.tagType !== 0) {\n        return 0;\n      }\n      const cached = constantCache.get(node);\n      if (cached !== void 0) {\n        return cached;\n      }\n      const codegenNode = node.codegenNode;\n      if (codegenNode.type !== 13) {\n        return 0;\n      }\n      if (codegenNode.isBlock && node.tag !== \"svg\" && node.tag !== \"foreignObject\" && node.tag !== \"math\") {\n        return 0;\n      }\n      if (codegenNode.patchFlag === void 0) {\n        let returnType2 = 3;\n        const generatedPropsType = getGeneratedPropsConstantType(node, context);\n        if (generatedPropsType === 0) {\n          constantCache.set(node, 0);\n          return 0;\n        }\n        if (generatedPropsType < returnType2) {\n          returnType2 = generatedPropsType;\n        }\n        for (let i = 0; i < node.children.length; i++) {\n          const childType = getConstantType(node.children[i], context);\n          if (childType === 0) {\n            constantCache.set(node, 0);\n            return 0;\n          }\n          if (childType < returnType2) {\n            returnType2 = childType;\n          }\n        }\n        if (returnType2 > 1) {\n          for (let i = 0; i < node.props.length; i++) {\n            const p = node.props[i];\n            if (p.type === 7 && p.name === \"bind\" && p.exp) {\n              const expType = getConstantType(p.exp, context);\n              if (expType === 0) {\n                constantCache.set(node, 0);\n                return 0;\n              }\n              if (expType < returnType2) {\n                returnType2 = expType;\n              }\n            }\n          }\n        }\n        if (codegenNode.isBlock) {\n          for (let i = 0; i < node.props.length; i++) {\n            const p = node.props[i];\n            if (p.type === 7) {\n              constantCache.set(node, 0);\n              return 0;\n            }\n          }\n          context.removeHelper(OPEN_BLOCK);\n          context.removeHelper(\n            getVNodeBlockHelper(context.inSSR, codegenNode.isComponent)\n          );\n          codegenNode.isBlock = false;\n          context.helper(getVNodeHelper(context.inSSR, codegenNode.isComponent));\n        }\n        constantCache.set(node, returnType2);\n        return returnType2;\n      } else {\n        constantCache.set(node, 0);\n        return 0;\n      }\n    case 2:\n    case 3:\n      return 3;\n    case 9:\n    case 11:\n    case 10:\n      return 0;\n    case 5:\n    case 12:\n      return getConstantType(node.content, context);\n    case 4:\n      return node.constType;\n    case 8:\n      let returnType = 3;\n      for (let i = 0; i < node.children.length; i++) {\n        const child = node.children[i];\n        if (shared.isString(child) || shared.isSymbol(child)) {\n          continue;\n        }\n        const childType = getConstantType(child, context);\n        if (childType === 0) {\n          return 0;\n        } else if (childType < returnType) {\n          returnType = childType;\n        }\n      }\n      return returnType;\n    default:\n      return 0;\n  }\n}\nconst allowHoistedHelperSet = /* @__PURE__ */ new Set([\n  NORMALIZE_CLASS,\n  NORMALIZE_STYLE,\n  NORMALIZE_PROPS,\n  GUARD_REACTIVE_PROPS\n]);\nfunction getConstantTypeOfHelperCall(value, context) {\n  if (value.type === 14 && !shared.isString(value.callee) && allowHoistedHelperSet.has(value.callee)) {\n    const arg = value.arguments[0];\n    if (arg.type === 4) {\n      return getConstantType(arg, context);\n    } else if (arg.type === 14) {\n      return getConstantTypeOfHelperCall(arg, context);\n    }\n  }\n  return 0;\n}\nfunction getGeneratedPropsConstantType(node, context) {\n  let returnType = 3;\n  const props = getNodeProps(node);\n  if (props && props.type === 15) {\n    const { properties } = props;\n    for (let i = 0; i < properties.length; i++) {\n      const { key, value } = properties[i];\n      const keyType = getConstantType(key, context);\n      if (keyType === 0) {\n        return keyType;\n      }\n      if (keyType < returnType) {\n        returnType = keyType;\n      }\n      let valueType;\n      if (value.type === 4) {\n        valueType = getConstantType(value, context);\n      } else if (value.type === 14) {\n        valueType = getConstantTypeOfHelperCall(value, context);\n      } else {\n        valueType = 0;\n      }\n      if (valueType === 0) {\n        return valueType;\n      }\n      if (valueType < returnType) {\n        returnType = valueType;\n      }\n    }\n  }\n  return returnType;\n}\nfunction getNodeProps(node) {\n  const codegenNode = node.codegenNode;\n  if (codegenNode.type === 13) {\n    return codegenNode.props;\n  }\n}\n\nfunction createTransformContext(root, {\n  filename = \"\",\n  prefixIdentifiers = false,\n  hoistStatic: hoistStatic2 = false,\n  hmr = false,\n  cacheHandlers = false,\n  nodeTransforms = [],\n  directiveTransforms = {},\n  transformHoist = null,\n  isBuiltInComponent = shared.NOOP,\n  isCustomElement = shared.NOOP,\n  expressionPlugins = [],\n  scopeId = null,\n  slotted = true,\n  ssr = false,\n  inSSR = false,\n  ssrCssVars = ``,\n  bindingMetadata = shared.EMPTY_OBJ,\n  inline = false,\n  isTS = false,\n  onError = defaultOnError,\n  onWarn = defaultOnWarn,\n  compatConfig\n}) {\n  const nameMatch = filename.replace(/\\?.*$/, \"\").match(/([^/\\\\]+)\\.\\w+$/);\n  const context = {\n    // options\n    filename,\n    selfName: nameMatch && shared.capitalize(shared.camelize(nameMatch[1])),\n    prefixIdentifiers,\n    hoistStatic: hoistStatic2,\n    hmr,\n    cacheHandlers,\n    nodeTransforms,\n    directiveTransforms,\n    transformHoist,\n    isBuiltInComponent,\n    isCustomElement,\n    expressionPlugins,\n    scopeId,\n    slotted,\n    ssr,\n    inSSR,\n    ssrCssVars,\n    bindingMetadata,\n    inline,\n    isTS,\n    onError,\n    onWarn,\n    compatConfig,\n    // state\n    root,\n    helpers: /* @__PURE__ */ new Map(),\n    components: /* @__PURE__ */ new Set(),\n    directives: /* @__PURE__ */ new Set(),\n    hoists: [],\n    imports: [],\n    constantCache: /* @__PURE__ */ new WeakMap(),\n    temps: 0,\n    cached: 0,\n    identifiers: /* @__PURE__ */ Object.create(null),\n    scopes: {\n      vFor: 0,\n      vSlot: 0,\n      vPre: 0,\n      vOnce: 0\n    },\n    parent: null,\n    grandParent: null,\n    currentNode: root,\n    childIndex: 0,\n    inVOnce: false,\n    // methods\n    helper(name) {\n      const count = context.helpers.get(name) || 0;\n      context.helpers.set(name, count + 1);\n      return name;\n    },\n    removeHelper(name) {\n      const count = context.helpers.get(name);\n      if (count) {\n        const currentCount = count - 1;\n        if (!currentCount) {\n          context.helpers.delete(name);\n        } else {\n          context.helpers.set(name, currentCount);\n        }\n      }\n    },\n    helperString(name) {\n      return `_${helperNameMap[context.helper(name)]}`;\n    },\n    replaceNode(node) {\n      {\n        if (!context.currentNode) {\n          throw new Error(`Node being replaced is already removed.`);\n        }\n        if (!context.parent) {\n          throw new Error(`Cannot replace root node.`);\n        }\n      }\n      context.parent.children[context.childIndex] = context.currentNode = node;\n    },\n    removeNode(node) {\n      if (!context.parent) {\n        throw new Error(`Cannot remove root node.`);\n      }\n      const list = context.parent.children;\n      const removalIndex = node ? list.indexOf(node) : context.currentNode ? context.childIndex : -1;\n      if (removalIndex < 0) {\n        throw new Error(`node being removed is not a child of current parent`);\n      }\n      if (!node || node === context.currentNode) {\n        context.currentNode = null;\n        context.onNodeRemoved();\n      } else {\n        if (context.childIndex > removalIndex) {\n          context.childIndex--;\n          context.onNodeRemoved();\n        }\n      }\n      context.parent.children.splice(removalIndex, 1);\n    },\n    onNodeRemoved: shared.NOOP,\n    addIdentifiers(exp) {\n      {\n        if (shared.isString(exp)) {\n          addId(exp);\n        } else if (exp.identifiers) {\n          exp.identifiers.forEach(addId);\n        } else if (exp.type === 4) {\n          addId(exp.content);\n        }\n      }\n    },\n    removeIdentifiers(exp) {\n      {\n        if (shared.isString(exp)) {\n          removeId(exp);\n        } else if (exp.identifiers) {\n          exp.identifiers.forEach(removeId);\n        } else if (exp.type === 4) {\n          removeId(exp.content);\n        }\n      }\n    },\n    hoist(exp) {\n      if (shared.isString(exp)) exp = createSimpleExpression(exp);\n      context.hoists.push(exp);\n      const identifier = createSimpleExpression(\n        `_hoisted_${context.hoists.length}`,\n        false,\n        exp.loc,\n        2\n      );\n      identifier.hoisted = exp;\n      return identifier;\n    },\n    cache(exp, isVNode = false) {\n      return createCacheExpression(context.cached++, exp, isVNode);\n    }\n  };\n  {\n    context.filters = /* @__PURE__ */ new Set();\n  }\n  function addId(id) {\n    const { identifiers } = context;\n    if (identifiers[id] === void 0) {\n      identifiers[id] = 0;\n    }\n    identifiers[id]++;\n  }\n  function removeId(id) {\n    context.identifiers[id]--;\n  }\n  return context;\n}\nfunction transform(root, options) {\n  const context = createTransformContext(root, options);\n  traverseNode(root, context);\n  if (options.hoistStatic) {\n    hoistStatic(root, context);\n  }\n  if (!options.ssr) {\n    createRootCodegen(root, context);\n  }\n  root.helpers = /* @__PURE__ */ new Set([...context.helpers.keys()]);\n  root.components = [...context.components];\n  root.directives = [...context.directives];\n  root.imports = context.imports;\n  root.hoists = context.hoists;\n  root.temps = context.temps;\n  root.cached = context.cached;\n  root.transformed = true;\n  {\n    root.filters = [...context.filters];\n  }\n}\nfunction createRootCodegen(root, context) {\n  const { helper } = context;\n  const { children } = root;\n  if (children.length === 1) {\n    const child = children[0];\n    if (isSingleElementRoot(root, child) && child.codegenNode) {\n      const codegenNode = child.codegenNode;\n      if (codegenNode.type === 13) {\n        convertToBlock(codegenNode, context);\n      }\n      root.codegenNode = codegenNode;\n    } else {\n      root.codegenNode = child;\n    }\n  } else if (children.length > 1) {\n    let patchFlag = 64;\n    let patchFlagText = shared.PatchFlagNames[64];\n    if (children.filter((c) => c.type !== 3).length === 1) {\n      patchFlag |= 2048;\n      patchFlagText += `, ${shared.PatchFlagNames[2048]}`;\n    }\n    root.codegenNode = createVNodeCall(\n      context,\n      helper(FRAGMENT),\n      void 0,\n      root.children,\n      patchFlag,\n      void 0,\n      void 0,\n      true,\n      void 0,\n      false\n    );\n  } else ;\n}\nfunction traverseChildren(parent, context) {\n  let i = 0;\n  const nodeRemoved = () => {\n    i--;\n  };\n  for (; i < parent.children.length; i++) {\n    const child = parent.children[i];\n    if (shared.isString(child)) continue;\n    context.grandParent = context.parent;\n    context.parent = parent;\n    context.childIndex = i;\n    context.onNodeRemoved = nodeRemoved;\n    traverseNode(child, context);\n  }\n}\nfunction traverseNode(node, context) {\n  context.currentNode = node;\n  const { nodeTransforms } = context;\n  const exitFns = [];\n  for (let i2 = 0; i2 < nodeTransforms.length; i2++) {\n    const onExit = nodeTransforms[i2](node, context);\n    if (onExit) {\n      if (shared.isArray(onExit)) {\n        exitFns.push(...onExit);\n      } else {\n        exitFns.push(onExit);\n      }\n    }\n    if (!context.currentNode) {\n      return;\n    } else {\n      node = context.currentNode;\n    }\n  }\n  switch (node.type) {\n    case 3:\n      if (!context.ssr) {\n        context.helper(CREATE_COMMENT);\n      }\n      break;\n    case 5:\n      if (!context.ssr) {\n        context.helper(TO_DISPLAY_STRING);\n      }\n      break;\n    case 9:\n      for (let i2 = 0; i2 < node.branches.length; i2++) {\n        traverseNode(node.branches[i2], context);\n      }\n      break;\n    case 10:\n    case 11:\n    case 1:\n    case 0:\n      traverseChildren(node, context);\n      break;\n  }\n  context.currentNode = node;\n  let i = exitFns.length;\n  while (i--) {\n    exitFns[i]();\n  }\n}\nfunction createStructuralDirectiveTransform(name, fn) {\n  const matches = shared.isString(name) ? (n) => n === name : (n) => name.test(n);\n  return (node, context) => {\n    if (node.type === 1) {\n      const { props } = node;\n      if (node.tagType === 3 && props.some(isVSlot)) {\n        return;\n      }\n      const exitFns = [];\n      for (let i = 0; i < props.length; i++) {\n        const prop = props[i];\n        if (prop.type === 7 && matches(prop.name)) {\n          props.splice(i, 1);\n          i--;\n          const onExit = fn(node, prop, context);\n          if (onExit) exitFns.push(onExit);\n        }\n      }\n      return exitFns;\n    }\n  };\n}\n\nconst PURE_ANNOTATION = `/*#__PURE__*/`;\nconst aliasHelper = (s) => `${helperNameMap[s]}: _${helperNameMap[s]}`;\nfunction createCodegenContext(ast, {\n  mode = \"function\",\n  prefixIdentifiers = mode === \"module\",\n  sourceMap = false,\n  filename = `template.vue.html`,\n  scopeId = null,\n  optimizeImports = false,\n  runtimeGlobalName = `Vue`,\n  runtimeModuleName = `vue`,\n  ssrRuntimeModuleName = \"vue/server-renderer\",\n  ssr = false,\n  isTS = false,\n  inSSR = false\n}) {\n  const context = {\n    mode,\n    prefixIdentifiers,\n    sourceMap,\n    filename,\n    scopeId,\n    optimizeImports,\n    runtimeGlobalName,\n    runtimeModuleName,\n    ssrRuntimeModuleName,\n    ssr,\n    isTS,\n    inSSR,\n    source: ast.source,\n    code: ``,\n    column: 1,\n    line: 1,\n    offset: 0,\n    indentLevel: 0,\n    pure: false,\n    map: void 0,\n    helper(key) {\n      return `_${helperNameMap[key]}`;\n    },\n    push(code, newlineIndex = -2 /* None */, node) {\n      context.code += code;\n      if (context.map) {\n        if (node) {\n          let name;\n          if (node.type === 4 && !node.isStatic) {\n            const content = node.content.replace(/^_ctx\\./, \"\");\n            if (content !== node.content && isSimpleIdentifier(content)) {\n              name = content;\n            }\n          }\n          addMapping(node.loc.start, name);\n        }\n        if (newlineIndex === -3 /* Unknown */) {\n          advancePositionWithMutation(context, code);\n        } else {\n          context.offset += code.length;\n          if (newlineIndex === -2 /* None */) {\n            context.column += code.length;\n          } else {\n            if (newlineIndex === -1 /* End */) {\n              newlineIndex = code.length - 1;\n            }\n            context.line++;\n            context.column = code.length - newlineIndex;\n          }\n        }\n        if (node && node.loc !== locStub) {\n          addMapping(node.loc.end);\n        }\n      }\n    },\n    indent() {\n      newline(++context.indentLevel);\n    },\n    deindent(withoutNewLine = false) {\n      if (withoutNewLine) {\n        --context.indentLevel;\n      } else {\n        newline(--context.indentLevel);\n      }\n    },\n    newline() {\n      newline(context.indentLevel);\n    }\n  };\n  function newline(n) {\n    context.push(\"\\n\" + `  `.repeat(n), 0 /* Start */);\n  }\n  function addMapping(loc, name = null) {\n    const { _names, _mappings } = context.map;\n    if (name !== null && !_names.has(name)) _names.add(name);\n    _mappings.add({\n      originalLine: loc.line,\n      originalColumn: loc.column - 1,\n      // source-map column is 0 based\n      generatedLine: context.line,\n      generatedColumn: context.column - 1,\n      source: filename,\n      name\n    });\n  }\n  if (sourceMap) {\n    context.map = new sourceMapJs.SourceMapGenerator();\n    context.map.setSourceContent(filename, context.source);\n    context.map._sources.add(filename);\n  }\n  return context;\n}\nfunction generate(ast, options = {}) {\n  const context = createCodegenContext(ast, options);\n  if (options.onContextCreated) options.onContextCreated(context);\n  const {\n    mode,\n    push,\n    prefixIdentifiers,\n    indent,\n    deindent,\n    newline,\n    scopeId,\n    ssr\n  } = context;\n  const helpers = Array.from(ast.helpers);\n  const hasHelpers = helpers.length > 0;\n  const useWithBlock = !prefixIdentifiers && mode !== \"module\";\n  const genScopeId = scopeId != null && mode === \"module\";\n  const isSetupInlined = !!options.inline;\n  const preambleContext = isSetupInlined ? createCodegenContext(ast, options) : context;\n  if (mode === \"module\") {\n    genModulePreamble(ast, preambleContext, genScopeId, isSetupInlined);\n  } else {\n    genFunctionPreamble(ast, preambleContext);\n  }\n  const functionName = ssr ? `ssrRender` : `render`;\n  const args = ssr ? [\"_ctx\", \"_push\", \"_parent\", \"_attrs\"] : [\"_ctx\", \"_cache\"];\n  if (options.bindingMetadata && !options.inline) {\n    args.push(\"$props\", \"$setup\", \"$data\", \"$options\");\n  }\n  const signature = options.isTS ? args.map((arg) => `${arg}: any`).join(\",\") : args.join(\", \");\n  if (isSetupInlined) {\n    push(`(${signature}) => {`);\n  } else {\n    push(`function ${functionName}(${signature}) {`);\n  }\n  indent();\n  if (useWithBlock) {\n    push(`with (_ctx) {`);\n    indent();\n    if (hasHelpers) {\n      push(\n        `const { ${helpers.map(aliasHelper).join(\", \")} } = _Vue\n`,\n        -1 /* End */\n      );\n      newline();\n    }\n  }\n  if (ast.components.length) {\n    genAssets(ast.components, \"component\", context);\n    if (ast.directives.length || ast.temps > 0) {\n      newline();\n    }\n  }\n  if (ast.directives.length) {\n    genAssets(ast.directives, \"directive\", context);\n    if (ast.temps > 0) {\n      newline();\n    }\n  }\n  if (ast.filters && ast.filters.length) {\n    newline();\n    genAssets(ast.filters, \"filter\", context);\n    newline();\n  }\n  if (ast.temps > 0) {\n    push(`let `);\n    for (let i = 0; i < ast.temps; i++) {\n      push(`${i > 0 ? `, ` : ``}_temp${i}`);\n    }\n  }\n  if (ast.components.length || ast.directives.length || ast.temps) {\n    push(`\n`, 0 /* Start */);\n    newline();\n  }\n  if (!ssr) {\n    push(`return `);\n  }\n  if (ast.codegenNode) {\n    genNode(ast.codegenNode, context);\n  } else {\n    push(`null`);\n  }\n  if (useWithBlock) {\n    deindent();\n    push(`}`);\n  }\n  deindent();\n  push(`}`);\n  return {\n    ast,\n    code: context.code,\n    preamble: isSetupInlined ? preambleContext.code : ``,\n    map: context.map ? context.map.toJSON() : void 0\n  };\n}\nfunction genFunctionPreamble(ast, context) {\n  const {\n    ssr,\n    prefixIdentifiers,\n    push,\n    newline,\n    runtimeModuleName,\n    runtimeGlobalName,\n    ssrRuntimeModuleName\n  } = context;\n  const VueBinding = ssr ? `require(${JSON.stringify(runtimeModuleName)})` : runtimeGlobalName;\n  const helpers = Array.from(ast.helpers);\n  if (helpers.length > 0) {\n    if (prefixIdentifiers) {\n      push(\n        `const { ${helpers.map(aliasHelper).join(\", \")} } = ${VueBinding}\n`,\n        -1 /* End */\n      );\n    } else {\n      push(`const _Vue = ${VueBinding}\n`, -1 /* End */);\n      if (ast.hoists.length) {\n        const staticHelpers = [\n          CREATE_VNODE,\n          CREATE_ELEMENT_VNODE,\n          CREATE_COMMENT,\n          CREATE_TEXT,\n          CREATE_STATIC\n        ].filter((helper) => helpers.includes(helper)).map(aliasHelper).join(\", \");\n        push(`const { ${staticHelpers} } = _Vue\n`, -1 /* End */);\n      }\n    }\n  }\n  if (ast.ssrHelpers && ast.ssrHelpers.length) {\n    push(\n      `const { ${ast.ssrHelpers.map(aliasHelper).join(\", \")} } = require(\"${ssrRuntimeModuleName}\")\n`,\n      -1 /* End */\n    );\n  }\n  genHoists(ast.hoists, context);\n  newline();\n  push(`return `);\n}\nfunction genModulePreamble(ast, context, genScopeId, inline) {\n  const {\n    push,\n    newline,\n    optimizeImports,\n    runtimeModuleName,\n    ssrRuntimeModuleName\n  } = context;\n  if (genScopeId && ast.hoists.length) {\n    ast.helpers.add(PUSH_SCOPE_ID);\n    ast.helpers.add(POP_SCOPE_ID);\n  }\n  if (ast.helpers.size) {\n    const helpers = Array.from(ast.helpers);\n    if (optimizeImports) {\n      push(\n        `import { ${helpers.map((s) => helperNameMap[s]).join(\", \")} } from ${JSON.stringify(runtimeModuleName)}\n`,\n        -1 /* End */\n      );\n      push(\n        `\n// Binding optimization for webpack code-split\nconst ${helpers.map((s) => `_${helperNameMap[s]} = ${helperNameMap[s]}`).join(\", \")}\n`,\n        -1 /* End */\n      );\n    } else {\n      push(\n        `import { ${helpers.map((s) => `${helperNameMap[s]} as _${helperNameMap[s]}`).join(\", \")} } from ${JSON.stringify(runtimeModuleName)}\n`,\n        -1 /* End */\n      );\n    }\n  }\n  if (ast.ssrHelpers && ast.ssrHelpers.length) {\n    push(\n      `import { ${ast.ssrHelpers.map((s) => `${helperNameMap[s]} as _${helperNameMap[s]}`).join(\", \")} } from \"${ssrRuntimeModuleName}\"\n`,\n      -1 /* End */\n    );\n  }\n  if (ast.imports.length) {\n    genImports(ast.imports, context);\n    newline();\n  }\n  genHoists(ast.hoists, context);\n  newline();\n  if (!inline) {\n    push(`export `);\n  }\n}\nfunction genAssets(assets, type, { helper, push, newline, isTS }) {\n  const resolver = helper(\n    type === \"filter\" ? RESOLVE_FILTER : type === \"component\" ? RESOLVE_COMPONENT : RESOLVE_DIRECTIVE\n  );\n  for (let i = 0; i < assets.length; i++) {\n    let id = assets[i];\n    const maybeSelfReference = id.endsWith(\"__self\");\n    if (maybeSelfReference) {\n      id = id.slice(0, -6);\n    }\n    push(\n      `const ${toValidAssetId(id, type)} = ${resolver}(${JSON.stringify(id)}${maybeSelfReference ? `, true` : ``})${isTS ? `!` : ``}`\n    );\n    if (i < assets.length - 1) {\n      newline();\n    }\n  }\n}\nfunction genHoists(hoists, context) {\n  if (!hoists.length) {\n    return;\n  }\n  context.pure = true;\n  const { push, newline, helper, scopeId, mode } = context;\n  const genScopeId = scopeId != null && mode !== \"function\";\n  newline();\n  if (genScopeId) {\n    const param = context.isTS ? \"(n: any)\" : \"n\";\n    push(\n      `const _withScopeId = ${param} => (${helper(\n        PUSH_SCOPE_ID\n      )}(\"${scopeId}\"),n=n(),${helper(POP_SCOPE_ID)}(),n)`\n    );\n    newline();\n  }\n  for (let i = 0; i < hoists.length; i++) {\n    const exp = hoists[i];\n    if (exp) {\n      const needScopeIdWrapper = genScopeId && exp.type === 13;\n      push(\n        `const _hoisted_${i + 1} = ${needScopeIdWrapper ? `${PURE_ANNOTATION} _withScopeId(() => ` : ``}`\n      );\n      genNode(exp, context);\n      if (needScopeIdWrapper) {\n        push(`)`);\n      }\n      newline();\n    }\n  }\n  context.pure = false;\n}\nfunction genImports(importsOptions, context) {\n  if (!importsOptions.length) {\n    return;\n  }\n  importsOptions.forEach((imports) => {\n    context.push(`import `);\n    genNode(imports.exp, context);\n    context.push(` from '${imports.path}'`);\n    context.newline();\n  });\n}\nfunction isText(n) {\n  return shared.isString(n) || n.type === 4 || n.type === 2 || n.type === 5 || n.type === 8;\n}\nfunction genNodeListAsArray(nodes, context) {\n  const multilines = nodes.length > 3 || nodes.some((n) => shared.isArray(n) || !isText(n));\n  context.push(`[`);\n  multilines && context.indent();\n  genNodeList(nodes, context, multilines);\n  multilines && context.deindent();\n  context.push(`]`);\n}\nfunction genNodeList(nodes, context, multilines = false, comma = true) {\n  const { push, newline } = context;\n  for (let i = 0; i < nodes.length; i++) {\n    const node = nodes[i];\n    if (shared.isString(node)) {\n      push(node, -3 /* Unknown */);\n    } else if (shared.isArray(node)) {\n      genNodeListAsArray(node, context);\n    } else {\n      genNode(node, context);\n    }\n    if (i < nodes.length - 1) {\n      if (multilines) {\n        comma && push(\",\");\n        newline();\n      } else {\n        comma && push(\", \");\n      }\n    }\n  }\n}\nfunction genNode(node, context) {\n  if (shared.isString(node)) {\n    context.push(node, -3 /* Unknown */);\n    return;\n  }\n  if (shared.isSymbol(node)) {\n    context.push(context.helper(node));\n    return;\n  }\n  switch (node.type) {\n    case 1:\n    case 9:\n    case 11:\n      assert(\n        node.codegenNode != null,\n        `Codegen node is missing for element/if/for node. Apply appropriate transforms first.`\n      );\n      genNode(node.codegenNode, context);\n      break;\n    case 2:\n      genText(node, context);\n      break;\n    case 4:\n      genExpression(node, context);\n      break;\n    case 5:\n      genInterpolation(node, context);\n      break;\n    case 12:\n      genNode(node.codegenNode, context);\n      break;\n    case 8:\n      genCompoundExpression(node, context);\n      break;\n    case 3:\n      genComment(node, context);\n      break;\n    case 13:\n      genVNodeCall(node, context);\n      break;\n    case 14:\n      genCallExpression(node, context);\n      break;\n    case 15:\n      genObjectExpression(node, context);\n      break;\n    case 17:\n      genArrayExpression(node, context);\n      break;\n    case 18:\n      genFunctionExpression(node, context);\n      break;\n    case 19:\n      genConditionalExpression(node, context);\n      break;\n    case 20:\n      genCacheExpression(node, context);\n      break;\n    case 21:\n      genNodeList(node.body, context, true, false);\n      break;\n    case 22:\n      genTemplateLiteral(node, context);\n      break;\n    case 23:\n      genIfStatement(node, context);\n      break;\n    case 24:\n      genAssignmentExpression(node, context);\n      break;\n    case 25:\n      genSequenceExpression(node, context);\n      break;\n    case 26:\n      genReturnStatement(node, context);\n      break;\n    case 10:\n      break;\n    default:\n      {\n        assert(false, `unhandled codegen node type: ${node.type}`);\n        const exhaustiveCheck = node;\n        return exhaustiveCheck;\n      }\n  }\n}\nfunction genText(node, context) {\n  context.push(JSON.stringify(node.content), -3 /* Unknown */, node);\n}\nfunction genExpression(node, context) {\n  const { content, isStatic } = node;\n  context.push(\n    isStatic ? JSON.stringify(content) : content,\n    -3 /* Unknown */,\n    node\n  );\n}\nfunction genInterpolation(node, context) {\n  const { push, helper, pure } = context;\n  if (pure) push(PURE_ANNOTATION);\n  push(`${helper(TO_DISPLAY_STRING)}(`);\n  genNode(node.content, context);\n  push(`)`);\n}\nfunction genCompoundExpression(node, context) {\n  for (let i = 0; i < node.children.length; i++) {\n    const child = node.children[i];\n    if (shared.isString(child)) {\n      context.push(child, -3 /* Unknown */);\n    } else {\n      genNode(child, context);\n    }\n  }\n}\nfunction genExpressionAsPropertyKey(node, context) {\n  const { push } = context;\n  if (node.type === 8) {\n    push(`[`);\n    genCompoundExpression(node, context);\n    push(`]`);\n  } else if (node.isStatic) {\n    const text = isSimpleIdentifier(node.content) ? node.content : JSON.stringify(node.content);\n    push(text, -2 /* None */, node);\n  } else {\n    push(`[${node.content}]`, -3 /* Unknown */, node);\n  }\n}\nfunction genComment(node, context) {\n  const { push, helper, pure } = context;\n  if (pure) {\n    push(PURE_ANNOTATION);\n  }\n  push(\n    `${helper(CREATE_COMMENT)}(${JSON.stringify(node.content)})`,\n    -3 /* Unknown */,\n    node\n  );\n}\nfunction genVNodeCall(node, context) {\n  const { push, helper, pure } = context;\n  const {\n    tag,\n    props,\n    children,\n    patchFlag,\n    dynamicProps,\n    directives,\n    isBlock,\n    disableTracking,\n    isComponent\n  } = node;\n  let patchFlagString;\n  if (patchFlag) {\n    {\n      if (patchFlag < 0) {\n        patchFlagString = patchFlag + ` /* ${shared.PatchFlagNames[patchFlag]} */`;\n      } else {\n        const flagNames = Object.keys(shared.PatchFlagNames).map(Number).filter((n) => n > 0 && patchFlag & n).map((n) => shared.PatchFlagNames[n]).join(`, `);\n        patchFlagString = patchFlag + ` /* ${flagNames} */`;\n      }\n    }\n  }\n  if (directives) {\n    push(helper(WITH_DIRECTIVES) + `(`);\n  }\n  if (isBlock) {\n    push(`(${helper(OPEN_BLOCK)}(${disableTracking ? `true` : ``}), `);\n  }\n  if (pure) {\n    push(PURE_ANNOTATION);\n  }\n  const callHelper = isBlock ? getVNodeBlockHelper(context.inSSR, isComponent) : getVNodeHelper(context.inSSR, isComponent);\n  push(helper(callHelper) + `(`, -2 /* None */, node);\n  genNodeList(\n    genNullableArgs([tag, props, children, patchFlagString, dynamicProps]),\n    context\n  );\n  push(`)`);\n  if (isBlock) {\n    push(`)`);\n  }\n  if (directives) {\n    push(`, `);\n    genNode(directives, context);\n    push(`)`);\n  }\n}\nfunction genNullableArgs(args) {\n  let i = args.length;\n  while (i--) {\n    if (args[i] != null) break;\n  }\n  return args.slice(0, i + 1).map((arg) => arg || `null`);\n}\nfunction genCallExpression(node, context) {\n  const { push, helper, pure } = context;\n  const callee = shared.isString(node.callee) ? node.callee : helper(node.callee);\n  if (pure) {\n    push(PURE_ANNOTATION);\n  }\n  push(callee + `(`, -2 /* None */, node);\n  genNodeList(node.arguments, context);\n  push(`)`);\n}\nfunction genObjectExpression(node, context) {\n  const { push, indent, deindent, newline } = context;\n  const { properties } = node;\n  if (!properties.length) {\n    push(`{}`, -2 /* None */, node);\n    return;\n  }\n  const multilines = properties.length > 1 || properties.some((p) => p.value.type !== 4);\n  push(multilines ? `{` : `{ `);\n  multilines && indent();\n  for (let i = 0; i < properties.length; i++) {\n    const { key, value } = properties[i];\n    genExpressionAsPropertyKey(key, context);\n    push(`: `);\n    genNode(value, context);\n    if (i < properties.length - 1) {\n      push(`,`);\n      newline();\n    }\n  }\n  multilines && deindent();\n  push(multilines ? `}` : ` }`);\n}\nfunction genArrayExpression(node, context) {\n  genNodeListAsArray(node.elements, context);\n}\nfunction genFunctionExpression(node, context) {\n  const { push, indent, deindent } = context;\n  const { params, returns, body, newline, isSlot } = node;\n  if (isSlot) {\n    push(`_${helperNameMap[WITH_CTX]}(`);\n  }\n  push(`(`, -2 /* None */, node);\n  if (shared.isArray(params)) {\n    genNodeList(params, context);\n  } else if (params) {\n    genNode(params, context);\n  }\n  push(`) => `);\n  if (newline || body) {\n    push(`{`);\n    indent();\n  }\n  if (returns) {\n    if (newline) {\n      push(`return `);\n    }\n    if (shared.isArray(returns)) {\n      genNodeListAsArray(returns, context);\n    } else {\n      genNode(returns, context);\n    }\n  } else if (body) {\n    genNode(body, context);\n  }\n  if (newline || body) {\n    deindent();\n    push(`}`);\n  }\n  if (isSlot) {\n    if (node.isNonScopedSlot) {\n      push(`, undefined, true`);\n    }\n    push(`)`);\n  }\n}\nfunction genConditionalExpression(node, context) {\n  const { test, consequent, alternate, newline: needNewline } = node;\n  const { push, indent, deindent, newline } = context;\n  if (test.type === 4) {\n    const needsParens = !isSimpleIdentifier(test.content);\n    needsParens && push(`(`);\n    genExpression(test, context);\n    needsParens && push(`)`);\n  } else {\n    push(`(`);\n    genNode(test, context);\n    push(`)`);\n  }\n  needNewline && indent();\n  context.indentLevel++;\n  needNewline || push(` `);\n  push(`? `);\n  genNode(consequent, context);\n  context.indentLevel--;\n  needNewline && newline();\n  needNewline || push(` `);\n  push(`: `);\n  const isNested = alternate.type === 19;\n  if (!isNested) {\n    context.indentLevel++;\n  }\n  genNode(alternate, context);\n  if (!isNested) {\n    context.indentLevel--;\n  }\n  needNewline && deindent(\n    true\n    /* without newline */\n  );\n}\nfunction genCacheExpression(node, context) {\n  const { push, helper, indent, deindent, newline } = context;\n  push(`_cache[${node.index}] || (`);\n  if (node.isVOnce) {\n    indent();\n    push(`${helper(SET_BLOCK_TRACKING)}(-1),`);\n    newline();\n    push(`(`);\n  }\n  push(`_cache[${node.index}] = `);\n  genNode(node.value, context);\n  if (node.isVOnce) {\n    push(`).cacheIndex = ${node.index},`);\n    newline();\n    push(`${helper(SET_BLOCK_TRACKING)}(1),`);\n    newline();\n    push(`_cache[${node.index}]`);\n    deindent();\n  }\n  push(`)`);\n}\nfunction genTemplateLiteral(node, context) {\n  const { push, indent, deindent } = context;\n  push(\"`\");\n  const l = node.elements.length;\n  const multilines = l > 3;\n  for (let i = 0; i < l; i++) {\n    const e = node.elements[i];\n    if (shared.isString(e)) {\n      push(e.replace(/(`|\\$|\\\\)/g, \"\\\\$1\"), -3 /* Unknown */);\n    } else {\n      push(\"${\");\n      if (multilines) indent();\n      genNode(e, context);\n      if (multilines) deindent();\n      push(\"}\");\n    }\n  }\n  push(\"`\");\n}\nfunction genIfStatement(node, context) {\n  const { push, indent, deindent } = context;\n  const { test, consequent, alternate } = node;\n  push(`if (`);\n  genNode(test, context);\n  push(`) {`);\n  indent();\n  genNode(consequent, context);\n  deindent();\n  push(`}`);\n  if (alternate) {\n    push(` else `);\n    if (alternate.type === 23) {\n      genIfStatement(alternate, context);\n    } else {\n      push(`{`);\n      indent();\n      genNode(alternate, context);\n      deindent();\n      push(`}`);\n    }\n  }\n}\nfunction genAssignmentExpression(node, context) {\n  genNode(node.left, context);\n  context.push(` = `);\n  genNode(node.right, context);\n}\nfunction genSequenceExpression(node, context) {\n  context.push(`(`);\n  genNodeList(node.expressions, context);\n  context.push(`)`);\n}\nfunction genReturnStatement({ returns }, context) {\n  context.push(`return `);\n  if (shared.isArray(returns)) {\n    genNodeListAsArray(returns, context);\n  } else {\n    genNode(returns, context);\n  }\n}\n\nconst isLiteralWhitelisted = /* @__PURE__ */ shared.makeMap(\"true,false,null,this\");\nconst transformExpression = (node, context) => {\n  if (node.type === 5) {\n    node.content = processExpression(\n      node.content,\n      context\n    );\n  } else if (node.type === 1) {\n    for (let i = 0; i < node.props.length; i++) {\n      const dir = node.props[i];\n      if (dir.type === 7 && dir.name !== \"for\") {\n        const exp = dir.exp;\n        const arg = dir.arg;\n        if (exp && exp.type === 4 && !(dir.name === \"on\" && arg)) {\n          dir.exp = processExpression(\n            exp,\n            context,\n            // slot args must be processed as function params\n            dir.name === \"slot\"\n          );\n        }\n        if (arg && arg.type === 4 && !arg.isStatic) {\n          dir.arg = processExpression(arg, context);\n        }\n      }\n    }\n  }\n};\nfunction processExpression(node, context, asParams = false, asRawStatements = false, localVars = Object.create(context.identifiers)) {\n  if (!context.prefixIdentifiers || !node.content.trim()) {\n    return node;\n  }\n  const { inline, bindingMetadata } = context;\n  const rewriteIdentifier = (raw, parent, id) => {\n    const type = shared.hasOwn(bindingMetadata, raw) && bindingMetadata[raw];\n    if (inline) {\n      const isAssignmentLVal = parent && parent.type === \"AssignmentExpression\" && parent.left === id;\n      const isUpdateArg = parent && parent.type === \"UpdateExpression\" && parent.argument === id;\n      const isDestructureAssignment = parent && isInDestructureAssignment(parent, parentStack);\n      const isNewExpression = parent && isInNewExpression(parentStack);\n      const wrapWithUnref = (raw2) => {\n        const wrapped = `${context.helperString(UNREF)}(${raw2})`;\n        return isNewExpression ? `(${wrapped})` : wrapped;\n      };\n      if (isConst(type) || type === \"setup-reactive-const\" || localVars[raw]) {\n        return raw;\n      } else if (type === \"setup-ref\") {\n        return `${raw}.value`;\n      } else if (type === \"setup-maybe-ref\") {\n        return isAssignmentLVal || isUpdateArg || isDestructureAssignment ? `${raw}.value` : wrapWithUnref(raw);\n      } else if (type === \"setup-let\") {\n        if (isAssignmentLVal) {\n          const { right: rVal, operator } = parent;\n          const rExp = rawExp.slice(rVal.start - 1, rVal.end - 1);\n          const rExpString = stringifyExpression(\n            processExpression(\n              createSimpleExpression(rExp, false),\n              context,\n              false,\n              false,\n              knownIds\n            )\n          );\n          return `${context.helperString(IS_REF)}(${raw})${context.isTS ? ` //@ts-ignore\n` : ``} ? ${raw}.value ${operator} ${rExpString} : ${raw}`;\n        } else if (isUpdateArg) {\n          id.start = parent.start;\n          id.end = parent.end;\n          const { prefix: isPrefix, operator } = parent;\n          const prefix = isPrefix ? operator : ``;\n          const postfix = isPrefix ? `` : operator;\n          return `${context.helperString(IS_REF)}(${raw})${context.isTS ? ` //@ts-ignore\n` : ``} ? ${prefix}${raw}.value${postfix} : ${prefix}${raw}${postfix}`;\n        } else if (isDestructureAssignment) {\n          return raw;\n        } else {\n          return wrapWithUnref(raw);\n        }\n      } else if (type === \"props\") {\n        return shared.genPropsAccessExp(raw);\n      } else if (type === \"props-aliased\") {\n        return shared.genPropsAccessExp(bindingMetadata.__propsAliases[raw]);\n      }\n    } else {\n      if (type && type.startsWith(\"setup\") || type === \"literal-const\") {\n        return `$setup.${raw}`;\n      } else if (type === \"props-aliased\") {\n        return `$props['${bindingMetadata.__propsAliases[raw]}']`;\n      } else if (type) {\n        return `$${type}.${raw}`;\n      }\n    }\n    return `_ctx.${raw}`;\n  };\n  const rawExp = node.content;\n  let ast = node.ast;\n  if (ast === false) {\n    return node;\n  }\n  if (ast === null || !ast && isSimpleIdentifier(rawExp)) {\n    const isScopeVarReference = context.identifiers[rawExp];\n    const isAllowedGlobal = shared.isGloballyAllowed(rawExp);\n    const isLiteral = isLiteralWhitelisted(rawExp);\n    if (!asParams && !isScopeVarReference && !isLiteral && (!isAllowedGlobal || bindingMetadata[rawExp])) {\n      if (isConst(bindingMetadata[rawExp])) {\n        node.constType = 1;\n      }\n      node.content = rewriteIdentifier(rawExp);\n    } else if (!isScopeVarReference) {\n      if (isLiteral) {\n        node.constType = 3;\n      } else {\n        node.constType = 2;\n      }\n    }\n    return node;\n  }\n  if (!ast) {\n    const source = asRawStatements ? ` ${rawExp} ` : `(${rawExp})${asParams ? `=>{}` : ``}`;\n    try {\n      ast = parser.parseExpression(source, {\n        sourceType: \"module\",\n        plugins: context.expressionPlugins\n      });\n    } catch (e) {\n      context.onError(\n        createCompilerError(\n          45,\n          node.loc,\n          void 0,\n          e.message\n        )\n      );\n      return node;\n    }\n  }\n  const ids = [];\n  const parentStack = [];\n  const knownIds = Object.create(context.identifiers);\n  walkIdentifiers(\n    ast,\n    (node2, parent, _, isReferenced, isLocal) => {\n      if (isStaticPropertyKey(node2, parent)) {\n        return;\n      }\n      if (node2.name.startsWith(\"_filter_\")) {\n        return;\n      }\n      const needPrefix = isReferenced && canPrefix(node2);\n      if (needPrefix && !isLocal) {\n        if (isStaticProperty(parent) && parent.shorthand) {\n          node2.prefix = `${node2.name}: `;\n        }\n        node2.name = rewriteIdentifier(node2.name, parent, node2);\n        ids.push(node2);\n      } else {\n        if (!(needPrefix && isLocal) && (!parent || parent.type !== \"CallExpression\" && parent.type !== \"NewExpression\" && parent.type !== \"MemberExpression\")) {\n          node2.isConstant = true;\n        }\n        ids.push(node2);\n      }\n    },\n    true,\n    // invoke on ALL identifiers\n    parentStack,\n    knownIds\n  );\n  const children = [];\n  ids.sort((a, b) => a.start - b.start);\n  ids.forEach((id, i) => {\n    const start = id.start - 1;\n    const end = id.end - 1;\n    const last = ids[i - 1];\n    const leadingText = rawExp.slice(last ? last.end - 1 : 0, start);\n    if (leadingText.length || id.prefix) {\n      children.push(leadingText + (id.prefix || ``));\n    }\n    const source = rawExp.slice(start, end);\n    children.push(\n      createSimpleExpression(\n        id.name,\n        false,\n        {\n          start: advancePositionWithClone(node.loc.start, source, start),\n          end: advancePositionWithClone(node.loc.start, source, end),\n          source\n        },\n        id.isConstant ? 3 : 0\n      )\n    );\n    if (i === ids.length - 1 && end < rawExp.length) {\n      children.push(rawExp.slice(end));\n    }\n  });\n  let ret;\n  if (children.length) {\n    ret = createCompoundExpression(children, node.loc);\n    ret.ast = ast;\n  } else {\n    ret = node;\n    ret.constType = 3;\n  }\n  ret.identifiers = Object.keys(knownIds);\n  return ret;\n}\nfunction canPrefix(id) {\n  if (shared.isGloballyAllowed(id.name)) {\n    return false;\n  }\n  if (id.name === \"require\") {\n    return false;\n  }\n  return true;\n}\nfunction stringifyExpression(exp) {\n  if (shared.isString(exp)) {\n    return exp;\n  } else if (exp.type === 4) {\n    return exp.content;\n  } else {\n    return exp.children.map(stringifyExpression).join(\"\");\n  }\n}\nfunction isConst(type) {\n  return type === \"setup-const\" || type === \"literal-const\";\n}\n\nconst transformIf = createStructuralDirectiveTransform(\n  /^(if|else|else-if)$/,\n  (node, dir, context) => {\n    return processIf(node, dir, context, (ifNode, branch, isRoot) => {\n      const siblings = context.parent.children;\n      let i = siblings.indexOf(ifNode);\n      let key = 0;\n      while (i-- >= 0) {\n        const sibling = siblings[i];\n        if (sibling && sibling.type === 9) {\n          key += sibling.branches.length;\n        }\n      }\n      return () => {\n        if (isRoot) {\n          ifNode.codegenNode = createCodegenNodeForBranch(\n            branch,\n            key,\n            context\n          );\n        } else {\n          const parentCondition = getParentCondition(ifNode.codegenNode);\n          parentCondition.alternate = createCodegenNodeForBranch(\n            branch,\n            key + ifNode.branches.length - 1,\n            context\n          );\n        }\n      };\n    });\n  }\n);\nfunction processIf(node, dir, context, processCodegen) {\n  if (dir.name !== \"else\" && (!dir.exp || !dir.exp.content.trim())) {\n    const loc = dir.exp ? dir.exp.loc : node.loc;\n    context.onError(\n      createCompilerError(28, dir.loc)\n    );\n    dir.exp = createSimpleExpression(`true`, false, loc);\n  }\n  if (context.prefixIdentifiers && dir.exp) {\n    dir.exp = processExpression(dir.exp, context);\n  }\n  if (dir.name === \"if\") {\n    const branch = createIfBranch(node, dir);\n    const ifNode = {\n      type: 9,\n      loc: node.loc,\n      branches: [branch]\n    };\n    context.replaceNode(ifNode);\n    if (processCodegen) {\n      return processCodegen(ifNode, branch, true);\n    }\n  } else {\n    const siblings = context.parent.children;\n    const comments = [];\n    let i = siblings.indexOf(node);\n    while (i-- >= -1) {\n      const sibling = siblings[i];\n      if (sibling && sibling.type === 3) {\n        context.removeNode(sibling);\n        comments.unshift(sibling);\n        continue;\n      }\n      if (sibling && sibling.type === 2 && !sibling.content.trim().length) {\n        context.removeNode(sibling);\n        continue;\n      }\n      if (sibling && sibling.type === 9) {\n        if (dir.name === \"else-if\" && sibling.branches[sibling.branches.length - 1].condition === void 0) {\n          context.onError(\n            createCompilerError(30, node.loc)\n          );\n        }\n        context.removeNode();\n        const branch = createIfBranch(node, dir);\n        if (comments.length && // #3619 ignore comments if the v-if is direct child of <transition>\n        !(context.parent && context.parent.type === 1 && (context.parent.tag === \"transition\" || context.parent.tag === \"Transition\"))) {\n          branch.children = [...comments, ...branch.children];\n        }\n        {\n          const key = branch.userKey;\n          if (key) {\n            sibling.branches.forEach(({ userKey }) => {\n              if (isSameKey(userKey, key)) {\n                context.onError(\n                  createCompilerError(\n                    29,\n                    branch.userKey.loc\n                  )\n                );\n              }\n            });\n          }\n        }\n        sibling.branches.push(branch);\n        const onExit = processCodegen && processCodegen(sibling, branch, false);\n        traverseNode(branch, context);\n        if (onExit) onExit();\n        context.currentNode = null;\n      } else {\n        context.onError(\n          createCompilerError(30, node.loc)\n        );\n      }\n      break;\n    }\n  }\n}\nfunction createIfBranch(node, dir) {\n  const isTemplateIf = node.tagType === 3;\n  return {\n    type: 10,\n    loc: node.loc,\n    condition: dir.name === \"else\" ? void 0 : dir.exp,\n    children: isTemplateIf && !findDir(node, \"for\") ? node.children : [node],\n    userKey: findProp(node, `key`),\n    isTemplateIf\n  };\n}\nfunction createCodegenNodeForBranch(branch, keyIndex, context) {\n  if (branch.condition) {\n    return createConditionalExpression(\n      branch.condition,\n      createChildrenCodegenNode(branch, keyIndex, context),\n      // make sure to pass in asBlock: true so that the comment node call\n      // closes the current block.\n      createCallExpression(context.helper(CREATE_COMMENT), [\n        '\"v-if\"' ,\n        \"true\"\n      ])\n    );\n  } else {\n    return createChildrenCodegenNode(branch, keyIndex, context);\n  }\n}\nfunction createChildrenCodegenNode(branch, keyIndex, context) {\n  const { helper } = context;\n  const keyProperty = createObjectProperty(\n    `key`,\n    createSimpleExpression(\n      `${keyIndex}`,\n      false,\n      locStub,\n      2\n    )\n  );\n  const { children } = branch;\n  const firstChild = children[0];\n  const needFragmentWrapper = children.length !== 1 || firstChild.type !== 1;\n  if (needFragmentWrapper) {\n    if (children.length === 1 && firstChild.type === 11) {\n      const vnodeCall = firstChild.codegenNode;\n      injectProp(vnodeCall, keyProperty, context);\n      return vnodeCall;\n    } else {\n      let patchFlag = 64;\n      let patchFlagText = shared.PatchFlagNames[64];\n      if (!branch.isTemplateIf && children.filter((c) => c.type !== 3).length === 1) {\n        patchFlag |= 2048;\n        patchFlagText += `, ${shared.PatchFlagNames[2048]}`;\n      }\n      return createVNodeCall(\n        context,\n        helper(FRAGMENT),\n        createObjectExpression([keyProperty]),\n        children,\n        patchFlag,\n        void 0,\n        void 0,\n        true,\n        false,\n        false,\n        branch.loc\n      );\n    }\n  } else {\n    const ret = firstChild.codegenNode;\n    const vnodeCall = getMemoedVNodeCall(ret);\n    if (vnodeCall.type === 13) {\n      convertToBlock(vnodeCall, context);\n    }\n    injectProp(vnodeCall, keyProperty, context);\n    return ret;\n  }\n}\nfunction isSameKey(a, b) {\n  if (!a || a.type !== b.type) {\n    return false;\n  }\n  if (a.type === 6) {\n    if (a.value.content !== b.value.content) {\n      return false;\n    }\n  } else {\n    const exp = a.exp;\n    const branchExp = b.exp;\n    if (exp.type !== branchExp.type) {\n      return false;\n    }\n    if (exp.type !== 4 || exp.isStatic !== branchExp.isStatic || exp.content !== branchExp.content) {\n      return false;\n    }\n  }\n  return true;\n}\nfunction getParentCondition(node) {\n  while (true) {\n    if (node.type === 19) {\n      if (node.alternate.type === 19) {\n        node = node.alternate;\n      } else {\n        return node;\n      }\n    } else if (node.type === 20) {\n      node = node.value;\n    }\n  }\n}\n\nconst transformBind = (dir, _node, context) => {\n  const { modifiers, loc } = dir;\n  const arg = dir.arg;\n  let { exp } = dir;\n  if (exp && exp.type === 4 && !exp.content.trim()) {\n    {\n      context.onError(\n        createCompilerError(34, loc)\n      );\n      return {\n        props: [\n          createObjectProperty(arg, createSimpleExpression(\"\", true, loc))\n        ]\n      };\n    }\n  }\n  if (!exp) {\n    if (arg.type !== 4 || !arg.isStatic) {\n      context.onError(\n        createCompilerError(\n          52,\n          arg.loc\n        )\n      );\n      return {\n        props: [\n          createObjectProperty(arg, createSimpleExpression(\"\", true, loc))\n        ]\n      };\n    }\n    transformBindShorthand(dir, context);\n    exp = dir.exp;\n  }\n  if (arg.type !== 4) {\n    arg.children.unshift(`(`);\n    arg.children.push(`) || \"\"`);\n  } else if (!arg.isStatic) {\n    arg.content = `${arg.content} || \"\"`;\n  }\n  if (modifiers.includes(\"camel\")) {\n    if (arg.type === 4) {\n      if (arg.isStatic) {\n        arg.content = shared.camelize(arg.content);\n      } else {\n        arg.content = `${context.helperString(CAMELIZE)}(${arg.content})`;\n      }\n    } else {\n      arg.children.unshift(`${context.helperString(CAMELIZE)}(`);\n      arg.children.push(`)`);\n    }\n  }\n  if (!context.inSSR) {\n    if (modifiers.includes(\"prop\")) {\n      injectPrefix(arg, \".\");\n    }\n    if (modifiers.includes(\"attr\")) {\n      injectPrefix(arg, \"^\");\n    }\n  }\n  return {\n    props: [createObjectProperty(arg, exp)]\n  };\n};\nconst transformBindShorthand = (dir, context) => {\n  const arg = dir.arg;\n  const propName = shared.camelize(arg.content);\n  dir.exp = createSimpleExpression(propName, false, arg.loc);\n  {\n    dir.exp = processExpression(dir.exp, context);\n  }\n};\nconst injectPrefix = (arg, prefix) => {\n  if (arg.type === 4) {\n    if (arg.isStatic) {\n      arg.content = prefix + arg.content;\n    } else {\n      arg.content = `\\`${prefix}\\${${arg.content}}\\``;\n    }\n  } else {\n    arg.children.unshift(`'${prefix}' + (`);\n    arg.children.push(`)`);\n  }\n};\n\nconst transformFor = createStructuralDirectiveTransform(\n  \"for\",\n  (node, dir, context) => {\n    const { helper, removeHelper } = context;\n    return processFor(node, dir, context, (forNode) => {\n      const renderExp = createCallExpression(helper(RENDER_LIST), [\n        forNode.source\n      ]);\n      const isTemplate = isTemplateNode(node);\n      const memo = findDir(node, \"memo\");\n      const keyProp = findProp(node, `key`, false, true);\n      if (keyProp && keyProp.type === 7 && !keyProp.exp) {\n        transformBindShorthand(keyProp, context);\n      }\n      const keyExp = keyProp && (keyProp.type === 6 ? keyProp.value ? createSimpleExpression(keyProp.value.content, true) : void 0 : keyProp.exp);\n      const keyProperty = keyProp && keyExp ? createObjectProperty(`key`, keyExp) : null;\n      if (isTemplate) {\n        if (memo) {\n          memo.exp = processExpression(\n            memo.exp,\n            context\n          );\n        }\n        if (keyProperty && keyProp.type !== 6) {\n          keyProperty.value = processExpression(\n            keyProperty.value,\n            context\n          );\n        }\n      }\n      const isStableFragment = forNode.source.type === 4 && forNode.source.constType > 0;\n      const fragmentFlag = isStableFragment ? 64 : keyProp ? 128 : 256;\n      forNode.codegenNode = createVNodeCall(\n        context,\n        helper(FRAGMENT),\n        void 0,\n        renderExp,\n        fragmentFlag,\n        void 0,\n        void 0,\n        true,\n        !isStableFragment,\n        false,\n        node.loc\n      );\n      return () => {\n        let childBlock;\n        const { children } = forNode;\n        if (isTemplate) {\n          node.children.some((c) => {\n            if (c.type === 1) {\n              const key = findProp(c, \"key\");\n              if (key) {\n                context.onError(\n                  createCompilerError(\n                    33,\n                    key.loc\n                  )\n                );\n                return true;\n              }\n            }\n          });\n        }\n        const needFragmentWrapper = children.length !== 1 || children[0].type !== 1;\n        const slotOutlet = isSlotOutlet(node) ? node : isTemplate && node.children.length === 1 && isSlotOutlet(node.children[0]) ? node.children[0] : null;\n        if (slotOutlet) {\n          childBlock = slotOutlet.codegenNode;\n          if (isTemplate && keyProperty) {\n            injectProp(childBlock, keyProperty, context);\n          }\n        } else if (needFragmentWrapper) {\n          childBlock = createVNodeCall(\n            context,\n            helper(FRAGMENT),\n            keyProperty ? createObjectExpression([keyProperty]) : void 0,\n            node.children,\n            64,\n            void 0,\n            void 0,\n            true,\n            void 0,\n            false\n          );\n        } else {\n          childBlock = children[0].codegenNode;\n          if (isTemplate && keyProperty) {\n            injectProp(childBlock, keyProperty, context);\n          }\n          if (childBlock.isBlock !== !isStableFragment) {\n            if (childBlock.isBlock) {\n              removeHelper(OPEN_BLOCK);\n              removeHelper(\n                getVNodeBlockHelper(context.inSSR, childBlock.isComponent)\n              );\n            } else {\n              removeHelper(\n                getVNodeHelper(context.inSSR, childBlock.isComponent)\n              );\n            }\n          }\n          childBlock.isBlock = !isStableFragment;\n          if (childBlock.isBlock) {\n            helper(OPEN_BLOCK);\n            helper(getVNodeBlockHelper(context.inSSR, childBlock.isComponent));\n          } else {\n            helper(getVNodeHelper(context.inSSR, childBlock.isComponent));\n          }\n        }\n        if (memo) {\n          const loop = createFunctionExpression(\n            createForLoopParams(forNode.parseResult, [\n              createSimpleExpression(`_cached`)\n            ])\n          );\n          loop.body = createBlockStatement([\n            createCompoundExpression([`const _memo = (`, memo.exp, `)`]),\n            createCompoundExpression([\n              `if (_cached`,\n              ...keyExp ? [` && _cached.key === `, keyExp] : [],\n              ` && ${context.helperString(\n                IS_MEMO_SAME\n              )}(_cached, _memo)) return _cached`\n            ]),\n            createCompoundExpression([`const _item = `, childBlock]),\n            createSimpleExpression(`_item.memo = _memo`),\n            createSimpleExpression(`return _item`)\n          ]);\n          renderExp.arguments.push(\n            loop,\n            createSimpleExpression(`_cache`),\n            createSimpleExpression(String(context.cached++))\n          );\n        } else {\n          renderExp.arguments.push(\n            createFunctionExpression(\n              createForLoopParams(forNode.parseResult),\n              childBlock,\n              true\n            )\n          );\n        }\n      };\n    });\n  }\n);\nfunction processFor(node, dir, context, processCodegen) {\n  if (!dir.exp) {\n    context.onError(\n      createCompilerError(31, dir.loc)\n    );\n    return;\n  }\n  const parseResult = dir.forParseResult;\n  if (!parseResult) {\n    context.onError(\n      createCompilerError(32, dir.loc)\n    );\n    return;\n  }\n  finalizeForParseResult(parseResult, context);\n  const { addIdentifiers, removeIdentifiers, scopes } = context;\n  const { source, value, key, index } = parseResult;\n  const forNode = {\n    type: 11,\n    loc: dir.loc,\n    source,\n    valueAlias: value,\n    keyAlias: key,\n    objectIndexAlias: index,\n    parseResult,\n    children: isTemplateNode(node) ? node.children : [node]\n  };\n  context.replaceNode(forNode);\n  scopes.vFor++;\n  if (context.prefixIdentifiers) {\n    value && addIdentifiers(value);\n    key && addIdentifiers(key);\n    index && addIdentifiers(index);\n  }\n  const onExit = processCodegen && processCodegen(forNode);\n  return () => {\n    scopes.vFor--;\n    if (context.prefixIdentifiers) {\n      value && removeIdentifiers(value);\n      key && removeIdentifiers(key);\n      index && removeIdentifiers(index);\n    }\n    if (onExit) onExit();\n  };\n}\nfunction finalizeForParseResult(result, context) {\n  if (result.finalized) return;\n  if (context.prefixIdentifiers) {\n    result.source = processExpression(\n      result.source,\n      context\n    );\n    if (result.key) {\n      result.key = processExpression(\n        result.key,\n        context,\n        true\n      );\n    }\n    if (result.index) {\n      result.index = processExpression(\n        result.index,\n        context,\n        true\n      );\n    }\n    if (result.value) {\n      result.value = processExpression(\n        result.value,\n        context,\n        true\n      );\n    }\n  }\n  result.finalized = true;\n}\nfunction createForLoopParams({ value, key, index }, memoArgs = []) {\n  return createParamsList([value, key, index, ...memoArgs]);\n}\nfunction createParamsList(args) {\n  let i = args.length;\n  while (i--) {\n    if (args[i]) break;\n  }\n  return args.slice(0, i + 1).map((arg, i2) => arg || createSimpleExpression(`_`.repeat(i2 + 1), false));\n}\n\nconst defaultFallback = createSimpleExpression(`undefined`, false);\nconst trackSlotScopes = (node, context) => {\n  if (node.type === 1 && (node.tagType === 1 || node.tagType === 3)) {\n    const vSlot = findDir(node, \"slot\");\n    if (vSlot) {\n      const slotProps = vSlot.exp;\n      if (context.prefixIdentifiers) {\n        slotProps && context.addIdentifiers(slotProps);\n      }\n      context.scopes.vSlot++;\n      return () => {\n        if (context.prefixIdentifiers) {\n          slotProps && context.removeIdentifiers(slotProps);\n        }\n        context.scopes.vSlot--;\n      };\n    }\n  }\n};\nconst trackVForSlotScopes = (node, context) => {\n  let vFor;\n  if (isTemplateNode(node) && node.props.some(isVSlot) && (vFor = findDir(node, \"for\"))) {\n    const result = vFor.forParseResult;\n    if (result) {\n      finalizeForParseResult(result, context);\n      const { value, key, index } = result;\n      const { addIdentifiers, removeIdentifiers } = context;\n      value && addIdentifiers(value);\n      key && addIdentifiers(key);\n      index && addIdentifiers(index);\n      return () => {\n        value && removeIdentifiers(value);\n        key && removeIdentifiers(key);\n        index && removeIdentifiers(index);\n      };\n    }\n  }\n};\nconst buildClientSlotFn = (props, _vForExp, children, loc) => createFunctionExpression(\n  props,\n  children,\n  false,\n  true,\n  children.length ? children[0].loc : loc\n);\nfunction buildSlots(node, context, buildSlotFn = buildClientSlotFn) {\n  context.helper(WITH_CTX);\n  const { children, loc } = node;\n  const slotsProperties = [];\n  const dynamicSlots = [];\n  let hasDynamicSlots = context.scopes.vSlot > 0 || context.scopes.vFor > 0;\n  if (!context.ssr && context.prefixIdentifiers) {\n    hasDynamicSlots = hasScopeRef(node, context.identifiers);\n  }\n  const onComponentSlot = findDir(node, \"slot\", true);\n  if (onComponentSlot) {\n    const { arg, exp } = onComponentSlot;\n    if (arg && !isStaticExp(arg)) {\n      hasDynamicSlots = true;\n    }\n    slotsProperties.push(\n      createObjectProperty(\n        arg || createSimpleExpression(\"default\", true),\n        buildSlotFn(exp, void 0, children, loc)\n      )\n    );\n  }\n  let hasTemplateSlots = false;\n  let hasNamedDefaultSlot = false;\n  const implicitDefaultChildren = [];\n  const seenSlotNames = /* @__PURE__ */ new Set();\n  let conditionalBranchIndex = 0;\n  for (let i = 0; i < children.length; i++) {\n    const slotElement = children[i];\n    let slotDir;\n    if (!isTemplateNode(slotElement) || !(slotDir = findDir(slotElement, \"slot\", true))) {\n      if (slotElement.type !== 3) {\n        implicitDefaultChildren.push(slotElement);\n      }\n      continue;\n    }\n    if (onComponentSlot) {\n      context.onError(\n        createCompilerError(37, slotDir.loc)\n      );\n      break;\n    }\n    hasTemplateSlots = true;\n    const { children: slotChildren, loc: slotLoc } = slotElement;\n    const {\n      arg: slotName = createSimpleExpression(`default`, true),\n      exp: slotProps,\n      loc: dirLoc\n    } = slotDir;\n    let staticSlotName;\n    if (isStaticExp(slotName)) {\n      staticSlotName = slotName ? slotName.content : `default`;\n    } else {\n      hasDynamicSlots = true;\n    }\n    const vFor = findDir(slotElement, \"for\");\n    const slotFunction = buildSlotFn(slotProps, vFor, slotChildren, slotLoc);\n    let vIf;\n    let vElse;\n    if (vIf = findDir(slotElement, \"if\")) {\n      hasDynamicSlots = true;\n      dynamicSlots.push(\n        createConditionalExpression(\n          vIf.exp,\n          buildDynamicSlot(slotName, slotFunction, conditionalBranchIndex++),\n          defaultFallback\n        )\n      );\n    } else if (vElse = findDir(\n      slotElement,\n      /^else(-if)?$/,\n      true\n      /* allowEmpty */\n    )) {\n      let j = i;\n      let prev;\n      while (j--) {\n        prev = children[j];\n        if (prev.type !== 3) {\n          break;\n        }\n      }\n      if (prev && isTemplateNode(prev) && findDir(prev, /^(else-)?if$/)) {\n        let conditional = dynamicSlots[dynamicSlots.length - 1];\n        while (conditional.alternate.type === 19) {\n          conditional = conditional.alternate;\n        }\n        conditional.alternate = vElse.exp ? createConditionalExpression(\n          vElse.exp,\n          buildDynamicSlot(\n            slotName,\n            slotFunction,\n            conditionalBranchIndex++\n          ),\n          defaultFallback\n        ) : buildDynamicSlot(slotName, slotFunction, conditionalBranchIndex++);\n      } else {\n        context.onError(\n          createCompilerError(30, vElse.loc)\n        );\n      }\n    } else if (vFor) {\n      hasDynamicSlots = true;\n      const parseResult = vFor.forParseResult;\n      if (parseResult) {\n        finalizeForParseResult(parseResult, context);\n        dynamicSlots.push(\n          createCallExpression(context.helper(RENDER_LIST), [\n            parseResult.source,\n            createFunctionExpression(\n              createForLoopParams(parseResult),\n              buildDynamicSlot(slotName, slotFunction),\n              true\n            )\n          ])\n        );\n      } else {\n        context.onError(\n          createCompilerError(\n            32,\n            vFor.loc\n          )\n        );\n      }\n    } else {\n      if (staticSlotName) {\n        if (seenSlotNames.has(staticSlotName)) {\n          context.onError(\n            createCompilerError(\n              38,\n              dirLoc\n            )\n          );\n          continue;\n        }\n        seenSlotNames.add(staticSlotName);\n        if (staticSlotName === \"default\") {\n          hasNamedDefaultSlot = true;\n        }\n      }\n      slotsProperties.push(createObjectProperty(slotName, slotFunction));\n    }\n  }\n  if (!onComponentSlot) {\n    const buildDefaultSlotProperty = (props, children2) => {\n      const fn = buildSlotFn(props, void 0, children2, loc);\n      if (context.compatConfig) {\n        fn.isNonScopedSlot = true;\n      }\n      return createObjectProperty(`default`, fn);\n    };\n    if (!hasTemplateSlots) {\n      slotsProperties.push(buildDefaultSlotProperty(void 0, children));\n    } else if (implicitDefaultChildren.length && // #3766\n    // with whitespace: 'preserve', whitespaces between slots will end up in\n    // implicitDefaultChildren. Ignore if all implicit children are whitespaces.\n    implicitDefaultChildren.some((node2) => isNonWhitespaceContent(node2))) {\n      if (hasNamedDefaultSlot) {\n        context.onError(\n          createCompilerError(\n            39,\n            implicitDefaultChildren[0].loc\n          )\n        );\n      } else {\n        slotsProperties.push(\n          buildDefaultSlotProperty(void 0, implicitDefaultChildren)\n        );\n      }\n    }\n  }\n  const slotFlag = hasDynamicSlots ? 2 : hasForwardedSlots(node.children) ? 3 : 1;\n  let slots = createObjectExpression(\n    slotsProperties.concat(\n      createObjectProperty(\n        `_`,\n        // 2 = compiled but dynamic = can skip normalization, but must run diff\n        // 1 = compiled and static = can skip normalization AND diff as optimized\n        createSimpleExpression(\n          slotFlag + (` /* ${shared.slotFlagsText[slotFlag]} */` ),\n          false\n        )\n      )\n    ),\n    loc\n  );\n  if (dynamicSlots.length) {\n    slots = createCallExpression(context.helper(CREATE_SLOTS), [\n      slots,\n      createArrayExpression(dynamicSlots)\n    ]);\n  }\n  return {\n    slots,\n    hasDynamicSlots\n  };\n}\nfunction buildDynamicSlot(name, fn, index) {\n  const props = [\n    createObjectProperty(`name`, name),\n    createObjectProperty(`fn`, fn)\n  ];\n  if (index != null) {\n    props.push(\n      createObjectProperty(`key`, createSimpleExpression(String(index), true))\n    );\n  }\n  return createObjectExpression(props);\n}\nfunction hasForwardedSlots(children) {\n  for (let i = 0; i < children.length; i++) {\n    const child = children[i];\n    switch (child.type) {\n      case 1:\n        if (child.tagType === 2 || hasForwardedSlots(child.children)) {\n          return true;\n        }\n        break;\n      case 9:\n        if (hasForwardedSlots(child.branches)) return true;\n        break;\n      case 10:\n      case 11:\n        if (hasForwardedSlots(child.children)) return true;\n        break;\n    }\n  }\n  return false;\n}\nfunction isNonWhitespaceContent(node) {\n  if (node.type !== 2 && node.type !== 12)\n    return true;\n  return node.type === 2 ? !!node.content.trim() : isNonWhitespaceContent(node.content);\n}\n\nconst directiveImportMap = /* @__PURE__ */ new WeakMap();\nconst transformElement = (node, context) => {\n  return function postTransformElement() {\n    node = context.currentNode;\n    if (!(node.type === 1 && (node.tagType === 0 || node.tagType === 1))) {\n      return;\n    }\n    const { tag, props } = node;\n    const isComponent = node.tagType === 1;\n    let vnodeTag = isComponent ? resolveComponentType(node, context) : `\"${tag}\"`;\n    const isDynamicComponent = shared.isObject(vnodeTag) && vnodeTag.callee === RESOLVE_DYNAMIC_COMPONENT;\n    let vnodeProps;\n    let vnodeChildren;\n    let patchFlag = 0;\n    let vnodeDynamicProps;\n    let dynamicPropNames;\n    let vnodeDirectives;\n    let shouldUseBlock = (\n      // dynamic component may resolve to plain elements\n      isDynamicComponent || vnodeTag === TELEPORT || vnodeTag === SUSPENSE || !isComponent && // <svg> and <foreignObject> must be forced into blocks so that block\n      // updates inside get proper isSVG flag at runtime. (#639, #643)\n      // This is technically web-specific, but splitting the logic out of core\n      // leads to too much unnecessary complexity.\n      (tag === \"svg\" || tag === \"foreignObject\" || tag === \"math\")\n    );\n    if (props.length > 0) {\n      const propsBuildResult = buildProps(\n        node,\n        context,\n        void 0,\n        isComponent,\n        isDynamicComponent\n      );\n      vnodeProps = propsBuildResult.props;\n      patchFlag = propsBuildResult.patchFlag;\n      dynamicPropNames = propsBuildResult.dynamicPropNames;\n      const directives = propsBuildResult.directives;\n      vnodeDirectives = directives && directives.length ? createArrayExpression(\n        directives.map((dir) => buildDirectiveArgs(dir, context))\n      ) : void 0;\n      if (propsBuildResult.shouldUseBlock) {\n        shouldUseBlock = true;\n      }\n    }\n    if (node.children.length > 0) {\n      if (vnodeTag === KEEP_ALIVE) {\n        shouldUseBlock = true;\n        patchFlag |= 1024;\n        if (node.children.length > 1) {\n          context.onError(\n            createCompilerError(46, {\n              start: node.children[0].loc.start,\n              end: node.children[node.children.length - 1].loc.end,\n              source: \"\"\n            })\n          );\n        }\n      }\n      const shouldBuildAsSlots = isComponent && // Teleport is not a real component and has dedicated runtime handling\n      vnodeTag !== TELEPORT && // explained above.\n      vnodeTag !== KEEP_ALIVE;\n      if (shouldBuildAsSlots) {\n        const { slots, hasDynamicSlots } = buildSlots(node, context);\n        vnodeChildren = slots;\n        if (hasDynamicSlots) {\n          patchFlag |= 1024;\n        }\n      } else if (node.children.length === 1 && vnodeTag !== TELEPORT) {\n        const child = node.children[0];\n        const type = child.type;\n        const hasDynamicTextChild = type === 5 || type === 8;\n        if (hasDynamicTextChild && getConstantType(child, context) === 0) {\n          patchFlag |= 1;\n        }\n        if (hasDynamicTextChild || type === 2) {\n          vnodeChildren = child;\n        } else {\n          vnodeChildren = node.children;\n        }\n      } else {\n        vnodeChildren = node.children;\n      }\n    }\n    if (dynamicPropNames && dynamicPropNames.length) {\n      vnodeDynamicProps = stringifyDynamicPropNames(dynamicPropNames);\n    }\n    node.codegenNode = createVNodeCall(\n      context,\n      vnodeTag,\n      vnodeProps,\n      vnodeChildren,\n      patchFlag === 0 ? void 0 : patchFlag,\n      vnodeDynamicProps,\n      vnodeDirectives,\n      !!shouldUseBlock,\n      false,\n      isComponent,\n      node.loc\n    );\n  };\n};\nfunction resolveComponentType(node, context, ssr = false) {\n  let { tag } = node;\n  const isExplicitDynamic = isComponentTag(tag);\n  const isProp = findProp(\n    node,\n    \"is\",\n    false,\n    true\n    /* allow empty */\n  );\n  if (isProp) {\n    if (isExplicitDynamic || isCompatEnabled(\n      \"COMPILER_IS_ON_ELEMENT\",\n      context\n    )) {\n      let exp;\n      if (isProp.type === 6) {\n        exp = isProp.value && createSimpleExpression(isProp.value.content, true);\n      } else {\n        exp = isProp.exp;\n        if (!exp) {\n          exp = createSimpleExpression(`is`, false, isProp.arg.loc);\n          {\n            exp = isProp.exp = processExpression(exp, context);\n          }\n        }\n      }\n      if (exp) {\n        return createCallExpression(context.helper(RESOLVE_DYNAMIC_COMPONENT), [\n          exp\n        ]);\n      }\n    } else if (isProp.type === 6 && isProp.value.content.startsWith(\"vue:\")) {\n      tag = isProp.value.content.slice(4);\n    }\n  }\n  const builtIn = isCoreComponent(tag) || context.isBuiltInComponent(tag);\n  if (builtIn) {\n    if (!ssr) context.helper(builtIn);\n    return builtIn;\n  }\n  {\n    const fromSetup = resolveSetupReference(tag, context);\n    if (fromSetup) {\n      return fromSetup;\n    }\n    const dotIndex = tag.indexOf(\".\");\n    if (dotIndex > 0) {\n      const ns = resolveSetupReference(tag.slice(0, dotIndex), context);\n      if (ns) {\n        return ns + tag.slice(dotIndex);\n      }\n    }\n  }\n  if (context.selfName && shared.capitalize(shared.camelize(tag)) === context.selfName) {\n    context.helper(RESOLVE_COMPONENT);\n    context.components.add(tag + `__self`);\n    return toValidAssetId(tag, `component`);\n  }\n  context.helper(RESOLVE_COMPONENT);\n  context.components.add(tag);\n  return toValidAssetId(tag, `component`);\n}\nfunction resolveSetupReference(name, context) {\n  const bindings = context.bindingMetadata;\n  if (!bindings || bindings.__isScriptSetup === false) {\n    return;\n  }\n  const camelName = shared.camelize(name);\n  const PascalName = shared.capitalize(camelName);\n  const checkType = (type) => {\n    if (bindings[name] === type) {\n      return name;\n    }\n    if (bindings[camelName] === type) {\n      return camelName;\n    }\n    if (bindings[PascalName] === type) {\n      return PascalName;\n    }\n  };\n  const fromConst = checkType(\"setup-const\") || checkType(\"setup-reactive-const\") || checkType(\"literal-const\");\n  if (fromConst) {\n    return context.inline ? (\n      // in inline mode, const setup bindings (e.g. imports) can be used as-is\n      fromConst\n    ) : `$setup[${JSON.stringify(fromConst)}]`;\n  }\n  const fromMaybeRef = checkType(\"setup-let\") || checkType(\"setup-ref\") || checkType(\"setup-maybe-ref\");\n  if (fromMaybeRef) {\n    return context.inline ? (\n      // setup scope bindings that may be refs need to be unrefed\n      `${context.helperString(UNREF)}(${fromMaybeRef})`\n    ) : `$setup[${JSON.stringify(fromMaybeRef)}]`;\n  }\n  const fromProps = checkType(\"props\");\n  if (fromProps) {\n    return `${context.helperString(UNREF)}(${context.inline ? \"__props\" : \"$props\"}[${JSON.stringify(fromProps)}])`;\n  }\n}\nfunction buildProps(node, context, props = node.props, isComponent, isDynamicComponent, ssr = false) {\n  const { tag, loc: elementLoc, children } = node;\n  let properties = [];\n  const mergeArgs = [];\n  const runtimeDirectives = [];\n  const hasChildren = children.length > 0;\n  let shouldUseBlock = false;\n  let patchFlag = 0;\n  let hasRef = false;\n  let hasClassBinding = false;\n  let hasStyleBinding = false;\n  let hasHydrationEventBinding = false;\n  let hasDynamicKeys = false;\n  let hasVnodeHook = false;\n  const dynamicPropNames = [];\n  const pushMergeArg = (arg) => {\n    if (properties.length) {\n      mergeArgs.push(\n        createObjectExpression(dedupeProperties(properties), elementLoc)\n      );\n      properties = [];\n    }\n    if (arg) mergeArgs.push(arg);\n  };\n  const pushRefVForMarker = () => {\n    if (context.scopes.vFor > 0) {\n      properties.push(\n        createObjectProperty(\n          createSimpleExpression(\"ref_for\", true),\n          createSimpleExpression(\"true\")\n        )\n      );\n    }\n  };\n  const analyzePatchFlag = ({ key, value }) => {\n    if (isStaticExp(key)) {\n      const name = key.content;\n      const isEventHandler = shared.isOn(name);\n      if (isEventHandler && (!isComponent || isDynamicComponent) && // omit the flag for click handlers because hydration gives click\n      // dedicated fast path.\n      name.toLowerCase() !== \"onclick\" && // omit v-model handlers\n      name !== \"onUpdate:modelValue\" && // omit onVnodeXXX hooks\n      !shared.isReservedProp(name)) {\n        hasHydrationEventBinding = true;\n      }\n      if (isEventHandler && shared.isReservedProp(name)) {\n        hasVnodeHook = true;\n      }\n      if (isEventHandler && value.type === 14) {\n        value = value.arguments[0];\n      }\n      if (value.type === 20 || (value.type === 4 || value.type === 8) && getConstantType(value, context) > 0) {\n        return;\n      }\n      if (name === \"ref\") {\n        hasRef = true;\n      } else if (name === \"class\") {\n        hasClassBinding = true;\n      } else if (name === \"style\") {\n        hasStyleBinding = true;\n      } else if (name !== \"key\" && !dynamicPropNames.includes(name)) {\n        dynamicPropNames.push(name);\n      }\n      if (isComponent && (name === \"class\" || name === \"style\") && !dynamicPropNames.includes(name)) {\n        dynamicPropNames.push(name);\n      }\n    } else {\n      hasDynamicKeys = true;\n    }\n  };\n  for (let i = 0; i < props.length; i++) {\n    const prop = props[i];\n    if (prop.type === 6) {\n      const { loc, name, nameLoc, value } = prop;\n      let isStatic = true;\n      if (name === \"ref\") {\n        hasRef = true;\n        pushRefVForMarker();\n        if (value && context.inline) {\n          const binding = context.bindingMetadata[value.content];\n          if (binding === \"setup-let\" || binding === \"setup-ref\" || binding === \"setup-maybe-ref\") {\n            isStatic = false;\n            properties.push(\n              createObjectProperty(\n                createSimpleExpression(\"ref_key\", true),\n                createSimpleExpression(value.content, true, value.loc)\n              )\n            );\n          }\n        }\n      }\n      if (name === \"is\" && (isComponentTag(tag) || value && value.content.startsWith(\"vue:\") || isCompatEnabled(\n        \"COMPILER_IS_ON_ELEMENT\",\n        context\n      ))) {\n        continue;\n      }\n      properties.push(\n        createObjectProperty(\n          createSimpleExpression(name, true, nameLoc),\n          createSimpleExpression(\n            value ? value.content : \"\",\n            isStatic,\n            value ? value.loc : loc\n          )\n        )\n      );\n    } else {\n      const { name, arg, exp, loc, modifiers } = prop;\n      const isVBind = name === \"bind\";\n      const isVOn = name === \"on\";\n      if (name === \"slot\") {\n        if (!isComponent) {\n          context.onError(\n            createCompilerError(40, loc)\n          );\n        }\n        continue;\n      }\n      if (name === \"once\" || name === \"memo\") {\n        continue;\n      }\n      if (name === \"is\" || isVBind && isStaticArgOf(arg, \"is\") && (isComponentTag(tag) || isCompatEnabled(\n        \"COMPILER_IS_ON_ELEMENT\",\n        context\n      ))) {\n        continue;\n      }\n      if (isVOn && ssr) {\n        continue;\n      }\n      if (\n        // #938: elements with dynamic keys should be forced into blocks\n        isVBind && isStaticArgOf(arg, \"key\") || // inline before-update hooks need to force block so that it is invoked\n        // before children\n        isVOn && hasChildren && isStaticArgOf(arg, \"vue:before-update\")\n      ) {\n        shouldUseBlock = true;\n      }\n      if (isVBind && isStaticArgOf(arg, \"ref\")) {\n        pushRefVForMarker();\n      }\n      if (!arg && (isVBind || isVOn)) {\n        hasDynamicKeys = true;\n        if (exp) {\n          if (isVBind) {\n            pushRefVForMarker();\n            pushMergeArg();\n            {\n              {\n                const hasOverridableKeys = mergeArgs.some((arg2) => {\n                  if (arg2.type === 15) {\n                    return arg2.properties.some(({ key }) => {\n                      if (key.type !== 4 || !key.isStatic) {\n                        return true;\n                      }\n                      return key.content !== \"class\" && key.content !== \"style\" && !shared.isOn(key.content);\n                    });\n                  } else {\n                    return true;\n                  }\n                });\n                if (hasOverridableKeys) {\n                  checkCompatEnabled(\n                    \"COMPILER_V_BIND_OBJECT_ORDER\",\n                    context,\n                    loc\n                  );\n                }\n              }\n              if (isCompatEnabled(\n                \"COMPILER_V_BIND_OBJECT_ORDER\",\n                context\n              )) {\n                mergeArgs.unshift(exp);\n                continue;\n              }\n            }\n            mergeArgs.push(exp);\n          } else {\n            pushMergeArg({\n              type: 14,\n              loc,\n              callee: context.helper(TO_HANDLERS),\n              arguments: isComponent ? [exp] : [exp, `true`]\n            });\n          }\n        } else {\n          context.onError(\n            createCompilerError(\n              isVBind ? 34 : 35,\n              loc\n            )\n          );\n        }\n        continue;\n      }\n      if (isVBind && modifiers.includes(\"prop\")) {\n        patchFlag |= 32;\n      }\n      const directiveTransform = context.directiveTransforms[name];\n      if (directiveTransform) {\n        const { props: props2, needRuntime } = directiveTransform(prop, node, context);\n        !ssr && props2.forEach(analyzePatchFlag);\n        if (isVOn && arg && !isStaticExp(arg)) {\n          pushMergeArg(createObjectExpression(props2, elementLoc));\n        } else {\n          properties.push(...props2);\n        }\n        if (needRuntime) {\n          runtimeDirectives.push(prop);\n          if (shared.isSymbol(needRuntime)) {\n            directiveImportMap.set(prop, needRuntime);\n          }\n        }\n      } else if (!shared.isBuiltInDirective(name)) {\n        runtimeDirectives.push(prop);\n        if (hasChildren) {\n          shouldUseBlock = true;\n        }\n      }\n    }\n  }\n  let propsExpression = void 0;\n  if (mergeArgs.length) {\n    pushMergeArg();\n    if (mergeArgs.length > 1) {\n      propsExpression = createCallExpression(\n        context.helper(MERGE_PROPS),\n        mergeArgs,\n        elementLoc\n      );\n    } else {\n      propsExpression = mergeArgs[0];\n    }\n  } else if (properties.length) {\n    propsExpression = createObjectExpression(\n      dedupeProperties(properties),\n      elementLoc\n    );\n  }\n  if (hasDynamicKeys) {\n    patchFlag |= 16;\n  } else {\n    if (hasClassBinding && !isComponent) {\n      patchFlag |= 2;\n    }\n    if (hasStyleBinding && !isComponent) {\n      patchFlag |= 4;\n    }\n    if (dynamicPropNames.length) {\n      patchFlag |= 8;\n    }\n    if (hasHydrationEventBinding) {\n      patchFlag |= 32;\n    }\n  }\n  if (!shouldUseBlock && (patchFlag === 0 || patchFlag === 32) && (hasRef || hasVnodeHook || runtimeDirectives.length > 0)) {\n    patchFlag |= 512;\n  }\n  if (!context.inSSR && propsExpression) {\n    switch (propsExpression.type) {\n      case 15:\n        let classKeyIndex = -1;\n        let styleKeyIndex = -1;\n        let hasDynamicKey = false;\n        for (let i = 0; i < propsExpression.properties.length; i++) {\n          const key = propsExpression.properties[i].key;\n          if (isStaticExp(key)) {\n            if (key.content === \"class\") {\n              classKeyIndex = i;\n            } else if (key.content === \"style\") {\n              styleKeyIndex = i;\n            }\n          } else if (!key.isHandlerKey) {\n            hasDynamicKey = true;\n          }\n        }\n        const classProp = propsExpression.properties[classKeyIndex];\n        const styleProp = propsExpression.properties[styleKeyIndex];\n        if (!hasDynamicKey) {\n          if (classProp && !isStaticExp(classProp.value)) {\n            classProp.value = createCallExpression(\n              context.helper(NORMALIZE_CLASS),\n              [classProp.value]\n            );\n          }\n          if (styleProp && // the static style is compiled into an object,\n          // so use `hasStyleBinding` to ensure that it is a dynamic style binding\n          (hasStyleBinding || styleProp.value.type === 4 && styleProp.value.content.trim()[0] === `[` || // v-bind:style and style both exist,\n          // v-bind:style with static literal object\n          styleProp.value.type === 17)) {\n            styleProp.value = createCallExpression(\n              context.helper(NORMALIZE_STYLE),\n              [styleProp.value]\n            );\n          }\n        } else {\n          propsExpression = createCallExpression(\n            context.helper(NORMALIZE_PROPS),\n            [propsExpression]\n          );\n        }\n        break;\n      case 14:\n        break;\n      default:\n        propsExpression = createCallExpression(\n          context.helper(NORMALIZE_PROPS),\n          [\n            createCallExpression(context.helper(GUARD_REACTIVE_PROPS), [\n              propsExpression\n            ])\n          ]\n        );\n        break;\n    }\n  }\n  return {\n    props: propsExpression,\n    directives: runtimeDirectives,\n    patchFlag,\n    dynamicPropNames,\n    shouldUseBlock\n  };\n}\nfunction dedupeProperties(properties) {\n  const knownProps = /* @__PURE__ */ new Map();\n  const deduped = [];\n  for (let i = 0; i < properties.length; i++) {\n    const prop = properties[i];\n    if (prop.key.type === 8 || !prop.key.isStatic) {\n      deduped.push(prop);\n      continue;\n    }\n    const name = prop.key.content;\n    const existing = knownProps.get(name);\n    if (existing) {\n      if (name === \"style\" || name === \"class\" || shared.isOn(name)) {\n        mergeAsArray(existing, prop);\n      }\n    } else {\n      knownProps.set(name, prop);\n      deduped.push(prop);\n    }\n  }\n  return deduped;\n}\nfunction mergeAsArray(existing, incoming) {\n  if (existing.value.type === 17) {\n    existing.value.elements.push(incoming.value);\n  } else {\n    existing.value = createArrayExpression(\n      [existing.value, incoming.value],\n      existing.loc\n    );\n  }\n}\nfunction buildDirectiveArgs(dir, context) {\n  const dirArgs = [];\n  const runtime = directiveImportMap.get(dir);\n  if (runtime) {\n    dirArgs.push(context.helperString(runtime));\n  } else {\n    const fromSetup = resolveSetupReference(\"v-\" + dir.name, context);\n    if (fromSetup) {\n      dirArgs.push(fromSetup);\n    } else {\n      context.helper(RESOLVE_DIRECTIVE);\n      context.directives.add(dir.name);\n      dirArgs.push(toValidAssetId(dir.name, `directive`));\n    }\n  }\n  const { loc } = dir;\n  if (dir.exp) dirArgs.push(dir.exp);\n  if (dir.arg) {\n    if (!dir.exp) {\n      dirArgs.push(`void 0`);\n    }\n    dirArgs.push(dir.arg);\n  }\n  if (Object.keys(dir.modifiers).length) {\n    if (!dir.arg) {\n      if (!dir.exp) {\n        dirArgs.push(`void 0`);\n      }\n      dirArgs.push(`void 0`);\n    }\n    const trueExpression = createSimpleExpression(`true`, false, loc);\n    dirArgs.push(\n      createObjectExpression(\n        dir.modifiers.map(\n          (modifier) => createObjectProperty(modifier, trueExpression)\n        ),\n        loc\n      )\n    );\n  }\n  return createArrayExpression(dirArgs, dir.loc);\n}\nfunction stringifyDynamicPropNames(props) {\n  let propsNamesString = `[`;\n  for (let i = 0, l = props.length; i < l; i++) {\n    propsNamesString += JSON.stringify(props[i]);\n    if (i < l - 1) propsNamesString += \", \";\n  }\n  return propsNamesString + `]`;\n}\nfunction isComponentTag(tag) {\n  return tag === \"component\" || tag === \"Component\";\n}\n\nconst transformSlotOutlet = (node, context) => {\n  if (isSlotOutlet(node)) {\n    const { children, loc } = node;\n    const { slotName, slotProps } = processSlotOutlet(node, context);\n    const slotArgs = [\n      context.prefixIdentifiers ? `_ctx.$slots` : `$slots`,\n      slotName,\n      \"{}\",\n      \"undefined\",\n      \"true\"\n    ];\n    let expectedLen = 2;\n    if (slotProps) {\n      slotArgs[2] = slotProps;\n      expectedLen = 3;\n    }\n    if (children.length) {\n      slotArgs[3] = createFunctionExpression([], children, false, false, loc);\n      expectedLen = 4;\n    }\n    if (context.scopeId && !context.slotted) {\n      expectedLen = 5;\n    }\n    slotArgs.splice(expectedLen);\n    node.codegenNode = createCallExpression(\n      context.helper(RENDER_SLOT),\n      slotArgs,\n      loc\n    );\n  }\n};\nfunction processSlotOutlet(node, context) {\n  let slotName = `\"default\"`;\n  let slotProps = void 0;\n  const nonNameProps = [];\n  for (let i = 0; i < node.props.length; i++) {\n    const p = node.props[i];\n    if (p.type === 6) {\n      if (p.value) {\n        if (p.name === \"name\") {\n          slotName = JSON.stringify(p.value.content);\n        } else {\n          p.name = shared.camelize(p.name);\n          nonNameProps.push(p);\n        }\n      }\n    } else {\n      if (p.name === \"bind\" && isStaticArgOf(p.arg, \"name\")) {\n        if (p.exp) {\n          slotName = p.exp;\n        } else if (p.arg && p.arg.type === 4) {\n          const name = shared.camelize(p.arg.content);\n          slotName = p.exp = createSimpleExpression(name, false, p.arg.loc);\n          {\n            slotName = p.exp = processExpression(p.exp, context);\n          }\n        }\n      } else {\n        if (p.name === \"bind\" && p.arg && isStaticExp(p.arg)) {\n          p.arg.content = shared.camelize(p.arg.content);\n        }\n        nonNameProps.push(p);\n      }\n    }\n  }\n  if (nonNameProps.length > 0) {\n    const { props, directives } = buildProps(\n      node,\n      context,\n      nonNameProps,\n      false,\n      false\n    );\n    slotProps = props;\n    if (directives.length) {\n      context.onError(\n        createCompilerError(\n          36,\n          directives[0].loc\n        )\n      );\n    }\n  }\n  return {\n    slotName,\n    slotProps\n  };\n}\n\nconst fnExpRE = /^\\s*(async\\s*)?(\\([^)]*?\\)|[\\w$_]+)\\s*(:[^=]+)?=>|^\\s*(async\\s+)?function(?:\\s+[\\w$]+)?\\s*\\(/;\nconst transformOn = (dir, node, context, augmentor) => {\n  const { loc, modifiers, arg } = dir;\n  if (!dir.exp && !modifiers.length) {\n    context.onError(createCompilerError(35, loc));\n  }\n  let eventName;\n  if (arg.type === 4) {\n    if (arg.isStatic) {\n      let rawName = arg.content;\n      if (rawName.startsWith(\"vnode\")) {\n        context.onError(createCompilerError(51, arg.loc));\n      }\n      if (rawName.startsWith(\"vue:\")) {\n        rawName = `vnode-${rawName.slice(4)}`;\n      }\n      const eventString = node.tagType !== 0 || rawName.startsWith(\"vnode\") || !/[A-Z]/.test(rawName) ? (\n        // for non-element and vnode lifecycle event listeners, auto convert\n        // it to camelCase. See issue #2249\n        shared.toHandlerKey(shared.camelize(rawName))\n      ) : (\n        // preserve case for plain element listeners that have uppercase\n        // letters, as these may be custom elements' custom events\n        `on:${rawName}`\n      );\n      eventName = createSimpleExpression(eventString, true, arg.loc);\n    } else {\n      eventName = createCompoundExpression([\n        `${context.helperString(TO_HANDLER_KEY)}(`,\n        arg,\n        `)`\n      ]);\n    }\n  } else {\n    eventName = arg;\n    eventName.children.unshift(`${context.helperString(TO_HANDLER_KEY)}(`);\n    eventName.children.push(`)`);\n  }\n  let exp = dir.exp;\n  if (exp && !exp.content.trim()) {\n    exp = void 0;\n  }\n  let shouldCache = context.cacheHandlers && !exp && !context.inVOnce;\n  if (exp) {\n    const isMemberExp = isMemberExpression(exp.content, context);\n    const isInlineStatement = !(isMemberExp || fnExpRE.test(exp.content));\n    const hasMultipleStatements = exp.content.includes(`;`);\n    if (context.prefixIdentifiers) {\n      isInlineStatement && context.addIdentifiers(`$event`);\n      exp = dir.exp = processExpression(\n        exp,\n        context,\n        false,\n        hasMultipleStatements\n      );\n      isInlineStatement && context.removeIdentifiers(`$event`);\n      shouldCache = context.cacheHandlers && // unnecessary to cache inside v-once\n      !context.inVOnce && // runtime constants don't need to be cached\n      // (this is analyzed by compileScript in SFC <script setup>)\n      !(exp.type === 4 && exp.constType > 0) && // #1541 bail if this is a member exp handler passed to a component -\n      // we need to use the original function to preserve arity,\n      // e.g. <transition> relies on checking cb.length to determine\n      // transition end handling. Inline function is ok since its arity\n      // is preserved even when cached.\n      !(isMemberExp && node.tagType === 1) && // bail if the function references closure variables (v-for, v-slot)\n      // it must be passed fresh to avoid stale values.\n      !hasScopeRef(exp, context.identifiers);\n      if (shouldCache && isMemberExp) {\n        if (exp.type === 4) {\n          exp.content = `${exp.content} && ${exp.content}(...args)`;\n        } else {\n          exp.children = [...exp.children, ` && `, ...exp.children, `(...args)`];\n        }\n      }\n    }\n    if (isInlineStatement || shouldCache && isMemberExp) {\n      exp = createCompoundExpression([\n        `${isInlineStatement ? context.isTS ? `($event: any)` : `$event` : `${context.isTS ? `\n//@ts-ignore\n` : ``}(...args)`} => ${hasMultipleStatements ? `{` : `(`}`,\n        exp,\n        hasMultipleStatements ? `}` : `)`\n      ]);\n    }\n  }\n  let ret = {\n    props: [\n      createObjectProperty(\n        eventName,\n        exp || createSimpleExpression(`() => {}`, false, loc)\n      )\n    ]\n  };\n  if (augmentor) {\n    ret = augmentor(ret);\n  }\n  if (shouldCache) {\n    ret.props[0].value = context.cache(ret.props[0].value);\n  }\n  ret.props.forEach((p) => p.key.isHandlerKey = true);\n  return ret;\n};\n\nconst transformText = (node, context) => {\n  if (node.type === 0 || node.type === 1 || node.type === 11 || node.type === 10) {\n    return () => {\n      const children = node.children;\n      let currentContainer = void 0;\n      let hasText = false;\n      for (let i = 0; i < children.length; i++) {\n        const child = children[i];\n        if (isText$1(child)) {\n          hasText = true;\n          for (let j = i + 1; j < children.length; j++) {\n            const next = children[j];\n            if (isText$1(next)) {\n              if (!currentContainer) {\n                currentContainer = children[i] = createCompoundExpression(\n                  [child],\n                  child.loc\n                );\n              }\n              currentContainer.children.push(` + `, next);\n              children.splice(j, 1);\n              j--;\n            } else {\n              currentContainer = void 0;\n              break;\n            }\n          }\n        }\n      }\n      if (!hasText || // if this is a plain element with a single text child, leave it\n      // as-is since the runtime has dedicated fast path for this by directly\n      // setting textContent of the element.\n      // for component root it's always normalized anyway.\n      children.length === 1 && (node.type === 0 || node.type === 1 && node.tagType === 0 && // #3756\n      // custom directives can potentially add DOM elements arbitrarily,\n      // we need to avoid setting textContent of the element at runtime\n      // to avoid accidentally overwriting the DOM elements added\n      // by the user through custom directives.\n      !node.props.find(\n        (p) => p.type === 7 && !context.directiveTransforms[p.name]\n      ) && // in compat mode, <template> tags with no special directives\n      // will be rendered as a fragment so its children must be\n      // converted into vnodes.\n      !(node.tag === \"template\"))) {\n        return;\n      }\n      for (let i = 0; i < children.length; i++) {\n        const child = children[i];\n        if (isText$1(child) || child.type === 8) {\n          const callArgs = [];\n          if (child.type !== 2 || child.content !== \" \") {\n            callArgs.push(child);\n          }\n          if (!context.ssr && getConstantType(child, context) === 0) {\n            callArgs.push(\n              1 + (` /* ${shared.PatchFlagNames[1]} */` )\n            );\n          }\n          children[i] = {\n            type: 12,\n            content: child,\n            loc: child.loc,\n            codegenNode: createCallExpression(\n              context.helper(CREATE_TEXT),\n              callArgs\n            )\n          };\n        }\n      }\n    };\n  }\n};\n\nconst seen$1 = /* @__PURE__ */ new WeakSet();\nconst transformOnce = (node, context) => {\n  if (node.type === 1 && findDir(node, \"once\", true)) {\n    if (seen$1.has(node) || context.inVOnce || context.inSSR) {\n      return;\n    }\n    seen$1.add(node);\n    context.inVOnce = true;\n    context.helper(SET_BLOCK_TRACKING);\n    return () => {\n      context.inVOnce = false;\n      const cur = context.currentNode;\n      if (cur.codegenNode) {\n        cur.codegenNode = context.cache(\n          cur.codegenNode,\n          true\n          /* isVNode */\n        );\n      }\n    };\n  }\n};\n\nconst transformModel = (dir, node, context) => {\n  const { exp, arg } = dir;\n  if (!exp) {\n    context.onError(\n      createCompilerError(41, dir.loc)\n    );\n    return createTransformProps();\n  }\n  const rawExp = exp.loc.source;\n  const expString = exp.type === 4 ? exp.content : rawExp;\n  const bindingType = context.bindingMetadata[rawExp];\n  if (bindingType === \"props\" || bindingType === \"props-aliased\") {\n    context.onError(createCompilerError(44, exp.loc));\n    return createTransformProps();\n  }\n  const maybeRef = context.inline && (bindingType === \"setup-let\" || bindingType === \"setup-ref\" || bindingType === \"setup-maybe-ref\");\n  if (!expString.trim() || !isMemberExpression(expString, context) && !maybeRef) {\n    context.onError(\n      createCompilerError(42, exp.loc)\n    );\n    return createTransformProps();\n  }\n  if (context.prefixIdentifiers && isSimpleIdentifier(expString) && context.identifiers[expString]) {\n    context.onError(\n      createCompilerError(43, exp.loc)\n    );\n    return createTransformProps();\n  }\n  const propName = arg ? arg : createSimpleExpression(\"modelValue\", true);\n  const eventName = arg ? isStaticExp(arg) ? `onUpdate:${shared.camelize(arg.content)}` : createCompoundExpression(['\"onUpdate:\" + ', arg]) : `onUpdate:modelValue`;\n  let assignmentExp;\n  const eventArg = context.isTS ? `($event: any)` : `$event`;\n  if (maybeRef) {\n    if (bindingType === \"setup-ref\") {\n      assignmentExp = createCompoundExpression([\n        `${eventArg} => ((`,\n        createSimpleExpression(rawExp, false, exp.loc),\n        `).value = $event)`\n      ]);\n    } else {\n      const altAssignment = bindingType === \"setup-let\" ? `${rawExp} = $event` : `null`;\n      assignmentExp = createCompoundExpression([\n        `${eventArg} => (${context.helperString(IS_REF)}(${rawExp}) ? (`,\n        createSimpleExpression(rawExp, false, exp.loc),\n        `).value = $event : ${altAssignment})`\n      ]);\n    }\n  } else {\n    assignmentExp = createCompoundExpression([\n      `${eventArg} => ((`,\n      exp,\n      `) = $event)`\n    ]);\n  }\n  const props = [\n    // modelValue: foo\n    createObjectProperty(propName, dir.exp),\n    // \"onUpdate:modelValue\": $event => (foo = $event)\n    createObjectProperty(eventName, assignmentExp)\n  ];\n  if (context.prefixIdentifiers && !context.inVOnce && context.cacheHandlers && !hasScopeRef(exp, context.identifiers)) {\n    props[1].value = context.cache(props[1].value);\n  }\n  if (dir.modifiers.length && node.tagType === 1) {\n    const modifiers = dir.modifiers.map((m) => (isSimpleIdentifier(m) ? m : JSON.stringify(m)) + `: true`).join(`, `);\n    const modifiersKey = arg ? isStaticExp(arg) ? `${arg.content}Modifiers` : createCompoundExpression([arg, ' + \"Modifiers\"']) : `modelModifiers`;\n    props.push(\n      createObjectProperty(\n        modifiersKey,\n        createSimpleExpression(\n          `{ ${modifiers} }`,\n          false,\n          dir.loc,\n          2\n        )\n      )\n    );\n  }\n  return createTransformProps(props);\n};\nfunction createTransformProps(props = []) {\n  return { props };\n}\n\nconst validDivisionCharRE = /[\\w).+\\-_$\\]]/;\nconst transformFilter = (node, context) => {\n  if (!isCompatEnabled(\"COMPILER_FILTERS\", context)) {\n    return;\n  }\n  if (node.type === 5) {\n    rewriteFilter(node.content, context);\n  } else if (node.type === 1) {\n    node.props.forEach((prop) => {\n      if (prop.type === 7 && prop.name !== \"for\" && prop.exp) {\n        rewriteFilter(prop.exp, context);\n      }\n    });\n  }\n};\nfunction rewriteFilter(node, context) {\n  if (node.type === 4) {\n    parseFilter(node, context);\n  } else {\n    for (let i = 0; i < node.children.length; i++) {\n      const child = node.children[i];\n      if (typeof child !== \"object\") continue;\n      if (child.type === 4) {\n        parseFilter(child, context);\n      } else if (child.type === 8) {\n        rewriteFilter(node, context);\n      } else if (child.type === 5) {\n        rewriteFilter(child.content, context);\n      }\n    }\n  }\n}\nfunction parseFilter(node, context) {\n  const exp = node.content;\n  let inSingle = false;\n  let inDouble = false;\n  let inTemplateString = false;\n  let inRegex = false;\n  let curly = 0;\n  let square = 0;\n  let paren = 0;\n  let lastFilterIndex = 0;\n  let c, prev, i, expression, filters = [];\n  for (i = 0; i < exp.length; i++) {\n    prev = c;\n    c = exp.charCodeAt(i);\n    if (inSingle) {\n      if (c === 39 && prev !== 92) inSingle = false;\n    } else if (inDouble) {\n      if (c === 34 && prev !== 92) inDouble = false;\n    } else if (inTemplateString) {\n      if (c === 96 && prev !== 92) inTemplateString = false;\n    } else if (inRegex) {\n      if (c === 47 && prev !== 92) inRegex = false;\n    } else if (c === 124 && // pipe\n    exp.charCodeAt(i + 1) !== 124 && exp.charCodeAt(i - 1) !== 124 && !curly && !square && !paren) {\n      if (expression === void 0) {\n        lastFilterIndex = i + 1;\n        expression = exp.slice(0, i).trim();\n      } else {\n        pushFilter();\n      }\n    } else {\n      switch (c) {\n        case 34:\n          inDouble = true;\n          break;\n        case 39:\n          inSingle = true;\n          break;\n        case 96:\n          inTemplateString = true;\n          break;\n        case 40:\n          paren++;\n          break;\n        case 41:\n          paren--;\n          break;\n        case 91:\n          square++;\n          break;\n        case 93:\n          square--;\n          break;\n        case 123:\n          curly++;\n          break;\n        case 125:\n          curly--;\n          break;\n      }\n      if (c === 47) {\n        let j = i - 1;\n        let p;\n        for (; j >= 0; j--) {\n          p = exp.charAt(j);\n          if (p !== \" \") break;\n        }\n        if (!p || !validDivisionCharRE.test(p)) {\n          inRegex = true;\n        }\n      }\n    }\n  }\n  if (expression === void 0) {\n    expression = exp.slice(0, i).trim();\n  } else if (lastFilterIndex !== 0) {\n    pushFilter();\n  }\n  function pushFilter() {\n    filters.push(exp.slice(lastFilterIndex, i).trim());\n    lastFilterIndex = i + 1;\n  }\n  if (filters.length) {\n    warnDeprecation(\n      \"COMPILER_FILTERS\",\n      context,\n      node.loc\n    );\n    for (i = 0; i < filters.length; i++) {\n      expression = wrapFilter(expression, filters[i], context);\n    }\n    node.content = expression;\n    node.ast = void 0;\n  }\n}\nfunction wrapFilter(exp, filter, context) {\n  context.helper(RESOLVE_FILTER);\n  const i = filter.indexOf(\"(\");\n  if (i < 0) {\n    context.filters.add(filter);\n    return `${toValidAssetId(filter, \"filter\")}(${exp})`;\n  } else {\n    const name = filter.slice(0, i);\n    const args = filter.slice(i + 1);\n    context.filters.add(name);\n    return `${toValidAssetId(name, \"filter\")}(${exp}${args !== \")\" ? \",\" + args : args}`;\n  }\n}\n\nconst seen = /* @__PURE__ */ new WeakSet();\nconst transformMemo = (node, context) => {\n  if (node.type === 1) {\n    const dir = findDir(node, \"memo\");\n    if (!dir || seen.has(node)) {\n      return;\n    }\n    seen.add(node);\n    return () => {\n      const codegenNode = node.codegenNode || context.currentNode.codegenNode;\n      if (codegenNode && codegenNode.type === 13) {\n        if (node.tagType !== 1) {\n          convertToBlock(codegenNode, context);\n        }\n        node.codegenNode = createCallExpression(context.helper(WITH_MEMO), [\n          dir.exp,\n          createFunctionExpression(void 0, codegenNode),\n          `_cache`,\n          String(context.cached++)\n        ]);\n      }\n    };\n  }\n};\n\nfunction getBaseTransformPreset(prefixIdentifiers) {\n  return [\n    [\n      transformOnce,\n      transformIf,\n      transformMemo,\n      transformFor,\n      ...[transformFilter] ,\n      ...prefixIdentifiers ? [\n        // order is important\n        trackVForSlotScopes,\n        transformExpression\n      ] : [],\n      transformSlotOutlet,\n      transformElement,\n      trackSlotScopes,\n      transformText\n    ],\n    {\n      on: transformOn,\n      bind: transformBind,\n      model: transformModel\n    }\n  ];\n}\nfunction baseCompile(source, options = {}) {\n  const onError = options.onError || defaultOnError;\n  const isModuleMode = options.mode === \"module\";\n  const prefixIdentifiers = options.prefixIdentifiers === true || isModuleMode;\n  if (!prefixIdentifiers && options.cacheHandlers) {\n    onError(createCompilerError(49));\n  }\n  if (options.scopeId && !isModuleMode) {\n    onError(createCompilerError(50));\n  }\n  const resolvedOptions = shared.extend({}, options, {\n    prefixIdentifiers\n  });\n  const ast = shared.isString(source) ? baseParse(source, resolvedOptions) : source;\n  const [nodeTransforms, directiveTransforms] = getBaseTransformPreset(prefixIdentifiers);\n  if (options.isTS) {\n    const { expressionPlugins } = options;\n    if (!expressionPlugins || !expressionPlugins.includes(\"typescript\")) {\n      options.expressionPlugins = [...expressionPlugins || [], \"typescript\"];\n    }\n  }\n  transform(\n    ast,\n    shared.extend({}, resolvedOptions, {\n      nodeTransforms: [\n        ...nodeTransforms,\n        ...options.nodeTransforms || []\n        // user transforms\n      ],\n      directiveTransforms: shared.extend(\n        {},\n        directiveTransforms,\n        options.directiveTransforms || {}\n        // user transforms\n      )\n    })\n  );\n  return generate(ast, resolvedOptions);\n}\n\nconst BindingTypes = {\n  \"DATA\": \"data\",\n  \"PROPS\": \"props\",\n  \"PROPS_ALIASED\": \"props-aliased\",\n  \"SETUP_LET\": \"setup-let\",\n  \"SETUP_CONST\": \"setup-const\",\n  \"SETUP_REACTIVE_CONST\": \"setup-reactive-const\",\n  \"SETUP_MAYBE_REF\": \"setup-maybe-ref\",\n  \"SETUP_REF\": \"setup-ref\",\n  \"OPTIONS\": \"options\",\n  \"LITERAL_CONST\": \"literal-const\"\n};\n\nconst noopDirectiveTransform = () => ({ props: [] });\n\nexports.generateCodeFrame = shared.generateCodeFrame;\nexports.BASE_TRANSITION = BASE_TRANSITION;\nexports.BindingTypes = BindingTypes;\nexports.CAMELIZE = CAMELIZE;\nexports.CAPITALIZE = CAPITALIZE;\nexports.CREATE_BLOCK = CREATE_BLOCK;\nexports.CREATE_COMMENT = CREATE_COMMENT;\nexports.CREATE_ELEMENT_BLOCK = CREATE_ELEMENT_BLOCK;\nexports.CREATE_ELEMENT_VNODE = CREATE_ELEMENT_VNODE;\nexports.CREATE_SLOTS = CREATE_SLOTS;\nexports.CREATE_STATIC = CREATE_STATIC;\nexports.CREATE_TEXT = CREATE_TEXT;\nexports.CREATE_VNODE = CREATE_VNODE;\nexports.CompilerDeprecationTypes = CompilerDeprecationTypes;\nexports.ConstantTypes = ConstantTypes;\nexports.ElementTypes = ElementTypes;\nexports.ErrorCodes = ErrorCodes;\nexports.FRAGMENT = FRAGMENT;\nexports.GUARD_REACTIVE_PROPS = GUARD_REACTIVE_PROPS;\nexports.IS_MEMO_SAME = IS_MEMO_SAME;\nexports.IS_REF = IS_REF;\nexports.KEEP_ALIVE = KEEP_ALIVE;\nexports.MERGE_PROPS = MERGE_PROPS;\nexports.NORMALIZE_CLASS = NORMALIZE_CLASS;\nexports.NORMALIZE_PROPS = NORMALIZE_PROPS;\nexports.NORMALIZE_STYLE = NORMALIZE_STYLE;\nexports.Namespaces = Namespaces;\nexports.NodeTypes = NodeTypes;\nexports.OPEN_BLOCK = OPEN_BLOCK;\nexports.POP_SCOPE_ID = POP_SCOPE_ID;\nexports.PUSH_SCOPE_ID = PUSH_SCOPE_ID;\nexports.RENDER_LIST = RENDER_LIST;\nexports.RENDER_SLOT = RENDER_SLOT;\nexports.RESOLVE_COMPONENT = RESOLVE_COMPONENT;\nexports.RESOLVE_DIRECTIVE = RESOLVE_DIRECTIVE;\nexports.RESOLVE_DYNAMIC_COMPONENT = RESOLVE_DYNAMIC_COMPONENT;\nexports.RESOLVE_FILTER = RESOLVE_FILTER;\nexports.SET_BLOCK_TRACKING = SET_BLOCK_TRACKING;\nexports.SUSPENSE = SUSPENSE;\nexports.TELEPORT = TELEPORT;\nexports.TO_DISPLAY_STRING = TO_DISPLAY_STRING;\nexports.TO_HANDLERS = TO_HANDLERS;\nexports.TO_HANDLER_KEY = TO_HANDLER_KEY;\nexports.TS_NODE_TYPES = TS_NODE_TYPES;\nexports.UNREF = UNREF;\nexports.WITH_CTX = WITH_CTX;\nexports.WITH_DIRECTIVES = WITH_DIRECTIVES;\nexports.WITH_MEMO = WITH_MEMO;\nexports.advancePositionWithClone = advancePositionWithClone;\nexports.advancePositionWithMutation = advancePositionWithMutation;\nexports.assert = assert;\nexports.baseCompile = baseCompile;\nexports.baseParse = baseParse;\nexports.buildDirectiveArgs = buildDirectiveArgs;\nexports.buildProps = buildProps;\nexports.buildSlots = buildSlots;\nexports.checkCompatEnabled = checkCompatEnabled;\nexports.convertToBlock = convertToBlock;\nexports.createArrayExpression = createArrayExpression;\nexports.createAssignmentExpression = createAssignmentExpression;\nexports.createBlockStatement = createBlockStatement;\nexports.createCacheExpression = createCacheExpression;\nexports.createCallExpression = createCallExpression;\nexports.createCompilerError = createCompilerError;\nexports.createCompoundExpression = createCompoundExpression;\nexports.createConditionalExpression = createConditionalExpression;\nexports.createForLoopParams = createForLoopParams;\nexports.createFunctionExpression = createFunctionExpression;\nexports.createIfStatement = createIfStatement;\nexports.createInterpolation = createInterpolation;\nexports.createObjectExpression = createObjectExpression;\nexports.createObjectProperty = createObjectProperty;\nexports.createReturnStatement = createReturnStatement;\nexports.createRoot = createRoot;\nexports.createSequenceExpression = createSequenceExpression;\nexports.createSimpleExpression = createSimpleExpression;\nexports.createStructuralDirectiveTransform = createStructuralDirectiveTransform;\nexports.createTemplateLiteral = createTemplateLiteral;\nexports.createTransformContext = createTransformContext;\nexports.createVNodeCall = createVNodeCall;\nexports.errorMessages = errorMessages;\nexports.extractIdentifiers = extractIdentifiers;\nexports.findDir = findDir;\nexports.findProp = findProp;\nexports.forAliasRE = forAliasRE;\nexports.generate = generate;\nexports.getBaseTransformPreset = getBaseTransformPreset;\nexports.getConstantType = getConstantType;\nexports.getMemoedVNodeCall = getMemoedVNodeCall;\nexports.getVNodeBlockHelper = getVNodeBlockHelper;\nexports.getVNodeHelper = getVNodeHelper;\nexports.hasDynamicKeyVBind = hasDynamicKeyVBind;\nexports.hasScopeRef = hasScopeRef;\nexports.helperNameMap = helperNameMap;\nexports.injectProp = injectProp;\nexports.isCoreComponent = isCoreComponent;\nexports.isFunctionType = isFunctionType;\nexports.isInDestructureAssignment = isInDestructureAssignment;\nexports.isInNewExpression = isInNewExpression;\nexports.isMemberExpression = isMemberExpression;\nexports.isMemberExpressionBrowser = isMemberExpressionBrowser;\nexports.isMemberExpressionNode = isMemberExpressionNode;\nexports.isReferencedIdentifier = isReferencedIdentifier;\nexports.isSimpleIdentifier = isSimpleIdentifier;\nexports.isSlotOutlet = isSlotOutlet;\nexports.isStaticArgOf = isStaticArgOf;\nexports.isStaticExp = isStaticExp;\nexports.isStaticProperty = isStaticProperty;\nexports.isStaticPropertyKey = isStaticPropertyKey;\nexports.isTemplateNode = isTemplateNode;\nexports.isText = isText$1;\nexports.isVSlot = isVSlot;\nexports.locStub = locStub;\nexports.noopDirectiveTransform = noopDirectiveTransform;\nexports.processExpression = processExpression;\nexports.processFor = processFor;\nexports.processIf = processIf;\nexports.processSlotOutlet = processSlotOutlet;\nexports.registerRuntimeHelpers = registerRuntimeHelpers;\nexports.resolveComponentType = resolveComponentType;\nexports.stringifyExpression = stringifyExpression;\nexports.toValidAssetId = toValidAssetId;\nexports.trackSlotScopes = trackSlotScopes;\nexports.trackVForSlotScopes = trackVForSlotScopes;\nexports.transform = transform;\nexports.transformBind = transformBind;\nexports.transformElement = transformElement;\nexports.transformExpression = transformExpression;\nexports.transformModel = transformModel;\nexports.transformOn = transformOn;\nexports.traverseNode = traverseNode;\nexports.unwrapTSNode = unwrapTSNode;\nexports.walkBlockDeclarations = walkBlockDeclarations;\nexports.walkFunctionParams = walkFunctionParams;\nexports.walkIdentifiers = walkIdentifiers;\nexports.warnDeprecation = warnDeprecation;\n", "'use strict'\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./dist/compiler-core.cjs.prod.js')\n} else {\n  module.exports = require('./dist/compiler-core.cjs.js')\n}\n", "/**\n* @vue/compiler-dom v3.4.37\n* (c) 2018-present Yuxi (Evan) You and Vue contributors\n* @license MIT\n**/\n'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar compilerCore = require('@vue/compiler-core');\nvar shared = require('@vue/shared');\n\nconst V_MODEL_RADIO = Symbol(`vModelRadio` );\nconst V_MODEL_CHECKBOX = Symbol(`vModelCheckbox` );\nconst V_MODEL_TEXT = Symbol(`vModelText` );\nconst V_MODEL_SELECT = Symbol(`vModelSelect` );\nconst V_MODEL_DYNAMIC = Symbol(`vModelDynamic` );\nconst V_ON_WITH_MODIFIERS = Symbol(`vOnModifiersGuard` );\nconst V_ON_WITH_KEYS = Symbol(`vOnKeysGuard` );\nconst V_SHOW = Symbol(`vShow` );\nconst TRANSITION = Symbol(`Transition` );\nconst TRANSITION_GROUP = Symbol(`TransitionGroup` );\ncompilerCore.registerRuntimeHelpers({\n  [V_MODEL_RADIO]: `vModelRadio`,\n  [V_MODEL_CHECKBOX]: `vModelCheckbox`,\n  [V_MODEL_TEXT]: `vModelText`,\n  [V_MODEL_SELECT]: `vModelSelect`,\n  [V_MODEL_DYNAMIC]: `vModelDynamic`,\n  [V_ON_WITH_MODIFIERS]: `withModifiers`,\n  [V_ON_WITH_KEYS]: `withKeys`,\n  [V_SHOW]: `vShow`,\n  [TRANSITION]: `Transition`,\n  [TRANSITION_GROUP]: `TransitionGroup`\n});\n\nconst parserOptions = {\n  parseMode: \"html\",\n  isVoidTag: shared.isVoidTag,\n  isNativeTag: (tag) => shared.isHTMLTag(tag) || shared.isSVGTag(tag) || shared.isMathMLTag(tag),\n  isPreTag: (tag) => tag === \"pre\",\n  decodeEntities: void 0,\n  isBuiltInComponent: (tag) => {\n    if (tag === \"Transition\" || tag === \"transition\") {\n      return TRANSITION;\n    } else if (tag === \"TransitionGroup\" || tag === \"transition-group\") {\n      return TRANSITION_GROUP;\n    }\n  },\n  // https://html.spec.whatwg.org/multipage/parsing.html#tree-construction-dispatcher\n  getNamespace(tag, parent, rootNamespace) {\n    let ns = parent ? parent.ns : rootNamespace;\n    if (parent && ns === 2) {\n      if (parent.tag === \"annotation-xml\") {\n        if (tag === \"svg\") {\n          return 1;\n        }\n        if (parent.props.some(\n          (a) => a.type === 6 && a.name === \"encoding\" && a.value != null && (a.value.content === \"text/html\" || a.value.content === \"application/xhtml+xml\")\n        )) {\n          ns = 0;\n        }\n      } else if (/^m(?:[ions]|text)$/.test(parent.tag) && tag !== \"mglyph\" && tag !== \"malignmark\") {\n        ns = 0;\n      }\n    } else if (parent && ns === 1) {\n      if (parent.tag === \"foreignObject\" || parent.tag === \"desc\" || parent.tag === \"title\") {\n        ns = 0;\n      }\n    }\n    if (ns === 0) {\n      if (tag === \"svg\") {\n        return 1;\n      }\n      if (tag === \"math\") {\n        return 2;\n      }\n    }\n    return ns;\n  }\n};\n\nconst transformStyle = (node) => {\n  if (node.type === 1) {\n    node.props.forEach((p, i) => {\n      if (p.type === 6 && p.name === \"style\" && p.value) {\n        node.props[i] = {\n          type: 7,\n          name: `bind`,\n          arg: compilerCore.createSimpleExpression(`style`, true, p.loc),\n          exp: parseInlineCSS(p.value.content, p.loc),\n          modifiers: [],\n          loc: p.loc\n        };\n      }\n    });\n  }\n};\nconst parseInlineCSS = (cssText, loc) => {\n  const normalized = shared.parseStringStyle(cssText);\n  return compilerCore.createSimpleExpression(\n    JSON.stringify(normalized),\n    false,\n    loc,\n    3\n  );\n};\n\nfunction createDOMCompilerError(code, loc) {\n  return compilerCore.createCompilerError(\n    code,\n    loc,\n    DOMErrorMessages \n  );\n}\nconst DOMErrorCodes = {\n  \"X_V_HTML_NO_EXPRESSION\": 53,\n  \"53\": \"X_V_HTML_NO_EXPRESSION\",\n  \"X_V_HTML_WITH_CHILDREN\": 54,\n  \"54\": \"X_V_HTML_WITH_CHILDREN\",\n  \"X_V_TEXT_NO_EXPRESSION\": 55,\n  \"55\": \"X_V_TEXT_NO_EXPRESSION\",\n  \"X_V_TEXT_WITH_CHILDREN\": 56,\n  \"56\": \"X_V_TEXT_WITH_CHILDREN\",\n  \"X_V_MODEL_ON_INVALID_ELEMENT\": 57,\n  \"57\": \"X_V_MODEL_ON_INVALID_ELEMENT\",\n  \"X_V_MODEL_ARG_ON_ELEMENT\": 58,\n  \"58\": \"X_V_MODEL_ARG_ON_ELEMENT\",\n  \"X_V_MODEL_ON_FILE_INPUT_ELEMENT\": 59,\n  \"59\": \"X_V_MODEL_ON_FILE_INPUT_ELEMENT\",\n  \"X_V_MODEL_UNNECESSARY_VALUE\": 60,\n  \"60\": \"X_V_MODEL_UNNECESSARY_VALUE\",\n  \"X_V_SHOW_NO_EXPRESSION\": 61,\n  \"61\": \"X_V_SHOW_NO_EXPRESSION\",\n  \"X_TRANSITION_INVALID_CHILDREN\": 62,\n  \"62\": \"X_TRANSITION_INVALID_CHILDREN\",\n  \"X_IGNORED_SIDE_EFFECT_TAG\": 63,\n  \"63\": \"X_IGNORED_SIDE_EFFECT_TAG\",\n  \"__EXTEND_POINT__\": 64,\n  \"64\": \"__EXTEND_POINT__\"\n};\nconst DOMErrorMessages = {\n  [53]: `v-html is missing expression.`,\n  [54]: `v-html will override element children.`,\n  [55]: `v-text is missing expression.`,\n  [56]: `v-text will override element children.`,\n  [57]: `v-model can only be used on <input>, <textarea> and <select> elements.`,\n  [58]: `v-model argument is not supported on plain elements.`,\n  [59]: `v-model cannot be used on file inputs since they are read-only. Use a v-on:change listener instead.`,\n  [60]: `Unnecessary value binding used alongside v-model. It will interfere with v-model's behavior.`,\n  [61]: `v-show is missing expression.`,\n  [62]: `<Transition> expects exactly one child element or component.`,\n  [63]: `Tags with side effect (<script> and <style>) are ignored in client component templates.`\n};\n\nconst transformVHtml = (dir, node, context) => {\n  const { exp, loc } = dir;\n  if (!exp) {\n    context.onError(\n      createDOMCompilerError(53, loc)\n    );\n  }\n  if (node.children.length) {\n    context.onError(\n      createDOMCompilerError(54, loc)\n    );\n    node.children.length = 0;\n  }\n  return {\n    props: [\n      compilerCore.createObjectProperty(\n        compilerCore.createSimpleExpression(`innerHTML`, true, loc),\n        exp || compilerCore.createSimpleExpression(\"\", true)\n      )\n    ]\n  };\n};\n\nconst transformVText = (dir, node, context) => {\n  const { exp, loc } = dir;\n  if (!exp) {\n    context.onError(\n      createDOMCompilerError(55, loc)\n    );\n  }\n  if (node.children.length) {\n    context.onError(\n      createDOMCompilerError(56, loc)\n    );\n    node.children.length = 0;\n  }\n  return {\n    props: [\n      compilerCore.createObjectProperty(\n        compilerCore.createSimpleExpression(`textContent`, true),\n        exp ? compilerCore.getConstantType(exp, context) > 0 ? exp : compilerCore.createCallExpression(\n          context.helperString(compilerCore.TO_DISPLAY_STRING),\n          [exp],\n          loc\n        ) : compilerCore.createSimpleExpression(\"\", true)\n      )\n    ]\n  };\n};\n\nconst transformModel = (dir, node, context) => {\n  const baseResult = compilerCore.transformModel(dir, node, context);\n  if (!baseResult.props.length || node.tagType === 1) {\n    return baseResult;\n  }\n  if (dir.arg) {\n    context.onError(\n      createDOMCompilerError(\n        58,\n        dir.arg.loc\n      )\n    );\n  }\n  function checkDuplicatedValue() {\n    const value = compilerCore.findDir(node, \"bind\");\n    if (value && compilerCore.isStaticArgOf(value.arg, \"value\")) {\n      context.onError(\n        createDOMCompilerError(\n          60,\n          value.loc\n        )\n      );\n    }\n  }\n  const { tag } = node;\n  const isCustomElement = context.isCustomElement(tag);\n  if (tag === \"input\" || tag === \"textarea\" || tag === \"select\" || isCustomElement) {\n    let directiveToUse = V_MODEL_TEXT;\n    let isInvalidType = false;\n    if (tag === \"input\" || isCustomElement) {\n      const type = compilerCore.findProp(node, `type`);\n      if (type) {\n        if (type.type === 7) {\n          directiveToUse = V_MODEL_DYNAMIC;\n        } else if (type.value) {\n          switch (type.value.content) {\n            case \"radio\":\n              directiveToUse = V_MODEL_RADIO;\n              break;\n            case \"checkbox\":\n              directiveToUse = V_MODEL_CHECKBOX;\n              break;\n            case \"file\":\n              isInvalidType = true;\n              context.onError(\n                createDOMCompilerError(\n                  59,\n                  dir.loc\n                )\n              );\n              break;\n            default:\n              checkDuplicatedValue();\n              break;\n          }\n        }\n      } else if (compilerCore.hasDynamicKeyVBind(node)) {\n        directiveToUse = V_MODEL_DYNAMIC;\n      } else {\n        checkDuplicatedValue();\n      }\n    } else if (tag === \"select\") {\n      directiveToUse = V_MODEL_SELECT;\n    } else {\n      checkDuplicatedValue();\n    }\n    if (!isInvalidType) {\n      baseResult.needRuntime = context.helper(directiveToUse);\n    }\n  } else {\n    context.onError(\n      createDOMCompilerError(\n        57,\n        dir.loc\n      )\n    );\n  }\n  baseResult.props = baseResult.props.filter(\n    (p) => !(p.key.type === 4 && p.key.content === \"modelValue\")\n  );\n  return baseResult;\n};\n\nconst isEventOptionModifier = /* @__PURE__ */ shared.makeMap(`passive,once,capture`);\nconst isNonKeyModifier = /* @__PURE__ */ shared.makeMap(\n  // event propagation management\n  `stop,prevent,self,ctrl,shift,alt,meta,exact,middle`\n);\nconst maybeKeyModifier = /* @__PURE__ */ shared.makeMap(\"left,right\");\nconst isKeyboardEvent = /* @__PURE__ */ shared.makeMap(\n  `onkeyup,onkeydown,onkeypress`,\n  true\n);\nconst resolveModifiers = (key, modifiers, context, loc) => {\n  const keyModifiers = [];\n  const nonKeyModifiers = [];\n  const eventOptionModifiers = [];\n  for (let i = 0; i < modifiers.length; i++) {\n    const modifier = modifiers[i];\n    if (modifier === \"native\" && compilerCore.checkCompatEnabled(\n      \"COMPILER_V_ON_NATIVE\",\n      context,\n      loc\n    )) {\n      eventOptionModifiers.push(modifier);\n    } else if (isEventOptionModifier(modifier)) {\n      eventOptionModifiers.push(modifier);\n    } else {\n      if (maybeKeyModifier(modifier)) {\n        if (compilerCore.isStaticExp(key)) {\n          if (isKeyboardEvent(key.content)) {\n            keyModifiers.push(modifier);\n          } else {\n            nonKeyModifiers.push(modifier);\n          }\n        } else {\n          keyModifiers.push(modifier);\n          nonKeyModifiers.push(modifier);\n        }\n      } else {\n        if (isNonKeyModifier(modifier)) {\n          nonKeyModifiers.push(modifier);\n        } else {\n          keyModifiers.push(modifier);\n        }\n      }\n    }\n  }\n  return {\n    keyModifiers,\n    nonKeyModifiers,\n    eventOptionModifiers\n  };\n};\nconst transformClick = (key, event) => {\n  const isStaticClick = compilerCore.isStaticExp(key) && key.content.toLowerCase() === \"onclick\";\n  return isStaticClick ? compilerCore.createSimpleExpression(event, true) : key.type !== 4 ? compilerCore.createCompoundExpression([\n    `(`,\n    key,\n    `) === \"onClick\" ? \"${event}\" : (`,\n    key,\n    `)`\n  ]) : key;\n};\nconst transformOn = (dir, node, context) => {\n  return compilerCore.transformOn(dir, node, context, (baseResult) => {\n    const { modifiers } = dir;\n    if (!modifiers.length) return baseResult;\n    let { key, value: handlerExp } = baseResult.props[0];\n    const { keyModifiers, nonKeyModifiers, eventOptionModifiers } = resolveModifiers(key, modifiers, context, dir.loc);\n    if (nonKeyModifiers.includes(\"right\")) {\n      key = transformClick(key, `onContextmenu`);\n    }\n    if (nonKeyModifiers.includes(\"middle\")) {\n      key = transformClick(key, `onMouseup`);\n    }\n    if (nonKeyModifiers.length) {\n      handlerExp = compilerCore.createCallExpression(context.helper(V_ON_WITH_MODIFIERS), [\n        handlerExp,\n        JSON.stringify(nonKeyModifiers)\n      ]);\n    }\n    if (keyModifiers.length && // if event name is dynamic, always wrap with keys guard\n    (!compilerCore.isStaticExp(key) || isKeyboardEvent(key.content))) {\n      handlerExp = compilerCore.createCallExpression(context.helper(V_ON_WITH_KEYS), [\n        handlerExp,\n        JSON.stringify(keyModifiers)\n      ]);\n    }\n    if (eventOptionModifiers.length) {\n      const modifierPostfix = eventOptionModifiers.map(shared.capitalize).join(\"\");\n      key = compilerCore.isStaticExp(key) ? compilerCore.createSimpleExpression(`${key.content}${modifierPostfix}`, true) : compilerCore.createCompoundExpression([`(`, key, `) + \"${modifierPostfix}\"`]);\n    }\n    return {\n      props: [compilerCore.createObjectProperty(key, handlerExp)]\n    };\n  });\n};\n\nconst transformShow = (dir, node, context) => {\n  const { exp, loc } = dir;\n  if (!exp) {\n    context.onError(\n      createDOMCompilerError(61, loc)\n    );\n  }\n  return {\n    props: [],\n    needRuntime: context.helper(V_SHOW)\n  };\n};\n\nconst transformTransition = (node, context) => {\n  if (node.type === 1 && node.tagType === 1) {\n    const component = context.isBuiltInComponent(node.tag);\n    if (component === TRANSITION) {\n      return () => {\n        if (!node.children.length) {\n          return;\n        }\n        if (hasMultipleChildren(node)) {\n          context.onError(\n            createDOMCompilerError(\n              62,\n              {\n                start: node.children[0].loc.start,\n                end: node.children[node.children.length - 1].loc.end,\n                source: \"\"\n              }\n            )\n          );\n        }\n        const child = node.children[0];\n        if (child.type === 1) {\n          for (const p of child.props) {\n            if (p.type === 7 && p.name === \"show\") {\n              node.props.push({\n                type: 6,\n                name: \"persisted\",\n                nameLoc: node.loc,\n                value: void 0,\n                loc: node.loc\n              });\n            }\n          }\n        }\n      };\n    }\n  }\n};\nfunction hasMultipleChildren(node) {\n  const children = node.children = node.children.filter(\n    (c) => c.type !== 3 && !(c.type === 2 && !c.content.trim())\n  );\n  const child = children[0];\n  return children.length !== 1 || child.type === 11 || child.type === 9 && child.branches.some(hasMultipleChildren);\n}\n\nconst expReplaceRE = /__VUE_EXP_START__(.*?)__VUE_EXP_END__/g;\nconst stringifyStatic = (children, context, parent) => {\n  if (context.scopes.vSlot > 0) {\n    return;\n  }\n  let nc = 0;\n  let ec = 0;\n  const currentChunk = [];\n  const stringifyCurrentChunk = (currentIndex) => {\n    if (nc >= 20 || ec >= 5) {\n      const staticCall = compilerCore.createCallExpression(context.helper(compilerCore.CREATE_STATIC), [\n        JSON.stringify(\n          currentChunk.map((node) => stringifyNode(node, context)).join(\"\")\n        ).replace(expReplaceRE, `\" + $1 + \"`),\n        // the 2nd argument indicates the number of DOM nodes this static vnode\n        // will insert / hydrate\n        String(currentChunk.length)\n      ]);\n      replaceHoist(currentChunk[0], staticCall, context);\n      if (currentChunk.length > 1) {\n        for (let i2 = 1; i2 < currentChunk.length; i2++) {\n          replaceHoist(currentChunk[i2], null, context);\n        }\n        const deleteCount = currentChunk.length - 1;\n        children.splice(currentIndex - currentChunk.length + 1, deleteCount);\n        return deleteCount;\n      }\n    }\n    return 0;\n  };\n  let i = 0;\n  for (; i < children.length; i++) {\n    const child = children[i];\n    const hoisted = getHoistedNode(child);\n    if (hoisted) {\n      const node = child;\n      const result = analyzeNode(node);\n      if (result) {\n        nc += result[0];\n        ec += result[1];\n        currentChunk.push(node);\n        continue;\n      }\n    }\n    i -= stringifyCurrentChunk(i);\n    nc = 0;\n    ec = 0;\n    currentChunk.length = 0;\n  }\n  stringifyCurrentChunk(i);\n};\nconst getHoistedNode = (node) => (node.type === 1 && node.tagType === 0 || node.type == 12) && node.codegenNode && node.codegenNode.type === 4 && node.codegenNode.hoisted;\nconst dataAriaRE = /^(data|aria)-/;\nconst isStringifiableAttr = (name, ns) => {\n  return (ns === 0 ? shared.isKnownHtmlAttr(name) : ns === 1 ? shared.isKnownSvgAttr(name) : false) || dataAriaRE.test(name);\n};\nconst replaceHoist = (node, replacement, context) => {\n  const hoistToReplace = node.codegenNode.hoisted;\n  context.hoists[context.hoists.indexOf(hoistToReplace)] = replacement;\n};\nconst isNonStringifiable = /* @__PURE__ */ shared.makeMap(\n  `caption,thead,tr,th,tbody,td,tfoot,colgroup,col`\n);\nfunction analyzeNode(node) {\n  if (node.type === 1 && isNonStringifiable(node.tag)) {\n    return false;\n  }\n  if (node.type === 12) {\n    return [1, 0];\n  }\n  let nc = 1;\n  let ec = node.props.length > 0 ? 1 : 0;\n  let bailed = false;\n  const bail = () => {\n    bailed = true;\n    return false;\n  };\n  function walk(node2) {\n    const isOptionTag = node2.tag === \"option\" && node2.ns === 0;\n    for (let i = 0; i < node2.props.length; i++) {\n      const p = node2.props[i];\n      if (p.type === 6 && !isStringifiableAttr(p.name, node2.ns)) {\n        return bail();\n      }\n      if (p.type === 7 && p.name === \"bind\") {\n        if (p.arg && (p.arg.type === 8 || p.arg.isStatic && !isStringifiableAttr(p.arg.content, node2.ns))) {\n          return bail();\n        }\n        if (p.exp && (p.exp.type === 8 || p.exp.constType < 3)) {\n          return bail();\n        }\n        if (isOptionTag && compilerCore.isStaticArgOf(p.arg, \"value\") && p.exp && p.exp.ast && p.exp.ast.type !== \"StringLiteral\") {\n          return bail();\n        }\n      }\n    }\n    for (let i = 0; i < node2.children.length; i++) {\n      nc++;\n      const child = node2.children[i];\n      if (child.type === 1) {\n        if (child.props.length > 0) {\n          ec++;\n        }\n        walk(child);\n        if (bailed) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n  return walk(node) ? [nc, ec] : false;\n}\nfunction stringifyNode(node, context) {\n  if (shared.isString(node)) {\n    return node;\n  }\n  if (shared.isSymbol(node)) {\n    return ``;\n  }\n  switch (node.type) {\n    case 1:\n      return stringifyElement(node, context);\n    case 2:\n      return shared.escapeHtml(node.content);\n    case 3:\n      return `<!--${shared.escapeHtml(node.content)}-->`;\n    case 5:\n      return shared.escapeHtml(shared.toDisplayString(evaluateConstant(node.content)));\n    case 8:\n      return shared.escapeHtml(evaluateConstant(node));\n    case 12:\n      return stringifyNode(node.content, context);\n    default:\n      return \"\";\n  }\n}\nfunction stringifyElement(node, context) {\n  let res = `<${node.tag}`;\n  let innerHTML = \"\";\n  for (let i = 0; i < node.props.length; i++) {\n    const p = node.props[i];\n    if (p.type === 6) {\n      res += ` ${p.name}`;\n      if (p.value) {\n        res += `=\"${shared.escapeHtml(p.value.content)}\"`;\n      }\n    } else if (p.type === 7) {\n      if (p.name === \"bind\") {\n        const exp = p.exp;\n        if (exp.content[0] === \"_\") {\n          res += ` ${p.arg.content}=\"__VUE_EXP_START__${exp.content}__VUE_EXP_END__\"`;\n          continue;\n        }\n        if (shared.isBooleanAttr(p.arg.content) && exp.content === \"false\") {\n          continue;\n        }\n        let evaluated = evaluateConstant(exp);\n        if (evaluated != null) {\n          const arg = p.arg && p.arg.content;\n          if (arg === \"class\") {\n            evaluated = shared.normalizeClass(evaluated);\n          } else if (arg === \"style\") {\n            evaluated = shared.stringifyStyle(shared.normalizeStyle(evaluated));\n          }\n          res += ` ${p.arg.content}=\"${shared.escapeHtml(\n            evaluated\n          )}\"`;\n        }\n      } else if (p.name === \"html\") {\n        innerHTML = evaluateConstant(p.exp);\n      } else if (p.name === \"text\") {\n        innerHTML = shared.escapeHtml(\n          shared.toDisplayString(evaluateConstant(p.exp))\n        );\n      }\n    }\n  }\n  if (context.scopeId) {\n    res += ` ${context.scopeId}`;\n  }\n  res += `>`;\n  if (innerHTML) {\n    res += innerHTML;\n  } else {\n    for (let i = 0; i < node.children.length; i++) {\n      res += stringifyNode(node.children[i], context);\n    }\n  }\n  if (!shared.isVoidTag(node.tag)) {\n    res += `</${node.tag}>`;\n  }\n  return res;\n}\nfunction evaluateConstant(exp) {\n  if (exp.type === 4) {\n    return new Function(`return (${exp.content})`)();\n  } else {\n    let res = ``;\n    exp.children.forEach((c) => {\n      if (shared.isString(c) || shared.isSymbol(c)) {\n        return;\n      }\n      if (c.type === 2) {\n        res += c.content;\n      } else if (c.type === 5) {\n        res += shared.toDisplayString(evaluateConstant(c.content));\n      } else {\n        res += evaluateConstant(c);\n      }\n    });\n    return res;\n  }\n}\n\nconst ignoreSideEffectTags = (node, context) => {\n  if (node.type === 1 && node.tagType === 0 && (node.tag === \"script\" || node.tag === \"style\")) {\n    context.onError(\n      createDOMCompilerError(\n        63,\n        node.loc\n      )\n    );\n    context.removeNode();\n  }\n};\n\nconst DOMNodeTransforms = [\n  transformStyle,\n  ...[transformTransition] \n];\nconst DOMDirectiveTransforms = {\n  cloak: compilerCore.noopDirectiveTransform,\n  html: transformVHtml,\n  text: transformVText,\n  model: transformModel,\n  // override compiler-core\n  on: transformOn,\n  // override compiler-core\n  show: transformShow\n};\nfunction compile(src, options = {}) {\n  return compilerCore.baseCompile(\n    src,\n    shared.extend({}, parserOptions, options, {\n      nodeTransforms: [\n        // ignore <script> and <tag>\n        // this is not put inside DOMNodeTransforms because that list is used\n        // by compiler-ssr to generate vnode fallback branches\n        ignoreSideEffectTags,\n        ...DOMNodeTransforms,\n        ...options.nodeTransforms || []\n      ],\n      directiveTransforms: shared.extend(\n        {},\n        DOMDirectiveTransforms,\n        options.directiveTransforms || {}\n      ),\n      transformHoist: stringifyStatic\n    })\n  );\n}\nfunction parse(template, options = {}) {\n  return compilerCore.baseParse(template, shared.extend({}, parserOptions, options));\n}\n\nexports.DOMDirectiveTransforms = DOMDirectiveTransforms;\nexports.DOMErrorCodes = DOMErrorCodes;\nexports.DOMErrorMessages = DOMErrorMessages;\nexports.DOMNodeTransforms = DOMNodeTransforms;\nexports.TRANSITION = TRANSITION;\nexports.TRANSITION_GROUP = TRANSITION_GROUP;\nexports.V_MODEL_CHECKBOX = V_MODEL_CHECKBOX;\nexports.V_MODEL_DYNAMIC = V_MODEL_DYNAMIC;\nexports.V_MODEL_RADIO = V_MODEL_RADIO;\nexports.V_MODEL_SELECT = V_MODEL_SELECT;\nexports.V_MODEL_TEXT = V_MODEL_TEXT;\nexports.V_ON_WITH_KEYS = V_ON_WITH_KEYS;\nexports.V_ON_WITH_MODIFIERS = V_ON_WITH_MODIFIERS;\nexports.V_SHOW = V_SHOW;\nexports.compile = compile;\nexports.createDOMCompilerError = createDOMCompilerError;\nexports.parse = parse;\nexports.parserOptions = parserOptions;\nexports.transformStyle = transformStyle;\nObject.keys(compilerCore).forEach(function (k) {\n  if (k !== 'default' && !Object.prototype.hasOwnProperty.call(exports, k)) exports[k] = compilerCore[k];\n});\n", "'use strict'\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./dist/compiler-dom.cjs.prod.js')\n} else {\n  module.exports = require('./dist/compiler-dom.cjs.js')\n}\n", "/**\n* vue v3.4.37\n* (c) 2018-present Yuxi (Evan) You and Vue contributors\n* @license MIT\n**/\n'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar compilerDom = require('@vue/compiler-dom');\nvar runtimeDom = require('@vue/runtime-dom');\nvar shared = require('@vue/shared');\n\nfunction _interopNamespaceDefault(e) {\n  var n = Object.create(null);\n  if (e) {\n    for (var k in e) {\n      n[k] = e[k];\n    }\n  }\n  n.default = e;\n  return Object.freeze(n);\n}\n\nvar runtimeDom__namespace = /*#__PURE__*/_interopNamespaceDefault(runtimeDom);\n\nconst compileCache = /* @__PURE__ */ new WeakMap();\nfunction getCache(options) {\n  let c = compileCache.get(options != null ? options : shared.EMPTY_OBJ);\n  if (!c) {\n    c = /* @__PURE__ */ Object.create(null);\n    compileCache.set(options != null ? options : shared.EMPTY_OBJ, c);\n  }\n  return c;\n}\nfunction compileToFunction(template, options) {\n  if (!shared.isString(template)) {\n    if (template.nodeType) {\n      template = template.innerHTML;\n    } else {\n      runtimeDom.warn(`invalid template option: `, template);\n      return shared.NOOP;\n    }\n  }\n  const key = template;\n  const cache = getCache(options);\n  const cached = cache[key];\n  if (cached) {\n    return cached;\n  }\n  if (template[0] === \"#\") {\n    const el = document.querySelector(template);\n    if (!el) {\n      runtimeDom.warn(`Template element not found or is empty: ${template}`);\n    }\n    template = el ? el.innerHTML : ``;\n  }\n  const opts = shared.extend(\n    {\n      hoistStatic: true,\n      onError: onError ,\n      onWarn: (e) => onError(e, true) \n    },\n    options\n  );\n  if (!opts.isCustomElement && typeof customElements !== \"undefined\") {\n    opts.isCustomElement = (tag) => !!customElements.get(tag);\n  }\n  const { code } = compilerDom.compile(template, opts);\n  function onError(err, asWarning = false) {\n    const message = asWarning ? err.message : `Template compilation error: ${err.message}`;\n    const codeFrame = err.loc && shared.generateCodeFrame(\n      template,\n      err.loc.start.offset,\n      err.loc.end.offset\n    );\n    runtimeDom.warn(codeFrame ? `${message}\n${codeFrame}` : message);\n  }\n  const render = new Function(\"Vue\", code)(runtimeDom__namespace);\n  render._rc = true;\n  return cache[key] = render;\n}\nruntimeDom.registerRuntimeCompiler(compileToFunction);\n\nexports.compile = compileToFunction;\nObject.keys(runtimeDom).forEach(function (k) {\n  if (k !== 'default' && !Object.prototype.hasOwnProperty.call(exports, k)) exports[k] = runtimeDom[k];\n});\n", "'use strict'\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./dist/vue.cjs.prod.js')\n} else {\n  module.exports = require('./dist/vue.cjs.js')\n}\n"],
  "mappings": "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,IAAG,GAAE,IAAG,IAAG,IAAG,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,IAAG,KAAI,IAAG,IAAG,GAAE,IAAG,GAAE,IAAG,GAAE,IAAG,IAAG,IAAG,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,GAAE,IAAG,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,IAAG,KAAI,IAAG,IAAG,IAAG,GAAE,IAAG,GAAE,GAAE,IAAG,GAAE,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,GAAE,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,GAAE,GAAE,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,GAAE,GAAE,IAAG,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,IAAG,IAAG,IAAG,GAAE,IAAG,IAAG,GAAE,GAAE,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,KAAI,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,KAAI,IAAG,GAAE,GAAE,IAAG,IAAG,IAAG,GAAE,GAAE,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,GAAE,GAAE,GAAE,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,GAAE,GAAE,GAAE,GAAE,IAAG,GAAE,GAAE,IAAG,IAAG,IAAG,GAAE,IAAG,GAAE,GAAE,GAAE,IAAG,IAAG,GAAE,IAAG,IAAG,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,IAAG,GAAE,GAAE,GAAE,IAAG,IAAG,GAAE,GAAE,GAAE,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,IAAG,GAAE,IAAG,GAAE,KAAI,IAAG,IAAG,GAAE,IAAG,GAAE,IAAG,IAAG,IAAG,GAAE,GAAE,GAAE,KAAI,IAAG,IAAG,GAAE,IAAG,IAAG,IAAG,GAAE,IAAG,IAAG,IAAG,GAAE,IAAG,IAAG,IAAG,GAAE,KAAI,IAAG,KAAI,IAAG,IAAG,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,IAAG,IAAG,GAAE,GAAE,GAAE,IAAG,GAAE,GAAE,IAAG,IAAG,GAAE,GAAE,GAAE,IAAG,GAAE,IAAG,IAAG,GAAE,GAAE,IAAG,GAAE,IAAG,IAAG,IAAG,GAAE,IAAG,IAAG,KAAI,GAAE,GAAE,IAAG,IAAG,GAAE,IAAG,IAAG,KAAI,GAAE,GAAE,GAAE,GAAE,IAAG,IAAG,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,IAAG,IAAG,GAAE,KAAI,IAAG,IAAG,GAAE,GAAE,IAAG,GAAE,IAAG,KAAI,GAAE,IAAG,KAAI,KAAI,KAAI,IAAG,KAAI,MAAK,IAAG,IAAG,MAAK,IAAG,GAAE,MAAK,KAAI,MAAK,KAAI,GAAE,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,GAAE,IAAG,IAAG,GAAE,IAAG,KAAI,IAAG,KAAI,IAAG,GAAE,GAAE,IAAG,IAAG,IAAG,GAAE,GAAE,GAAE,IAAG,MAAK,GAAE,MAAK,IAAG,GAAE,MAAK,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,KAAI,IAAG,GAAE,IAAG,GAAE,GAAE,GAAE,IAAG,GAAE,GAAE,KAAI,MAAK,KAAI,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,MAAK,IAAG,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,KAAI,GAAE,IAAG,GAAE,IAAG,GAAE,IAAG,GAAE,IAAG,GAAE,IAAG,GAAE,IAAG,GAAE,IAAG,GAAE,IAAG,GAAE,IAAG,GAAE,IAAG,GAAE,GAAE,MAAK,IAAG,GAAE,GAAE,KAAI,IAAG,KAAI,IAAG,IAAG,GAAE,IAAG,GAAE,KAAI,IAAG,IAAG,IAAG,KAAI,IAAG,KAAI,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,IAAG,GAAE,KAAI,IAAG,IAAG,GAAE,GAAE,MAAK,GAAE,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,GAAE,IAAG,MAAK,OAAM,IAAG,MAAK,GAAE,KAAI,GAAE,MAAK,IAAG,MAAK,IAAG,KAAI,MAAK,KAAI,MAAK,MAAK,GAAE;AAEn+C,QAAM,wBAAwB,CAAC,KAAI,GAAE,KAAI,GAAE,KAAI,GAAE,KAAI,GAAE,MAAK,GAAE,GAAE,GAAE,GAAE,GAAE,IAAG,GAAE,GAAE,GAAE,KAAI,GAAE,KAAI,GAAE,GAAE,GAAE,KAAI,GAAE,IAAG,GAAE,IAAG,IAAG,IAAG,GAAE,KAAI,GAAE,IAAG,IAAG,IAAG,IAAG,GAAE,GAAE,IAAG,GAAE,IAAG,IAAG,GAAE,GAAE,IAAG,GAAE,GAAE,GAAE,IAAG,IAAG,GAAE,GAAE,GAAE,GAAE,IAAG,GAAE,IAAG,GAAE,IAAG,IAAG,GAAE,GAAE,GAAE,IAAG,IAAG,IAAG,GAAE,GAAE,GAAE,GAAE,KAAI,IAAG,GAAE,GAAE,GAAE,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,IAAG,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,GAAE,KAAI,IAAG,IAAG,GAAE,GAAE,GAAE,IAAG,IAAG,IAAG,GAAE,KAAI,GAAE,GAAE,GAAE,IAAG,GAAE,IAAG,IAAG,IAAG,GAAE,IAAG,IAAG,GAAE,GAAE,IAAG,IAAG,GAAE,GAAE,KAAI,IAAG,KAAI,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,IAAG,GAAE,KAAI,GAAE,GAAE,GAAE,GAAE,GAAE,IAAG,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,GAAE,IAAG,IAAG,IAAG,IAAG,KAAI,GAAE,GAAE,GAAE,IAAG,GAAE,IAAG,IAAG,GAAE,IAAG,KAAI,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,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",
  "names": []
}

import {
  require_util
} from "./chunk-PVO75NR6.js";
import {
  require_interopRequireDefault
} from "./chunk-6OJXVRDW.js";
import {
  __commonJS
} from "./chunk-A5ICIBVI.js";

// node_modules/@kangc/v-md-editor/lib/plugins/todo-list/toolbar.js
var require_toolbar = __commonJS({
  "node_modules/@kangc/v-md-editor/lib/plugins/todo-list/toolbar.js"(exports) {
    "use strict";
    exports.__esModule = true;
    exports.default = createToolbar;
    function createToolbar(_ref) {
      var commandName = _ref.commandName, text = _ref.text, title = _ref.title, icon = _ref.icon;
      return {
        title,
        icon,
        text,
        action: function action(editor) {
          editor.execCommand(commandName, {
            type: "todo"
          });
        }
      };
    }
  }
});

// node_modules/@kangc/v-md-editor/lib/plugins/todo-list/command.js
var require_command = __commonJS({
  "node_modules/@kangc/v-md-editor/lib/plugins/todo-list/command.js"(exports) {
    "use strict";
    exports.__esModule = true;
    exports.default = commandHandler;
    var _util = require_util();
    function commandHandler(editor, _temp) {
      var _ref = _temp === void 0 ? {} : _temp, _ref$type = _ref.type, type = _ref$type === void 0 ? "todo" : _ref$type;
      editor.insert(function(selected) {
        var placeholder = editor.langConfig.task.placeholder;
        var markup = type === "todo" ? " " : "x";
        var selectedGetter = function selectedGetter2(selected2) {
          return selected2 || placeholder;
        };
        var _generatorText = (0, _util.generatorText)({
          selected,
          InsertGetter: function InsertGetter(selected2) {
            return "- [" + markup + "] " + selectedGetter(selected2);
          },
          selectedGetter
        }), insertContent = _generatorText.insertContent, newSelected = _generatorText.newSelected;
        return {
          text: insertContent,
          selected: newSelected
        };
      });
    }
  }
});

// node_modules/@kangc/v-md-editor/lib/utils/markdown-it-todo-list.js
var require_markdown_it_todo_list = __commonJS({
  "node_modules/@kangc/v-md-editor/lib/utils/markdown-it-todo-list.js"(exports) {
    "use strict";
    exports.__esModule = true;
    exports.default = _default;
    function _default(md, options) {
      if (options === void 0) {
        options = {};
      }
      var _options = options, _options$listClass = _options.listClass, listClass = _options$listClass === void 0 ? "v-md-editor__todo-list" : _options$listClass, _options$listItemClas = _options.listItemClass, listItemClass = _options$listItemClas === void 0 ? "v-md-editor__todo-list-item" : _options$listItemClas, _options$renderCheckb = _options.renderCheckbox, renderCheckbox = _options$renderCheckb === void 0 ? function(type) {
        return '<input class="v-md-editor__todo-list-checkbox" type="checkbox" ' + (type === "todo" ? "" : "checked") + ">";
      } : _options$renderCheckb;
      function attrSet(token, name, value) {
        var index = token.attrIndex(name);
        var attr = [name, value];
        if (index < 0) {
          token.attrPush(attr);
        } else {
          token.attrs[index] = attr;
        }
      }
      function parentToken(tokens, index) {
        var targetLevel = tokens[index].level - 1;
        for (var i = index - 1; i >= 0; i--) {
          if (tokens[i].level === targetLevel) {
            return i;
          }
        }
        return -1;
      }
      function isTodoItem(tokens, index) {
        return isInline(tokens[index]) && isParagraph(tokens[index - 1]) && isListItem(tokens[index - 2]) && startsWithTodoMarkdown(tokens[index]);
      }
      function todoify(token, TokenConstructor) {
        token.children.unshift(makeCheckbox(token, TokenConstructor));
        token.children[1].content = token.children[1].content.slice(3);
        token.content = token.content.slice(3);
      }
      function makeCheckbox(token, TokenConstructor) {
        var checkbox = new TokenConstructor("html_inline", "", 0);
        if (token.content.indexOf("[ ] ") === 0) {
          checkbox.content = renderCheckbox("todo");
        } else if (token.content.indexOf("[x] ") === 0 || token.content.indexOf("[X] ") === 0) {
          checkbox.content = renderCheckbox("completed");
        }
        return checkbox;
      }
      function isInline(token) {
        return token.type === "inline";
      }
      function isParagraph(token) {
        return token.type === "paragraph_open";
      }
      function isListItem(token) {
        return token.type === "list_item_open";
      }
      function startsWithTodoMarkdown(token) {
        return token.content.indexOf("[ ] ") === 0 || token.content.indexOf("[x] ") === 0 || token.content.indexOf("[X] ") === 0;
      }
      md.core.ruler.after("inline", "v-md-task-lists", function(state) {
        var tokens = state.tokens;
        for (var i = 2; i < tokens.length; i++) {
          if (isTodoItem(tokens, i)) {
            todoify(tokens[i], state.Token);
            attrSet(tokens[i - 2], "class", listItemClass);
            attrSet(tokens[parentToken(tokens, i - 2)], "class", listClass);
          }
        }
      });
    }
  }
});

// node_modules/@kangc/v-md-editor/lib/plugins/todo-list/parser.js
var require_parser = __commonJS({
  "node_modules/@kangc/v-md-editor/lib/plugins/todo-list/parser.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    exports.__esModule = true;
    exports.default = _default;
    var _markdownItTodoList = _interopRequireDefault(require_markdown_it_todo_list());
    function _default(vMdParser, options) {
      vMdParser.extendMarkdown(function(mdParser) {
        var color = (options == null ? void 0 : options.color) || "#3eaf7c";
        var defaultBorderColor = "#d9d9d9";
        var border = function border2(type) {
          return "border-color: " + (type === "todo" ? defaultBorderColor : color);
        };
        var background = "background-color: " + color;
        mdParser.use(_markdownItTodoList.default, {
          renderCheckbox: function renderCheckbox(type) {
            var checkboxClass = "v-md-editor__todo-list-checkbox";
            var style = type === "todo" ? "" + border(type) : border(type) + ";" + background;
            return '<span class="' + checkboxClass + (type === "todo" ? "" : " " + checkboxClass + "--checked") + '" style="' + style + '"></span>';
          }
        });
      });
    }
  }
});

// node_modules/@kangc/v-md-editor/lib/plugins/todo-list/index.js
var require_todo_list = __commonJS({
  "node_modules/@kangc/v-md-editor/lib/plugins/todo-list/index.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    exports.__esModule = true;
    exports.default = createTodoListPlugin;
    var _toolbar = _interopRequireDefault(require_toolbar());
    var _command = _interopRequireDefault(require_command());
    var _parser = _interopRequireDefault(require_parser());
    function createTodoListPlugin(_temp) {
      var _ref = _temp === void 0 ? {} : _temp, _ref$name = _ref.name, name = _ref$name === void 0 ? "todo-list" : _ref$name, _ref$icon = _ref.icon, icon = _ref$icon === void 0 ? "v-md-icon-checkbox" : _ref$icon, text = _ref.text, color = _ref.color;
      var toolbar = (0, _toolbar.default)({
        commandName: name,
        title: function title(editor) {
          return editor.langConfig.task.toolbar + "\uFF08Ctrl+Shift+U\uFF09";
        },
        text,
        icon
      });
      return {
        install: function install(VMdEditor) {
          if (VMdEditor.name === "v-md-editor") {
            VMdEditor.command(name, _command.default);
            VMdEditor.toolbar(name, toolbar);
            VMdEditor.hotkey({
              modifier: "ctrlShift",
              key: "u",
              action: function action(editor) {
                editor.execCommand(name);
              }
            });
            VMdEditor.lang.add({
              "zh-CN": {
                task: {
                  toolbar: "\u4EFB\u52A1\u5217\u8868",
                  placeholder: "\u4EFB\u52A1\u5217\u8868"
                }
              },
              "en-US": {
                task: {
                  toolbar: "Task",
                  placeholder: "Task"
                }
              }
            });
          }
          VMdEditor.vMdParser.use(_parser.default, {
            color
          });
        }
      };
    }
  }
});

// dep:@kangc_v-md-editor_lib_plugins_todo-list_index
var kangc_v_md_editor_lib_plugins_todo_list_index_default = require_todo_list();
export {
  kangc_v_md_editor_lib_plugins_todo_list_index_default as default
};
//# sourceMappingURL=@kangc_v-md-editor_lib_plugins_todo-list_index.js.map

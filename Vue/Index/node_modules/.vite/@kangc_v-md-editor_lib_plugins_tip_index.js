import {
  require_interopRequireDefault
} from "./chunk-6OJXVRDW.js";
import {
  __commonJS
} from "./chunk-A5ICIBVI.js";

// node_modules/markdown-it-container/index.js
var require_markdown_it_container = __commonJS({
  "node_modules/markdown-it-container/index.js"(exports, module) {
    "use strict";
    module.exports = function container_plugin(md, name, options) {
      function validateDefault(params) {
        return params.trim().split(" ", 2)[0] === name;
      }
      function renderDefault(tokens, idx, _options, env, slf) {
        if (tokens[idx].nesting === 1) {
          tokens[idx].attrJoin("class", name);
        }
        return slf.renderToken(tokens, idx, _options, env, slf);
      }
      options = options || {};
      var min_markers = 3, marker_str = options.marker || ":", marker_char = marker_str.charCodeAt(0), marker_len = marker_str.length, validate = options.validate || validateDefault, render = options.render || renderDefault;
      function container(state, startLine, endLine, silent) {
        var pos, nextLine, marker_count, markup, params, token, old_parent, old_line_max, auto_closed = false, start = state.bMarks[startLine] + state.tShift[startLine], max = state.eMarks[startLine];
        if (marker_char !== state.src.charCodeAt(start)) {
          return false;
        }
        for (pos = start + 1; pos <= max; pos++) {
          if (marker_str[(pos - start) % marker_len] !== state.src[pos]) {
            break;
          }
        }
        marker_count = Math.floor((pos - start) / marker_len);
        if (marker_count < min_markers) {
          return false;
        }
        pos -= (pos - start) % marker_len;
        markup = state.src.slice(start, pos);
        params = state.src.slice(pos, max);
        if (!validate(params, markup)) {
          return false;
        }
        if (silent) {
          return true;
        }
        nextLine = startLine;
        for (; ; ) {
          nextLine++;
          if (nextLine >= endLine) {
            break;
          }
          start = state.bMarks[nextLine] + state.tShift[nextLine];
          max = state.eMarks[nextLine];
          if (start < max && state.sCount[nextLine] < state.blkIndent) {
            break;
          }
          if (marker_char !== state.src.charCodeAt(start)) {
            continue;
          }
          if (state.sCount[nextLine] - state.blkIndent >= 4) {
            continue;
          }
          for (pos = start + 1; pos <= max; pos++) {
            if (marker_str[(pos - start) % marker_len] !== state.src[pos]) {
              break;
            }
          }
          if (Math.floor((pos - start) / marker_len) < marker_count) {
            continue;
          }
          pos -= (pos - start) % marker_len;
          pos = state.skipSpaces(pos);
          if (pos < max) {
            continue;
          }
          auto_closed = true;
          break;
        }
        old_parent = state.parentType;
        old_line_max = state.lineMax;
        state.parentType = "container";
        state.lineMax = nextLine;
        token = state.push("container_" + name + "_open", "div", 1);
        token.markup = markup;
        token.block = true;
        token.info = params;
        token.map = [startLine, nextLine];
        state.md.block.tokenize(state, startLine + 1, nextLine);
        token = state.push("container_" + name + "_close", "div", -1);
        token.markup = state.src.slice(start, pos);
        token.block = true;
        state.parentType = old_parent;
        state.lineMax = old_line_max;
        state.line = nextLine + (auto_closed ? 1 : 0);
        return true;
      }
      md.block.ruler.before("fence", "container_" + name, container, {
        alt: ["paragraph", "reference", "blockquote", "list"]
      });
      md.renderer.rules["container_" + name + "_open"] = render;
      md.renderer.rules["container_" + name + "_close"] = render;
    };
  }
});

// node_modules/@kangc/v-md-editor/lib/utils/markdown-it-container.js
var require_markdown_it_container2 = __commonJS({
  "node_modules/@kangc/v-md-editor/lib/utils/markdown-it-container.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    exports.__esModule = true;
    exports.default = _default;
    var _markdownItContainer = _interopRequireDefault(require_markdown_it_container());
    function wrapRenderPlaceFunction(func) {
      if (typeof func === "string") {
        return function() {
          return func;
        };
      }
      return func;
    }
    function _default(md, _ref) {
      var validate = _ref.validate, marker = _ref.marker, render = _ref.render, type = _ref.type, before = _ref.before, after = _ref.after, _ref$defaultTitle = _ref.defaultTitle, defaultTitle = _ref$defaultTitle === void 0 ? type.toUpperCase() : _ref$defaultTitle, _ref$blockClass = _ref.blockClass, blockClass = _ref$blockClass === void 0 ? "custom-block" : _ref$blockClass;
      if (!type) {
        return;
      }
      if (!render) {
        var renderBefore;
        var renderAfter;
        if (before !== void 0 && after !== void 0) {
          renderBefore = wrapRenderPlaceFunction(before);
          renderAfter = wrapRenderPlaceFunction(after);
        } else {
          renderBefore = function renderBefore2(info) {
            return '<div class="' + blockClass + " " + type + '">' + (info ? '<p class="' + blockClass + '-title">' + info + "</p>" : "") + "\n";
          };
          renderAfter = function renderAfter2() {
            return "</div>\n";
          };
        }
        render = function render2(tokens, index) {
          var token = tokens[index];
          var info = token.info.trim().slice(type.length).trim();
          if (!info && defaultTitle) {
            if (typeof defaultTitle === "function") {
              info = defaultTitle();
            } else {
              info = defaultTitle;
            }
          }
          if (token.nesting === 1) {
            return renderBefore(info);
          }
          return renderAfter(info);
        };
      }
      md.use(_markdownItContainer.default, type, {
        render,
        validate,
        marker
      });
    }
  }
});

// node_modules/@kangc/v-md-editor/lib/plugins/tip/parser.js
var require_parser = __commonJS({
  "node_modules/@kangc/v-md-editor/lib/plugins/tip/parser.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    exports.__esModule = true;
    exports.default = _default;
    var _markdownItContainer = _interopRequireDefault(require_markdown_it_container2());
    function _default(vMdParser) {
      vMdParser.extendMarkdown(function(mdParser) {
        var blockClass = "v-md-plugin-tip";
        var getLangConfig = function getLangConfig2() {
          var lang = vMdParser.lang.config;
          var langConfig = lang.langConfig[lang.lang];
          return langConfig;
        };
        (0, _markdownItContainer.default)(mdParser, {
          type: "tip",
          defaultTitle: function defaultTitle() {
            return getLangConfig().tip.tip.defaultTitle;
          },
          blockClass
        });
        (0, _markdownItContainer.default)(mdParser, {
          type: "warning",
          defaultTitle: function defaultTitle() {
            return getLangConfig().tip.warning.defaultTitle;
          },
          blockClass
        });
        (0, _markdownItContainer.default)(mdParser, {
          type: "danger",
          defaultTitle: function defaultTitle() {
            return getLangConfig().tip.danger.defaultTitle;
          },
          blockClass
        });
        (0, _markdownItContainer.default)(mdParser, {
          type: "details",
          defaultTitle: function defaultTitle() {
            return getLangConfig().tip.details.defaultTitle;
          },
          before: function before(info) {
            return '<details class="' + blockClass + ' details">' + (info ? "<summary>" + info + "</summary>" : "") + "\n";
          },
          after: function after() {
            return "</details>\n";
          }
        });
      });
      vMdParser.lang.add({
        "zh-CN": {
          tip: {
            tip: {
              defaultTitle: "\u63D0\u793A"
            },
            warning: {
              defaultTitle: "\u6CE8\u610F"
            },
            danger: {
              defaultTitle: "\u8B66\u544A"
            },
            details: {
              defaultTitle: "\u8BE6\u7EC6\u4FE1\u606F"
            }
          }
        },
        "en-US": {
          tip: {
            tip: {
              defaultTitle: "TIP"
            },
            warning: {
              defaultTitle: "WARNING"
            },
            danger: {
              defaultTitle: "DANGER"
            },
            details: {
              defaultTitle: "DETAILS"
            }
          }
        }
      });
    }
  }
});

// node_modules/@kangc/v-md-editor/lib/plugins/tip/index.js
var require_tip = __commonJS({
  "node_modules/@kangc/v-md-editor/lib/plugins/tip/index.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    exports.__esModule = true;
    exports.default = createTipPlugin;
    var _parser = _interopRequireDefault(require_parser());
    function createTipPlugin(_temp) {
      var _ref = _temp === void 0 ? {} : _temp, _ref$name = _ref.name, name = _ref$name === void 0 ? "tip" : _ref$name, _ref$icon = _ref.icon, icon = _ref$icon === void 0 ? "v-md-icon-tip" : _ref$icon, text = _ref.text;
      var commandHandler = function commandHandler2(editor, type) {
        if (type === void 0) {
          type = "tip";
        }
        editor.insert(function(selected) {
          var prefix = ":::";
          var suffix = ":::";
          var content = selected || editor.langConfig.tip[type].placeholder;
          return {
            text: prefix + " " + type + "\n  " + content + "\n" + suffix,
            selected: content
          };
        });
      };
      var toolbar = {
        title: function title(editor) {
          return editor.langConfig.tip.toolbar;
        },
        icon,
        text,
        menus: [{
          name: "tip",
          text: function text2(editor) {
            return editor.langConfig.tip.tip.toolbar;
          },
          action: function action(editor) {
            editor.execCommand(name);
          }
        }, {
          name: "warning",
          text: function text2(editor) {
            return editor.langConfig.tip.warning.toolbar;
          },
          action: function action(editor) {
            editor.execCommand(name, "warning");
          }
        }, {
          name: "danger",
          text: function text2(editor) {
            return editor.langConfig.tip.danger.toolbar;
          },
          action: function action(editor) {
            editor.execCommand(name, "danger");
          }
        }, {
          name: "details",
          text: function text2(editor) {
            return editor.langConfig.tip.details.toolbar;
          },
          action: function action(editor) {
            editor.execCommand(name, "details");
          }
        }]
      };
      return {
        install: function install(VMdEditor) {
          if (VMdEditor.name === "v-md-editor") {
            VMdEditor.command(name, commandHandler);
            VMdEditor.toolbar(name, toolbar);
            VMdEditor.lang.add({
              "zh-CN": {
                tip: {
                  toolbar: "\u63D2\u5165\u63D0\u793A",
                  tip: {
                    toolbar: "\u63D0\u793A",
                    placeholder: "\u5728\u6B64\u8F93\u5165\u5185\u5BB9"
                  },
                  warning: {
                    toolbar: "\u6CE8\u610F",
                    placeholder: "\u5728\u6B64\u8F93\u5165\u5185\u5BB9"
                  },
                  danger: {
                    toolbar: "\u8B66\u544A",
                    placeholder: "\u5728\u6B64\u8F93\u5165\u5185\u5BB9"
                  },
                  details: {
                    toolbar: "\u8BE6\u7EC6\u4FE1\u606F",
                    placeholder: "\u5185\u5BB9"
                  }
                }
              },
              "en-US": {
                tip: {
                  toolbar: "Insert tip",
                  tip: {
                    toolbar: "Tip",
                    placeholder: "Insert content"
                  },
                  warning: {
                    toolbar: "Warning",
                    placeholder: "Insert content"
                  },
                  danger: {
                    toolbar: "Danger",
                    placeholder: "Insert content"
                  },
                  details: {
                    toolbar: "Details",
                    placeholder: "Content"
                  }
                }
              }
            });
          }
          VMdEditor.vMdParser.use(_parser.default);
        }
      };
    }
  }
});

// dep:@kangc_v-md-editor_lib_plugins_tip_index
var kangc_v_md_editor_lib_plugins_tip_index_default = require_tip();
export {
  kangc_v_md_editor_lib_plugins_tip_index_default as default
};
//# sourceMappingURL=@kangc_v-md-editor_lib_plugins_tip_index.js.map

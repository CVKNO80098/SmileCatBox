import {
  require_interopRequireDefault
} from "./chunk-6OJXVRDW.js";
import {
  __commonJS
} from "./chunk-A5ICIBVI.js";

// node_modules/markdown-it-emoji/lib/data/light.json
var require_light = __commonJS({
  "node_modules/markdown-it-emoji/lib/data/light.json"(exports, module) {
    module.exports = {
      grinning: "\u{1F600}",
      smiley: "\u{1F603}",
      smile: "\u{1F604}",
      grin: "\u{1F601}",
      laughing: "\u{1F606}",
      satisfied: "\u{1F606}",
      sweat_smile: "\u{1F605}",
      joy: "\u{1F602}",
      blush: "\u{1F60A}",
      innocent: "\u{1F607}",
      wink: "\u{1F609}",
      relieved: "\u{1F60C}",
      heart_eyes: "\u{1F60D}",
      kissing_heart: "\u{1F618}",
      kissing: "\u{1F617}",
      kissing_smiling_eyes: "\u{1F619}",
      kissing_closed_eyes: "\u{1F61A}",
      yum: "\u{1F60B}",
      stuck_out_tongue_winking_eye: "\u{1F61C}",
      stuck_out_tongue_closed_eyes: "\u{1F61D}",
      stuck_out_tongue: "\u{1F61B}",
      sunglasses: "\u{1F60E}",
      smirk: "\u{1F60F}",
      unamused: "\u{1F612}",
      disappointed: "\u{1F61E}",
      pensive: "\u{1F614}",
      worried: "\u{1F61F}",
      confused: "\u{1F615}",
      persevere: "\u{1F623}",
      confounded: "\u{1F616}",
      tired_face: "\u{1F62B}",
      weary: "\u{1F629}",
      angry: "\u{1F620}",
      rage: "\u{1F621}",
      pout: "\u{1F621}",
      no_mouth: "\u{1F636}",
      neutral_face: "\u{1F610}",
      expressionless: "\u{1F611}",
      hushed: "\u{1F62F}",
      frowning: "\u{1F626}",
      anguished: "\u{1F627}",
      open_mouth: "\u{1F62E}",
      astonished: "\u{1F632}",
      dizzy_face: "\u{1F635}",
      flushed: "\u{1F633}",
      scream: "\u{1F631}",
      fearful: "\u{1F628}",
      cold_sweat: "\u{1F630}",
      cry: "\u{1F622}",
      disappointed_relieved: "\u{1F625}",
      sob: "\u{1F62D}",
      sweat: "\u{1F613}",
      sleepy: "\u{1F62A}",
      sleeping: "\u{1F634}",
      mask: "\u{1F637}",
      smiling_imp: "\u{1F608}",
      smiley_cat: "\u{1F63A}",
      smile_cat: "\u{1F638}",
      joy_cat: "\u{1F639}",
      heart_eyes_cat: "\u{1F63B}",
      smirk_cat: "\u{1F63C}",
      kissing_cat: "\u{1F63D}",
      scream_cat: "\u{1F640}",
      crying_cat_face: "\u{1F63F}",
      pouting_cat: "\u{1F63E}",
      fist_raised: "\u270A",
      fist: "\u270A",
      v: "\u270C\uFE0F",
      point_up: "\u261D\uFE0F",
      hand: "\u270B",
      raised_hand: "\u270B",
      cat: "\u{1F431}",
      mouse: "\u{1F42D}",
      cow: "\u{1F42E}",
      monkey_face: "\u{1F435}",
      star: "\u2B50\uFE0F",
      sparkles: "\u2728",
      zap: "\u26A1\uFE0F",
      sunny: "\u2600\uFE0F",
      cloud: "\u2601\uFE0F",
      snowflake: "\u2744\uFE0F",
      umbrella: "\u2614\uFE0F",
      coffee: "\u2615\uFE0F",
      airplane: "\u2708\uFE0F",
      anchor: "\u2693\uFE0F",
      watch: "\u231A\uFE0F",
      phone: "\u260E\uFE0F",
      telephone: "\u260E\uFE0F",
      hourglass: "\u231B\uFE0F",
      email: "\u2709\uFE0F",
      envelope: "\u2709\uFE0F",
      scissors: "\u2702\uFE0F",
      black_nib: "\u2712\uFE0F",
      pencil2: "\u270F\uFE0F",
      heart: "\u2764\uFE0F",
      aries: "\u2648\uFE0F",
      taurus: "\u2649\uFE0F",
      gemini: "\u264A\uFE0F",
      cancer: "\u264B\uFE0F",
      leo: "\u264C\uFE0F",
      virgo: "\u264D\uFE0F",
      libra: "\u264E\uFE0F",
      scorpius: "\u264F\uFE0F",
      sagittarius: "\u2650\uFE0F",
      capricorn: "\u2651\uFE0F",
      aquarius: "\u2652\uFE0F",
      pisces: "\u2653\uFE0F",
      eight_pointed_black_star: "\u2734\uFE0F",
      x: "\u274C",
      hotsprings: "\u2668\uFE0F",
      exclamation: "\u2757\uFE0F",
      heavy_exclamation_mark: "\u2757\uFE0F",
      grey_exclamation: "\u2755",
      question: "\u2753",
      grey_question: "\u2754",
      bangbang: "\u203C\uFE0F",
      interrobang: "\u2049\uFE0F",
      part_alternation_mark: "\u303D\uFE0F",
      warning: "\u26A0\uFE0F",
      recycle: "\u267B\uFE0F",
      white_check_mark: "\u2705",
      sparkle: "\u2747\uFE0F",
      eight_spoked_asterisk: "\u2733\uFE0F",
      negative_squared_cross_mark: "\u274E",
      m: "\u24C2\uFE0F",
      wheelchair: "\u267F\uFE0F",
      information_source: "\u2139\uFE0F",
      heavy_plus_sign: "\u2795",
      heavy_minus_sign: "\u2796",
      heavy_division_sign: "\u2797",
      heavy_multiplication_x: "\u2716\uFE0F",
      tm: "\u2122\uFE0F",
      copyright: "\xA9\uFE0F",
      registered: "\xAE\uFE0F",
      wavy_dash: "\u3030\uFE0F",
      curly_loop: "\u27B0",
      loop: "\u27BF",
      heavy_check_mark: "\u2714\uFE0F",
      ballot_box_with_check: "\u2611\uFE0F",
      white_circle: "\u26AA\uFE0F",
      black_circle: "\u26AB\uFE0F",
      black_small_square: "\u25AA\uFE0F",
      white_small_square: "\u25AB\uFE0F",
      black_medium_small_square: "\u25FE\uFE0F",
      white_medium_small_square: "\u25FD\uFE0F",
      black_medium_square: "\u25FC\uFE0F",
      white_medium_square: "\u25FB\uFE0F",
      black_large_square: "\u2B1B\uFE0F",
      white_large_square: "\u2B1C\uFE0F",
      black_joker: "\u{1F0CF}",
      mahjong: "\u{1F004}\uFE0F"
    };
  }
});

// node_modules/@kangc/v-md-editor/lib/plugins/emoji/toolbar.js
var require_toolbar = __commonJS({
  "node_modules/@kangc/v-md-editor/lib/plugins/emoji/toolbar.js"(exports) {
    "use strict";
    exports.__esModule = true;
    exports.default = createToolbar;
    exports.generatorMenuItems = generatorMenuItems;
    function generatorMenuItems(emojiJson, commandName) {
      return Object.keys(emojiJson).map(function(emojiType) {
        return {
          name: emojiType,
          text: emojiJson[emojiType],
          class: "v-md-emoji-panel-item",
          action: function action(editor) {
            editor.execCommand(commandName, emojiType);
          }
        };
      });
    }
    function createToolbar(_ref) {
      var commandName = _ref.commandName, emojiJson = _ref.emojiJson, text = _ref.text, title = _ref.title, icon = _ref.icon;
      return {
        title,
        icon,
        text,
        menus: {
          mode: "panel",
          items: generatorMenuItems(emojiJson, commandName)
        }
      };
    }
  }
});

// node_modules/@kangc/v-md-editor/lib/plugins/emoji/command.js
var require_command = __commonJS({
  "node_modules/@kangc/v-md-editor/lib/plugins/emoji/command.js"(exports) {
    "use strict";
    exports.__esModule = true;
    exports.default = commandHandler;
    function commandHandler(editor, emojiType) {
      editor.insert(function() {
        var prefix = ":";
        var suffix = ":";
        return {
          text: "" + prefix + emojiType + suffix
        };
      });
    }
  }
});

// node_modules/@kangc/v-md-editor/lib/plugins/emoji/creator.js
var require_creator = __commonJS({
  "node_modules/@kangc/v-md-editor/lib/plugins/emoji/creator.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    exports.__esModule = true;
    exports.default = creator;
    var _toolbar = _interopRequireDefault(require_toolbar());
    var _command = _interopRequireDefault(require_command());
    function creator(_ref) {
      var emojiJson = _ref.emojiJson, parser = _ref.parser;
      return function createEmojiPlugin(_temp) {
        var _ref2 = _temp === void 0 ? {} : _temp, _ref2$name = _ref2.name, name = _ref2$name === void 0 ? "emoji" : _ref2$name, _ref2$icon = _ref2.icon, icon = _ref2$icon === void 0 ? "v-md-icon-emoji" : _ref2$icon, text = _ref2.text, _ref2$title = _ref2.title, title = _ref2$title === void 0 ? function(editor) {
          return editor.langConfig.emoji;
        } : _ref2$title, customEmoji = _ref2.customEmoji;
        var toolbar = (0, _toolbar.default)({
          commandName: name,
          title,
          text,
          icon,
          emojiJson
        });
        return {
          install: function install(VMdEditor) {
            if (VMdEditor.name === "v-md-editor") {
              VMdEditor.command(name, _command.default);
              VMdEditor.toolbar(name, toolbar);
              VMdEditor.lang.add({
                "zh-CN": {
                  emoji: "\u63D2\u5165emoji\u8868\u60C5"
                },
                "en-US": {
                  emoji: "Insert emoji"
                }
              });
            }
            VMdEditor.vMdParser.use(parser, {
              customEmoji
            });
          }
        };
      };
    }
  }
});

// node_modules/markdown-it-emoji/lib/data/shortcuts.js
var require_shortcuts = __commonJS({
  "node_modules/markdown-it-emoji/lib/data/shortcuts.js"(exports, module) {
    "use strict";
    module.exports = {
      angry: [">:(", ">:-("],
      blush: [':")', ':-")'],
      broken_heart: ["</3", "<\\3"],
      confused: [":/", ":-/"],
      cry: [":'(", ":'-(", ":,(", ":,-("],
      frowning: [":(", ":-("],
      heart: ["<3"],
      imp: ["]:(", "]:-("],
      innocent: ["o:)", "O:)", "o:-)", "O:-)", "0:)", "0:-)"],
      joy: [":')", ":'-)", ":,)", ":,-)", ":'D", ":'-D", ":,D", ":,-D"],
      kissing: [":*", ":-*"],
      laughing: ["x-)", "X-)"],
      neutral_face: [":|", ":-|"],
      open_mouth: [":o", ":-o", ":O", ":-O"],
      rage: [":@", ":-@"],
      smile: [":D", ":-D"],
      smiley: [":)", ":-)"],
      smiling_imp: ["]:)", "]:-)"],
      sob: [":,'(", ":,'-(", ";(", ";-("],
      stuck_out_tongue: [":P", ":-P"],
      sunglasses: ["8-)", "B-)"],
      sweat: [",:(", ",:-("],
      sweat_smile: [",:)", ",:-)"],
      unamused: [":s", ":-S", ":z", ":-Z", ":$", ":-$"],
      wink: [";)", ";-)"]
    };
  }
});

// node_modules/markdown-it-emoji/lib/render.js
var require_render = __commonJS({
  "node_modules/markdown-it-emoji/lib/render.js"(exports, module) {
    "use strict";
    module.exports = function emoji_html(tokens, idx) {
      return tokens[idx].content;
    };
  }
});

// node_modules/markdown-it-emoji/lib/replace.js
var require_replace = __commonJS({
  "node_modules/markdown-it-emoji/lib/replace.js"(exports, module) {
    "use strict";
    module.exports = function create_rule(md, emojies, shortcuts, scanRE, replaceRE) {
      var arrayReplaceAt = md.utils.arrayReplaceAt, ucm = md.utils.lib.ucmicro, ZPCc = new RegExp([ucm.Z.source, ucm.P.source, ucm.Cc.source].join("|"));
      function splitTextToken(text, level, Token) {
        var token, last_pos = 0, nodes = [];
        text.replace(replaceRE, function(match, offset, src) {
          var emoji_name;
          if (shortcuts.hasOwnProperty(match)) {
            emoji_name = shortcuts[match];
            if (offset > 0 && !ZPCc.test(src[offset - 1])) {
              return;
            }
            if (offset + match.length < src.length && !ZPCc.test(src[offset + match.length])) {
              return;
            }
          } else {
            emoji_name = match.slice(1, -1);
          }
          if (offset > last_pos) {
            token = new Token("text", "", 0);
            token.content = text.slice(last_pos, offset);
            nodes.push(token);
          }
          token = new Token("emoji", "", 0);
          token.markup = emoji_name;
          token.content = emojies[emoji_name];
          nodes.push(token);
          last_pos = offset + match.length;
        });
        if (last_pos < text.length) {
          token = new Token("text", "", 0);
          token.content = text.slice(last_pos);
          nodes.push(token);
        }
        return nodes;
      }
      return function emoji_replace(state) {
        var i, j, l, tokens, token, blockTokens = state.tokens, autolinkLevel = 0;
        for (j = 0, l = blockTokens.length; j < l; j++) {
          if (blockTokens[j].type !== "inline") {
            continue;
          }
          tokens = blockTokens[j].children;
          for (i = tokens.length - 1; i >= 0; i--) {
            token = tokens[i];
            if (token.type === "link_open" || token.type === "link_close") {
              if (token.info === "auto") {
                autolinkLevel -= token.nesting;
              }
            }
            if (token.type === "text" && autolinkLevel === 0 && scanRE.test(token.content)) {
              blockTokens[j].children = tokens = arrayReplaceAt(tokens, i, splitTextToken(token.content, token.level, state.Token));
            }
          }
        }
      };
    };
  }
});

// node_modules/markdown-it-emoji/lib/normalize_opts.js
var require_normalize_opts = __commonJS({
  "node_modules/markdown-it-emoji/lib/normalize_opts.js"(exports, module) {
    "use strict";
    function quoteRE(str) {
      return str.replace(/[.?*+^$[\]\\(){}|-]/g, "\\$&");
    }
    module.exports = function normalize_opts(options) {
      var emojies = options.defs, shortcuts;
      if (options.enabled.length) {
        emojies = Object.keys(emojies).reduce(function(acc, key) {
          if (options.enabled.indexOf(key) >= 0) {
            acc[key] = emojies[key];
          }
          return acc;
        }, {});
      }
      shortcuts = Object.keys(options.shortcuts).reduce(function(acc, key) {
        if (!emojies[key]) {
          return acc;
        }
        if (Array.isArray(options.shortcuts[key])) {
          options.shortcuts[key].forEach(function(alias) {
            acc[alias] = key;
          });
          return acc;
        }
        acc[options.shortcuts[key]] = key;
        return acc;
      }, {});
      var names = Object.keys(emojies).map(function(name) {
        return ":" + name + ":";
      }).concat(Object.keys(shortcuts)).sort().reverse().map(function(name) {
        return quoteRE(name);
      }).join("|");
      var scanRE = RegExp(names);
      var replaceRE = RegExp(names, "g");
      return {
        defs: emojies,
        shortcuts,
        scanRE,
        replaceRE
      };
    };
  }
});

// node_modules/markdown-it-emoji/light.js
var require_light2 = __commonJS({
  "node_modules/markdown-it-emoji/light.js"(exports, module) {
    "use strict";
    var emojies_defs = require_light();
    var emojies_shortcuts = require_shortcuts();
    var emoji_html = require_render();
    var emoji_replace = require_replace();
    var normalize_opts = require_normalize_opts();
    module.exports = function emoji_plugin(md, options) {
      var defaults = {
        defs: emojies_defs,
        shortcuts: emojies_shortcuts,
        enabled: []
      };
      var opts = normalize_opts(md.utils.assign({}, defaults, options || {}));
      md.renderer.rules.emoji = emoji_html;
      md.core.ruler.push("emoji", emoji_replace(md, opts.defs, opts.shortcuts, opts.scanRE, opts.replaceRE));
    };
  }
});

// node_modules/@kangc/v-md-editor/lib/plugins/emoji/parser-creator.js
var require_parser_creator = __commonJS({
  "node_modules/@kangc/v-md-editor/lib/plugins/emoji/parser-creator.js"(exports) {
    "use strict";
    exports.__esModule = true;
    exports.default = parserCreator;
    function parserCreator(mdEmojiPlugin) {
      return function(vMdParser, options) {
        if (options === void 0) {
          options = {};
        }
        vMdParser.extendMarkdown(function(mdParser) {
          mdParser.use(mdEmojiPlugin);
          if (options.customEmoji) {
            mdParser.renderer.rules.emoji = function(token, idx) {
              return '<span class="v-md-emoji emoji-' + token[idx].markup + '"></span>';
            };
          }
        });
      };
    }
  }
});

// node_modules/@kangc/v-md-editor/lib/plugins/emoji/parser.js
var require_parser = __commonJS({
  "node_modules/@kangc/v-md-editor/lib/plugins/emoji/parser.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    exports.__esModule = true;
    exports.default = void 0;
    var _light = _interopRequireDefault(require_light2());
    var _parserCreator = _interopRequireDefault(require_parser_creator());
    var _default = (0, _parserCreator.default)(_light.default);
    exports.default = _default;
  }
});

// node_modules/@kangc/v-md-editor/lib/plugins/emoji/index.js
var require_emoji = __commonJS({
  "node_modules/@kangc/v-md-editor/lib/plugins/emoji/index.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    exports.__esModule = true;
    exports.default = void 0;
    var _light = _interopRequireDefault(require_light());
    var _creator = _interopRequireDefault(require_creator());
    var _parser = _interopRequireDefault(require_parser());
    var _default = (0, _creator.default)({
      emojiJson: _light.default,
      parser: _parser.default
    });
    exports.default = _default;
  }
});

// dep:@kangc_v-md-editor_lib_plugins_emoji_index
var kangc_v_md_editor_lib_plugins_emoji_index_default = require_emoji();
export {
  kangc_v_md_editor_lib_plugins_emoji_index_default as default
};
//# sourceMappingURL=@kangc_v-md-editor_lib_plugins_emoji_index.js.map
